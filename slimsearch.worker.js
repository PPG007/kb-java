/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Se={},ze=()=>{},Ce=Object.assign,Oe=Array.isArray,D=e=>typeof e=="function",Me=e=>typeof e=="string",Ne=e=>typeof e=="symbol";let X;const L=()=>X||(X=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Ne));function P(e){const t=e&&e.__v_raw;return t?P(t):e}function Te(e){return e?e.__v_isRef===!0:!1}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const v=[];function kt(e){v.push(e)}function It(){v.pop()}let W=!1;function Et(e,...t){if(W)return;W=!0;const n=v.length?v[v.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=Fe();if(o)A(o,n,11,[e+t.map(r=>{var i,c;return(c=(i=r.toString)==null?void 0:i.call(r))!=null?c:JSON.stringify(r)}).join(""),n&&n.proxy,s.map(({vnode:r})=>`at <${re(n,r.type)}>`).join(`
`),s]);else{const r=[`[Vue warn]: ${e}`,...t];s.length&&r.push(`
`,...$e(s)),console.warn(...r)}W=!1}function Fe(){let e=v[v.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}function $e(e){const t=[];return e.forEach((n,o)=>{t.push(...o===0?[]:[`
`],...Ve(n))}),t}function Ve({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=e.component?e.component.parent==null:!1,s=` at <${re(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...Re(e.props),r]:[s+r]}function Re(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(o=>{t.push(...Z(o,e[o]))}),n.length>3&&t.push(" ..."),t}function Z(e,t,n){return Me(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:Te(t)?(t=Z(e,P(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):D(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=P(t),n?t:[`${e}=`,t])}const vt={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function A(e,t,n,o){try{return o?e(...o):e()}catch(s){ee(s,t,n)}}function ee(e,t,n,o=!0){const s=t?t.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||Se;if(t){let c=t.parent;const l=t.proxy,u=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const a=c.ec;if(a){for(let h=0;h<a.length;h++)if(a[h](e,l,u)===!1)return}c=c.parent}if(r){A(r,null,10,[e,l,u]);return}}je(e,n,s,o,i)}function je(e,t,n,o=!0,s=!1){if(s)throw e;console.error(e)}const b=[];let x=-1;const S=[];let k=null,z=0;const De=Promise.resolve();let q=null;const Le=100;function Pe(e){let t=x+1,n=b.length;for(;t<n;){const o=t+n>>>1,s=b[o],r=M(s);r<e||r===e&&s.flags&2?t=o+1:n=o}return t}function We(e){if(!(e.flags&1)){const t=M(e),n=b[b.length-1];!n||!(e.flags&2)&&t>=M(n)?b.push(e):b.splice(Pe(t),0,e),e.flags|=1,te()}}function te(){q||(q=De.then(ne))}function Ae(e){Oe(e)?S.push(...e):k&&e.id===-1?k.splice(z+1,0,e):e.flags&1||(S.push(e),e.flags|=1),te()}function qe(e){if(S.length){const t=[...new Set(S)].sort((n,o)=>M(n)-M(o));if(S.length=0,k){k.push(...t);return}for(k=t,z=0;z<k.length;z++){const n=k[z];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}k=null,z=0}}const M=e=>e.id==null?e.flags&2?-1:1/0:e.id;function ne(e){const t=ze;try{for(x=0;x<b.length;x++){const n=b[x];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),A(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;x<b.length;x++){const n=b[x];n&&(n.flags&=-2)}x=-1,b.length=0,qe(e),q=null,(b.length||S.length)&&ne(e)}}function St(e,t){const n=e.get(t)||0;if(n>Le){const o=t.i,s=o&&se(o.type);return ee(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const H=new Map,F=new Map;function zt(e,t){return F.has(e)?!1:(F.set(e,{initialDef:$(t),instances:new Set}),!0)}function $(e){return Je(e)?e.__vccOpts:e}function Ct(e,t){const n=F.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(o=>{t&&(o.render=t,$(o.type).render=t),o.renderCache=[],o.update()}))}function Ot(e,t){const n=F.get(e);if(!n)return;t=$(t),oe(n.initialDef,t);const o=[...n.instances];for(let s=0;s<o.length;s++){const r=o[s],i=$(r.type);let c=H.get(i);c||(i!==n.initialDef&&oe(i,t),H.set(i,c=new Set)),c.add(r),r.appContext.propsCache.delete(r.type),r.appContext.emitsCache.delete(r.type),r.appContext.optionsCache.delete(r.type),r.ceReload?(c.add(r),r.ceReload(t.styles),c.delete(r)):r.parent?We(()=>{r.parent.update(),c.delete(r)}):r.appContext.reload?r.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),r.root.ce&&r!==r.root&&r.root.ce._removeChildStyle(i)}Ae(()=>{H.clear()})}function oe(e,t){Ce(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function Mt(e){return(t,n)=>{try{return e(t,n)}catch(o){console.error(o),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}L().requestIdleCallback,L().cancelIdleCallback;const Nt={};{const e=L(),t=(n,o)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(o),r=>{s.length>1?s.forEach(i=>i(r)):s[0](r)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const He=/(?:^|[-_])(\w)/g,Ue=e=>e.replace(He,t=>t.toUpperCase()).replace(/[-_]/g,"");function se(e,t=!0){return D(e)?e.displayName||e.name:e.name||t&&e.__name}function re(e,t,n=!1){let o=se(t);if(!o&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(o=s[1])}if(!o&&e&&e.parent){const s=r=>{for(const i in r)if(r[i]===t)return i};o=s(e.components||e.parent.type.components)||s(e.appContext.components)}return o?Ue(o):n?"App":"Anonymous"}function Je(e){return D(e)&&"__vccOpts"in e}[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:Ge}=Object,{fromEntries:Be}=Object,Ye="ENTRIES",ie="KEYS",ce="VALUES",y="";class U{set;_type;_path;constructor(t,n){const o=t._tree,s=Array.from(o.keys());this.set=t,this._type=n,this._path=s.length>0?[{node:o,keys:s}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=C(this._path);if(C(n)===y)return{done:!1,value:this.result()};const o=t.get(C(n));return this._path.push({node:o,keys:Array.from(o.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=C(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>C(t)).filter(t=>t!==y).join("")}value(){return C(this._path).node.get(y)}result(){switch(this._type){case ce:return this.value();case ie:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const C=e=>e[e.length-1],Ke=(e,t,n)=>{const o=new Map;if(typeof t!="string")return o;const s=t.length+1,r=s+n,i=new Uint8Array(r*s).fill(n+1);for(let c=0;c<s;++c)i[c]=c;for(let c=1;c<r;++c)i[c*s]=c;return le(e,t,n,o,i,1,s,""),o},le=(e,t,n,o,s,r,i,c)=>{const l=r*i;e:for(const u of e.keys())if(u===y){const a=s[l-1];a<=n&&o.set(c,[e.get(u),a])}else{let a=r;for(let h=0;h<u.length;++h,++a){const g=u[h],m=i*a,w=m-i;let d=s[m];const f=Math.max(0,a-n-1),p=Math.min(i-1,a+n);for(let _=f;_<p;++_){const I=g!==t[_],j=s[w+_]+ +I,T=s[w+_+1]+1,E=s[m+_]+1,O=s[m+_+1]=Math.min(j,T,E);O<d&&(d=O)}if(d>n)continue e}le(e.get(u),t,n,o,s,a,i,c+u)}};let ue=class N{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,o]=V(this._tree,t.slice(this._prefix.length));if(n===void 0){const[s,r]=B(o);for(const i of s.keys())if(i!==y&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),s.get(i)),new N(c,t)}}return new N(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,Qe(this._tree,t)}entries(){return new U(this,Ye)}forEach(t){for(const[n,o]of this)t(n,o,this)}fuzzyGet(t,n){return Ke(this._tree,t,n)}get(t){const n=J(this._tree,t);return n!==void 0?n.get(y):void 0}has(t){return J(this._tree,t)?.has(y)??!1}keys(){return new U(this,ie)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,G(this._tree,t).set(y,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);return o.set(y,n(o.get(y))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);let s=o.get(y);return s===void 0&&o.set(y,s=n()),s}values(){return new U(this,ce)}[Symbol.iterator](){return this.entries()}static from(t){const n=new N;for(const[o,s]of t)n.set(o,s);return n}static fromObject(t){return N.from(Object.entries(t))}};const V=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const o of e.keys())if(o!==y&&t.startsWith(o))return n.push([e,o]),V(e.get(o),t.slice(o.length),n);return n.push([e,t]),V(void 0,"",n)},J=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==y&&t.startsWith(n))return J(e.get(n),t.slice(n.length))},G=(e,t)=>{const n=t.length;e:for(let o=0;e&&o<n;){for(const r of e.keys())if(r!==y&&t[o]===r[0]){const i=Math.min(n-o,r.length);let c=1;for(;c<i&&t[o+c]===r[c];)++c;const l=e.get(r);if(c===r.length)e=l;else{const u=new Map;u.set(r.slice(c),l),e.set(t.slice(o,o+c),u),e.delete(r),e=u}o+=c;continue e}const s=new Map;return e.set(t.slice(o),s),s}return e},Qe=(e,t)=>{const[n,o]=V(e,t);if(n!==void 0){if(n.delete(y),n.size===0)ae(o);else if(n.size===1){const[s,r]=n.entries().next().value;fe(o,s,r)}}},ae=e=>{if(e.length===0)return;const[t,n]=B(e);if(t.delete(n),t.size===0)ae(e.slice(0,-1));else if(t.size===1){const[o,s]=t.entries().next().value;o!==y&&fe(e.slice(0,-1),o,s)}},fe=(e,t,n)=>{if(e.length===0)return;const[o,s]=B(e);o.set(s+t,n),o.delete(s)},B=e=>e[e.length-1],Xe=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},Ze=/[\n\r\p{Z}\p{P}]+/u,Y="or",de="and",et="and_not",tt=(e,t)=>{e.includes(t)||e.push(t)},he=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},pe=({score:e},{score:t})=>t-e,nt=()=>new Map,R=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},ge=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,me={[Y]:(e,t)=>{for(const n of t.keys()){const o=e.get(n);if(o==null)e.set(n,t.get(n));else{const{score:s,terms:r,match:i}=t.get(n);o.score=o.score+s,o.match=Object.assign(o.match,i),he(o.terms,r)}}return e},[de]:(e,t)=>{const n=new Map;for(const o of t.keys()){const s=e.get(o);if(s==null)continue;const{score:r,terms:i,match:c}=t.get(o);he(s.terms,i),n.set(o,{score:s.score+r,terms:s.terms,match:Object.assign(s.match,c)})}return n},[et]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},ot=(e,t,n,o,s,r)=>{const{k:i,b:c,d:l}=r;return Math.log(1+(n-t+.5)/(t+.5))*(l+e*(i+1)/(e+i*(1-c+c*o/s)))},st=e=>(t,n,o)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,o):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,o):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,o):1}),_e=(e,t,n,o)=>{for(const s of Object.keys(e._fieldIds))if(e._fieldIds[s]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${o}" was not present in field "${s}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},rt=(e,t,n,o)=>{if(!e._index.has(o)){_e(e,n,t,o);return}const s=e._index.fetch(o,nt),r=s.get(t),i=r?.get(n);!r||typeof i>"u"?_e(e,n,t,o):i<=1?r.size<=1?s.delete(t):r.delete(n):r.set(n,i-1),e._index.get(o).size===0&&e._index.delete(o)},it={k:1.2,b:.7,d:.5},ct={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(Ze),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},ye={combineWith:Y,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:it},lt={combineWith:de,prefix:(e,t,n)=>t===n.length-1},ut={batchSize:1e3,batchWait:10},we={minDirtFactor:.1,minDirtCount:20},at={...ut,...we},be=Symbol("*"),ft=(e,t)=>{const n=new Map,o={...e._options.searchOptions,...t};for(const[s,r]of e._documentIds){const i=o.boostDocument?o.boostDocument(r,"",e._storedFields.get(s)):1;n.set(s,{score:i,terms:[],match:{}})}return n},xe=(e,t=Y)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in me))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(me[n])},K=(e,t,n,o,s,r,i,c,l,u=new Map)=>{if(r==null)return u;for(const a of Object.keys(i)){const h=i[a],g=e._fieldIds[a],m=r.get(g);if(m==null)continue;let w=m.size;const d=e._avgFieldLength[g];for(const f of m.keys()){if(!e._documentIds.has(f)){rt(e,g,f,n),w-=1;continue}const p=c?c(e._documentIds.get(f),n,e._storedFields.get(f)):1;if(!p)continue;const _=m.get(f),I=e._fieldLength.get(f)[g],j=ot(_,w,e._documentCount,I,d,l),T=o*s*h*p*j,E=u.get(f);if(E){E.score+=T,tt(E.terms,t);const O=ge(E.match,n);O?O.push(a):E.match[n]=[a]}else u.set(f,{score:T,terms:[t],match:{[n]:[a]}})}}return u},dt=(e,t,n)=>{const o={...e._options.searchOptions,...n},s=(o.fields??e._options.fields).reduce((d,f)=>({...d,[f]:ge(o.boost,f)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:l}=o,{fuzzy:u,prefix:a}={...ye.weights,...i},h=e._index.get(t.term),g=K(e,t.term,t.term,1,t.termBoost,h,s,r,l);let m,w;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,f=d<1?Math.min(c,Math.round(t.term.length*d)):d;f&&(w=e._index.fuzzyGet(t.term,f))}if(m)for(const[d,f]of m){const p=d.length-t.term.length;if(!p)continue;w?.delete(d);const _=a*d.length/(d.length+.3*p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}if(w)for(const d of w.keys()){const[f,p]=w.get(d);if(!p)continue;const _=u*d.length/(d.length+p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}return g},ke=(e,t,n={})=>{if(t===be)return ft(e,n);if(typeof t!="string"){const a={...n,...t,queries:void 0},h=t.queries.map(g=>ke(e,g,a));return xe(h,a.combineWith)}const{tokenize:o,processTerm:s,searchOptions:r}=e._options,i={tokenize:o,processTerm:s,...r,...n},{tokenize:c,processTerm:l}=i,u=c(t).flatMap(a=>l(a)).filter(a=>!!a).map(st(i)).map(a=>dt(e,a,i));return xe(u,i.combineWith)},Ie=(e,t,n={})=>{const{searchOptions:o}=e._options,s={...o,...n},r=ke(e,t,n),i=[];for(const[c,{score:l,terms:u,match:a}]of r){const h=u.length||1,g={id:e._documentIds.get(c),score:l*h,terms:Object.keys(a),queryTerms:u,match:a};Object.assign(g,e._storedFields.get(c)),(s.filter==null||s.filter(g))&&i.push(g)}return t===be&&s.boostDocument==null||i.sort(pe),i},ht=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const o=new Map;for(const{score:r,terms:i}of Ie(e,t,n)){const c=i.join(" "),l=o.get(c);l!=null?(l.score+=r,l.count+=1):o.set(c,{score:r,terms:i,count:1})}const s=[];for(const[r,{score:i,terms:c,count:l}]of o)s.push({suggestion:r,terms:c,score:i/l});return s.sort(pe),s};class pt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?at:t.autoVacuum;this._options={...ct,...t,autoVacuum:n,searchOptions:{...ye,...t.searchOptions},autoSuggestOptions:{...lt,...t.autoSuggestOptions}},this._index=new ue,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=we,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,o]of this._index){const s={};for(const[r,i]of o)s[r]=Object.fromEntries(i);t.push([n,s])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const gt=e=>new pt(e),mt=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:o,dirtCount:s,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=gt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=o,c._dirtCount=s??0,c._index=new ue,c},_t=(e,t)=>{const{index:n,documentIds:o,fieldLength:s,storedFields:r}=e,i=mt(e,t);i._documentIds=R(o),i._fieldLength=R(s),i._storedFields=R(r);for(const[c,l]of i._documentIds)i._idToShortId.set(l,c);for(const[c,l]of n){const u=new Map;for(const a of Object.keys(l))u.set(parseInt(a,10),R(l[a]));i._index.set(c,u)}return i},Q=(e,t)=>{const n=e.toLowerCase(),o=t.toLowerCase(),s=[];let r=0,i=0;const c=(u,a=!1)=>{let h;i===0?h=u.length>20?`… ${u.slice(-20)}`:u:a?h=u.length+i>100?`${u.slice(0,100-i)}… `:u:h=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,h&&s.push(h),i+=h.length,a||(s.push(["mark",t]),i+=t.length,i>=100&&s.push(" …"))};let l=n.indexOf(o,r);if(l===-1)return null;for(;l>=0;){const u=l+o.length;if(c(e.slice(r,l)),r=u,i>100)break;l=n.indexOf(o,r)}return i<100&&c(e.slice(r),!0),s},{entries:yt}=Object,wt=(e,t)=>t.contents.reduce((n,[,o])=>n+o,0)-e.contents.reduce((n,[,o])=>n+o,0),bt=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),Ee=(e,t,n={},o="max")=>{const s={};return Ie(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(r=>{const{id:i,terms:c,score:l}=r,u=i.includes("@"),a=i.includes("#"),[h,g]=i.split(/[#@]/),m=Number(h),w=c.sort((f,p)=>f.length-p.length).filter((f,p)=>c.slice(p+1).every(_=>!_.includes(f))),{contents:d}=s[m]??={title:"",contents:[]};if(u)d.push([{type:"customField",id:m,index:g,display:w.map(f=>r.c.map(p=>Q(p,f))).flat().filter(f=>f!==null)},l]);else{const f=w.map(p=>Q(r.h,p)).filter(p=>p!==null);if(f.length&&d.push([{type:a?"heading":"title",id:m,...a&&{anchor:g},display:f},l]),"t"in r&&r.t)for(const p of r.t){const _=w.map(I=>Q(p,I)).filter(I=>I!==null);_.length&&d.push([{type:"text",id:m,...a&&{anchor:g},display:_},l])}}}),yt(s).sort(([,r],[,i])=>(o?wt:bt)(r,i)).map(([r,{title:i,contents:c}])=>{if(!i){const l=Xe(t,r);l&&(i=l.h)}return{title:i,contents:c.map(([l])=>l)}})},ve=(e,t,n={})=>{const o=ht(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:s})=>s);return e.includes(" ")?o:o.filter(s=>!s.includes(" "))},xt=Be(Ge(JSON.parse("{\"/\":{\"documentCount\":647,\"nextId\":647,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\",\"5\":\"5\",\"6\":\"6\",\"7\":\"7\",\"8\":\"8\",\"9\":\"9\",\"10\":\"10\",\"11\":\"11\",\"12\":\"12\",\"13\":\"13\",\"14\":\"13#开启异步支持\",\"15\":\"13#在方法上开启异步\",\"16\":\"14\",\"17\":\"14#配置文件中的配置名从何而来\",\"18\":\"15\",\"19\":\"15#通过-properties-配置\",\"20\":\"15#通过-properties-给属性赋值\",\"21\":\"15#通过-yaml-配置\",\"22\":\"15#通过-yaml-给属性赋值\",\"23\":\"15#jsr-303-校验\",\"24\":\"15#多环境配置及配置文件位置\",\"25\":\"16\",\"26\":\"16#开启定时任务\",\"27\":\"16#使用定时任务\",\"28\":\"17\",\"29\":\"17#基本配置\",\"30\":\"17#在-spring-配置-druid\",\"31\":\"17#druid-监控配置\",\"32\":\"18\",\"33\":\"18#通过浏览器自动进行国际化\",\"34\":\"18#添加转换语言的按钮\",\"35\":\"18#不使用-ajax\",\"36\":\"18#使用-ajax\",\"37\":\"19\",\"38\":\"19#基本配置\",\"39\":\"19#使用原生-jdbc\",\"40\":\"19#使用-jdbctemplate\",\"41\":\"20\",\"42\":\"20#相关依赖\",\"43\":\"20#基础配置\",\"44\":\"20#简单使用\",\"45\":\"21\",\"46\":\"21#注意事项\",\"47\":\"21#示例\",\"48\":\"22\",\"49\":\"22#相关依赖\",\"50\":\"22#基本配置\",\"51\":\"22#接口及-xml\",\"52\":\"23\",\"53\":\"23#相关依赖\",\"54\":\"23#简单配置\",\"55\":\"23#简单使用-shiro\",\"56\":\"23#thymeleaf-整合-shiro\",\"57\":\"24\",\"58\":\"24#相关依赖\",\"59\":\"24#简单使用\",\"60\":\"24#thymeleaf-整合-springsecurity\",\"61\":\"24#springsecurity详解\",\"62\":\"24#springsecurity-配置文件详解\",\"63\":\"24#登录认证实现类详解\",\"64\":\"24#方法注解详解\",\"65\":\"25\",\"66\":\"25#使用准备\",\"67\":\"25#基本语法\",\"68\":\"26\",\"69\":\"26#静态资源可用位置\",\"70\":\"26#首页和图标定制\",\"71\":\"26#首页\",\"72\":\"26#图标定制\",\"73\":\"27\",\"74\":\"27#引入依赖\",\"75\":\"27#修改-config-server-配置文件\",\"76\":\"27#修改-config-client-3355-的配置文件\",\"77\":\"27#修改-config-client-3366-配置文件\",\"78\":\"27#获取动态刷新的接口\",\"79\":\"27#只刷新某个-client\",\"80\":\"28\",\"81\":\"28#相关依赖\",\"82\":\"28#不使用-eureka-做配置中心\",\"83\":\"28#服务端配置\",\"84\":\"28#查看仓库中配置文件内容的可选路径\",\"85\":\"28#客户端配置\",\"86\":\"28#使用-eureka\",\"87\":\"28#服务端配置-1\",\"88\":\"28#客户端配置-1\",\"89\":\"28#手动刷新\",\"90\":\"28#添加依赖\",\"91\":\"28#修改-bootstrap-yml\",\"92\":\"28#修改要刷新的类\",\"93\":\"28#刷新\",\"94\":\"29\",\"95\":\"29#安装-consul\",\"96\":\"29#启动-consul-并允许外网访问\",\"97\":\"29#provider-注册到-consul\",\"98\":\"29#consumer-注册到-consul\",\"99\":\"30\",\"100\":\"30#eureka-server-配置\",\"101\":\"30#依赖\",\"102\":\"30#配置-eureka-server\",\"103\":\"30#开启-eureka-server\",\"104\":\"30#eureka-client-配置\",\"105\":\"30#相关依赖\",\"106\":\"30#配置-eureka-client\",\"107\":\"30#开启-eurekaclient\",\"108\":\"30#eureka-注册中心集群配置\",\"109\":\"30#配置-eureka-server-集群\",\"110\":\"30#配置-eureka-client-注册到-eureka-集群中\",\"111\":\"30#配置-client-集群\",\"112\":\"31\",\"113\":\"31#相关依赖\",\"114\":\"31#使用-feign\",\"115\":\"31#编写服务接口\",\"116\":\"31#启动类开启-feign-支持\",\"117\":\"31#feign-原理简述\",\"118\":\"31#开启-gzip-压缩\",\"119\":\"31#feign-开启-okhttp\",\"120\":\"32\",\"121\":\"32#相关依赖\",\"122\":\"32#编写配置文件\",\"123\":\"32#配置路由-配置文件配置\",\"124\":\"32#配置路由-编码配置\",\"125\":\"32#可选断言配置\",\"126\":\"32#after\",\"127\":\"32#before\",\"128\":\"32#between\",\"129\":\"32#cookie\",\"130\":\"32#header\",\"131\":\"32#host\",\"132\":\"32#method\",\"133\":\"32#path\",\"134\":\"32#query\",\"135\":\"32#remoteaddr\",\"136\":\"32#weight\",\"137\":\"32#结合注册中心实现负载均衡\",\"138\":\"32#过滤器-filter\",\"139\":\"32#自定义过滤器\",\"140\":\"33\",\"141\":\"33#相关依赖\",\"142\":\"33#使用hystrix\",\"143\":\"33#服务提供者或消费者开启服务降级\",\"144\":\"33#使用-defaultfallback\",\"145\":\"33#基于-feign-的降级\",\"146\":\"33#使用-fallbackfactory-降级\",\"147\":\"33#配置服务熔断\",\"148\":\"33#查看-hystrix-信息及状态\",\"149\":\"33#hystrixdashboard\",\"150\":\"33#依赖\",\"151\":\"33#修改配置文件\",\"152\":\"33#开启-dashboard\",\"153\":\"33#访问-dashboard\",\"154\":\"34\",\"155\":\"34#单机-nacos-部署\",\"156\":\"34#服务提供者注册到-nacos\",\"157\":\"34#服务消费者注册到-nacos\",\"158\":\"34#nacos-配置中心\",\"159\":\"34#nacos-dataid、namespace、group-概念与配置\",\"160\":\"34#nacos-持久化\",\"161\":\"34#nacos-集群部署\",\"162\":\"35\",\"163\":\"35#引入依赖\",\"164\":\"35#重构消费者\",\"165\":\"35#openfeign-超时设置\",\"166\":\"35#openfeign-增强日志\",\"167\":\"35#日志级别\",\"168\":\"35#配置日志-bean\",\"169\":\"35#编写配置文件指定要打印日志的接口\",\"170\":\"36\",\"171\":\"36#相关依赖\",\"172\":\"36#简单使用-ribbon\",\"173\":\"36#自定义策略\",\"174\":\"36#自定义-ribbon-客户端\",\"175\":\"37\",\"176\":\"37#下载-zipkin\",\"177\":\"37#引入依赖\",\"178\":\"37#修改配置文件\",\"179\":\"38\",\"180\":\"38#项目基础结构搭建\",\"181\":\"38#环境搭建-通用模块\",\"182\":\"38#环境搭建-支付模块\",\"183\":\"38#环境搭建-订单模块\",\"184\":\"38#关于-resttemplate\",\"185\":\"39\",\"186\":\"39#依赖\",\"187\":\"39#消息生产者\",\"188\":\"39#消息消费者\",\"189\":\"39#解决重复消费问题\",\"190\":\"39#消息持久化\",\"191\":\"40\",\"192\":\"40#依赖引入\",\"193\":\"40#provider-模块\",\"194\":\"40#编写-springboot-配置文件\",\"195\":\"40#consumer-模块\",\"196\":\"40#编写-springboot-配置文件-1\",\"197\":\"40#注入-resttemplate\",\"198\":\"40#修改-controller-的-url\",\"199\":\"41\",\"200\":\"41#相关依赖\",\"201\":\"41#使用-zuul\",\"202\":\"41#开启-zuul-支持\",\"203\":\"41#配置-zuul\",\"204\":\"41#zuul-与-ribbon-和-hystrix\",\"205\":\"41#zuul-过滤器\",\"206\":\"42\",\"207\":\"42#ajax-基本属性\",\"208\":\"42#ajax-处理前端\",\"209\":\"42#后台处理\",\"210\":\"43\",\"211\":\"43#springmvc-工作流程\",\"212\":\"43#web-xml-配置\",\"213\":\"43#spring-配置\",\"214\":\"43#实现-controller-非注解\",\"215\":\"43#使用注解实现-controller-仅-controller-使用注解\",\"216\":\"43#restful-风格\",\"217\":\"43#重定向与转发\",\"218\":\"43#乱码问题\",\"219\":\"44\",\"220\":\"44#上传\",\"221\":\"44#前端代码\",\"222\":\"44#spring-配置\",\"223\":\"44#后台代码\",\"224\":\"44#下载\",\"225\":\"44#前端代码-1\",\"226\":\"44#后台代码-1\",\"227\":\"44#注意事项\",\"228\":\"45\",\"229\":\"45#创建拦截器\",\"230\":\"45#spring-配置\",\"231\":\"46\",\"232\":\"46#配置-dispatcherservlet-及-filter\",\"233\":\"46#配置springconfig\",\"234\":\"46#自定义拦截器\",\"235\":\"46#ssm-配置总结\",\"236\":\"47\",\"237\":\"47#javascript-中的-json-方法\",\"238\":\"47#jackson\",\"239\":\"47#相关依赖\",\"240\":\"47#spring-配置\",\"241\":\"47#使用-jackson\",\"242\":\"47#fastjson\",\"243\":\"47#相关依赖-1\",\"244\":\"47#spring-配置-1\",\"245\":\"47#使用-fastjson\",\"246\":\"47#org-json-json\",\"247\":\"47#相关依赖-2\",\"248\":\"47#spring-配置-2\",\"249\":\"47#使用-org-json\",\"250\":\"48\",\"251\":\"48#全部依赖\",\"252\":\"48#idea注意事项\",\"253\":\"49\",\"254\":\"49#实现-servlet-的方法\",\"255\":\"50\",\"256\":\"50#配置-web-xml\",\"257\":\"50#配置-spring\",\"258\":\"50#配置数据源、注解支持、整合-mybatis\",\"259\":\"50#配置-service-层\",\"260\":\"50#配置-mvc\",\"261\":\"51\",\"262\":\"52\",\"263\":\"53\",\"264\":\"54\",\"265\":\"55\",\"266\":\"56\",\"267\":\"56#override\",\"268\":\"56#deprecated\",\"269\":\"56#suppresswarings\",\"270\":\"57\",\"271\":\"58\",\"272\":\"59\",\"273\":\"60\",\"274\":\"60#retention\",\"275\":\"60#target\",\"276\":\"60#document\",\"277\":\"60#inherited\",\"278\":\"60#repeatable\",\"279\":\"61\",\"280\":\"62\",\"281\":\"62#配置覆盖优先级\",\"282\":\"62#配置原则\",\"283\":\"62#不同粒度配置的覆盖关系\",\"284\":\"62#配置加载流程\",\"285\":\"63\",\"286\":\"63#dubbo-application\",\"287\":\"63#dubbo-registry\",\"288\":\"63#dubbo-protocol\",\"289\":\"63#dubbo-service\",\"290\":\"63#dubbo-monitor\",\"291\":\"63#dubbo-reference\",\"292\":\"63#dubbo-config-center\",\"293\":\"63#dubbo-provider\",\"294\":\"63#dubbo-consumer\",\"295\":\"63#dubbo-module\",\"296\":\"63#dubbo-method\",\"297\":\"63#dubbo-argument\",\"298\":\"64\",\"299\":\"64#注册中心-zookeeper\",\"300\":\"64#dubbo-可视化面板\",\"301\":\"65\",\"302\":\"65#服务提供者\",\"303\":\"65#服务消费者\",\"304\":\"66\",\"305\":\"66#注册中心宕机\",\"306\":\"66#负载均衡\",\"307\":\"66#random-loadbalance-基于权重的随机负载均衡机制\",\"308\":\"66#roundrobin-loadbalance-基于权重的轮询负载均衡机制\",\"309\":\"66#leastactive-loadbalance-最少活跃数负载均衡机制\",\"310\":\"66#consistenthash-loadbalance-一致性-hash-负载均衡机制\",\"311\":\"66#服务降级\",\"312\":\"66#服务容错\",\"313\":\"66#集群容错\",\"314\":\"67\",\"315\":\"67#定义接口模块\",\"316\":\"67#定义服务提供者\",\"317\":\"67#导入依赖-引入-api-接口模块及-dubbo\",\"318\":\"67#使用-xml-配置-spring-并启动\",\"319\":\"67#注解配置-2-6-3-版本以上\",\"320\":\"67#定义消费者\",\"321\":\"67#导入依赖\",\"322\":\"67#使用-xml-配置-spring-并调用\",\"323\":\"67#使用注解配置\",\"324\":\"68\",\"325\":\"68#导入依赖\",\"326\":\"68#服务提供者\",\"327\":\"68#服务消费者\",\"328\":\"69\",\"329\":\"70\",\"330\":\"70#字节流\",\"331\":\"70#字符流\",\"332\":\"71\",\"333\":\"72\",\"334\":\"73\",\"335\":\"74\",\"336\":\"75\",\"337\":\"76\",\"338\":\"76#使用字符输入流-filereader-访问文件\",\"339\":\"76#使用字符输出流filewriter输出到文件\",\"340\":\"76#使用字节输入输出流复制图片\",\"341\":\"77\",\"342\":\"78\",\"343\":\"79\",\"344\":\"80\",\"345\":\"80#抽象类\",\"346\":\"80#接口\",\"347\":\"81\",\"348\":\"82\",\"349\":\"82#程序计数器\",\"350\":\"82#java-虚拟机栈\",\"351\":\"82#本地方法栈\",\"352\":\"82#java-堆\",\"353\":\"82#方法区\",\"354\":\"82#运行时常量池\",\"355\":\"82#直接内存\",\"356\":\"83\",\"357\":\"84\",\"358\":\"84#基于属性分类\",\"359\":\"84#基于粒度分类\",\"360\":\"84#基于状态分类\",\"361\":\"85\",\"362\":\"86\",\"363\":\"86#三目运算符返回值类型规则\",\"364\":\"87\",\"365\":\"87#引用类型\",\"366\":\"87#强引用\",\"367\":\"87#软引用\",\"368\":\"87#弱引用\",\"369\":\"87#虚引用\",\"370\":\"87#内存泄漏问题\",\"371\":\"87#解决方案\",\"372\":\"88\",\"373\":\"88#acid\",\"374\":\"88#四个隔离级别\",\"375\":\"88#acid-由何保证\",\"376\":\"88#mvcc\",\"377\":\"89\",\"378\":\"90\",\"379\":\"90#简单通信\",\"380\":\"90#发送文件\",\"381\":\"91\",\"382\":\"91#简单通信\",\"383\":\"91#发送文件\",\"384\":\"92\",\"385\":\"93\",\"386\":\"93#简单使用\",\"387\":\"94\",\"388\":\"94#使用原子引用解决-aba-问题\",\"389\":\"94#关于-integercache\",\"390\":\"95\",\"391\":\"95#继承-thread-类\",\"392\":\"95#实现-runnable-接口\",\"393\":\"95#实现-callable-接口\",\"394\":\"96\",\"395\":\"96#阻塞队列的四组api\",\"396\":\"96#synchronousqueue-同步队列\",\"397\":\"97\",\"398\":\"97#什么是-cas\",\"399\":\"97#jdk-中的实例\",\"400\":\"97#应用示例\",\"401\":\"98\",\"402\":\"98#list-不安全\",\"403\":\"98#set-不安全\",\"404\":\"98#map-不安全\",\"405\":\"98#hashmap-的扩容机制和加载因子\",\"406\":\"99\",\"407\":\"99#forkjoinpool\",\"408\":\"99#forkjointask\",\"409\":\"99#使用-forkjoin-进行计算\",\"410\":\"100\",\"411\":\"100#示例\",\"412\":\"100#四大函数式接口\",\"413\":\"100#function\",\"414\":\"100#predicate\",\"415\":\"100#consumer\",\"416\":\"100#supplier\",\"417\":\"100#stream-流式计算\",\"418\":\"101\",\"419\":\"101#什么是-jmm\",\"420\":\"101#内存划分\",\"421\":\"101#八种内存操作\",\"422\":\"101#jmm-对八大内存操作的规则\",\"423\":\"101#jmm-模型特征\",\"424\":\"101#原子性\",\"425\":\"101#可见性\",\"426\":\"101#有序性\",\"427\":\"101#happen-before-先行发生规则\",\"428\":\"101#volatile\",\"429\":\"101#保证可见性\",\"430\":\"101#不保证原子性\",\"431\":\"102\",\"432\":\"102#lock接口\",\"433\":\"102#公平锁和非公平锁\",\"434\":\"102#demo\",\"435\":\"102#lock-和-synchronized-的区别\",\"436\":\"103\",\"437\":\"103#标准情况\",\"438\":\"103#a-方法延迟-4-秒\",\"439\":\"103#增加一个普通方法\",\"440\":\"103#两个对象-两个同步方法\",\"441\":\"103#增加两个静态同步方法-只有一个对象\",\"442\":\"103#两个对象-两个静态同步方法\",\"443\":\"103#一个静态同步方法-一个普通同步方法-一个对象\",\"444\":\"103#一个静态同步方法-一个普通同步方法-两个对象\",\"445\":\"104\",\"446\":\"105\",\"447\":\"105#饿汉式\",\"448\":\"105#懒汉式\",\"449\":\"106\",\"450\":\"106#可重入锁-递归锁\",\"451\":\"106#自旋锁\",\"452\":\"107\",\"453\":\"107#修饰方法-此时锁的是调用方法的对象\",\"454\":\"107#修饰变量\",\"455\":\"107#死锁\",\"456\":\"107#出现死锁的情况\",\"457\":\"107#死锁发现与解决\",\"458\":\"107#生产者消费者问题\",\"459\":\"107#管程法\",\"460\":\"107#synchronized-实现\",\"461\":\"107#使用-pv-操作实现\",\"462\":\"107#信号灯法\",\"463\":\"108\",\"464\":\"108#线程停止-stop\",\"465\":\"108#线程休眠-sleep\",\"466\":\"108#线程礼让-yield\",\"467\":\"108#线程强制执行-join\",\"468\":\"108#观测线程状态\",\"469\":\"108#守护线程\",\"470\":\"108#线程优先级\",\"471\":\"109\",\"472\":\"109#使用-executors-创建\",\"473\":\"109#手动创建线程池\",\"474\":\"109#使用依赖包创建\",\"475\":\"110\",\"476\":\"110#countdownlatch\",\"477\":\"110#cyclicbarrier\",\"478\":\"110#semaphore\",\"479\":\"111\",\"480\":\"111#缓存简介\",\"481\":\"111#mybatis-缓存\",\"482\":\"111#mybatis-缓存机制\",\"483\":\"111#一级缓存\",\"484\":\"111#缓存失效的情况\",\"485\":\"111#二级缓存\",\"486\":\"111#开启二级缓存\",\"487\":\"111#cache-元素的属性\",\"488\":\"111#使用二级缓存的步骤\",\"489\":\"111#二级缓存工作机制\",\"490\":\"111#自定义缓存\",\"491\":\"112\",\"492\":\"112#mybatis-配置文件\",\"493\":\"112#各属性详解\",\"494\":\"112#环境配置及环境变量\",\"495\":\"112#事务管理器\",\"496\":\"112#数据源\",\"497\":\"112#属性\",\"498\":\"112#类型别名\",\"499\":\"112#映射器\",\"500\":\"112#其他\",\"501\":\"113\",\"502\":\"113#select\",\"503\":\"113#update、insert、delete\",\"504\":\"114\",\"505\":\"114#环境配置\",\"506\":\"114#if\",\"507\":\"114#其他标签\",\"508\":\"115\",\"509\":\"116\",\"510\":\"116#jdbc-进行增删改查的步骤\",\"511\":\"116#jdbc-使用预编译的步骤\",\"512\":\"116#jdbc-事务\",\"513\":\"117\",\"514\":\"118\",\"515\":\"118#日志工厂\",\"516\":\"119\",\"517\":\"119#多对一-学生对老师\",\"518\":\"119#一对多-老师对学生\",\"519\":\"120\",\"520\":\"121\",\"521\":\"121#使用-protobuf-编码传输单个类\",\"522\":\"121#使用-protobuf-编码传输多个类\",\"523\":\"122\",\"524\":\"122#服务端\",\"525\":\"122#服务端处理器\",\"526\":\"122#客户端\",\"527\":\"122#客户端处理器\",\"528\":\"123\",\"529\":\"124\",\"530\":\"124#解码器-bytetomessagedecoder\",\"531\":\"124#编码器-messagetobyteencoder\",\"532\":\"124#handler-链与编解码器调用实例\",\"533\":\"124#netty-中其他常用编解码器\",\"534\":\"125\",\"535\":\"125#java-bio\",\"536\":\"125#bio-服务器示例\",\"537\":\"125#java-nio\",\"538\":\"125#利用-nio-实现在线群聊系统\",\"539\":\"125#零拷贝\",\"540\":\"125#bio-实现拷贝-文件大小-35-4mb\",\"541\":\"125#nio-实现拷贝-文件大小-35-4mb\",\"542\":\"125#java-aio\",\"543\":\"126\",\"544\":\"126#bootstrap、serverbootstrap\",\"545\":\"126#future、channelfuture\",\"546\":\"126#channel\",\"547\":\"126#selector\",\"548\":\"126#channelhandler-及其实现类\",\"549\":\"126#pipeline-和-channelpipeline\",\"550\":\"126#channelhandlercontext\",\"551\":\"126#channeloption\",\"552\":\"126#eventloopgroup-及其实现类-nioeventloopgroup\",\"553\":\"126#unpooled-类\",\"554\":\"127\",\"555\":\"127#rpc-流程\",\"556\":\"127#netty-实现-rpc\",\"557\":\"127#设计描述\",\"558\":\"127#具体实现\",\"559\":\"128\",\"560\":\"128#用户程序自定义的普通任务\",\"561\":\"128#用户自定义定时任务\",\"562\":\"128#非当前-reactor-线程调用-channel-的各种方法\",\"563\":\"128#netty-搭建简单-http服务器\",\"564\":\"129\",\"565\":\"129#基本介绍\",\"566\":\"129#tcp-粘包拆包示例\",\"567\":\"129#自定义协议解决-tcp-粘包拆包问题\",\"568\":\"130\",\"569\":\"130#传统阻塞-i-o-服务模型\",\"570\":\"130#reactor模型\",\"571\":\"130#单reactor单线程\",\"572\":\"130#单-reactor-多线程\",\"573\":\"130#主从-reactor-多线程\",\"574\":\"130#netty-工作原理\",\"575\":\"130#netty-示例程序\",\"576\":\"131\",\"577\":\"132\",\"578\":\"132#常用注解\",\"579\":\"132#衍生注解\",\"580\":\"133\",\"581\":\"133#aop-在-spring-中的作用\",\"582\":\"133#使用-spring-实现-aop\",\"583\":\"134\",\"584\":\"134#byname-自动装配\",\"585\":\"134#bytype-自动装配\",\"586\":\"134#注解实现自动装配\",\"587\":\"134#autowired-注解实现自动装配\",\"588\":\"134#resource-注解实现自动装配\",\"589\":\"134#resource-和-autowired-的区别\",\"590\":\"135\",\"591\":\"135#构造器注入\",\"592\":\"135#set-方式注入\",\"593\":\"135#例子\",\"594\":\"135#拓展方式注入\",\"595\":\"136\",\"596\":\"136#最简单的spring配置\",\"597\":\"136#修改第二部分中的代码\",\"598\":\"137\",\"599\":\"137#ioc-基本原理与思想\",\"600\":\"137#ioc-本质\",\"601\":\"138\",\"602\":\"139\",\"603\":\"140\",\"604\":\"140#相关依赖\",\"605\":\"140#整合mybatis\",\"606\":\"140#使用-xml-配置整合\",\"607\":\"140#关于-sqlsessionfactorybean\",\"608\":\"140#关于sqlsession\",\"609\":\"140#使用-java-注解进行配置\",\"610\":\"140#总结\",\"611\":\"141\",\"612\":\"141#静态代理\",\"613\":\"141#角色\",\"614\":\"141#代码过程\",\"615\":\"141#代理模式优点\",\"616\":\"141#静态代理模式缺点\",\"617\":\"141#动态代理\",\"618\":\"141#示例代码-中介租房\",\"619\":\"142\",\"620\":\"143\",\"621\":\"143#spring-core-核心容器\",\"622\":\"143#spring-context-上下文\",\"623\":\"143#spring-aop-面向切面编程\",\"624\":\"143#spring-dao\",\"625\":\"143#spring-orm\",\"626\":\"143#spring-web\",\"627\":\"143#spring-web-mvc\",\"628\":\"144\",\"629\":\"144#声明式事务-aop\",\"630\":\"144#纯java-config配置实现事务\",\"631\":\"144#关于-transactional\",\"632\":\"144#transactional-失效的几种情况\",\"633\":\"144#xml-配置实现事务\",\"634\":\"145\",\"635\":\"146\",\"636\":\"147\",\"637\":\"148\",\"638\":\"149\",\"639\":\"150\",\"640\":\"151\",\"641\":\"152\",\"642\":\"153\",\"643\":\"154\",\"644\":\"155\",\"645\":\"156\",\"646\":\"157\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[1],\"3\":[1],\"4\":[1],\"5\":[1],\"6\":[2],\"7\":[3],\"8\":[2],\"9\":[2],\"10\":[1],\"11\":[1],\"12\":[1,2],\"13\":[1],\"14\":[1,9],\"15\":[1,17],\"16\":[2,6],\"17\":[1,55],\"18\":[2],\"19\":[3,117],\"20\":[3,70],\"21\":[3,17],\"22\":[3,59],\"23\":[3,35],\"24\":[1,59],\"25\":[1],\"26\":[1,4],\"27\":[1,12],\"28\":[1],\"29\":[1,23],\"30\":[4,43],\"31\":[2,116],\"32\":[1],\"33\":[1,82],\"34\":[1],\"35\":[2,55],\"36\":[2,86],\"37\":[2],\"38\":[1,18],\"39\":[2,42],\"40\":[2,25],\"41\":[1],\"42\":[1,12],\"43\":[1,13],\"44\":[1,69],\"45\":[3],\"46\":[1,39],\"47\":[1,36],\"48\":[2],\"49\":[1,26],\"50\":[1,14],\"51\":[2,65],\"52\":[1],\"53\":[1,33],\"54\":[1,115],\"55\":[2,38],\"56\":[3,73],\"57\":[1],\"58\":[1,27],\"59\":[1,88],\"60\":[3,33],\"61\":[1],\"62\":[2,148],\"63\":[1,96],\"64\":[1,36],\"65\":[1],\"66\":[1,68],\"67\":[1,343],\"68\":[3],\"69\":[1,153],\"70\":[1],\"71\":[1,86],\"72\":[1,14],\"73\":[1,8],\"74\":[1,13],\"75\":[4,70],\"76\":[5,54],\"77\":[5,49],\"78\":[1,17],\"79\":[2,15],\"80\":[1],\"81\":[1,20],\"82\":[3],\"83\":[1,24],\"84\":[1,14],\"85\":[1,50],\"86\":[2],\"87\":[1,38],\"88\":[1,30],\"89\":[1],\"90\":[1,12],\"91\":[3,7],\"92\":[1,4],\"93\":[1,13],\"94\":[1],\"95\":[2,16],\"96\":[3,6],\"97\":[3,72],\"98\":[3,48],\"99\":[1,2],\"100\":[3],\"101\":[1,16],\"102\":[3,47],\"103\":[3,15],\"104\":[3],\"105\":[1,14],\"106\":[3,27],\"107\":[2,4],\"108\":[2],\"109\":[4,16],\"110\":[5,7],\"111\":[3,13],\"112\":[1],\"113\":[1,17],\"114\":[2,5],\"115\":[1,28],\"116\":[3,6],\"117\":[2,41],\"118\":[3,33],\"119\":[3,13],\"120\":[1],\"121\":[1,12],\"122\":[1,39],\"123\":[2,26],\"124\":[2,21],\"125\":[1],\"126\":[1,33],\"127\":[1,27],\"128\":[1,27],\"129\":[1,21],\"130\":[1,20],\"131\":[1,18],\"132\":[1,15],\"133\":[1,18],\"134\":[1,20],\"135\":[1,18],\"136\":[1,26],\"137\":[1,38],\"138\":[2,5],\"139\":[1,47],\"140\":[1,30],\"141\":[1,15],\"142\":[1],\"143\":[1,189],\"144\":[2,68],\"145\":[3,37],\"146\":[3,49],\"147\":[1,45],\"148\":[3,8],\"149\":[1],\"150\":[1,14],\"151\":[1,21],\"152\":[2,2],\"153\":[2,10],\"154\":[1,1],\"155\":[3,1],\"156\":[2,1],\"157\":[2,1],\"158\":[2,1],\"159\":[5,1],\"160\":[2,1],\"161\":[2,1],\"162\":[1],\"163\":[1,12],\"164\":[1,73],\"165\":[2,16],\"166\":[2],\"167\":[1,14],\"168\":[2,8],\"169\":[1,12],\"170\":[1],\"171\":[1,13],\"172\":[2,73],\"173\":[1,89],\"174\":[3,42],\"175\":[1,6],\"176\":[2,19],\"177\":[1,17],\"178\":[1,23],\"179\":[1],\"180\":[1,137],\"181\":[2,61],\"182\":[2,177],\"183\":[2,129],\"184\":[2,115],\"185\":[1,6],\"186\":[1,13],\"187\":[1,87],\"188\":[1,80],\"189\":[1,36],\"190\":[1,5],\"191\":[1],\"192\":[1,17],\"193\":[2],\"194\":[3,83],\"195\":[2],\"196\":[3,58],\"197\":[2,8],\"198\":[4,18],\"199\":[1],\"200\":[1,18],\"201\":[2],\"202\":[3,4],\"203\":[2,65],\"204\":[5,105],\"205\":[2,66],\"206\":[1],\"207\":[2,84],\"208\":[2,80],\"209\":[1,8],\"210\":[1],\"211\":[2,3],\"212\":[3,61],\"213\":[2,87],\"214\":[4,36],\"215\":[5,108],\"216\":[2,27],\"217\":[1,54],\"218\":[1,58],\"219\":[1],\"220\":[1],\"221\":[1,29],\"222\":[2,64],\"223\":[1,68],\"224\":[1],\"225\":[1,10],\"226\":[1,64],\"227\":[1,13],\"228\":[1,10],\"229\":[1,57],\"230\":[2,15],\"231\":[4],\"232\":[4,45],\"233\":[1,178],\"234\":[1,40],\"235\":[2,76],\"236\":[3],\"237\":[4,18],\"238\":[1],\"239\":[1,15],\"240\":[2,37],\"241\":[2,128],\"242\":[1],\"243\":[1,12],\"244\":[2,42],\"245\":[2,43],\"246\":[2],\"247\":[1,10],\"248\":[2,25],\"249\":[3,40],\"250\":[1],\"251\":[1,100],\"252\":[1,60],\"253\":[1],\"254\":[3,89],\"255\":[2],\"256\":[3,104],\"257\":[2],\"258\":[4,64],\"259\":[3,31],\"260\":[2,56],\"261\":[1,41],\"262\":[1,24],\"263\":[1,9],\"264\":[1,30],\"265\":[1,64],\"266\":[1],\"267\":[2,6],\"268\":[2,11],\"269\":[2,11],\"270\":[2,49],\"271\":[1,45],\"272\":[1,114],\"273\":[1,15],\"274\":[2,31],\"275\":[2,54],\"276\":[2,5],\"277\":[2,38],\"278\":[2,38],\"279\":[1,102],\"280\":[2],\"281\":[1,33],\"282\":[1,21],\"283\":[1,7],\"284\":[1],\"285\":[2],\"286\":[2,55],\"287\":[2,118],\"288\":[2,139],\"289\":[2,196],\"290\":[2,30],\"291\":[2,161],\"292\":[3,89],\"293\":[2,246],\"294\":[2,119],\"295\":[2,36],\"296\":[2,99],\"297\":[2,33],\"298\":[1],\"299\":[2,23],\"300\":[2,59],\"301\":[1,4],\"302\":[1,71],\"303\":[1,78],\"304\":[2],\"305\":[1,29],\"306\":[1,2],\"307\":[3,7],\"308\":[3,10],\"309\":[3],\"310\":[5,9],\"311\":[1,10],\"312\":[1],\"313\":[1,44],\"314\":[3,16],\"315\":[1,56],\"316\":[1],\"317\":[5,111],\"318\":[5,76],\"319\":[6,78],\"320\":[1],\"321\":[1,1],\"322\":[5,109],\"323\":[1,80],\"324\":[2],\"325\":[1,42],\"326\":[1,69],\"327\":[1,102],\"328\":[2,26],\"329\":[1],\"330\":[1,40],\"331\":[1,41],\"332\":[1,38],\"333\":[1,28],\"334\":[1,87],\"335\":[1,26],\"336\":[1,32],\"337\":[1],\"338\":[3,67],\"339\":[1,24],\"340\":[1,23],\"341\":[1,13],\"342\":[1,23],\"343\":[1,46],\"344\":[1],\"345\":[1,30],\"346\":[1,57],\"347\":[4,17],\"348\":[2],\"349\":[1,5],\"350\":[2,13],\"351\":[1,4],\"352\":[2,10],\"353\":[1,5],\"354\":[1,10],\"355\":[1,8],\"356\":[2,31],\"357\":[2],\"358\":[1,17],\"359\":[1,35],\"360\":[1,9],\"361\":[2,23],\"362\":[1],\"363\":[1,69],\"364\":[2],\"365\":[1],\"366\":[1,11],\"367\":[1,8],\"368\":[1,22],\"369\":[1,11],\"370\":[1,33],\"371\":[1,5],\"372\":[1],\"373\":[1,8],\"374\":[1,18],\"375\":[2,23],\"376\":[1,33],\"377\":[1,34],\"378\":[2],\"379\":[1,64],\"380\":[1,69],\"381\":[2],\"382\":[1,42],\"383\":[1,66],\"384\":[2,48],\"385\":[1,3],\"386\":[1,40],\"387\":[1],\"388\":[3,52],\"389\":[2,42],\"390\":[1],\"391\":[3,41],\"392\":[3,41],\"393\":[3,86],\"394\":[1,11],\"395\":[1,55],\"396\":[2,62],\"397\":[3],\"398\":[2,20],\"399\":[2,29],\"400\":[1,51],\"401\":[1],\"402\":[2,34],\"403\":[2,28],\"404\":[2],\"405\":[2,89],\"406\":[1,7],\"407\":[1,14],\"408\":[1,17],\"409\":[3,92],\"410\":[1,8],\"411\":[1,35],\"412\":[1,5],\"413\":[1,33],\"414\":[1,41],\"415\":[1,30],\"416\":[1,32],\"417\":[2,45],\"418\":[3],\"419\":[2,16],\"420\":[1,34],\"421\":[1,37],\"422\":[2,44],\"423\":[2],\"424\":[1,8],\"425\":[1,25],\"426\":[1,19],\"427\":[4,84],\"428\":[1,10],\"429\":[1,34],\"430\":[1,52],\"431\":[1],\"432\":[1,17],\"433\":[1,8],\"434\":[1,52],\"435\":[4,22],\"436\":[1],\"437\":[1,31],\"438\":[4,22],\"439\":[1,40],\"440\":[2,42],\"441\":[2,42],\"442\":[2,32],\"443\":[3,39],\"444\":[3,39],\"445\":[1,75],\"446\":[1],\"447\":[1,19],\"448\":[1,89],\"449\":[2],\"450\":[3,67],\"451\":[1,58],\"452\":[2],\"453\":[2,53],\"454\":[1,50],\"455\":[1],\"456\":[1,56],\"457\":[1,12],\"458\":[1],\"459\":[1],\"460\":[2,73],\"461\":[3,61],\"462\":[1,86],\"463\":[1],\"464\":[2,50],\"465\":[2,37],\"466\":[2,34],\"467\":[2,43],\"468\":[1,48],\"469\":[1,40],\"470\":[1,59],\"471\":[1],\"472\":[3,61],\"473\":[1,125],\"474\":[1,68],\"475\":[1],\"476\":[1,53],\"477\":[1,48],\"478\":[1,66],\"479\":[1],\"480\":[1,13],\"481\":[2,20],\"482\":[2,28],\"483\":[1,113],\"484\":[1,11],\"485\":[1],\"486\":[1,20],\"487\":[2,67],\"488\":[1,54],\"489\":[1,13],\"490\":[1,9],\"491\":[2],\"492\":[3,27],\"493\":[1],\"494\":[1,5],\"495\":[1,15],\"496\":[1,33],\"497\":[1,37],\"498\":[1,29],\"499\":[1,35],\"500\":[1,1],\"501\":[2],\"502\":[1,31],\"503\":[3,46],\"504\":[2,9],\"505\":[1,46],\"506\":[1,77],\"507\":[1,216],\"508\":[2,214],\"509\":[1],\"510\":[2,63],\"511\":[2,64],\"512\":[2,10],\"513\":[1,53],\"514\":[1],\"515\":[1,134],\"516\":[1],\"517\":[3,95],\"518\":[3,96],\"519\":[2,22],\"520\":[2,26],\"521\":[3,207],\"522\":[3,160],\"523\":[3],\"524\":[1,75],\"525\":[1,80],\"526\":[1,74],\"527\":[1,17],\"528\":[2,84],\"529\":[2,8],\"530\":[2,7],\"531\":[2],\"532\":[2,71],\"533\":[2,54],\"534\":[1,3],\"535\":[2,7],\"536\":[2,121],\"537\":[2,238],\"538\":[3,195],\"539\":[1,114],\"540\":[6,76],\"541\":[6,97],\"542\":[2,14],\"543\":[1],\"544\":[2,34],\"545\":[2,11],\"546\":[1,24],\"547\":[1,23],\"548\":[2,26],\"549\":[3,46],\"550\":[1,15],\"551\":[1,18],\"552\":[3,56],\"553\":[2,7],\"554\":[2],\"555\":[2,7],\"556\":[3],\"557\":[1,12],\"558\":[1,258],\"559\":[2],\"560\":[1,50],\"561\":[1,31],\"562\":[5,7],\"563\":[3,115],\"564\":[1],\"565\":[1,30],\"566\":[2,61],\"567\":[3,94],\"568\":[1],\"569\":[4,10],\"570\":[1,7],\"571\":[1,7],\"572\":[3,34],\"573\":[3,29],\"574\":[2,64],\"575\":[2,132],\"576\":[1,173],\"577\":[1,12],\"578\":[1,39],\"579\":[1,17],\"580\":[1],\"581\":[4,23],\"582\":[4,187],\"583\":[2,15],\"584\":[2,50],\"585\":[2,53],\"586\":[1,36],\"587\":[3,165],\"588\":[3,9],\"589\":[5,19],\"590\":[3],\"591\":[1],\"592\":[2,7],\"593\":[1,157],\"594\":[1,53],\"595\":[1],\"596\":[1,53],\"597\":[1,67],\"598\":[2],\"599\":[2,39],\"600\":[2,16],\"601\":[2,34],\"602\":[4,49],\"603\":[1,1],\"604\":[1,30],\"605\":[1,10],\"606\":[3,96],\"607\":[2,71],\"608\":[1,67],\"609\":[3,70],\"610\":[1,18],\"611\":[1],\"612\":[1],\"613\":[1,10],\"614\":[1,5],\"615\":[1,6],\"616\":[1,4],\"617\":[1,34],\"618\":[3,62],\"619\":[2,58],\"620\":[2,7],\"621\":[3,16],\"622\":[3,12],\"623\":[3,16],\"624\":[2,9],\"625\":[2,19],\"626\":[2,12],\"627\":[3,32],\"628\":[1],\"629\":[2,42],\"630\":[2,116],\"631\":[2,22],\"632\":[3,44],\"633\":[2,118],\"634\":[1,3],\"635\":[1],\"636\":[1],\"637\":[1],\"638\":[1],\"639\":[1],\"640\":[1],\"641\":[1],\"642\":[1],\"643\":[1],\"644\":[1],\"645\":[1],\"646\":[1]},\"averageFieldLength\":[1.701700154559506,42.81057663880922],\"storedFields\":{\"0\":{\"h\":\"Redirect\"},\"1\":{\"h\":\"SpringBoot\"},\"2\":{\"h\":\"SpringCloud技术栈\"},\"3\":{\"h\":\"SpringMVC\"},\"4\":{\"h\":\"注解和反射\"},\"5\":{\"h\":\"Dubbo\"},\"6\":{\"h\":\"Java IO\"},\"7\":{\"h\":\"Java Knowledge Points\"},\"8\":{\"h\":\"Java 网络通信\"},\"9\":{\"h\":\"Java 多线程\"},\"10\":{\"h\":\"Mybatis\"},\"11\":{\"h\":\"Netty\"},\"12\":{\"h\":\"Spring\",\"t\":[\"Spring中文文档地址\",\"Spring英文文档地址\"]},\"13\":{\"h\":\"异步任务\"},\"14\":{\"h\":\"开启异步支持\",\"t\":[\"在要使用异步方法的类上(或主启动类上)添加 @EnableAsync 注解。\",\"提示\",\"@EnableAsync 注解主要是为了扫描范围包下的所有 @Async 注解。\"]},\"15\":{\"h\":\"在方法上开启异步\",\"t\":[\"@Async public void hello(){ try{ Thread.sleep(3000); } catch (Exception e){ e.printStackTrace(); } System.out.println(\\\"Processing\\\"); }\"]},\"16\":{\"h\":\"SpringBoot 自动配置基本原理\",\"t\":[\"依赖均在父项目中，要使用什么依赖，只需使用对应的 starter 启动器。\"]},\"17\":{\"h\":\"配置文件中的配置名从何而来\",\"t\":[\"在 spring-boot-autoconfigure 包下的 \\\\META-INF 文件夹中有一个 spring.factories 文件，文件内容如下：\",\"在 Auto Configure 中的所有类都具有 @EnableConfigurationProperties 注解(或者直接指向了配置文件而没有配置类，或者注解在内部类上)，这个注解的值指向的类就是我们在配置文件中的可选择的属性，如 HttpEncodingAutoConfiguration 自动配置类使用了 ServerProperties.class，在 ServerProperties 中有唯一一个注解 @ConfigurationProperties(prefix = \\\"server\\\", ignoreUnknownFields = true)，此注解就是 SpringBoot 通过配置文件向实体类赋值的注解，prefix 表示前缀，ServerProperties 中有一个 port 属性用于指定端口号，要在配置文件中配置时，可以使用 server.port=xxx 的方式指定它的值。\",\"这些自动配置类都有多个 @ConditionalOnxxx 注解，用于根据注解中的条件是否成立决定是否生效。\",\"总结\",\"配置文件中的属性都有 XxxProperties 类与其对应，且都有 XxxAutoConfiguration 类加载了 Properties 中的属性。\"]},\"18\":{\"h\":\"SpringBoot 配置\"},\"19\":{\"h\":\"通过 properties 配置\",\"t\":[\"SpringBoot 可以通过 application.properties 文件进行配置(配置文件名必须是 application-xxx，例如 application-test.properties, application-dev.properties)。\",\"以下是 start.aliyun.com 提供的模板：\",\"提示\",\"如果同一个项目有多个 properties，可以通过 spring.profiles.active=logger 引用，如果引用的文件和被引用的文件有相同的部分，以被引用的文件为主，其中 logger 就是上面提到的 application-xxx.properties 中的 xxx。\",\"# 应用名称 spring.application.name=demo # 应用服务 WEB 访问端口 server.port=8080 #下面这些内容是为了让MyBatis映射 #指定Mybatis的Mapper文件 mybatis.mapper-locations=classpath:mappers/*xml #指定Mybatis的实体目录 mybatis.type-aliases-package=com.example.demo.mybatis.entity # 数据库驱动： spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # 数据源名称 spring.datasource.name=defaultDataSource # 数据库连接地址 spring.datasource.url=jdbc:mysql://localhost:3306/blue?serverTimezone=UTC # 数据库用户名&密码： spring.datasource.username=*** spring.datasource.password=*** # THYMELEAF (ThymeleafAutoConfiguration) # 开启模板缓存（默认值： true ） spring.thymeleaf.cache=true # 检查模板是否存在，然后再呈现 spring.thymeleaf.check-template=true # 检查模板位置是否正确（默认值 :true ） spring.thymeleaf.check-template-location=true #Content-Type 的值（默认值： text/html ） spring.thymeleaf.content-type=text/html # 开启 MVC Thymeleaf 视图解析（默认值： true ） spring.thymeleaf.enabled=true # 模板编码 spring.thymeleaf.encoding=UTF-8 # 要被排除在解析之外的视图名称列表，⽤逗号分隔 spring.thymeleaf.excluded-view-names= # 要运⽤于模板之上的模板模式。另⻅ StandardTemplate-ModeHandlers( 默认值： HTML5) spring.thymeleaf.mode=HTML5 # 在构建 URL 时添加到视图名称前的前缀（默认值： classpath:/templates/ ） spring.thymeleaf.prefix=classpath:/templates/ # 在构建 URL 时添加到视图名称后的后缀（默认值： .html ） spring.thymeleaf.suffix=.html spring.profiles.active=logger\"]},\"20\":{\"h\":\"通过 properties 给属性赋值\",\"t\":[\"注意\",\"为属性赋值的 properties 最好不使用 application 这个前缀命名，springboot 对 application 前缀的 properties 文件强制使用 ISO 编码。\",\"实体类代码：\",\"通过 @PropertySource 注解的 value 属性指定要使用的 properties 文件，encoding 属性指定编码，使用 utf-8 防止中文乱码。\",\"@Component @Data @NoArgsConstructor @AllArgsConstructor @PropertySource(value = \\\"classpath:my.properties\\\",encoding = \\\"UTF-8\\\") public class Student { @Value(\\\"${student.id}\\\") private int id; @Value(\\\"${student.name}\\\") private String name; // 对list赋值以下两种写法都可以 // @Value(\\\"${student.hobbies}\\\") @Value(\\\"#{'${student.hobbies}'.split(',')}\\\") private List<Object> hobbies; // map的赋值方法 @Value(\\\"#{${student.grade}}\\\") private Map<String,Integer> grade; // 复杂类型的赋值方法 @Value(\\\"#{teacher}\\\") private Teacher teacher; }\",\"properties 文件内容：\",\"teacher.id=9 teacher.name=zzl teacher.sex=w teacher.age=111 student.id=10 student.name=demo student.hobbies=code,music student.grade={\\\"math\\\":60,\\\"eng\\\":11}\"]},\"21\":{\"h\":\"通过 YAML 配置\",\"t\":[\"YAML 语法格式大体如下，具有较强的层次性：\",\"server: port: 9900 spring: datasource: username:\",\"注意\",\"在项目中存在 properties 的情况下，SpringBoot 优先使用 properties 配置文件。\"]},\"22\":{\"h\":\"通过 YAML 给属性赋值\",\"t\":[\"YAML 配置如下：\",\"teacher: id: 1 name: abc sex: 男 age: 20 student: id: 1 name: zzl hobbies: - code - music grade: { math: 59, eng: 59 } teacher: id: ${teacher.id:random.int}#冒号后为默认值 name: ${teacher.name:zzz} sex: ${teacher.sex:女} age: ${teacher.age:99}\",\"实体类只需要加入 @ConfigurationProperties(prefix = \\\"student\\\") 注解指定使用前缀为 student 的 yaml 配置即可。\",\"提示\",\"由于 yaml 默认就是 utf-8，所以不会出现中文乱码。\",\"使用 YAML 进行配置时，要导入依赖,不导入会存在警告：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency>\"]},\"23\":{\"h\":\"JSR-303 校验\",\"t\":[\"依赖：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency>\",\"使用：\",\"在要开启校验的实体类上添加：@Validated 注解。\",\"在要进行限制的属性上添加指定注解。\",\"value 用于指定要限制的值，message 用于替换默认的报错信息：\",\"@Min(value = 1,message = \\\"爪巴\\\") private int id; private String name; private String sex; private int age; }\",\"其余各限制类型如下： \"]},\"24\":{\"h\":\"多环境配置及配置文件位置\",\"t\":[\"配置文件的可选位置：\",\"注意\",\"配置文件命名仍然要为：application-xxx.yml(properties)。\",\"file:./config：\",\"此位置就是在项目根目录下创建一个 config 文件夹(文件夹名字必须为 config )，在 config 文件夹中创建配置文件(config 文件夹与 src 同级)。\",\"file:./：\",\"此位置就是在根目录下直接创建配置文件，配置文件与 src 文件夹同级。\",\"classpath:/config/：\",\"此位置就是在 resources 目录下创建 config 文件夹并在其中创建配置文件。\",\"classpath:/：\",\"此位置就是 resources 目录。\",\"各位置配置文件的优先级顺序\",\"file:./config > file:./ > classpath:/config/ > classpath:/。\",\"多环境的配置:\",\"使用 properties：\",\"创建多个 application-xxx.properties。\",\"在 application.properties(默认主配置文件)中添加：\",\"#application-logger.properties spring.profiles.active=logger\",\"使用 YAML：\",\"yaml 通过 --- 分割不同的环境，所以一个配置文件可以有多个环境，最上面为主环境，主环境可以通过 spring.profiles.active 指定要使用的环境，其他环境通过 spring.config.active.on-profile 为自己起名字。\",\"server: port: 5555 spring: profiles: active: dev --- server: port: 6666 spring: config: activate: on-profile: test --- server: port: 7777 spring: config: activate: on-profile: dev\"]},\"25\":{\"h\":\"定时任务\"},\"26\":{\"h\":\"开启定时任务\",\"t\":[\"在主启动类上添加 @EnableScheduling 注解开启定时任务支持。\"]},\"27\":{\"h\":\"使用定时任务\",\"t\":[\"在要开启定时执行的方法上添加，括号内为 cron 表达式：\",\"@Scheduled(cron = \\\"0 0 8,12,18,22 * * ?\\\")。\"]},\"28\":{\"h\":\"Druid\"},\"29\":{\"h\":\"基本配置\",\"t\":[\"spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306?serverTimezone=UTC username: root password: 123456 type: com.alibaba.druid.pool.DruidDataSource\"]},\"30\":{\"h\":\"在 Spring 配置 Druid\",\"t\":[\"@Configuration public class DruidConfig { // 注册DruidDataSource到IOC，通过yml读取配置 @Bean @ConfigurationProperties(prefix = \\\"spring.datasource.druid\\\") public DruidDataSource druidDataSource(){ return new DruidDataSource(); } // 添加监控的servlet，对应地址为/druid @Bean public ServletRegistrationBean<StatViewServlet> registrationBean(){ ServletRegistrationBean<StatViewServlet> servletRegistrationBean = new ServletRegistrationBean<>(new StatViewServlet(), \\\"/druid/*\\\"); HashMap<String, String> stringStringHashMap = new HashMap<>(); // 设置用户名、密码、禁止访问的ip等信息 stringStringHashMap.put(\\\"loginUsername\\\",\\\"root\\\"); stringStringHashMap.put(\\\"loginPassword\\\",\\\"123456\\\"); stringStringHashMap.put(\\\"ppg\\\",\\\"112.126.61.130\\\"); servletRegistrationBean.setInitParameters(stringStringHashMap); return servletRegistrationBean; } }\"]},\"31\":{\"h\":\"druid 监控配置\",\"t\":[\"注意\",\"通过 yaml 配置时，若 @ConfigurationProperties 中的 prefix 为 spring.datasource 则不需要在 yaml 中添加 druid:*，若为 properties 配置，需要使用 spring.datasource.druid= 进行配置。\",\"druid: #初始化大小 initialSize: 5 #最小值 minIdle: 5 #最大值 maxActive: 20 #最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms maxWait: 60000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接 timeBetweenEvictionRunsMillis: 60000 #配置一个连接在池中最小生存的时间 minEvictableIdleTimeMillis: 300000 validationQuery: SELECT 1 FROM DUAL testWhileIdle: true testOnBorrow: false testOnReturn: false poolPreparedStatements: true # 配置监控统计拦截的filters，去掉后监控界面sql无法统计， #'wall'用于防火墙，SpringBoot中没有log4j，我改成了log4j2 filters: stat,wall,log4j2 #最大PSCache连接 maxPoolPreparedStatementPerConnectionSize: 20 useGlobalDataSourceStat: true # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500 username: root password: 123456 url: jdbc:mysql://localhost:3306?serverTimezone=UTC driver-class-name: com.mysql.cj.jdbc.Driver # # 配置StatFilter # web-stat-filter: # #默认为false，设置为true启动 # enabled: true # url-pattern: \\\"/*\\\" # exclusions: \\\"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\\\" # #配置StatViewServlet # stat-view-servlet: # url-pattern: \\\"/druid/*\\\" # #允许那些ip # allow: 127.0.0.1 # login-username: admin # login-password: 123456 # #禁止那些ip # deny: 192.168.1.102 # #是否可以重置 # reset-enable: true # #启用 # enabled: true\"]},\"32\":{\"h\":\"国际化\"},\"33\":{\"h\":\"通过浏览器自动进行国际化\",\"t\":[\"在 resources 目录下创建 i18n 目录，并在其中创建 properties 文件，文件命名需要符合以下规范：\",\"若名称正确，IDEA会提示出Resource Bundle目录(不是真实存在的)。\",\"IDEA中可以使用可视化进行多文件同步编辑： \",\"使用时通过 thymeleaf 的 #{} 表达式获取这些定义在资源文件中的数据：\",\"<ul class=\\\"nav nav-subnav\\\"> <li><a href=\\\"lyear_ui_buttons.html\\\" th:text=\\\"#{index.button}\\\"></a></li> <li><a href=\\\"lyear_ui_cards.html\\\" th:text=\\\"#{index.card}\\\"></a></li> <li><a href=\\\"lyear_ui_grid.html\\\" th:text=\\\"#{index.grille}\\\">格栅</a></li> <li><a href=\\\"lyear_ui_icons.html\\\" th:text=\\\"#{index.icon}\\\">图标</a></li> <li><a href=\\\"lyear_ui_tables.html\\\" th:text=\\\"#{index.table}\\\">表格</a></li> <li><a href=\\\"lyear_ui_modals.html\\\" th:text=\\\"#{index.modal_box}\\\">模态框</a></li> <li><a href=\\\"lyear_ui_tooltips_popover.html\\\" th:text=\\\"#{index.tips}\\\">提示 / 弹出框</a></li> <li><a href=\\\"lyear_ui_alerts.html\\\" th:text=\\\"#{index.warning}\\\">警告框</a></li> <li><a href=\\\"lyear_ui_pagination.html\\\" th:text=\\\"#{index.paging}\\\">分页</a></li> <li><a href=\\\"lyear_ui_progress.html\\\" th:text=\\\"#{index.progress_bar}\\\">进度条</a></li> <li><a href=\\\"lyear_ui_tabs.html\\\" th:text=\\\"#{index.tab}\\\">标签页</a></li> <li><a href=\\\"lyear_ui_typography.html\\\" th:text=\\\"#{index.typesetting}\\\">排版</a></li> <li><a href=\\\"lyear_ui_step.html\\\" th:text=\\\"#{index.step}\\\">步骤</a></li> <li><a href=\\\"lyear_ui_other.html\\\" th:text=\\\"#{index.others}\\\">其他</a></li> </ul>\",\"以上方式在界面中并没有可以修改语言的按钮或链接，只能通过设置浏览器的语言，通过浏览器发起请求的头部信息决定返回何种语言资源。\"]},\"34\":{\"h\":\"添加转换语言的按钮\"},\"35\":{\"h\":\"不使用 ajax\",\"t\":[\"首先自定义区域解析器，写一个类实现 LocaleResolver 接口即可：\",\"public class MyLocaleResolver implements LocaleResolver { @Override public Locale resolveLocale(HttpServletRequest request) { String language = request.getParameter(\\\"language\\\"); Locale locale = Locale.getDefault(); if (!StringUtils.isEmpty(language)){ String[] s = language.split(\\\"_\\\"); locale=new Locale(s[0],s[1]); } return locale; } @Override public void setLocale(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale) { } }\",\"将自定义类注册到 IOC 容器中：\",\"@Bean public MyLocaleResolver localeResolver(){ return new MyLocaleResolver(); }\",\"前端界面：\",\"<a th:href=\\\"@{/test(language='zh_CN')}\\\">中文</a> <a th:href=\\\"@{/test(language='en_US')}\\\">English</a>\",\"以上代码虽然可以实现语言转换，但是默认语言并不会随着浏览器语言改变而改变。\"]},\"36\":{\"h\":\"使用 ajax\",\"t\":[\"区域解析器我们直接选择 AcceptHeaderLocaleResolver，这个类可以通过 Request Header 确定区域。\",\"首先注册 AcceptHeaderLocaleResolver 到 IOC 容器中：\",\"@Bean public AcceptHeaderLocaleResolver localeResolver(){ return new AcceptHeaderLocaleResolver(); }\",\"前端界面设置两个按钮并添加点击事件，使用 ajax 向后端发起请求，beforeSend 中设置 Request Header 中的 Accept-Language 为 zh_CN 或 en_US。\",\"<!DOCTYPE html> <html lang=\\\"en\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>Title</title> <script th:src=\\\"@{/webjars/jquery/3.5.1/jquery.js}\\\"></script> <script th:inline=\\\"javascript\\\"> function a(data) { $.ajax({ url: /*[[@{/test}]]*/ {}, beforeSend: function (xhr) { xhr.setRequestHeader('Accept-Language', data); }, success: function (data) { $('body').html(data); }, }); } </script> </head> <body> <p th:text=\\\"#{index.others}\\\"></p> <button onclick=\\\"a('zh-CN')\\\">中文</button> <button onclick=\\\"a('en-US')\\\">English</button> </body> </html>\"]},\"37\":{\"h\":\"使用 JDBC\"},\"38\":{\"h\":\"基本配置\",\"t\":[\"spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306?serverTimezone=UTC username: root password: 123456\"]},\"39\":{\"h\":\"使用原生 JDBC\",\"t\":[\"@Autowired DataSource dataSource; @Test void contextLoads() throws SQLException { Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(\\\"select * from springmvc.user\\\"); while (resultSet.next()){ System.out.println(\\\"id==>\\\"+resultSet.getObject(\\\"id\\\")); System.out.println(\\\"name==>\\\" + resultSet.getObject(\\\"name\\\")); System.out.println(\\\"sex==>\\\" + resultSet.getObject(\\\"sex\\\")); } resultSet.close(); statement.close(); connection.close(); }\",\"注意\",\"此 DataSource 是javax.sql.DataSource。\"]},\"40\":{\"h\":\"使用 JdbcTemplate\",\"t\":[\"@Autowired JdbcTemplate jdbcTemplate; @Test void contextLoads() throws SQLException { String sql=\\\"select * from springmvc.user\\\"; List<Map<String, Object>> maps = jdbcTemplate.queryForList(sql); maps.forEach(System.out::println); }\"]},\"41\":{\"h\":\"邮件任务\"},\"42\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-mail</artifactId> </dependency>\"]},\"43\":{\"h\":\"基础配置\",\"t\":[\"#注意：QQ邮箱需要配置ssl，发件邮箱要开启SMTP服务 spring.mail.username=demo@163.com spring.mail.password=YMIRUQKQUVHCVDOB spring.mail.host=smtp.163.com spring.mail.protocol=smtps spring.mail.port=465\"]},\"44\":{\"h\":\"简单使用\",\"t\":[\"@Component public class SendMail { // 静态变量如果直接@Autowired注入会报错， // 因为注入发生在实例化之后， // 静态变量不需要实例化， // 所以静态变量注入的时候容器中没有实例化的Bean可用 // 但是可以通过非静态set方法进行注入 private static MailMapper mailMapper; private static JavaMailSender javaMailSender; @Autowired public void setJavaMailSender(JavaMailSender javaMailSender){ SendMail.javaMailSender=javaMailSender; } @Autowired public void setMailMapper(MailMapper mailMapper) { SendMail.mailMapper = mailMapper; } public static void send() throws MessagingException { List<String> list = mailMapper.queryAllMailAddress(); MimeMessage mimeMessage = javaMailSender.createMimeMessage(); /** true:开启复杂邮件 UTF-8：设置编码 */ MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage,true,\\\"UTF-8\\\"); mimeMessageHelper.setSubject(\\\"每日N石更\\\");//主题 mimeMessageHelper.setText(\\\"全都可以炸完\\\");//正文 mimeMessageHelper.setFrom(\\\"springbootforppg@163.com\\\");//发件人 mimeMessageHelper.addAttachment(\\\"很大.jpg\\\",new File(ImageUrl.getImageUrl()));//添加附件 for (String s : list) { // 设置收信人 mimeMessageHelper.setTo(s); try{ // 发送 javaMailSender.send(mimeMessage); }catch (Exception e){ e.printStackTrace(); } } } }\"]},\"45\":{\"h\":\"拓展 MVC 配置\"},\"46\":{\"h\":\"注意事项\",\"t\":[\"要想扩展 mvc 的配置，只要写一个类实现 WebMvcConfigurer 接口，并重写想要拓展的功能即可(这个接口就是 SpringMVC 使用注解配置时，对应于 mvc 标签的接口)。\",\"此外，这个类要使用 @Configuration 注解，但是不能使用 @EnableWebMvc 注解，原因如下：\",\"WebMvcAutoConfiguration 类上有这样一个注解，说明只有在容器中没有 WebMvcConfigurationSupport 这个类时，WebMvcAutoConfiguration 才会生效。\",\"@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\",\"@EnableWebMvc 注解中有这样一个注解：\",\"@Import({DelegatingWebMvcConfiguration.class})\",\"此注解引用了 DelegatingWebMvcConfiguration 这个类，而这个类继承了 WebMvcConfigurationSupport，所以会使容器中出现了 WebMvcConfigurationSupport 这个类进而导致 WebMVC 自动配置失效：\",\"public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport\"]},\"47\":{\"h\":\"示例\",\"t\":[\"@Configuration public class MyMVC implements WebMvcConfigurer { @Override public void addViewControllers(ViewControllerRegistry registry) { registry.addViewController(\\\"/\\\").setViewName(\\\"index\\\"); registry.addViewController(\\\"/index\\\").setViewName(\\\"index\\\"); registry.addViewController(\\\"/index.html\\\").setViewName(\\\"index\\\"); registry.addRedirectViewController(\\\"/ss\\\",\\\"https://www.baidu.com\\\"); registry.addStatusController(\\\"/bad\\\", HttpStatus.BAD_GATEWAY); } }\",\"上述代码实现了 addViewControllers 方法，在访问 /, /index, /index.html 时均会指向 index 界面，在访问 /ss 时，会被重定向到百度，当访问 /bad 时，会返回一个错误码。\"]},\"48\":{\"h\":\"使用 Mybatis\"},\"49\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency>\"]},\"50\":{\"h\":\"基本配置\",\"t\":[\"mybatis: mapper-locations: classpath:mapper/*.xml configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\"]},\"51\":{\"h\":\"接口及 xml\",\"t\":[\"接口上 @Repository 注解可以不加，但是在 IDEA 中会在自动装配的时候报错，不影响使用。\",\"接口上应该添加 @Mapper 注解或者在主启动类上添加 @MapperScan(basePackages = \\\"com.example.demo.mapper\\\") 开启 mapper 扫描。\",\"@Repository public interface UserMapper { /** * get user list * @return user list */ List<User> queryUserList(); /** * get a user by id * @param id id * @return user */ User queryUserById(int id); }\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.example.demo.mapper.UserMapper\\\"> <select id=\\\"queryUserList\\\" resultType=\\\"com.example.demo.pojo.User\\\"> select * from springmvc.user </select> <select id=\\\"queryUserById\\\" resultType=\\\"com.example.demo.pojo.User\\\"> select * from springmvc.user where id=#{id} </select> </mapper>\"]},\"52\":{\"h\":\"Shiro\"},\"53\":{\"h\":\"相关依赖\",\"t\":[\"<!-- shiro依赖 --> <dependency> <groupId>org.apache.shiro</groupId> <artifactId>shiro-spring-boot-starter</artifactId> <version>1.7.1</version> </dependency> <!-- thymeleaf模板依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- thymeleaf整合shiro依赖 --> <dependency> <groupId>com.github.theborakompanioni</groupId> <artifactId>thymeleaf-extras-shiro</artifactId> <version>2.0.0</version> </dependency>\"]},\"54\":{\"h\":\"简单配置\",\"t\":[\"Shiro三大模块：\",\"Subject：主体，一般指用户。\",\"SecurityManager：安全管理器，管理所有 Subject，可以配合内部安全组件。(类似于 SpringMVC 中的 DispatcherServlet)。\",\"Realms：用于进行权限信息的验证，一般需要自己实现。\",\"配置步骤：\",\"ShiroFilterFactoryBean。\",\"DefaultWebSecurityManager。\",\"创建 realm 对象-自定义。\",\"配置 Realm：\",\"public class UserRealm extends AuthorizingRealm{ @Autowired private UserMapper userMapper; /** * 授权 * @param principalCollection ? * @return null */ @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) { System.out.println(\\\"执行了==>授权doGetAuthorizationInfo\\\"); SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo(); // 添加权限 simpleAuthorizationInfo.addStringPermission(\\\"user:add\\\"); simpleAuthorizationInfo.addStringPermission(\\\"user:update\\\"); return simpleAuthorizationInfo; } /** * 认证 * @param authenticationToken ? * @return null * @throws AuthenticationException 异常 */ @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException { System.out.println(\\\"执行了==>认证doGetAuthenticationInfo\\\"); // 令牌 UsernamePasswordToken token= (UsernamePasswordToken) authenticationToken; List<User> users = userMapper.queryUserByName(token.getUsername()); if (users.isEmpty()){ return null; } return new SimpleAuthenticationInfo(\\\"\\\",users.get(0).getPassword(),\\\"\\\"); } }\",\"配置 ShiroConfig：\",\"@Configuration public class ShiroConfig { // 注册Realm @Bean public UserRealm userRealm(){ return new UserRealm(); } // 注册DefaultWebSecurityManager @Bean public DefaultWebSecurityManager defaultWebSecurityManager(){ DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager(); defaultWebSecurityManager.setRealm(userRealm()); return defaultWebSecurityManager; } // 创建ShiroFilterFactoryBean @Bean public ShiroFilterFactoryBean shiroFilterFactoryBean(){ ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean(); shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager()); // 添加shiro内置过滤器 // anon：无需认证就可访问 // authc：必须认证才能访问 // user：必须拥有记住我功能才能使用 // perms：拥有某个资源的权限才能访问 // role：拥有某个角色权限才能访问 LinkedHashMap<String, String> stringStringLinkedHashMap = new LinkedHashMap<>(); stringStringLinkedHashMap.put(\\\"/add\\\",\\\"perms[user:add]\\\"); stringStringLinkedHashMap.put(\\\"/update\\\",\\\"perms[user:update]\\\"); shiroFilterFactoryBean.setFilterChainDefinitionMap(stringStringLinkedHashMap); shiroFilterFactoryBean.setLoginUrl(\\\"/toLogin\\\"); shiroFilterFactoryBean.setUnauthorizedUrl(\\\"/noauth\\\"); return shiroFilterFactoryBean; } //整合ShiroDialect 整合thymeleaf @Bean public ShiroDialect shiroDialect(){ return new ShiroDialect(); } }\"]},\"55\":{\"h\":\"简单使用 Shiro\",\"t\":[\"@RequestMapping(\\\"/check\\\") public String login(HttpServletRequest request,Model model){ String username = request.getParameter(\\\"username\\\"); String password = request.getParameter(\\\"password\\\"); // 获取当前用户 Subject subject = SecurityUtils.getSubject(); System.out.println(username); System.out.println(password); // 封装用户的登录数据 UsernamePasswordToken token = new UsernamePasswordToken(username, password); try { // 登录 subject.login(token); return \\\"index\\\"; } catch (UnknownAccountException e) { model.addAttribute(\\\"msg\\\",\\\"用户名错误\\\"); return \\\"login\\\"; } catch (IncorrectCredentialsException e){ model.addAttribute(\\\"msg\\\",\\\"密码错误\\\"); return \\\"login\\\"; } }\"]},\"56\":{\"h\":\"thymeleaf 整合 Shiro\",\"t\":[\"命名空间：\",\"<html lang=\\\"en\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\" xmlns:shiro=\\\"http://www.pollix.at/thymeleaf/shiro\\\" ></html>\",\"常见标签：\",\"guest 标签：用户没有身份验证时显示相应信息，即游客访问信息。\",\"<shiro:guest> </shiro:guest>\",\"user 标签：用户已经身份验证/记住我登录后显示相应的信息。\",\"<shiro:user> </shiro:user>\",\"authenticated 标签：用户已经身份验证通过，即 Subject.login 登录成功，不是记住我登录的。\",\"<shiro:authenticated> </shiro:authenticated>\",\"notAuthenticated 标签：用户已经身份验证通过，即没有调用 Subject.login 进行登录，包括记住我自动登录的也属于未进行身份验证。\",\"<shiro:notAuthenticated> </shiro:notAuthenticated>\",\"principal 标签：相当于 ((User)Subject.getPrincipals()).getUsername()。\",\"<shiro: principal/> <shiro:principal property=\\\"username\\\" />\",\"lacksPermission 标签：如果当前 Subject 没有权限将显示 body 体内容。\",\"<shiro:lacksPermission name=\\\"org:create\\\"> </shiro:lacksPermission>\",\"hasRole 标签：如果当前 Subject 有角色将显示 body 体内容。\",\"<shiro:hasRole name=\\\"admin\\\"> </shiro:hasRole>\",\"hasAnyRoles 标签：如果当前 Subject 有任意一个角色（或的关系）将显示 body 体内容。\",\"<shiro:hasAnyRoles name=\\\"admin,user\\\"> </shiro:hasAnyRoles>\",\"lacksRole 标签：如果当前 Subject 没有角色将显示 body 体内容。\",\"<shiro:lacksRole name=\\\"abc\\\"> </shiro:lacksRole>\",\"hasPermission 标签：如果当前 Subject 有权限将显示 body 体内容。\",\"<shiro:hasPermission name=\\\"user:create\\\"> </shiro:hasPermission>\"]},\"57\":{\"h\":\"SpringSecurity\"},\"58\":{\"h\":\"相关依赖\",\"t\":[\"<!-- SpringSecurity依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <!-- thymeleaf模板依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- thymeleaf-SpringSecurity整合依赖 --> <dependency> <groupId>org.thymeleaf.extras</groupId> <artifactId>thymeleaf-extras-springsecurity5</artifactId> <version>3.0.4.RELEASE</version> </dependency>\"]},\"59\":{\"h\":\"简单使用\",\"t\":[\"@Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests().antMatchers(\\\"/\\\").permitAll() .antMatchers(\\\"/vip1/**\\\").hasRole(\\\"vip1\\\") .antMatchers(\\\"/vip2/**\\\").hasRole(\\\"vip2\\\") .antMatchers(\\\"/vip3/**\\\").hasRole(\\\"vip3\\\") .anyRequest().authenticated()//其他接口登录即可 .and().formLogin().loginPage(\\\"/login\\\");//登录界面 http.formLogin().loginProcessingUrl(\\\"/index\\\")//登录验证url .usernameParameter(\\\"username\\\") .passwordParameter(\\\"password\\\") .successForwardUrl(\\\"https://www.baidu.com\\\") .successHandler(new AuthenticationSuccessHandler() { @Override public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException { } }).failureHandler(new AuthenticationFailureHandler() { @Override public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException { } }); http.logout().logoutSuccessUrl(\\\"/index\\\").logoutSuccessHandler(new LogoutSuccessHandler() { @Override public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException { } }); http.csrf().disable();//关闭csrf保护 http.rememberMe();//记住我 } @Override public void configure(WebSecurity web) throws Exception { super.configure(web); web.ignoring().antMatchers(\\\"ignore\\\");//添加不拦截 } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { //添加用户，密码要进行加密 auth.inMemoryAuthentication() .passwordEncoder(new BCryptPasswordEncoder()) .withUser(\\\"ppg\\\").password(new BCryptPasswordEncoder().encode(\\\"123\\\")) .roles(\\\"vip1\\\",\\\"vip3\\\",\\\"vip2\\\") .and() .withUser(\\\"vip1\\\").password(new BCryptPasswordEncoder().encode(\\\"123\\\")) .roles(\\\"vip1\\\"); } }\"]},\"60\":{\"h\":\"thymeleaf 整合 SpringSecurity\",\"t\":[\"常用标签：\",\"<!-- 命名空间 --> <html lang=\\\"en\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\" xmlns:sec=\\\"http://www.thymeleaf.org/extras/spring-security\\\" > 判断用户是否已经登陆认证，引号内的参数必须是 isAuthenticated()。 sec:authorize=\\\"isAuthenticated()\\\" 获得当前用户的用户名，引号内的参数必须是 name。 sec:authentication=\\\"name\\\" 判断当前用户是否拥有指定的权限。引号内的参数为权限的名称。 sec:authorize=“hasRole(‘role’)” 获得当前用户的全部角色，引号内的参数必须是 principal.authorities。 sec:authentication=\\\"principal.authorities\\\" </html>\"]},\"61\":{\"h\":\"SpringSecurity详解\"},\"62\":{\"h\":\"SpringSecurity 配置文件详解\",\"t\":[\"package edu.sdust.album.config; import com.alibaba.druid.pool.DruidDataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.builders.WebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.core.Authentication; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.security.web.authentication.AuthenticationSuccessHandler; import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl; import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.sql.DataSource; import java.io.IOException; /** * @author ppg007 * @date 2021/4/27 16:47 */ @Configuration public class SecurityConfig extends WebSecurityConfigurerAdapter { // 注入一个用于认证的接口的实现类 @Autowired private UserAuthorityImpl userAuthority; // 注入数据源，用于记住我功能的实现 @Autowired private DataSource dataSource; // 创建用于保存登录信息的接口的实现 public PersistentTokenRepository persistentTokenRepository(){ JdbcTokenRepositoryImpl jdbcTokenRepository = new JdbcTokenRepositoryImpl(); jdbcTokenRepository.setDataSource(dataSource); // 自动建表 // jdbcTokenRepository.setCreateTableOnStartup(true); return jdbcTokenRepository; } @Override public void configure(WebSecurity web) throws Exception { super.configure(web); } @Override protected void configure(HttpSecurity http) throws Exception { // 设置自定义403报错界面 http.exceptionHandling().accessDeniedPage(\\\"/403\\\"); http.csrf().disable()//关闭跨站请求保护 .formLogin().loginPage(\\\"/toLogin\\\")//使用自定义的登录界面 .usernameParameter(\\\"account\\\")//指出自定义界面中的用户名 .passwordParameter(\\\"password\\\")//指出自定义界面中的密码 //设置用于登录处理的url，此url不存在于controller中， // 可以理解为起别名，由SpringSecurity实现 .loginProcessingUrl(\\\"/login\\\") // 设置默认成功转发到的路径，注意和successForwardUrl的区别 // 即重定向和转发 .defaultSuccessUrl(\\\"/upload\\\"); // 设置处理登出的url，此url同样不存在于controller中 http.logout().logoutUrl(\\\"/logout\\\") // 设置登出成功的跳转界面 .logoutSuccessUrl(\\\"/\\\"); // 开启记住我功能 http.rememberMe(). // 将用于保存登录接口的实现类实例传入 tokenRepository(persistentTokenRepository()) // 设置有效时间，单位是秒 .tokenValiditySeconds(60) // 使用认证接口类实例 .userDetailsService(userAuthority); // 对部分url做出限制 http.authorizeRequests() .antMatchers(\\\"/upload\\\") // 对权限进行限制 .hasAuthority(\\\"vip\\\") .antMatchers(\\\"/toRegister\\\") // 对角色进行限制 .hasRole(\\\"root\\\"); .antMatchers(\\\"/login\\\") // 全部放开 .permitAll(); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { // 使用注入的认证接口实现类对用户权限、角色进行验证和管理 auth.userDetailsService(userAuthority); } // 向IOC中注入加密bean @Bean public BCryptPasswordEncoder bCryptPasswordEncoder(){ return new BCryptPasswordEncoder(); } }\"]},\"63\":{\"h\":\"登录认证实现类详解\",\"t\":[\"package edu.sdust.album.config; import com.baomidou.mybatisplus.core.conditions.Wrapper; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import edu.sdust.album.mapper.UserMapper; import edu.sdust.album.pojo.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.AuthorityUtils; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.stereotype.Component; import java.util.List; /** * @author ppg007 * @date 2021/4/27 18:34 */ @Component // 实现UserDetailsService接口，并重写loadUserByUsername方法 public class UserAuthorityImpl implements UserDetailsService { @Autowired private UserMapper userMapper; @Autowired private BCryptPasswordEncoder bCryptPasswordEncoder; @Override public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException { QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.eq(\\\"account\\\",s); User user = userMapper.selectOne(userQueryWrapper); if (user==null){ throw new UsernameNotFoundException(\\\"用户名\\\"+s+\\\"不存在\\\"); } // 赋予权限或角色 // 注意：赋予角色时，必须加上ROLE_前缀，而配置类中做出限制时则不需要 List<GrantedAuthority> role = AuthorityUtils.commaSeparatedStringToAuthorityList(\\\"vip,ROLE_admin\\\"); // 返回user对象，密码必须使用加密类进行加密 return new org.springframework.security.core.userdetails.User(user.getAccount(),bCryptPasswordEncoder.encode(user.getPassword()),role); } }\"]},\"64\":{\"h\":\"方法注解详解\",\"t\":[\"要使用共计四种(这里只介绍三种)方法注解，需要在主启动类上添加：\",\"@EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true)\",\"@Secured：\",\"提示\",\"该注解对用户角色进行判断，只有拥有正确角色的用户可以正常访问。\",\"@RequestMapping(\\\"/test\\\") @ResponseBody @Secured({\\\"ROLE_test\\\"}) public String test(){ return \\\"test\\\"; }\",\"@PreAuthorize：\",\"提示\",\"该注解对用户的权限和角色进行判断，可以使用 hasAuthority、hasRole 等方法进行约束。\",\"@RequestMapping(\\\"/authTest\\\") @ResponseBody @PreAuthorize(\\\"hasAuthority('vipp')\\\") public String authTest(){ return \\\"authTest\\\"; }\",\"@PostAuthorize：\",\"提示\",\"该注解先执行方法，再判断用户权限和角色。\",\"@RequestMapping(\\\"/postTest\\\") @ResponseBody @PostAuthorize(\\\"hasAuthority('vipp')\\\") public String postTest(){ System.out.println(\\\"test\\\"); return \\\"test\\\"; }\"]},\"65\":{\"h\":\"Thymeleaf\"},\"66\":{\"h\":\"使用准备\",\"t\":[\"导入依赖：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency>\",\"首先依然根据 spring-boot-autoconfigure\\\\META-INF\\\\spring.factories，找到 thymeleaf 的配置类 org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration，并根据 @EnableConfigurationProperties(ThymeleafProperties.class) 注解找到 ThymeleafProperties\",\"@ConfigurationProperties(prefix = \\\"spring.thymeleaf\\\") public class ThymeleafProperties { private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8; public static final String DEFAULT_PREFIX = \\\"classpath:/templates/\\\"; public static final String DEFAULT_SUFFIX = \\\".html\\\";\",\"由此，我们可以在配置文件中使用 spring.thymeleaf 作出相应配置，且默认路径是 classpath:/templates/，后缀为 .html。\",\"注意\",\"templates 目录下的文件必须通过 controller 访问。\",\"在 html 页面中引入约束：\",\"<html lang=\\\"en\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\"></html>\"]},\"67\":{\"h\":\"基本语法\",\"t\":[\"thymeleaf 中，HTML 标签的所有元素都由 thymeleaf 接管，要使用 thymeleaf 必须通过 th:xxx 的形式指定属性。\",\"${...} 表达式：\",\"Thymeleaf 通过 ${} 来获取 model 中的变量，注意这不是 el 表达式，而是 ognl 表达式，但是语法非常像。\",\"@Controller public class TestController { @RequestMapping(\\\"/test\\\") public String hello(Model model){ Student student=new Student(); student.setSname(\\\"zhai\\\"); student.setSnum(\\\"201716161\\\"); model.addAttribute(\\\"student\\\", student); return \\\"test\\\"; } }\",\"<!DOCTYPE html> <html lang=\\\"en\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>Title</title> </head> <body> <h3 th:text=\\\"${student.sname}\\\"></h3> <h3>[[${student.sname}]]</h3> </body> </html>\",\"#{...} 表达式：\",\"获取资源文件中的数据。\",\"<!DOCTYPE html> <html lang=\\\"en\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>国际化</title> </head> <body> <form method=\\\"post\\\"> <p> <input type=\\\"text\\\" name=\\\"username\\\" th:placeholder=\\\"#{login.username}\\\"> </p> <p> <input type=\\\"password\\\" name=\\\"password\\\" th:placeholder=\\\"#{login.password}\\\"> </p> <input type=\\\"submit\\\" th:value=\\\"#{login.submit}\\\"/></p> </form> </body> </html>\",\"*{...} 表达式：\",\"用于暂存对象。\",\"<h2 th:object=\\\"${user}\\\"> <p>Name: <span th:text=\\\"*{name}\\\">Jack</span>.</p> <p>Age: <span th:text=\\\"*{age}\\\">21</span>.</p> <p>friend: <span th:text=\\\"*{friend.name}\\\">Rose</span>.</p> </h2>\",\"@{...} 表达式：\",\"用于指定 URL。\",\"<link rel=\\\"stylesheet\\\" th:href=\\\"@{/css/bootstrap.min.css}\\\" />\",\"内置对象：\",\"示例：\",\"<title th:text=\\\"${#request.getServerPort()}\\\"></title>\",\"字面值：\",\"字符串字面值：\",\"使用一对单引号引用的内容就是字符串字面值了，如下的 thymeleaf 会被当做字符串。\",\"<p>你正在观看 <span th:text=\\\"'thymeleaf'\\\">template</span> 的字符串常量值.</p>\",\"数字字面值：\",\"<p>今年是 <span th:text=\\\"2018\\\">1900</span>.</p> <p>两年后将会是 <span th:text=\\\"2018 + 2\\\">1902</span>.</p>\",\"布尔字面值：\",\"<div th:if=\\\"true\\\">你填的是true</div>\",\"utext：\",\"@RequestMapping(\\\"/\\\") public String aa(Model model) { String msg = \\\"<h1>啦啦啦</h1>\\\"; model.addAttribute(\\\"msg\\\", msg); return \\\"index\\\"; }\",\"若使用 th:text，msg 将被视作字符串并显示在页面上(含标签)，若使用 utext，msg 将被解析为 html 并只显示解析后的结果。\",\"字符串拼接：\",\"<span th:text=\\\"'欢迎您:' + ${user.name} + '!'\\\"></span> <span th:text=\\\"|欢迎您:${user.name}|\\\"></span>\",\"运算:\",\"注意\",\"${} 内部的是通过 OGNL 表达式引擎解析的，外部的才是通过 Thymeleaf 的引擎解析，因此运算符尽量放在 ${} 外进行。\",\"算术运算:\",\"提示\",\"支持的算术运算符：+， -， *， /， %。\",\"<span th:text=\\\"${user.age}\\\"></span> //21 <span th:text=\\\"${user.age}%2 == 0\\\"></span> //false\",\"比较运算：\",\"提示\",\"支持的比较运算：>, <, >= and <=，但是 >, < 不能直接使用，因为 xml 会解析为标签，要使用别名。\",\"注意\",\"==、 != 不仅可以比较数值，类似于 equals 的功能。\",\"可以使用的别名：gt(>), lt(<), ge(>=), le(<=), not(!)， eq(==), neq/ne(!=)。\",\"条件运算：\",\"三元运算：\",\"<td th:text=\\\"${emp.gender}==0?'女':'男'\\\"></td>\",\"默认值\",\"有的时候，我们取一个值可能为空，这个时候需要做非空判断，可以使用 表达式 ?: 默认值简写：\",\"<span th:text=\\\"${user.name} ?: '二狗'\\\"></span>\",\"当前面的表达式值为null时，就会使用后面的默认值。\",\"注意\",\"?: 之间没有空格。\",\"循环：\",\"<tr th:each=\\\"user : ${users}\\\"> <td th:text=\\\"${user.name}\\\">Onions</td> <td th:text=\\\"${user.age}\\\">2.41</td> </tr>\",\"提示\",\"遍历集合支持的类型：\",\"Iterable，实现了 Iterable 接口的类。\",\"Enumeration，枚举。\",\"Interator，迭代器。\",\"Map，遍历得到的是 Map.Entry。\",\"Array，数组及其它一切符合数组结果的对象。\",\"在迭代的同时，我们也可以获取迭代的状态对象：\",\"<tr th:each=\\\"user,stat : ${users}\\\"> <td th:text=\\\"${user.name}\\\">Onions</td> <td th:text=\\\"${user.age}\\\">2.41</td> </tr>\",\"提示\",\"stat 对象包含以下属性：\",\"index：从 0 开始的角标。\",\"count：元素的个数，从1开始。\",\"size：总元素个数。\",\"current：当前遍历到的元素。\",\"even/odd：返回是否为奇偶，boolean 值。\",\"first/last：返回是否为第一或最后，boolean值。\",\"逻辑判断：\",\"Thymeleaf 中使用 th:if 或者 th:unless ，两者的意思恰好相反。\",\"<span th:if=\\\"${user.age} > 24\\\">老油条</span>\",\"如果表达式的值为 true，则标签会渲染到页面，否则不进行渲染。\",\"认定为true的情况\",\"表达式值为 true。\",\"表达式值为非 0 数值。\",\"表达式值为非 0 字符。\",\"表达式值为字符串，但不是 \\\"false\\\", \\\"no\\\", \\\"off\\\"。\",\"表达式不是布尔、字符串、数字、字符中的任何一种。\",\"其它情况包括 null 都被认定为 false。\",\"分支控制 switch：\",\"这里要使用两个指令：th:switch 和 th:case：\",\"<div th:switch=\\\"${user.role}\\\"> <p th:case=\\\"'admin'\\\">用户是管理员</p> <p th:case=\\\"'manager'\\\">用户是经理</p> <p th:case=\\\"*\\\">用户是别的玩意</p> </div>\",\"需要注意的是，一旦有一个 th:case 成立，其它的则不再判断。与 java 中的 switch 是一样的。\",\"th:case=\\\"*\\\" 表示默认，放最后。\",\"js 模板：\",\"模板引擎不仅可以渲染 html，也可以对 JS 中的进行预处理。而且为了在纯静态环境下可以运行，其 Thymeleaf 代码可以被注释起来：\",\"<script th:inline=\\\"javascript\\\"> const user = /*[[${user}]]*/ {}; const age = /*[[${user.age}]]*/ 20; console.log(user); console.log(age); </script>\",\"在 script 标签中通过 th:inline=\\\"javascript\\\" 来声明这是要特殊处理的 js 脚本。\",\"语法结构：\",\"const user = /*[[Thymeleaf表达式]]*/ '静态环境下的默认值';\",\"因为 Thymeleaf 被注释起来，因此即便是静态环境下， js 代码也不会报错，而是采用表达式后面跟着的默认值。且 User 对象会被直接处理为 json 格式。\"]},\"68\":{\"h\":\"SpringBoot Web 开发\"},\"69\":{\"h\":\"静态资源可用位置\",\"t\":[\"在 WebMvcAutoConfiguration 类中存在 addResourceHandlers 方法：\",\"@Override public void addResourceHandlers(ResourceHandlerRegistry registry) { // 根据if中的条件可知，若自定义了静态资源的路径，默认静态资源配置将会失效，方法将会直接返回， if (!this.resourceProperties.isAddMappings()) { logger.debug(\\\"Default resource handling disabled\\\"); return; } Duration cachePeriod = this.resourceProperties.getCache().getPeriod(); CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl(); // 由第二个if及其中的代码可知，存在这样一个访问静态资源路径即webjars中的所有资源，例如localhost:8080/wabjars/jquery.js, // 且这个访问路径会被映射到classpath:/META-INF/resources/webjars/ // 也就是说在浏览器输入的webjars等价于实际结构中的classpath:/META-INF/resources/webjars/ if (!registry.hasMappingForPattern(\\\"/webjars/**\\\")) { customizeResourceHandlerRegistration(registry.addResourceHandler(\\\"/webjars/**\\\") .addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\") .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl) .setUseLastModified(this.resourceProperties.getCache().isUseLastModified())); } // 以下代码通过读取默认的路径设置获取静态资源路径，这个配置存在于WebMvcProperties中 String staticPathPattern = this.mvcProperties.getStaticPathPattern(); if (!registry.hasMappingForPattern(staticPathPattern)) { customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern) .addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations())) .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl) .setUseLastModified(this.resourceProperties.getCache().isUseLastModified())); } }\",\"isAddMappings() 方法定义在 WebProperties 类中，这个类上有一个 @ConfigurationProperties(\\\"spring.web\\\") 注解，说明这个类可以通过 spring.web 前缀的配置进行设置，在 application.yml 中输入如下内容，所有默认静态资源路径都会失效：\",\"spring: web: resources: add-mappings: false\",\"关于 webjars：\",\"进入 webjars 官网即可获取对应的依赖。\",\"webjars 实现了使用 jar 包依赖引入 web 资源。\",\"以 jQuery 为例，首先在 Maven 中添加依赖：\",\"<dependency> <groupId>org.webjars</groupId> <artifactId>jquery</artifactId> <version>3.5.1</version> </dependency>\",\"根据对源代码的分析，要想访问 jQuery，只需要在浏览器输入 localhost:8080/webjars/jquery/3.5.1/jquery.js。\",\"默认静态资源路径：\",\"WebMvcProperties 的 getStaticPathPattern() 方法返回一个 String 字符串。\",\"private String staticPathPattern = \\\"/**\\\";\",\"if 中的代码中有：\",\"this.resourceProperties.getStaticLocations()\",\"此方法在 WebProperties 中的内部静态类 Resources 中定义，返回一个 String 数组：\",\"private static final String[] CLASSPATH_RESOURCE_LOCATIONS = { \\\"classpath:/META-INF/resources/\\\", \\\"classpath:/resources/\\\", \\\"classpath:/static/\\\", \\\"classpath:/public/\\\" };\",\"说明访问 /** 的资源会被转换为项目中的四个 CLASSPATH_RESOURCE_LOCATION，且优先级为 resources > static > public，例如访问 localhost:8080/test.js 会根据优先级访问 resources、static、public 中的 test.js。\",\"可以通过配置文件的方式改变映射路径 /** 为其他路径，例如：\",\"spring: mvc: static-path-pattern: /hello/**\",\"配置后，访问 /hello 下的资源才会被映射，例如原先访问 localhost:8080/test.js 要更改为 localhost:8080/hello/test.js。\"]},\"70\":{\"h\":\"首页和图标定制\"},\"71\":{\"h\":\"首页\",\"t\":[\"在 WebMvcAutoConfiguration 类中存在 welcomePageHandlerMapping 方法：\",\"@Bean public WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) { WelcomePageHandlerMapping welcomePageHandlerMapping = new WelcomePageHandlerMapping( new TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(), this.mvcProperties.getStaticPathPattern()); welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider)); welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations()); return welcomePageHandlerMapping; }\",\"其中调用了 getWelcomePage：\",\"private Optional<Resource> getWelcomePage() { String[] locations = getResourceLocations(this.resourceProperties.getStaticLocations()); return Arrays.stream(locations).map(this::getIndexHtml).filter(this::isReadable).findFirst(); }\",\"这个方法又调用了 getStaticLocations 方法，返回一个 location 字符串数组：\",\"private static final String[] CLASSPATH_RESOURCE_LOCATIONS = { \\\"classpath:/META-INF/resources/\\\", \\\"classpath:/resources/\\\", \\\"classpath:/static/\\\", \\\"classpath:/public/\\\" }; /** * Locations of static resources. Defaults to classpath:[/META-INF/resources/, * /resources/, /static/, /public/]. */ private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;\",\"可以看到，这个值就是上面提到的四个静态资源路径：\",\"此外，welcomePageHandlerMapping 方法还调用了 WebMvcProperties 的 getStaticPathPattern() 方法，返回值默认就是上面提到的 /**。\",\"getWelcomePage 还调用了 getIndexHtml 方法,并且传入的参数就是上面的四个 location：\",\"private Resource getIndexHtml(String location) { return this.resourceLoader.getResource(location + \\\"index.html\\\"); }\",\":: tip 首页名称必须是 index.html，且必须放在默认静态资源路径下，默认访问路径如：localhost:8080，若修改了 static-path-pattern 为其他路径，则无法访问 index。 :::\"]},\"72\":{\"h\":\"图标定制\",\"t\":[\"最新版本 SpringBoot 中已经移除了图标的设置，若使用老版本，在静态资源文件夹中放置一个 favicon.ico 文件，并修改配置文件,关闭默认图标：\",\"spring: mvc: favicon: enabled: false\"]},\"73\":{\"h\":\"BUS消息总线\",\"t\":[\"Spring Cloud BUS 支持 RabbitMQ 和 Kafka。\"]},\"74\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-bus-amqp</artifactId> </dependency>\"]},\"75\":{\"h\":\"修改 Config Server 配置文件\",\"t\":[\"spring: profiles: active: prod cloud: config: server: git: uri: https://gitee.com/pidehen2/spring-cloud-config-learn.git # username: 1658272229@qq.com # skip-ssl-validation: true # password: 06050704zxl basedir: D://config search-paths: - SpringCloudConfigLearn label: master application: name: config-server rabbitmq: # 配置RabbitMQ消息队列 host: 192.168.3.14 port: 5672 username: rabbitmq password: ${spring.rabbitmq.username} eureka: client: service-url: defaultZone: http://192.168.3.14:7001/eureka/,http://192.168.3.55:7002/eureka/ instance: instance-id: config-server prefer-ip-address: true ip-address: 192.168.3.55 non-secure-port: 3344 management: endpoints: web: exposure: include: '*' # 暴露出供动态刷新的接口 --- server: port: 3344 spring: config: activate: on-profile: prod --- server: port: 8848 spring: config: activate: on-profile: dev\"]},\"76\":{\"h\":\"修改 Config Client 3355 的配置文件\",\"t\":[\"bootstrap.yml:\",\"server: port: 3355 eureka: client: service-url: defaultZone: http://192.168.3.14:7001/eureka/,http://192.168.3.55:7002/eureka/ instance: prefer-ip-address: true ip-address: 127.0.0.1 non-secure-port: 3355 management: endpoints: web: exposure: include: '*' spring: application: name: config-client rabbitmq: # 配置RabbitMQ host: 192.168.3.14 port: 5672 username: rabbitmq password: ${spring.rabbitmq.username} cloud: config: # 设置Git的相关信息 label: master profile: prod discovery: enabled: true service-id: config-server name: config # 如果不是名字为application需要指定\"]},\"77\":{\"h\":\"修改 Config Client 3366 配置文件\",\"t\":[\"server: port: 3366 eureka: client: service-url: defaultZone: http://192.168.3.14:7001/eureka/,http://192.168.3.55:7002/eureka/ instance: prefer-ip-address: true ip-address: 127.0.0.1 non-secure-port: 3366 management: endpoints: web: exposure: include: '*' spring: application: name: config-client rabbitmq: host: 192.168.3.14 port: 5672 username: rabbitmq password: ${spring.rabbitmq.username} cloud: config: label: master profile: dev discovery: enabled: true service-id: config-server name: config\"]},\"78\":{\"h\":\"获取动态刷新的接口\",\"t\":[\"访问 http://192.168.3.55:3344/actuator/，找到刷新的 url。\",\"默认情况下，http://192.168.3.55:3344/actuator/busrefresh/ 就是动态刷新的接口，使用 POST 方式访问即可。\"]},\"79\":{\"h\":\"只刷新某个 Client\",\"t\":[\"访问 http://192.168.3.55:3344/actuator/busrefresh/config-client:3366\",\"在全体通知接口后加上服务名:端口号即可。\"]},\"80\":{\"h\":\"Config\"},\"81\":{\"h\":\"相关依赖\",\"t\":[\"<!-- 服务端 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-config-server</artifactId> </dependency> <!-- 客户端 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-config</artifactId> </dependency> <!-- 2020版本SpringCloud读取bootstrap.yml --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-bootstrap</artifactId> </dependency>\"]},\"82\":{\"h\":\"不使用 Eureka 做配置中心\"},\"83\":{\"h\":\"服务端配置\",\"t\":[\"server: port: 8848 spring: cloud: config: server: git: password: 06050704zxl uri: https://gitee.com/pidehen2/spring-cloud-config-learn.git username: 1658272229@qq.com application: name: config-server\",\"在主启动类上添加 @EnableConfigServer 注解开启服务。\"]},\"84\":{\"h\":\"查看仓库中配置文件内容的可选路径\",\"t\":[\"application 是 yaml 中定义的 spring.application.name 的值，profile 是 yaml 中定义的 spring.config.active.on-profile，label 为分支名。\"]},\"85\":{\"h\":\"客户端配置\",\"t\":[\"application.yml (用户级配置，优先级低于 bootstrap.yml)：\",\"spring: application: name: config-client\",\"bootstrap.yml (系统级配置，优先级高于 application.yml 低于 git 仓库)：\",\"spring: cloud: config: uri: http://localhost:8848 #Config服务地址 label: master #分支 name: application #git仓库中文件名 profile: dev #选择环境 server: port: 90 # 端口号，若git中没有配置端口号，这里才会生效\",\"编写 Controller 测试：\",\"@RestController @RefreshScope public class TestController { @Value(\\\"${teacher.name}\\\") private String name; @RequestMapping(\\\"/test\\\") public String test(){ return name; } }\"]},\"86\":{\"h\":\"使用 Eureka\"},\"87\":{\"h\":\"服务端配置\",\"t\":[\"server: port: 8848 spring: cloud: config: server: git: password: 06050704zxl uri: https://gitee.com/pidehen2/spring-cloud-config-learn.git username: 1658272229@qq.com application: name: config-server eureka: client: service-url: defaultZone: http://localhost:7001/eureka/,http://localhost2:7002/eureka/ instance: instance-id: config-server prefer-ip-address: true info: app.name: config-server\"]},\"88\":{\"h\":\"客户端配置\",\"t\":[\"bootstrap.yml：\",\"spring: cloud: config: label: master discovery: enabled: true service-id: config-server application: name: application eureka: client: service-url: defaultZone: http://localhost:7001/eureka/,http://localhost2:7002/eureka/ instance: instance-id: config-client prefer-ip-address: true info: app.name: config-client\"]},\"89\":{\"h\":\"手动刷新\"},\"90\":{\"h\":\"添加依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency>\"]},\"91\":{\"h\":\"修改 bootstrap.yml\",\"t\":[\"management: endpoints: web: exposure: include: '*' # 类似Hystrix，将刷新接口暴露\"]},\"92\":{\"h\":\"修改要刷新的类\",\"t\":[\"在需要刷新的类上使用 @RefreshScope 注解。\"]},\"93\":{\"h\":\"刷新\",\"t\":[\"修改 Git 中的配置文件后，向 [IP]:[port]/actuator/refresh 发送 POST 请求，即可实现手动刷新。\"]},\"94\":{\"h\":\"Consul\"},\"95\":{\"h\":\"安装 Consul\",\"t\":[\"sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo sudo yum -y install consul\"]},\"96\":{\"h\":\"启动 consul 并允许外网访问\",\"t\":[\"consul agent -dev -client 0.0.0.0 -ui\"]},\"97\":{\"h\":\"Provider 注册到 Consul\",\"t\":[\"添加依赖，将 Eureka 依赖替换：\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-consul-discovery</artifactId> </dependency>\",\"主启动类添加注解 @EnableDiscoveryClient。\",\"编写 SpringBoot 配置文件：\",\"server: port: 8003 spring: application: name: payment-service datasource: url: jdbc:mysql://192.168.3.14:3306?serverTimezone=UTC username: root password: 123456zch@ZCH driver-class-name: com.mysql.cj.jdbc.Driver type: com.alibaba.druid.pool.DruidDataSource cloud: consul: host: 192.168.3.14 # consul的IP port: 8500 # consul的端口 discovery: hostname: 192.168.3.55 # 本服务的部署IP service-name: payment-service # 本服务的名字 mybatis-plus: global-config: db-config: table-prefix: spring_cloud.\"]},\"98\":{\"h\":\"Consumer 注册到 Consul\",\"t\":[\"依赖与 Provider 相同。\",\"主启动类添加注解 @EnableDiscoveryClient。\",\"编写 SpringBoot 配置文件：\",\"server: port: 80 spring: application: name: order-service-zk-80 datasource: url: jdbc:mysql://192.168.3.14:3306?serverTimezone=UTC username: root password: 123456zch@ZCH driver-class-name: com.mysql.cj.jdbc.Driver type: com.alibaba.druid.pool.DruidDataSource cloud: consul: host: 192.168.3.14 port: 8500 discovery: hostname: 192.168.3.14 service-name: order-service-consul-80\"]},\"99\":{\"h\":\"Eureka\",\"t\":[\"Eureka详细配置。\"]},\"100\":{\"h\":\"Eureka Server 配置\"},\"101\":{\"h\":\"依赖\",\"t\":[\"<dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId> </dependency> </dependencies>\"]},\"102\":{\"h\":\"配置 Eureka Server\",\"t\":[\"server: port: 7001 eureka: instance: hostname: MailServer-RegisterCenter #服务注册中心实例的主机名 ip-address: 1.15.147.218 #该实例的IP地址 prefer-ip-address: true #该实例，相较于hostname是否优先使用IP non-secure-port: 7001 #http通信端口，https为secure-port client: register-with-eureka: false #实例是否在eureka服务器上注册自己的信息以供其他服务发现，默认为true fetch-registry: false #此客户端是否获取eureka服务器注册表上的注册信息，默认为true，false表示这是Eureka服务器 service-url: #与Eureka注册服务中心的通信zone和url地址 defaultZone: http://1.15.147.218:7001/eureka/ server: #服务端开启自我保护模式。 #无论什么情况，服务端都会保持一定数量的服务。 #避免client与server的网络问题，而出现大量的服务被清除 enable-self-preservation: false\"]},\"103\":{\"h\":\"开启 Eureka Server\",\"t\":[\"在主启动类上添加 @EnableEurekaServer 注解：\",\"@SpringBootApplication @EnableEurekaServer public class EurekaStart { public static void main(String[] args) { SpringApplication.run(EurekaStart.class,args); } }\"]},\"104\":{\"h\":\"Eureka Client 配置\"},\"105\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> </dependency>\"]},\"106\":{\"h\":\"配置 Eureka Client\",\"t\":[\"eureka: client: service-url: defaultZone: http://1.15.147.218:7001/eureka/ instance: instance-id: CRUD-Provider ip-address: 1.15.147.218 prefer-ip-address: true non-secure-port: 8001 info: app.name: CRUD服务提供者\"]},\"107\":{\"h\":\"开启 EurekaClient\",\"t\":[\"在主启动类上添加 @EnableEurekaClient 注解。\"]},\"108\":{\"h\":\"Eureka 注册中心集群配置\"},\"109\":{\"h\":\"配置 Eureka Server 集群\",\"t\":[\"假设有三个 Eureka 注册中心 192.168.1.2，192.168.1.3，192.168.1.4，只要在每一个的配置文件的 service-url 属性中添加另外两个的注册地址，以逗号分隔，互相注册。\"]},\"110\":{\"h\":\"配置 Eureka Client 注册到 Eureka 集群中\",\"t\":[\"在配置文件中的 service-url 属性中添加所有的注册中心 url 即可，同样以逗号分隔。\"]},\"111\":{\"h\":\"配置 Client 集群\",\"t\":[\"多个微服务保证 spring.application.name 和 eureka.instance.appname 分别对应相同即可，并注册到 Eureka 中。\"]},\"112\":{\"h\":\"Feign\"},\"113\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-feign</artifactId> <version>1.4.7.RELEASE</version> </dependency>\"]},\"114\":{\"h\":\"使用 Feign\",\"t\":[\"提示\",\"一定要将服务注入 Spring 中。\"]},\"115\":{\"h\":\"编写服务接口\",\"t\":[\"@Component @FeignClient(value = \\\"SPRINGCLOUD-PROVIDER-DEPT\\\") public interface DeptService { @RequestMapping(\\\"/dept/queryAll\\\") @ResponseBody List<Dept> queryAllDept(); @PostMapping(\\\"/dept/add\\\") @ResponseBody int addDept(String dName); @RequestMapping(\\\"/dept/queryById\\\") @ResponseBody Dept queryDeptById(Long id); }\"]},\"116\":{\"h\":\"启动类开启 Feign 支持\",\"t\":[\"//确保被Spring扫描到即可 @EnableFeignClients(basePackages = \\\"api\\\")\"]},\"117\":{\"h\":\"Feign 原理简述\",\"t\":[\"启动时，程序会进行包扫描，扫描所有包下所有 @FeignClient 注解的类，并将这些类注入到 Spring 的 IOC 容器中。当定义的 Feign 中的接口被调用时，通过 JDK 的动态代理来生成 RequestTemplate。\",\"RequestTemplate 中包含请求的所有信息，如请求参数，请求 URL 等。\",\"RequestTemplate 生成 Request，然后将 Request 交给 client 处理，这个 client 默认是 JDK 的 HTTPUrlConnection，也可以是 OKhttp、Apache的HTTPClient 等。\",\"最后 client 封装成 LoadBaLanceClient，结合 ribbon 负载均衡地发起调用。\"]},\"118\":{\"h\":\"开启 GZIP 压缩\",\"t\":[\"feign: compression: request: #请求 enabled: true #开启 mime-types: text/xml,application/xml,application/json #开启支持压缩的MIME TYPE min-request-size: 2048 #配置压缩数据大小的下限 response: #响应 enabled: true #开启响应GZIP压缩\",\"由于开启 GZIP 压缩之后，Feign 之间的调用数据通过二进制协议进行传输，返回值需要修改为 ResponseEntity<byte[]> 才可以正常显示，否则会导致服务之间的调用乱码。\"]},\"119\":{\"h\":\"Feign 开启 OkHttp\",\"t\":[\"feign: client: config: default: connectTimeout: 5000 readTimeout: 5000 loggerLevel: basic okhttp: enabled: true hystrix: enabled: true\"]},\"120\":{\"h\":\"Gateway\"},\"121\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-gateway</artifactId> </dependency>\"]},\"122\":{\"h\":\"编写配置文件\",\"t\":[\"server: port: 9527 spring: application: name: gateway eureka: client: register-with-eureka: true service-url: defaultZone: http://192.168.3.14:7001/eureka/,http://192.168.3.55:7002/eureka/ fetch-registry: true instance: ip-address: 127.0.0.1 # 192.168.3.55 prefer-ip-address: true non-secure-port: 8001 appname: gateway instance-id: gateway-9527 info: app.name: gateway-9527\"]},\"123\":{\"h\":\"配置路由-配置文件配置\",\"t\":[\"修改配置文件：\",\"spring: application: name: gateway cloud: gateway: discovery: locator: enabled: true routes: - id: payment_routh # 一个唯一id，最好与服务名一致 uri: http://localhost:8001 # 路由目的地 predicates: # 断言，都为真才能路由 - Path=/payment/** # 只有这个请求路径才路由\"]},\"124\":{\"h\":\"配置路由-编码配置\",\"t\":[\"@Bean public RouteLocator routes(RouteLocatorBuilder builder){ RouteLocatorBuilder.Builder routes = builder.routes(); return routes.route(\\\"payment_routh\\\", predicateSpec -> predicateSpec.path(\\\"/payment/**\\\").uri(\\\"http://localhost:8001\\\")).build(); }\"]},\"125\":{\"h\":\"可选断言配置\"},\"126\":{\"h\":\"After\",\"t\":[\"限制只有某个时间之后的请求才能通过：\",\"spring: cloud: gateway: routes: - id: after_route uri: https://example.org predicates: - After=2017-01-20T17:42:47.789-07:00[America/Denver]\",\"对应的是 Java8 中的 ZonedDateTime 类：\",\"System.out.println(ZonedDateTime.now());\"]},\"127\":{\"h\":\"Before\",\"t\":[\"与 After 相对应，只有某个时间之前的请求才能通过：\",\"spring: cloud: gateway: routes: - id: before_route uri: https://example.org predicates: - Before=2017-01-20T17:42:47.789-07:00[America/Denver]\"]},\"128\":{\"h\":\"Between\",\"t\":[\"两个时间之间发生的请求才能通过，用逗号分隔：\",\"spring: cloud: gateway: routes: - id: between_route uri: https://example.org predicates: - Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]\"]},\"129\":{\"h\":\"Cookie\",\"t\":[\"通过两个参数：名字和值的正则表达式进行匹配，如果 cookie 中携带了指定名字的键且值符合这个正则表达式才能通过：\",\"spring: cloud: gateway: routes: - id: cookie_route uri: https://example.org predicates: - Cookie=chocolate, ch.p # 第一个参数是name，逗号后面是正则表达式\"]},\"130\":{\"h\":\"Header\",\"t\":[\"与 Cookie 类似，只有请求头中存在对应字段且字段值满足正则表达式才通过：\",\"spring: cloud: gateway: routes: - id: header_route uri: https://example.org predicates: - Header=X-Request-Id, \\\\d+\"]},\"131\":{\"h\":\"Host\",\"t\":[\"接受一个参数作为主机列表，如果请求头中含有 host 属性且值符合定义的主机列表则通过：\",\"spring: cloud: gateway: routes: - id: host_route uri: https://example.org predicates: - Host=**.somehost.org,**.anotherhost.org\"]},\"132\":{\"h\":\"Method\",\"t\":[\"限制请求方式：\",\"spring: cloud: gateway: routes: - id: method_route uri: https://example.org predicates: - Method=GET,POST\"]},\"133\":{\"h\":\"Path\",\"t\":[\"请求路径符合限制才通过：\",\"spring: cloud: gateway: routes: - id: path_route uri: https://example.org predicates: - Path=/red/{segment},/blue/{segment}\"]},\"134\":{\"h\":\"Query\",\"t\":[\"接收两个参数，一个是 query 参数名，一个是正则表达式，满足要求才通过：\",\"spring: cloud: gateway: routes: - id: query_route uri: https://example.org predicates: - Query=red, gree.\"]},\"135\":{\"h\":\"RemoteAddr\",\"t\":[\"匹配请求的远程地址，在一个子网下才通过：\",\"spring: cloud: gateway: routes: - id: remoteaddr_route uri: https://example.org predicates: - RemoteAddr=192.168.1.1/24\"]},\"136\":{\"h\":\"Weight\",\"t\":[\"接收两个参数，第一个参数是一个字符串，代表分组，第二个参数是比例：\",\"spring: cloud: gateway: routes: - id: weight_high uri: https://weighthigh.org predicates: - Weight=group1, 8 - id: weight_low uri: https://weightlow.org predicates: - Weight=group1, 2\",\"80% 的请求进入 https://weighthigh.org，20% 进入 https://weightlow.org。\"]},\"137\":{\"h\":\"结合注册中心实现负载均衡\",\"t\":[\"配置文件：\",\"spring: application: name: gateway cloud: gateway: discovery: locator: enabled: true routes: - id: payment_routh uri: lb://payment-service predicates: - Path=/payment/** - Method=POST,GET\",\"Java Config：\",\"@Bean public RouteLocator routes(RouteLocatorBuilder builder){ RouteLocatorBuilder.Builder routes = builder.routes(); return routes.route(\\\"payment_routh\\\", predicateSpec -> { predicateSpec.path(\\\"/payment/**\\\"); predicateSpec.alwaysTrue(); return predicateSpec.uri(\\\"lb://payment-service\\\"); }).build(); }\"]},\"138\":{\"h\":\"过滤器 Filter\",\"t\":[\"自带过滤器参见：Spring Cloud Gateway。\"]},\"139\":{\"h\":\"自定义过滤器\",\"t\":[\"创建一个类，实现 GlobalFilter, Ordered 这两个接口，然后注入到 Spring 中：\",\"@Component public class MyFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { System.out.println(\\\"进入自定义过滤器\\\"); ServerHttpRequest request = exchange.getRequest(); String name = request.getQueryParams().getFirst(\\\"name\\\"); if (name == null) { System.out.println(\\\"用户名为null\\\"); exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE); return exchange.getResponse().setComplete(); } return chain.filter(exchange); } @Override public int getOrder() { return 0; } }\"]},\"140\":{\"h\":\"Hystrix\",\"t\":[\"由于 hystrix 已经进入维护状态，hystrix 被移出了 Spring Cloud Netflix，而 Hystrix 作为 CircuitBreaker 服务降级、熔断目前的唯一实现，所以 @EnableCircuitBreaker 过时了，但是在 feign 的 fallback 配置中，由原来的 feign.hystrix.enabled=true 变成了 feign.circuitbreaker=true，相当于 OpenFeign 也去除了与 Hystrix 的关系。\"]},\"141\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-hystrix</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId> </dependency>\"]},\"142\":{\"h\":\"使用Hystrix\"},\"143\":{\"h\":\"服务提供者或消费者开启服务降级\",\"t\":[\"在需要服务降级的方法上使用 @HystrixCommand 注解并进行配置：\",\"@HystrixCommand(fallbackMethod = \\\"getPaymentsOk\\\",commandProperties = { @HystrixProperty(name = \\\"execution.isolation.thread.timeoutInMilliseconds\\\",value = \\\"1500\\\") }) public List<Payment> getPayments() { int a=10/0; return this.list(); } public List<Payment> getPaymentsOk() { log.info(\\\"进入备用方法\\\"); return this.list(); }\",\"@HystrixProperty 的可选配置项有：\",\"@HystrixCommand(fallbackMethod = \\\"xxx_method\\\", groupKey = \\\"strGroupCommand\\\", commandKey = \\\"strCommarld\\\", threadPoolKey = \\\"strThreadPool\\\", commandProperties = { //设置隔离策略，THREAD 表示线程她SEMAPHORE:信号他隔离 @HystrixProperty(name = \\\"execution.isolation.strategy\\\", value = \\\"THREAD\\\"), //当隔离策略选择信号他隔离的时候，用来设置信号地的大小(最大并发数) @HystrixProperty(name = \\\"execution.isolation.semaphore.maxConcurrentRequests\\\", value = \\\"10\\\"), //配置命令执行的超时时间 @HystrixProperty(name = \\\"execution.isolation.thread.timeoutinMilliseconds\\\", value = \\\"10\\\"), //是否启用超时时间 @HystrixProperty(name = \\\"execution.timeout.enabled\\\", value = \\\"true\\\"), //执行超时的时候是否中断 @HystrixProperty(name = \\\"execution.isolation.thread.interruptOnTimeout\\\", value = \\\"true\\\"), //执行被取消的时候是否中断 @HystrixProperty(name = \\\"execution.isolation.thread.interruptOnCancel\\\", value = \\\"true\\\"), //允许回调方法执行的最大并发数 @HystrixProperty(name = \\\"fallback.isolation.semaphore.maxConcurrentRequests\\\", value = \\\"10\\\"), //服务降级是否启用，是否执行回调函数 @HystrixProperty(name = \\\"fallback.enabled\\\", value = \\\"true\\\"), @HystrixProperty(name = \\\"circuitBreaker.enabled\\\", value = \\\"true\\\"), //该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为20的时候， //如果滚动时间窗(默认10秒)内仅收到了19个请求，即使这19个请求都失败了， 断路器也不会打开。 @HystrixProperty(name = \\\"circuitBreaker.requestVolumeThreshold\\\", value = \\\"20\\\"), // 该属性用来设置在熔动时间窗中表示在滚动时间窗中，在请求数量超过 // circuitBreaker.requestVolumeThreshold 的情况下,如果错误请求数的百分比超过50, //就把断路器设置为“打开”状态，否则就设置为“关闭”状态。 @HystrixProperty(name = \\\"circuitBreaker.errorThresholdPercentage\\\", value = \\\"50\\\"), // 该属性用来设置当断路器打开之后的休眠时间窗。休眠时间窗结束之后, //会将断路器置为\\\"半开”状态，尝试熔断的请求命令，如果低然失败就将断路器继续设置为\\\"打开”状态， //如果成功就设置为\\\"关闭”状态。 @HystrixProperty(name = \\\"circuitBreaker.sleepWindowInMilliseconds\\\", value = \\\"5009\\\"), //断路器强制打开 @HystrixProperty(name = \\\"circuitBreaker.force0pen\\\", value = \\\"false\\\"), // 断路器强制关闭 @HystrixProperty(name = \\\"circuitBreaker.forceClosed\\\", value = \\\"false\\\"), //滚动时间窗设置，该时间用于断路器判断健康度时需要收集信息的持续时间 @HystrixProperty(name = \\\"metrics.rollingStats.timeinMilliseconds\\\", value = \\\"10000\\\"), //该属性用来设置滚动时间窗统计指标信息时划分”桶\\\"的数量，断路器在收集指标信息的时候会根据设置的时间窗长度拆分成多个\\\"相\\\"来累计各度量值，每个”桶\\\"记录了-段时间内的采集指标。 //比如10秒内拆分成10个”桶\\\"收集这样，所以timeinMilliseconds 必须能被numBuckets 整除。否则会抛异常 @HystrixProperty(name = \\\"metrics.rollingStats.numBuckets\\\", value = \\\"10\\\"), //该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为false,那么所有的概要统计都将返回-1. @HystrixProperty(name = \\\"metrics .rollingPercentile.enabled\\\", value = \\\"false\\\"), //该属性用来设置百分位统计的滚动窗口的持续时间， 单位为毫秒。 @HystrixProperty(name = \\\"metrics.rollingPercentile.timeInMilliseconds\\\", value = \\\"60000\\\"), //该属性用来设置百分位统计演动窗口中使用“桶”的数量。 @HystrixProperty(name = \\\"metrics.rollingPercentile.numBuckets\\\", value = \\\"60000\\\"), // 该属性用来设置在执行过程中每个 “桶”中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，就从最初的位置开始重写。例如，将该值设置为100,燎动窗口为10秒， 若在10秒内一 一个“桶 ” 中发生7500次执行， //那么该“桶”中只保留最后的100次执行的统计。另外,增加该值的大小将会增加内存量的消耗， 并增加排序百分位数所需的计算 @HystrixProperty(name = \\\"metrics.rollingPercentile.bucketSize\\\", value = \\\"100\\\"), //该属性用来设置采集影响断路器状态的健康快照(请求的成功、错误百分比) 的间隔等待时间。 @HystrixProperty(name = \\\"metrics.healthSnapshot.intervalinMilliseconds\\\", value = \\\"500\\\"), //是否开启请求缓存 @HystrixProperty(name = \\\"requestCache.enabled\\\", value = \\\"true\\\"), // HystrixCommand的执行和时间是否打印日志到HystrixRequestLog中 @HystrixProperty(name = \\\"requestLog.enabled\\\", value = \\\"true\\\"), }, threadPoolProperties = { //该参数用来设置执行命令线程他的核心线程数，该值 也就是命令执行的最大并发量 @HystrixProperty(name = \\\"coreSize\\\", value = \\\"10\\\"), //该参数用来设置线程她的最大队列大小。当设置为-1时，线程池将使用SynchronousQueue 实现的队列， // 否则将使用LinkedBlocakingQueue实现队列 @HystrixProperty(name = \\\"maxQueueSize\\\", value = \\\"-1\\\"), // 该参数用来为队列设置拒绝阀值。 通过该参数， 即使队列没有达到最大值也能拒绝请求。 //該参数主要是対linkedBlockingQueue 队列的朴充,因为linkedBlockingQueue //队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。 @HystrixProperty(name = \\\"queueSizeRejectionThreshold\\\", value = \\\"5\\\"), } )\",\"或者参考 HystrixCommandProperties 类。\",\"主启动类上添加 @EnableHystrix 注解，此注解集成了 @EnableCircuitBreaker 注解（新版）。\"]},\"144\":{\"h\":\"使用 DefaultFallback\",\"t\":[\"在要开启服务熔断的类上使用 @DefaultProperties 注解并配置 defaultFallback 属性指定默认备用方法:\",\"@Service @Slf4j @DefaultProperties(defaultFallback = \\\"defaultMethod\\\") public class PaymentServiceImpl extends ServiceImpl<PaymentMapper, Payment> implements IPaymentService { @Override public boolean createPayment(Payment payment) { return this.save(payment); } @Override @HystrixCommand public Payment getPaymentById(int id) throws Exception { QueryWrapper<Payment> queryWrapper = new QueryWrapper<>(); queryWrapper.eq(\\\"id\\\",id); Payment one = this.getOne(queryWrapper); if (one==null){ throw new Exception(\\\"null\\\"); } return one; } @Override @HystrixCommand(fallbackMethod = \\\"getPaymentsOk\\\",commandProperties = { @HystrixProperty(name = \\\"execution.isolation.thread.timeoutInMilliseconds\\\",value = \\\"1500\\\") }) public List<Payment> getPayments() { int a=10/0; return this.list(); } public List<Payment> getPaymentsOk() { log.info(\\\"进入备用方法\\\"); return this.list(); } public Payment defaultMethod(){ log.info(\\\"进入默认熔断方法\\\"); return new Payment(1, \\\"熔断\\\"); } }\",\"注意\",\"需要开启熔断的方法还要使用 @HystrixCommand，且返回值必须是原方法的返回类型或其子类。\"]},\"145\":{\"h\":\"基于 Feign 的降级\",\"t\":[\"@FeignClient(name = \\\"microservice-provider-user\\\", fallback = HystrixClientFallback.class) public interface UserFeignClient { @RequestMapping(value = \\\"/simple/{id}\\\", method = RequestMethod.GET) public User findById(@PathVariable(\\\"id\\\") Long id); }\",\"@Component public class HystrixClientFallback implements UserFeignClient { @Override public User findById(Long id) { User user = new User(); user.setId(0L); return user; } }\",\"修改配置文件：\",\"feign: circuitbreaker: # 老版本这里是hystrix enabled: true\"]},\"146\":{\"h\":\"使用 FallbackFactory 降级\",\"t\":[\"@FeignClient(name = \\\"microservice-provider-user\\\", fallbackFactory = HystrixClientFactory.class) public interface UserFeignClient { @RequestMapping(value = \\\"/simple/{id}\\\", method = RequestMethod.GET) public User findById(@PathVariable(\\\"id\\\") Long id); }\",\"@Component public class HystrixClientFactory implements FallbackFactory<UserFeignClient> { private static final Logger LOGGER = LoggerFactory.getLogger(HystrixClientFactory.class); @Override public UserFeignClient create(Throwable cause) { HystrixClientFactory.LOGGER.info(\\\"fallback; reason was: {}\\\", cause.getMessage()); return new UserFeignClientWithFactory() { @Override public User findById(Long id) { User user = new User(); user.setId(-1L); return user; } }; } }\",\"public interface UserFeignClientWithFactory extends UserFeignClient { }\"]},\"147\":{\"h\":\"配置服务熔断\",\"t\":[\"修改业务类代码：\",\"@HystrixCommand(fallbackMethod = \\\"breakFallbackMethod\\\",commandProperties = { @HystrixProperty(name = \\\"circuitBreaker.enabled\\\", value = \\\"true\\\"),// 开启服务熔断 @HystrixProperty(name = \\\"circuitBreaker.requestVolumeThreshold\\\", value = \\\"10\\\"),// 一个窗口期中，达到熔断的最小请求次数 @HystrixProperty(name = \\\"circuitBreaker.errorThresholdPercentage\\\", value = \\\"50\\\"),// 失败的百分比 @HystrixProperty(name = \\\"circuitBreaker.sleepWindowInMilliseconds\\\", value = \\\"20000\\\")// 窗口期事件 }) public String breakTest(int a) throws Exception { if (a%2==0){ throw new Exception(\\\"熔断异常\\\"); } return \\\"请求成功，随机号：\\\"+ UUID.randomUUID()+\\\",id:\\\"+a; } public String breakFallbackMethod(int a){ return \\\"寄了，id：\\\"+a; }\"]},\"148\":{\"h\":\"查看 Hystrix 信息及状态\",\"t\":[\"两个接口：\",\"[IPAddress]:[Port]/actuator/hystrix.stream。\",\"[IPAddress]:[Port]/actuator/health。\"]},\"149\":{\"h\":\"HystrixDashBoard\"},\"150\":{\"h\":\"依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId> </dependency>\"]},\"151\":{\"h\":\"修改配置文件\",\"t\":[\"监控面板配置：\",\"server: port: 9001 hystrix: dashboard: proxy-stream-allow-list: '127.0.0.1' # 将此IP加入允许监控的列表\",\"被监控配置：\",\"management: endpoints: web: exposure: include: '*'\"]},\"152\":{\"h\":\"开启 DashBoard\",\"t\":[\"在启动类上添加：\",\"@EnableHystrixDashboard\"]},\"153\":{\"h\":\"访问 DashBoard\",\"t\":[\"访问地址：\",\"[IPAddress]:[Port]/hystrix。\",\"在其中填写要监控的 Hystrix 微服务：\",\"[IPAddress]:[Port]/actuator/hystrix.stream。\"]},\"154\":{\"h\":\"Nacos\",\"t\":[\"官方文档\"]},\"155\":{\"h\":\"单机 Nacos 部署\",\"t\":[\"TODO\"]},\"156\":{\"h\":\"服务提供者注册到 Nacos\",\"t\":[\"TODO\"]},\"157\":{\"h\":\"服务消费者注册到 Nacos\",\"t\":[\"TODO\"]},\"158\":{\"h\":\"Nacos 配置中心\",\"t\":[\"TODO\"]},\"159\":{\"h\":\"Nacos DataID、Namespace、Group 概念与配置\",\"t\":[\"TODO\"]},\"160\":{\"h\":\"Nacos 持久化\",\"t\":[\"TODO\"]},\"161\":{\"h\":\"Nacos 集群部署\",\"t\":[\"TODO\"]},\"162\":{\"h\":\"OpenFeign\"},\"163\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency>\"]},\"164\":{\"h\":\"重构消费者\",\"t\":[\"feign 用法类似 dubbo，但是是通过 HTTP 而非 RPC 实现调用，也是作用在服务接口上。\",\"客户端建立接口：\",\"@FeignClient(value = \\\"PAYMENT-SERVICE\\\") public interface IPaymentFeignService { /** * 通过ID查询支付记录 * @param id 支付记录ID * @return 指定的支付记录 */ @GetMapping(\\\"/payment/getPaymentById\\\") CommonResult<Payment> getPaymentById(@RequestParam(\\\"id\\\") int id); /** * 获取所有支付记录 * @return 所有的支付记录 */ @GetMapping(\\\"/payment/getPayments\\\") CommonResult<List<Payment>> getPayments(); /** * 创建支付记录 * @param payment 支付记录信息 * @return 结果 */ @PostMapping(\\\"/payment/createPayment\\\") CommonResult<String> createPayment(Payment payment); }\",\"注意\",\"接口上要添加 @FeignClient 注解，并通过 value 属性指定 Eureka 中的要调用的服务名。\",\"方法上要添加相关 URL 绑定注解，指明服务提供方对应路径的请求方式。\",\"如果方法中有参数且不使用 @PathVariable 和 @RequestParam 注解，则请求将会以 POST 方法发出，即使使用 @GetMapping。\",\"如果是 GET 请求方式需要携带参数，应当使用 @RequestParam 注解作键值映射，或者使用占位符和 @PathVariable 注解完成映射，但是第二种方法由于是拼接为 RestFul 风格 URL，需要服务提供端 Controller 同样使用占位符及 @PathVariable 注解。\"]},\"165\":{\"h\":\"OpenFeign 超时设置\",\"t\":[\"由于早期版本 OpenFeign 集成了 Ribbon，因此需要在配置文件中配置 Ribbon 的超时时间。\",\"新版本 OpenFeign 不再集成 Ribbon，修改超时配置如下：\",\"feign: client: config: default: readTimeOut: 1000 connectTimeout: 1000\"]},\"166\":{\"h\":\"OpenFeign 增强日志\"},\"167\":{\"h\":\"日志级别\",\"t\":[\"NONE：默认的，不显示任何日志。\",\"BASIC：仅记录请求方法、URL、响应状态码及执行时间。\",\"HEADERS：除了 BASIC 中定义的信息之外，还有请求和响应的头信息。\",\"FULL：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。\"]},\"168\":{\"h\":\"配置日志 Bean\",\"t\":[\"@Bean public Logger.Level level(){ return Logger.Level.FULL; }\"]},\"169\":{\"h\":\"编写配置文件指定要打印日志的接口\",\"t\":[\"logging: level: top.ppg.service.IPaymentFeignService: debug\",\"日志形式可以是 info、debug、error 等。\"]},\"170\":{\"h\":\"Ribbon\"},\"171\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-ribbon</artifactId> </dependency>\"]},\"172\":{\"h\":\"简单使用 Ribbon\",\"t\":[\"方式一，使用 Ribbon 配置 RestTemplate：\",\"@Configuration public class Config { @Bean @LoadBalanced public RestTemplate restTemplate(){ return new RestTemplate(); } // 负载均衡规则 @Bean public IRule iRule(){ return new RoundRobinRule(); } }\",\"在要使用 RestTemplate 的地方直接注入调用即可。\",\"方式二，使用 LoadBalancerClient 中的负载均衡策略获取一个可用的服务地址，然后再进行请求：\",\"@RestController @RequestMapping(\\\"/api/v1/center\\\") public class MessageCenterController { @Autowired private LoadBalancerClient loadBalancer; @GetMapping(\\\"/msg/get\\\") public Object getMsg() { ServiceInstance instance = loadBalancer.choose(\\\"message-service\\\"); URI url = URI.create(String.format(\\\"http://%s:%s/api/v1/msg/get\\\", instance.getHost(), instance.getPort())); RestTemplate restTemplate = new RestTemplate(); String msg = restTemplate.getForObject(url, String.class); return msg; } }\",\"可以通过 yaml 来配置使用的策略：\",\"message-service: ribbon: NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule <clientName>.ribbon.NFLoadBalancerClassName: 需实现 ILoadBalancer <clientName>.ribbon.NFLoadBalancerRuleClassName: 需实现 IRule <clientName>.ribbon.NFLoadBalancerPingClassName: 需实现 IPing <clientName>.ribbon.NIWSServerListClassName: 需实现 ServerList <clientName>.ribbon.NIWSServerListFilterClassName: 需实现 ServerListFilter\"]},\"173\":{\"h\":\"自定义策略\",\"t\":[\"自定义的策略类必须继承 AbstractLoadBalancerRule：\",\" public class RandomRule_ZY extends AbstractLoadBalancerRule { // total = 0 // 当total==5以后，我们指针才能往下走， // index = 0 // 当前对外提供服务的服务器地址， // total需要重新置为零，但是已经达到过一个5次，我们的index = 1 // 分析：我们5次，但是微服务只有8001 8002 8003 三台，OK？ private int total = 0; // 总共被调用的次数，目前要求每台被调用5次 private int currentIndex = 0; // 当前提供服务的机器号 public Server choose(ILoadBalancer lb, Object key) { if (lb == null) { return null; } Server server = null; while (server == null) { if (Thread.interrupted()) { return null; } List<Server> upList = lb.getReachableServers(); List<Server> allList = lb.getAllServers(); int serverCount = allList.size(); if (serverCount == 0) { return null; } if(total < 5) { server = upList.get(currentIndex); total++; }else { total = 0; currentIndex++; if(currentIndex >= upList.size()) { currentIndex = 0; } } if (server == null) { Thread.yield(); continue; } if (server.isAlive()) { return (server); } server = null; Thread.yield(); } return server; } @Override public Server choose(Object key) { return choose(getLoadBalancer(), key); } @Override public void initWithNiwsConfig(IClientConfig clientConfig) { } }\",\"编写对应配置类：\",\"@Configuration public class MySelfRules{ @Bean public IRule myRule(){ return new RandomRule_ZY(); } }\",\"在主启动类上添加：\",\"@RibbonClient(name=\\\"服务名\\\",configuration=MySelfRule.class)\",\"注意\",\"MySelfRule 配置类必须不能被 Spring 扫描到，否则所有的 Ribbon 客户端都会使用这个规则。\"]},\"174\":{\"h\":\"自定义 Ribbon 客户端\",\"t\":[\"import org.springframework.cloud.netflix.ribbon.RibbonClient; import org.springframework.cloud.netflix.ribbon.ZonePreferenceServerListFilter; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import com.netflix.loadbalancer.IPing; import com.netflix.loadbalancer.PingUrl; import com.pengjunlee.TestConfiguration.MessageConfiguration; @Configuration @RibbonClient(name = \\\"message-service\\\", configuration = MessageConfiguration.class) public class TestConfiguration { @Configuration protected static class MessageConfiguration { @Bean public ZonePreferenceServerListFilter serverListFilter() { ZonePreferenceServerListFilter filter = new ZonePreferenceServerListFilter(); filter.setZone(\\\"myTestZone\\\"); return filter; } @Bean public IPing ribbonPing() { return new PingUrl(); } } }\",\"注意\",\"此类同样不能被 Spring 扫描。\",\"Ribbon 的所有可选 Bean： \"]},\"175\":{\"h\":\"Sleuth\",\"t\":[\"Sleuth 用于链路监控，结合 zipkin 搭建可视化监控面板。\"]},\"176\":{\"h\":\"下载 Zipkin\",\"t\":[\"从 SpringCloud F 版本后不再需要单独搭建 Zipkin，直接在 Zipkin 下载 jar 包即可。\",\"执行命令：java -jar zipkin-server-2.23.4-exec.jar 启动 Zipkin。\"]},\"177\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-zipkin</artifactId> <version>2.2.8.RELEASE</version> </dependency>\"]},\"178\":{\"h\":\"修改配置文件\",\"t\":[\"spring: application: name: payment-service zipkin: base-url: http://192.168.3.55:9411 sleuth: sampler: probability: 1 # 0-1的Float值，1表示全部路径都监控\",\"无论是生产者还是消费者配置都相同。\"]},\"179\":{\"h\":\"基础环境搭建\"},\"180\":{\"h\":\"项目基础结构搭建\",\"t\":[\"创建一个 Maven 项目作为父项目。\",\"依赖管理：\",\"<properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> <lombok.version>1.18.20</lombok.version> <mysql.driver.version>8.0.26</mysql.driver.version> <druid.version>1.2.6</druid.version> <mybatisplus.version>3.4.3.4</mybatisplus.version> </properties> <dependencyManagement> <dependencies> <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.4.2</version> <type>pom</type> <scope>import</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>2020.0.1</version> <type>pom</type> <scope>import</scope> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>2021.1</version> <type>pom</type> <scope>import</scope> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>${mysql.driver.version}</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>${lombok.version}</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>${druid.version}</version> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>${mybatisplus.version}</version> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <fork>true</fork> <addResources>true</addResources> </configuration> </plugin> </plugins> </build>\",\"指定打包方式：\",\"<packaging>pom</packaging>\",\"三种打包方式的不同：\",\"pom： 打出来的可以作为其他项目的 maven 依赖，在工程 A 中添加工程 B 的 pom，A 就可以使用 B 中的类。用在父级工程或聚合工程中。用来做 jar 包的版本控制。\",\"jar：\",\"通常是开发时要引用通用类，打成 jar 包便于存放管理。当你使用某些功能时就需要这些 jar 包的支持，需要导入 jar 包。\",\"war：\",\"是做好一个 web 网站后，打成 war 包部署到服务器。目的是节省资源，提供效率。\"]},\"181\":{\"h\":\"环境搭建-通用模块\",\"t\":[\"创建一个子模块，修改 pom 文件：\",\"<dependencies> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> </dependency> </dependencies>\",\"指定打包方式为 pom：\",\"<packaging>pom</packaging>\",\"编写通用实体类：\",\"@Data @AllArgsConstructor @NoArgsConstructor @Accessors(chain = true) @TableName(value = \\\"payment\\\",keepGlobalPrefix = true) public class Payment implements Serializable { @TableId(type = IdType.AUTO) private Integer id; @TableField private String serial; }\",\"@Data @AllArgsConstructor @NoArgsConstructor @Accessors(chain = true) public class CommonResult<T> { private Integer code; private String message; private T data; }\",\"先执行 maven clean，再执行 maven install。\"]},\"182\":{\"h\":\"环境搭建-支付模块\",\"t\":[\"引入依赖：\",\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> </dependency> <dependency> <groupId>top.ppg</groupId> <artifactId>api-commons</artifactId> <version>1.0-SNAPSHOT</version> </dependency> </dependencies>\",\"编写 SpringBoot 配置文件：\",\"server: port: 8001 spring: application: name: payment-service-8001 datasource: url: jdbc:mysql://192.168.3.14:3306?serverTimezone=UTC username: root password: 123456zch@ZCH driver-class-name: com.mysql.cj.jdbc.Driver type: com.alibaba.druid.pool.DruidDataSource mybatis-plus: global-config: db-config: table-prefix: spring_cloud.\",\"编写 Dao 接口：\",\"@Mapper @Repository public interface PaymentMapper extends BaseMapper<Payment> { }\",\"编写服务层接口：\",\"public interface IPaymentService extends IService<Payment> { /** * 创建支付记录 * @param payment 支付对象 * @return 是否创建成功 */ boolean createPayment(Payment payment); /** * 通过id查询支付记录 * @param id 支付记录id * @return 支付对象 */ Payment getPaymentById(int id); /** * 获取所有支付记录 * @return 支付记录列表 */ List<Payment> getPayments(); }\",\"编写服务层接口实现类：\",\"@Service public class PaymentServiceImpl extends ServiceImpl<PaymentMapper, Payment> implements IPaymentService { @Override public boolean createPayment(Payment payment) { return this.save(payment); } @Override public Payment getPaymentById(int id) { QueryWrapper<Payment> queryWrapper = new QueryWrapper<>(); queryWrapper.eq(\\\"id\\\",id); return this.getOne(queryWrapper); } @Override public List<Payment> getPayments() { return this.list(); } }\",\"编写 controller：\",\"@RestController @Slf4j @RequestMapping(\\\"/payment\\\") public class PaymentController { private IPaymentService paymentService; @Autowired public void setPaymentService(IPaymentService paymentService) { this.paymentService = paymentService; } @PostMapping(\\\"/createPayment\\\") public CommonResult<String> createPayment(@RequestBody Payment payment){ log.info(\\\"准备创建支付记录\\\"); log.info(\\\"要创建的支付记录信息为：\\\"+payment); boolean res = paymentService.createPayment(payment); log.info(\\\"创建结果为：\\\"+res); return res? new CommonResult<>(200, \\\"创建支付记录成功\\\", null) : new CommonResult<>(200, \\\"创建支付记录失败\\\", null); } @GetMapping(\\\"/getPaymentById\\\") public CommonResult<Payment> getPaymentById(int id){ log.info(\\\"准备根据ID查询支付记录\\\"); log.info(\\\"要查询的支付记录的ID为：\\\"+id); Payment res = paymentService.getPaymentById(id); log.info(\\\"查询结果为：\\\"+res); return res==null? new CommonResult<>(200,\\\"未查询到结果\\\", null) :new CommonResult<>(200,\\\"查询成功\\\",res); } @GetMapping(\\\"/getPayments\\\") public CommonResult<List<Payment>> getPayments(){ log.info(\\\"准备查询所有支付记录\\\"); List<Payment> payments = paymentService.getPayments(); log.info(\\\"查询结果为：\\\"+payments); return new CommonResult<>(200,\\\"查询成功\\\",payments); } }\",\"编写启动类：\",\"@SpringBootApplication public class PaymentStarter { public static void main(String[] args) { SpringApplication.run(PaymentStarter.class,args); } }\"]},\"183\":{\"h\":\"环境搭建-订单模块\",\"t\":[\"编写 pom 文件：\",\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> </dependency> <dependency> <groupId>top.ppg</groupId> <artifactId>api-commons</artifactId> <version>1.0-SNAPSHOT</version> </dependency> </dependencies>\",\"编写 SpringBoot 配置文件：\",\"server: port: 80 spring: application: name: order-service-80 datasource: url: jdbc:mysql://192.168.3.14:3306?serverTimezone=UTC username: root password: 123456zch@ZCH driver-class-name: com.mysql.cj.jdbc.Driver type: com.alibaba.druid.pool.DruidDataSource\",\"编写启动类：\",\"@SpringBootApplication public class OrderStarter { public static void main(String[] args) { SpringApplication.run(OrderStarter.class,args); } @Bean public RestTemplate restTemplate(){ return new RestTemplate(); } }\",\"编写 controller：\",\"@RestController @Slf4j @RequestMapping(\\\"/order\\\") public class OrderController { private RestTemplate restTemplate; private static final String BASE_URL=\\\"http://127.0.0.1:8001\\\"; @Autowired public void setRestTemplate(RestTemplate restTemplate) { this.restTemplate = restTemplate; } @GetMapping(\\\"/createPayment\\\") public CommonResult createPayment(Payment payment){ return restTemplate.postForObject(BASE_URL + \\\"/payment/createPayment\\\", payment, CommonResult.class); } @GetMapping(\\\"/getPayments\\\") public CommonResult getPayments(){ return restTemplate.getForObject(BASE_URL + \\\"/payment/getPayments\\\", CommonResult.class); } @GetMapping(\\\"/getPaymentById\\\") public CommonResult getPaymentById(int id){ HashMap<String, Integer> map = new HashMap<>(3); map.put(\\\"id\\\",id); return restTemplate.getForObject(BASE_URL + \\\"/payment/getPaymentById?id={id}\\\", CommonResult.class,map); } }\"]},\"184\":{\"h\":\"关于 RestTemplate\",\"t\":[\"RestTemplate 是从 Spring3.0 开始支持的一个 HTTP 请求工具，它提供了常见的REST请求方案的模版，例如 GET 请求、POST 请求、PUT 请求、DELETE 请求以及一些通用的请求执行方法 exchange 以及 execute。\",\"GET 请求：\",\"getForEntity 方法：\",\"此方法获取响应头、状态码、内容等在内的完整信息,第一个参数为URL，第二个参数为返回结果类型，第三个参数以 map 存储请求参数。\",\"ResponseEntity<String> forEntity = restTemplate.getForEntity(URL, String.class,stringStringHashMap); String body = forEntity.getBody(); HttpStatus statusCode = forEntity.getStatusCode(); HttpHeaders headers = forEntity.getHeaders(); int statusCodeValue = forEntity.getStatusCodeValue(); System.out.println(\\\"body==>\\\"+body); System.out.println(\\\"statusCode==>\\\"+statusCode); System.out.println(\\\"headers==>\\\"+headers); System.out.println(\\\"statusCodeValue==>\\\"+statusCodeValue);\",\"getForObject 方法：\",\"此方法获取返回内容,第一个参数为URL，第二个参数为返回结果类型，第三个参数以 map 存储请求参数。\",\"HashMap<String, String> stringStringHashMap = new HashMap<>(); stringStringHashMap.put(\\\"id\\\",\\\"id2\\\"); stringStringHashMap.put(\\\"name\\\",\\\"name2\\\"); String forObject = restTemplate.getForObject(URL, String.class, stringStringHashMap); System.out.println(forObject);\",\"提示\",\"get 请求要注意参数的拼接，需要占位符。\",\"POST 请求：\",\"postForEntity 和 postForObject：\",\"第一个参数为 URL，第二个参数为 map 或者对象实例，使用对象实例时，以 JSON 方式发送。\",\"LinkedMultiValueMap<String, String> stringStringLinkedMultiValueMap = new LinkedMultiValueMap<>(); restTemplate.postForEntity(URL_POST, stringStringLinkedMultiValueMap, String.class);\",\"若使用 KV 键值对传递请求参数，则必须使用 LinkedMultiValueMap。\",\"postForLocation：\",\"postForLocation 方法的返回值是一个 Uri 对象，返回跳转到的地址，可以先使用 postForLocation 获取 URI 再使用访问。\",\"提示\",\"postForLocation 方法返回的 Uri 实际上是指响应头的 Location 字段，所以，provider 中 register 接口的响应头必须要有 Location 字段（即请求的接口实际上是一个重定向的接口），否则 postForLocation 方法的返回值为 null。\"]},\"185\":{\"h\":\"Stream\",\"t\":[\"Stream 支持 RabbitMQ 和 Kafka。\"]},\"186\":{\"h\":\"依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-stream-rabbit</artifactId> </dependency>\"]},\"187\":{\"h\":\"消息生产者\",\"t\":[\"修改配置文件：\",\"提示\",\"如果使用下面的配置方式配置 RabbitMQ，且如果 RabbitMQ 不在本地，程序将进行两次连接，第一次连接到远程服务器的消息队列，第二次连接本地消息队列，如果本地没有消息队列，则会抛出异常，要解决这个问题请参考消息消费者的配置方法。\",\"server: port: 8801 spring: application: name: stream-provider cloud: stream: binders: defaultRabbit: type: rabbit environment: spring: rabbitmq: host: 192.168.3.14 port: 5672 username: rabbitmq password: ${spring.cloud.stream.binders.defaultRabbit.environment.spring.rabbitmq.username} bindings: output: destination: exchangeDemo content-type: application/json # binder: defaultRabbit 加不加没啥影响 eureka: client: service-url: defaultZone: http://192.168.3.14:7001/eureka/,http://192.168.3.55:7002/eureka/ instance: prefer-ip-address: true ip-address: 127.0.0.1 non-secure-port: 8801\",\"编写业务实现类：\",\"@EnableBinding({Source.class}) public class MessageProviderImpl implements IMessageProvider { @Autowired private MessageChannel output; @Override public String send(String message) { output.send(MessageBuilder.withPayload(message).build()); return null; } }\",\"然后编写 controller 进行访问即可。\"]},\"188\":{\"h\":\"消息消费者\",\"t\":[\"编写配置文件：\",\"提示\",\"将消息队列连接配置移到 spring 下就不会出现重连两次的问题。\",\"server: port: 8802 spring: rabbitmq: host: 192.168.3.14 port: 5672 username: rabbitmq password: ${spring.rabbitmq.username} application: name: stream-consumer cloud: stream: binders: defaultRabbit: type: rabbit bindings: input: destination: exchangeDemo content-type: application/json # binder: defaultRabbit eureka: client: service-url: defaultZone: http://192.168.3.14:7001/eureka/,http://192.168.3.55:7002/eureka/ instance: prefer-ip-address: true ip-address: 127.0.0.1 non-secure-port: 8802\",\"编写消息消费类：\",\"@EnableBinding(Sink.class) @Component public class ReceiveController { @Value(\\\"${server.port}\\\") private String port; @StreamListener(Sink.INPUT) public void input(Message<String> message){ System.out.println(\\\"消费者1号收到消息---------->\\\"+message.getPayload()+\\\"\\\\t 端口号：\\\"+port); } }\"]},\"189\":{\"h\":\"解决重复消费问题\",\"t\":[\"通过分组实现解决重复消费问题。\",\"分组\",\"发送一条消息，同一个分组内的所有消费者中只有一个能消费这条消息，不同分组可以重复消费。\",\"修改消费者配置文件，指定分组：\",\"spring: rabbitmq: host: 192.168.3.14 port: 5672 username: rabbitmq password: ${spring.rabbitmq.username} application: name: stream-consumer cloud: stream: binders: defaultRabbit: type: rabbit bindings: input: destination: exchangeDemo content-type: application/json group: ppg\"]},\"190\":{\"h\":\"消息持久化\",\"t\":[\"如果不显示指定分组，在消费者下线期间产生的消息不会被这个消费者消费，如果指定了分组，那么下线期间产生的消息也会被消费。\"]},\"191\":{\"h\":\"Zookeeper\"},\"192\":{\"h\":\"依赖引入\",\"t\":[\"将上面的 eureka 依赖替换为 zookeeper 依赖：\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId> </dependency>\"]},\"193\":{\"h\":\"Provider 模块\"},\"194\":{\"h\":\"编写 SpringBoot 配置文件\",\"t\":[\"server: port: 8004 spring: application: name: payment-service datasource: url: jdbc:mysql://192.168.3.14:3306?serverTimezone=UTC username: root password: 123456zch@ZCH driver-class-name: com.mysql.cj.jdbc.Driver type: com.alibaba.druid.pool.DruidDataSource cloud: zookeeper: connect-string: 39.107.112.172:2181,115.28.211.227:2181,150.158.153.216:2181 # ZooKeeper集群 discovery: instance-host: 192.168.3.55 # 本实例的IP地址 instance-port: 8004 # 本实例的端口号 mybatis-plus: global-config: db-config: table-prefix: spring_cloud.\",\"其他内容与 Eureka 相同，修改主启动类注解，使用 @EnableDiscoveryClient 替换 Eureka 注解。\",\"@SpringBootApplication @EnableDiscoveryClient public class PaymentStarter8004 { public static void main(String[] args) { SpringApplication.run(PaymentStarter8004.class,args); } }\"]},\"195\":{\"h\":\"Consumer 模块\"},\"196\":{\"h\":\"编写 SpringBoot 配置文件\",\"t\":[\"server: port: 80 spring: application: name: order-service-zk-80 datasource: url: jdbc:mysql://192.168.3.14:3306?serverTimezone=UTC username: root password: 123456zch@ZCH driver-class-name: com.mysql.cj.jdbc.Driver type: com.alibaba.druid.pool.DruidDataSource cloud: zookeeper: connect-string: 39.107.112.172:2181,115.28.211.227:2181,150.158.153.216:2181 discovery: instance-host: 192.168.3.14 instance-port: 80\",\"主启动类与 Provider 相同。\"]},\"197\":{\"h\":\"注入 RestTemplate\",\"t\":[\"@Bean @LoadBalanced public RestTemplate restTemplate(){ return new RestTemplate(); }\"]},\"198\":{\"h\":\"修改 controller 的 url\",\"t\":[\"private static final String BASE_URL=\\\"http://payment-service\\\";\",\"修改为 ZooKeeper 中服务对应的节点名称，与 spring.application.name 相同。\"]},\"199\":{\"h\":\"Zuul\"},\"200\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-zuul</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency>\"]},\"201\":{\"h\":\"使用 Zuul\"},\"202\":{\"h\":\"开启 Zuul 支持\",\"t\":[\"在主启动类上添加 @EnableZuulProxy 注解。\"]},\"203\":{\"h\":\"配置 Zuul\",\"t\":[\"server: port: 9527 spring: application: name: Zuul eureka: client: service-url: defaultZone: http://localhost:7001/eureka/,http://localhost2:7002/eureka/ instance: instance-id: Zuul prefer-ip-address: true info: app.name: PPG-SpringCloud-Learn-Zuul zuul: routes: springcloud-provider-dept: /dept/** #为服务指定URl ignored-services: '*' prefix: /dept host: connect-timeout-millis: 2000 socket-timeout-millis: 10000 strip-prefix: false #设置是否跳过前缀，这里是全局配置，既影响prefix也影响给服务指定的url前缀， # 默认为true，以此处为例，若设置为true，则访问时输入 # localhost:9527/dept/dept/dept/queryAll才可以正常访问， # 第一个dept是prifix，第二个是为服务指定的前缀，第三个是微服务内部的前缀， # 由于设置为true，则这个请求的url被转换为localhost:8001/dept/queryAll， # 也就是忽略了两个prefix但微服务内部前缀依然保留 # strip-prefix也可以为指定的微服务设置，例如： # routes: # springcloud-provider-dept: # path: /dept/** # strip-prefix: false\"]},\"204\":{\"h\":\"Zuul 与 Ribbon 和 Hystrix\",\"t\":[\"Zuul 默认使用 Ribbon 和 Hystrix，为了防止访问超时，做如下配置：\",\"hystrix: command: default: execution: isolation: thread: timeoutInMilliseconds: 60000 ribbon: ConnectTimeout: 3000 ReadTimeout: 60000\",\"可以自定义配置 Ribbon 的策略：\",\"@Bean public IRule iRule(){ return new RandomRule(); }\",\"实现服务降级：\",\"Zuul 网关中实现服务降级，只需要在 Zuul 网关的服务中，编写实现 ZuulFallbackProvider 接口的 java 类即可：\",\"@Component public class ProductFallback implements ZuulFallbackProvider { /** * 指定需要托底处理的服务名 */ @Override public String getRoute() { return \\\"e-book-product-provider\\\"; } /** * 服务无法使用时，返回的托底信息 */ @Override public ClientHttpResponse fallbackResponse() { return new ClientHttpResponse() { /** * ClientHttpResponse 的 fallback 的状态码 返回HttpStatus */ @Override public HttpStatus getStatusCode() throws IOException { return HttpStatus.OK; } /** * ClientHttpResponse 的 fallback 的状态码 返回 int */ @Override public int getRawStatusCode() throws IOException { return getStatusCode().value(); } /** * ClientHttpResponse 的 fallback 的状态码 返回 String */ @Override public String getStatusText() throws IOException { return getStatusCode().getReasonPhrase(); } /** * 设置响应体 */ @Override public InputStream getBody() throws IOException { String msg = \\\"当前服务不可用，请稍后再试\\\"; return new ByteArrayInputStream(msg.getBytes()); } /** * 设置响应的头信息 */ @Override public HttpHeaders getHeaders() { HttpHeaders httpHeaders= new HttpHeaders(); MediaType mediaType = new MediaType(\\\"application\\\",\\\"json\\\", Charset.forName(\\\"utf-8\\\")); httpHeaders.setContentType(mediaType); return httpHeaders; } @Override public void close() { } }; } }\",\"注意\",\"当前进行服务降级的服务，在注册中心必须存在，否则，会直接出 404,No message available 错误，不会进行降级。\"]},\"205\":{\"h\":\"Zuul 过滤器\",\"t\":[\"过滤器。\",\"例子：\",\"@Component public class LoginFilter extends ZuulFilter { /** * 过滤器类型，前置过滤器 * @return */ @Override public String filterType() { return \\\"pre\\\"; } /** * 过滤器的执行顺序 * @return */ @Override public int filterOrder() { return 1; } /** * 该过滤器是否生效 * @return */ @Override public boolean shouldFilter() { return true; } /** * 登陆校验逻辑 * @return * @throws ZuulException */ @Override public Object run() throws ZuulException { // 获取zuul提供的上下文对象 RequestContext context = RequestContext.getCurrentContext(); // 从上下文对象中获取请求对象 HttpServletRequest request = context.getRequest(); // 获取token信息 String token = request.getParameter(\\\"access-token\\\"); // 判断 if (StringUtils.isBlank(token)) { // 过滤该请求，不对其进行路由 context.setSendZuulResponse(false); // 设置响应状态码，401 context.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED); // 设置响应信息 context.setResponseBody(\\\"{\\\\\\\"status\\\\\\\":\\\\\\\"401\\\\\\\", \\\\\\\"text\\\\\\\":\\\\\\\"request error!\\\\\\\"}\\\"); } // 校验通过，把登陆信息放入上下文信息，继续向后执行 context.set(\\\"token\\\", token); return null; } }\"]},\"206\":{\"h\":\"Ajax\"},\"207\":{\"h\":\"ajax 基本属性\",\"t\":[\"$.ajax({ url: '/books/ajaxSelect', data: { bookName: bookName }, //JSONObject或String async: true, //Boolean类型，默认为true，所有请求为异步，若设置false，将使用同步请求，锁住浏览器，其他操作必须等待ajax执行完毕 type: 'POST', //请求方式：POST、GET、DELETE、PUT timeout: 5000, //毫秒 cache: true, //默认为true，当dataType为script时默认false，false将不会从浏览器中加载请求信息 dataType: 'json', //预期返回的数据类型 success: function (data) { $('#bookTable').html(refresh(data)); }, error: function (data) { console.log(data); }, complete: function () { console.log('complete'); }, });\",\"dataType:\",\"xml：返回 XML 文档，可用 JQuery 处理。\",\"html：返回纯文本 HTML 信息；包含的 script 标签会在插入 DOM 时执行。\",\"script：返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 cache 参数。注意在远程请求时（不在同一个域下），所有 post 请求都将转为 get 请求。\",\"json：返回 JSON 数据。\",\"jsonp：JSONP 格式。使用 JSONP 形式调用函数时，例如 myurl?callback=?，JQuery 将自动替换后一个“?”为正确的函数名，以执行回调函数。\",\"text：返回纯文本字符串。\"]},\"208\":{\"h\":\"ajax 处理前端\",\"t\":[\"前端代码：\",\"<table class=\\\"table table-hover table-striped\\\"> <thead> <tr> <th>书籍编号</th> <th>书籍名称</th> <th>书籍数量</th> <th>书籍详情</th> </tr> </thead> <tbody id=\\\"bookTable\\\"> <c:forEach var=\\\"book\\\" items=\\\"${bookList}\\\"> <tr> <td>${book.bookId}</td> <td>${book.bookName}</td> <td>${book.bookCounts}</td> <td>${book.detail}</td> <td> <a href=\\\"${pageContext.request.contextPath}/books/toUpdatePage?bookId=${book.bookId}\\\" >修改</a >&nbsp;|&nbsp; <a href=\\\"${pageContext.request.contextPath}/books/delete?bookId=${book.bookId}\\\">删除</a> </td> </tr> </c:forEach> </tbody> </table>\",\"通过 ajax 获取到数据后，调用拼接函数，注意拼接的位置(tbody)。\",\"function refresh(data) { let bookList = JSON.parse(data); let html = ''; for (let i = 0; i < bookList.length; i++) { html += '<tr><td>' + bookList[i].bookId + '</td>' + '<td>' + bookList[i].bookName + '</td>' + '<td>' + bookList[i].bookCounts + '</td>' + '<td>' + bookList[i].detail + '</td></tr>'; } console.log(html); return html; }\"]},\"209\":{\"h\":\"后台处理\",\"t\":[\"后台通过 @ResponseBody 注解或 @RestController 注解返回一个 json 字符串即可。\"]},\"210\":{\"h\":\"Controller\"},\"211\":{\"h\":\"SpringMVC 工作流程\",\"t\":[\"核心：DispatcherServlet。\"]},\"212\":{\"h\":\"web.xml 配置\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <servlet> <servlet-name>springmvc</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <init-param> <param-name>contextConfigLocation</param-name> <!-- Spring的配置文件 --> <param-value>classpath:springmvc-servlet.xml</param-value> </init-param> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>springmvc</servlet-name> <!-- 拦截所有请求 --> <url-pattern>/</url-pattern> </servlet-mapping> </web-app>\"]},\"213\":{\"h\":\"Spring 配置\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean class=\\\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\\\"/> <bean class=\\\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\\\"/> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <!-- 自动拼接 --> <!-- 前缀 --> <property name=\\\"prefix\\\" value=\\\"/WEB-INF/jsp/\\\"/> <!-- 后缀 --> <property name=\\\"suffix\\\" value=\\\".jsp\\\"/> </bean> <!-- 注册自定义的Controller类 --> <bean class=\\\"controller.HelloController\\\" id=\\\"/hello\\\"/> </beans>\",\"BeanNameUrlHandlerMapping：\",\"处理器映射器的一种，根据请求的 url 与 Spring 容器中定义的处理器 bean 的 id 属性值进行匹配，这种方式中 bean 的 id 属性必须以'/'开头。\",\"SimpleControllerHandlerAdapter：\",\"处理器适配器的一种，这个实现类将 HTTP 请求适配到一个控制器的实现进行处理。SimpleControllerHandlerAdapter 将会调用处理器的 handleRequest 方法进行功能处理，该处理方法返回一个 ModelAndView 给 DispatcherServlet。\",\"InternalResourceViewResolver：\",\"视图解析器的一种，InternalResourceViewResolver 不管能不能解析它都不会返回 null，也就是说它拦截了所有的逻辑视图，让后续的解析器得不到执行，所以 InternalResourceViewResolver 优先级必须放在最后。\"]},\"214\":{\"h\":\"实现 Controller (非注解)\",\"t\":[\"通过实现 Controller 接口，并重写其中的 handleRequest 方法实现定义 Controller，这种方法意味着每一个 url 都要对应一个 Controller，每个 Controller 单独成类，且都要在 Spring 容器中注册，效率极低。\",\"public class HelloController implements Controller { @Override public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception { ModelAndView modelAndView=new ModelAndView(); modelAndView.addObject(\\\"msg\\\",\\\"Hello Controller\\\"); modelAndView.setViewName(\\\"hello\\\"); return modelAndView; } }\"]},\"215\":{\"h\":\"使用注解实现 Controller (仅 Controller 使用注解)\",\"t\":[\"web.xml 配置无变化。\",\"Spring 配置如下：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd\\\"> <!-- 开启自动扫描包：controller包 --> <context:component-scan base-package=\\\"controller\\\"/> <!-- 开启Spring注解支持 --> <context:annotation-config/> <!-- 开启默认处理器，防止静态资源404 --> <mvc:default-servlet-handler/> <!-- 开启mvc的注解支持 --> <mvc:annotation-driven/> <!-- 视图解析器 --> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\" id=\\\"internalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/WEB-INF/jsp/\\\"/> <property name=\\\"suffix\\\" value=\\\".jsp\\\"/> </bean> </beans>\",\"Controller:\",\"@Controller//表示此类为Controller类 public class HelloController { @GetMapping(\\\"/hello\\\")//仅支持GET方式请求 public String hello1(Model model){ model.addAttribute(\\\"msg\\\",\\\"Hello SpringMVC-Annotation!\\\"); return \\\"hello\\\"; } @RequestMapping(\\\"/wuhu\\\")//同时支持GET和POST public ModelAndView hello2(HttpServletRequest request){ String username = request.getParameter(\\\"username\\\"); System.out.println(username); ModelAndView modelAndView = new ModelAndView(); modelAndView.addObject(\\\"msg\\\",username); modelAndView.setViewName(\\\"hello\\\"); return modelAndView; } }\"]},\"216\":{\"h\":\"RestFul 风格\",\"t\":[\"通过 @PathVariable 注解与 @RequestMapping 中 url 一一对应实现。\",\"@RequestMapping(\\\"/add/{a}/{b}\\\") public String test(Model model, @PathVariable(\\\"a\\\")int a,@PathVariable(\\\"b\\\") int b){ int integer = a + b; String msg= Integer.toString(integer); model.addAttribute(\\\"msg\\\",msg); return \\\"hello\\\"; }\"]},\"217\":{\"h\":\"重定向与转发\",\"t\":[\"重定向：request 不再是原先的 request，两个请求之间相互独立。\",\"转发：前后的 request 相同。\",\"重定向：\",\"@RequestMapping(\\\"redirect\\\") public void test2(HttpServletResponse response,HttpServletRequest request) throws IOException { response.sendRedirect(\\\"/index.jsp\\\"); } @RequestMapping(\\\"redirect2\\\") public String test5(){ //显式指定redirect或forward后，既可以跳转controller，也可以直接访问web路径下的静态资源 return \\\"redirect:https://www.baidu.com\\\"; }\",\"转发：\",\"@RequestMapping(\\\"/forward\\\") public void test(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { request.setAttribute(\\\"msg\\\",\\\"forward\\\"); request.getRequestDispatcher(\\\"/WEB-INF/jsp/hello.jsp\\\").forward(request,response); } @RequestMapping(\\\"/forward2\\\") public String test3(){ //使用视图解析器相当于访问对应的controller return \\\"/hello\\\"; //return \\\"/index.jsp\\\";文件[/WEB-INF/jsp/index.jsp.jsp] 未找到 //若不使用视图解析器，需要返回全路径，以web文件夹为根目录 } @RequestMapping(\\\"/forward3\\\") public String test4(){ return \\\"forward:/hello\\\"; //相当于访问controller //return \\\"froward:/index.jsp\\\";直接从web文件夹下寻找 }\"]},\"218\":{\"h\":\"乱码问题\",\"t\":[\"情况一，jsp、html 等静态页面没有设置 UTF-8，或者文件格式不是 UTF-8：\",\"解决：添加头部指定编码格式为 UTF-8。\",\"情况二，调试中，控制台输出乱码：\",\"解决：在 Tomcat 的启动参数中添加 -Dfile.encoding=UTF-8，指定 jvm 以 UTF-8 启动。注意：此项设置需要重启IDE方可生效。\",\"情况三：浏览器前端界面乱码：\",\"解决：在 web.xml 中配置 Spring 的 CharacterEncodingFilter 即可：\",\" <filter> <filter-name>spring</filter-name> <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> <init-param> <param-name>encoding</param-name> <param-value>UTF-8</param-value> </init-param> </filter> <filter-mapping> <filter-name>spring</filter-name> <!-- /*表示还要过滤静态文件 --> <url-pattern>/*</url-pattern> </filter-mapping>\"]},\"219\":{\"h\":\"文件上传和下载\"},\"220\":{\"h\":\"上传\"},\"221\":{\"h\":\"前端代码\",\"t\":[\"设置 form 表单的 enctype 属性为 multipart/form-data 用以接收字节数据：\",\"<form action=\\\"${pageContext.request.contextPath}/upload/doUpload2\\\" enctype=\\\"multipart/form-data\\\" method=\\\"post\\\" > <input type=\\\"file\\\" name=\\\"file\\\" /> <input type=\\\"submit\\\" value=\\\"上传\\\" /> </form>\"]},\"222\":{\"h\":\"Spring 配置\",\"t\":[\"<!-- id必须是这个--> <bean class=\\\"org.springframework.web.multipart.commons.CommonsMultipartResolver\\\" id=\\\"multipartResolver\\\"> <!-- 编码必须和jsp界面编码一致--> <property name=\\\"defaultEncoding\\\" value=\\\"UTF-8\\\"/> <!-- 文件大小，单位是字节--> <property name=\\\"maxUploadSize\\\" value=\\\"10485760\\\"/> <property name=\\\"maxInMemorySize\\\" value=\\\"40960\\\"/> </bean>\",\"id 必须是 multipartResolver 的原因\",\"DispatcherServlet 中部分 beanName是确定无法改变的：\",\"public static final String MULTIPART_RESOLVER_BEAN_NAME = \\\"multipartResolver\\\"; public static final String LOCALE_RESOLVER_BEAN_NAME = \\\"localeResolver\\\"; public static final String THEME_RESOLVER_BEAN_NAME = \\\"themeResolver\\\"; public static final String HANDLER_MAPPING_BEAN_NAME = \\\"handlerMapping\\\"; public static final String HANDLER_ADAPTER_BEAN_NAME = \\\"handlerAdapter\\\"; public static final String HANDLER_EXCEPTION_RESOLVER_BEAN_NAME = \\\"handlerExceptionResolver\\\"; public static final String REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME = \\\"viewNameTranslator\\\"; public static final String VIEW_RESOLVER_BEAN_NAME = \\\"viewResolver\\\"; public static final String FLASH_MAP_MANAGER_BEAN_NAME = \\\"flashMapManager\\\";\"]},\"223\":{\"h\":\"后台代码\",\"t\":[\"方法一：\",\"@PostMapping(\\\"/doUpload\\\") public String upload(@RequestParam(\\\"file\\\")CommonsMultipartFile file, HttpServletRequest request) throws IOException { //获取上传的文件名 String originalFilename = file.getOriginalFilename(); // 若为空就重定向 if (\\\"\\\".equals(originalFilename)){ return \\\"redirect:/upload\\\"; } //getServletContext方法需要servlet-api3.0版本以上 // 获取服务器端的路径 String realPath = request.getServletContext().getRealPath(\\\"/upload\\\"); // 创建指定的文件夹 File file1 = new File(realPath); if (!file1.exists()){ file1.mkdir(); } // 通过流读取文件并输出 InputStream inputStream = file.getInputStream(); assert originalFilename != null; FileOutputStream fileOutputStream = new FileOutputStream(new File(file1, originalFilename)); int len=0; byte[] buffer=new byte[1024]; while ((len=inputStream.read(buffer))!=-1){ fileOutputStream.write(buffer,0,len); fileOutputStream.flush(); } fileOutputStream.close(); inputStream.close(); return \\\"redirect:/upload\\\"; }\",\"方法二，调用 CommonsMultipartFile 的 transferTo 方法：\",\"@PostMapping(\\\"/doUpload2\\\") public String upload2(@RequestParam(\\\"file\\\")CommonsMultipartFile file, HttpServletRequest request) throws IOException { String realPath = request.getServletContext().getRealPath(\\\"/upload2\\\"); File file1 = new File(realPath); if (!file1.exists()){ file1.mkdir(); } file.transferTo(new File(file1+\\\"/\\\"+file.getOriginalFilename())); return \\\"redirect:/upload\\\"; }\"]},\"224\":{\"h\":\"下载\"},\"225\":{\"h\":\"前端代码\",\"t\":[\"<a href=\\\"${pageContext.request.contextPath}/download/doDownload\\\">download</a>\"]},\"226\":{\"h\":\"后台代码\",\"t\":[\"@RequestMapping(\\\"/doDownload\\\") public String doDownload(HttpServletResponse response, HttpServletRequest request) throws Exception{ String realPath = request.getServletContext().getRealPath(\\\"/upload\\\"); // 此处文件名应由前端传回指定 String fileName=\\\"sw.js\\\"; // 以下为设置response响应头 response.reset(); response.setCharacterEncoding(\\\"UTF-8\\\"); response.setContentType(\\\"multipart/form-data\\\"); response.setHeader(\\\"Content-Disposition\\\",\\\"attachment;fileName=\\\"+ URLEncoder.encode(fileName,\\\"UTF-8\\\")); // 获取文件 File file = new File(realPath, fileName); // 通过流读取文件 FileInputStream fileInputStream = new FileInputStream(file); ServletOutputStream outputStream = response.getOutputStream(); byte[] buffer = new byte[1024]; int index=0; while((index=fileInputStream.read(buffer))!=-1){ outputStream.write(buffer,0,index); outputStream.flush(); } outputStream.close(); fileInputStream.close(); return \\\"redirect:/download\\\"; }\"]},\"227\":{\"h\":\"注意事项\",\"t\":[\"使用 transferTo 方法前要先判断是否上传了文件，防止为空。\",\"Controller 中 @RequestMapping 的 url 最好要与表单中的 name 属性区别开。\"]},\"228\":{\"h\":\"拦截器\",\"t\":[\"拦截器是 AOP 思想的一种实践，是 SpringMVC 框架提供的，只会过滤 controller 请求。\"]},\"229\":{\"h\":\"创建拦截器\",\"t\":[\"要创建自定义拦截器，就要实现 HandlerInterceptor 接口并至少重写 preHandle 方法：\",\"public class Interceptor implements HandlerInterceptor { // preHandle返回值为true时放行，否则被拦截，相当于前置通知 // 以下是一个简单地登录验证 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { HttpSession session = request.getSession(); if (session.getAttribute(\\\"username\\\")!=null||request.getRequestURI().contains(\\\"login\\\")) { return true; } request.getRequestDispatcher(\\\"/WEB-INF/jsp/login.jsp\\\").forward(request,response); return false; } // 后置通知 @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\\\"after\\\"); } // 环绕通知 @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\\\"clean\\\"); } }\"]},\"230\":{\"h\":\"Spring 配置\",\"t\":[\"<mvc:interceptors> <mvc:interceptor> <!-- /**表示拦截一个请求及其后面的所有url，例如/admin/**拦截admin后的所有请求 --> <mvc:mapping path=\\\"/**\\\"/> <bean class=\\\"Interceptor.Interceptor\\\"/> </mvc:interceptor> </mvc:interceptors>\"]},\"231\":{\"h\":\"使用纯 JavaConfig 配置 SSM\"},\"232\":{\"h\":\"配置 DispatcherServlet 及 Filter\",\"t\":[\"通过继承 AbstractAnnotationConfigDispatcherServletInitializer 类并重写其中方法对应实现 web.xml 的功能：\",\"public class SpringInitializer extends AbstractAnnotationConfigDispatcherServletInitializer { // 此方法返回RootConfig // 一些公共的bean，如Services，Repository均在getRootConfigClasses返回的类中配置 @Override protected Class<?>[] getRootConfigClasses() { return null; } // 此方法返回SpringConfig // 每个DispatcherServlet的bean如Controller，ViewResolver,HandlerMapping等，均在getServletConfigClasses返回的类中配置 @Override protected Class<?>[] getServletConfigClasses() { return new Class<?>[]{Config.class}; } // 配置DispatcherServlet的mappingurl @Override protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } // 配置过滤器，但是尚不知晓如何指定url @Override protected Filter[] getServletFilters() { CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter(); characterEncodingFilter.setEncoding(\\\"UTF-8\\\"); characterEncodingFilter.setForceEncoding(true); return new Filter[]{characterEncodingFilter}; } }\"]},\"233\":{\"h\":\"配置SpringConfig\",\"t\":[\"通过实现 WebMvcConfigurer 接口，对应实现 mvc 标签的配置，重写的方法均为 mvc 配置：\",\"@Configuration @EnableWebMvc @ComponentScan(\\\"mapper\\\") @ComponentScan(\\\"service\\\") @ComponentScan(\\\"controller\\\") public class Config implements WebMvcConfigurer { // 配置c3p0数据源 @Bean public ComboPooledDataSource getComboPooledDataSource() throws PropertyVetoException { ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource(); comboPooledDataSource.setJdbcUrl(\\\"jdbc:mysql://localhost:3306/?serverTimezone=UTC\\\"); comboPooledDataSource.setDriverClass(\\\"com.mysql.cj.jdbc.Driver\\\"); comboPooledDataSource.setUser(\\\"root\\\"); comboPooledDataSource.setPassword(\\\"123456\\\"); return comboPooledDataSource; } // 配置SqlSessionFactory @Bean(\\\"sqlSessionFactory\\\") public SqlSessionFactoryBean getSqlSessionFactoryBean() throws PropertyVetoException { SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); // 设置数据源 sqlSessionFactoryBean.setDataSource(getComboPooledDataSource()); // 设置mybatis选项，在xml配置中，可以用configuration location指定mybatis-config.xml，或在Configuration中注入bean sqlSessionFactoryBean.setConfiguration(configuration()); return sqlSessionFactoryBean; } // 配置Mybatis-config中的setting属性 @Bean public org.apache.ibatis.session.Configuration configuration(){ org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration(); // 设置标准日志输出 configuration.setLogImpl(StdOutImpl.class); return configuration; } // 开启mapper层扫描，使用mapperScannerConfigurer后，不需要在mapper接口上添加@Repository注解，但是由于不是xml配置，不是实时的，所以IDEA在自动装配时会警告，忽略即可 @Bean public MapperScannerConfigurer mapperScannerConfigurer(){ MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer(); mapperScannerConfigurer.setBasePackage(\\\"mapper\\\"); mapperScannerConfigurer.setSqlSessionFactoryBeanName(\\\"sqlSessionFactory\\\"); return mapperScannerConfigurer; } // 配置事务管理器 @Bean public DataSourceTransactionManager dataSourceTransactionManager() throws PropertyVetoException { DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager(); dataSourceTransactionManager.setDataSource(getComboPooledDataSource()); return dataSourceTransactionManager; } // 配置视图解析器 @Bean public InternalResourceViewResolver internalResourceViewResolver(){ InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver(); internalResourceViewResolver.setPrefix(\\\"/WEB-INF/jsp/\\\"); internalResourceViewResolver.setSuffix(\\\".jsp\\\"); return internalResourceViewResolver; } // 配置mvc默认servlet，防止静态资源404 @Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) { configurer.enable(); } // 配置消息转换器 @Override public void configureMessageConverters(List<HttpMessageConverter<?>> converters) { converters.add(stringHttpMessageConverter()); } // 配置编码 @Bean public StringHttpMessageConverter stringHttpMessageConverter(){ return new StringHttpMessageConverter(UTF_8); } // 配置jackson消息转换器，虽然不配置仅靠stringHttpMessageConverter也没有乱码，但还是配置一下 @Bean public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(){ MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter(); Jackson2ObjectMapperFactoryBean jackson2ObjectMapperFactoryBean = jackson2ObjectMapperFactoryBean(); mappingJackson2HttpMessageConverter.setObjectMapper(jackson2ObjectMapperFactoryBean.getObject()); return mappingJackson2HttpMessageConverter; } // 配置jackson的ObjectMapperFactory，其中**setFeaturesToEnable**方法不可省略，否则在MappingJackson2HttpMessageConverter的setObjectMapper方法中会出现空引用 @Bean public Jackson2ObjectMapperFactoryBean jackson2ObjectMapperFactoryBean(){ Jackson2ObjectMapperFactoryBean jackson2ObjectMapperFactoryBean = new Jackson2ObjectMapperFactoryBean(); jackson2ObjectMapperFactoryBean.setFailOnEmptyBeans(false); // jackson2ObjectMapperFactoryBean.setIndentOutput(true); // jackson2ObjectMapperFactoryBean.setDateFormat(new SimpleDateFormat(\\\"MM/dd/yyyy\\\")); // jackson2ObjectMapperFactoryBean.setFeaturesToDisable( // com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); jackson2ObjectMapperFactoryBean.setFeaturesToEnable( com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS, com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES, com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT); jackson2ObjectMapperFactoryBean.afterPropertiesSet(); return jackson2ObjectMapperFactoryBean; } // 配置文件上传下载，id依然必须为multipartResolver @Bean(\\\"multipartResolver\\\") public CommonsMultipartResolver multipartResolver(){ CommonsMultipartResolver commonsMultipartResolver = new CommonsMultipartResolver(); commonsMultipartResolver.setDefaultEncoding(\\\"UTF-8\\\"); commonsMultipartResolver.setMaxUploadSize(10485760); return commonsMultipartResolver; } // 在Spring中注册拦截器 @Bean public Interceptor interceptor(){ return new Interceptor(); } // 添加拦截器到SpringMVC中 @Override public void addInterceptors(InterceptorRegistry registry) { // addPathPatterns添加要拦截的请求，excludePathPatterns添加放行的请求，参数都是String数组 registry.addInterceptor(interceptor()).addPathPatterns(\\\"/**\\\").excludePathPatterns(\\\"/css/**\\\"); } }\"]},\"234\":{\"h\":\"自定义拦截器\",\"t\":[\"简单的登录验证拦截器：\",\"public class Interceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { if (request.getSession().getAttribute(\\\"username\\\")!=null||request.getRequestURI().contains(\\\"login\\\")){ return true; } request.getRequestDispatcher(\\\"/WEB-INF/jsp/login.jsp\\\").forward(request,response); return false; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { } }\"]},\"235\":{\"h\":\"SSM 配置总结\",\"t\":[\"步骤：\",\"配置 DispatcherServlet 和 filter。\",\"配置数据源、SqlSessionFactory、Mapper 层自动扫描及 Mybatis 的属性。\",\"配置事务管理器。\",\"配置视图解析器。\",\"配置默认 servlet 过滤静态资源。\",\"配置文件上传和下载。\",\"配置消息转换器，防止 JSON 乱码。\",\"配置拦截器。\",\"注意事项\",\"要实现 SpringMVC，必须在 SpringConfig 类前添加 @EnableWebMvc 注解。\",\"要使用 AOP 需要在 SpringConfig 类前添加 @EnableAspectJAutoProxy 注解。\",\"注意数据源的各项参数名。\",\"在使用 AOP 时，可能出现直接在 @Before 中指定切点有效，而使用 @PointCut 指定切点并在 @Before 中引用无效、找不到切点问题，此时需要更换更高版本的 AOP 织入包。\",\"关于 @Repository 和 @Mapper 注解：\",\"使用 @mapper 后，不需要在 spring 配置中设置扫描地址，通过 mapper.xml 里面的 namespace 属性对应相关的 mapper 类，spring 将动态的生成 Bean 后注入到 ServiceImpl 中。\",\"@repository 则需要在 Spring 中配置扫描包地址，然后生成 dao 层的 bean，之后被注入到 ServiceImpl 中。\"]},\"236\":{\"h\":\"使用 JSON 传递数据\"},\"237\":{\"h\":\"JavaScript 中的 JSON 方法\",\"t\":[\"// 定义对象 let user = { name: 'ppg', age: 20, sex: 'boy', }; let json = JSON.stringify(user); //将对象转换为JSON表示 let object = JSON.parse(json); //从JSON解析出Object对象\"]},\"238\":{\"h\":\"jackson\"},\"239\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.11.2</version> </dependency>\"]},\"240\":{\"h\":\"Spring 配置\",\"t\":[\"在 Spring 中做出如下配置：\",\"<mvc:annotation-driven> <mvc:message-converters register-defaults=\\\"true\\\"> <bean class=\\\"org.springframework.http.converter.StringHttpMessageConverter\\\"> <constructor-arg value=\\\"UTF-8\\\"/> </bean> <bean class=\\\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\\\"> <property name=\\\"objectMapper\\\"> <bean class=\\\"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean\\\"> <property name=\\\"failOnEmptyBeans\\\" value=\\\"false\\\"/> </bean> </property> </bean> </mvc:message-converters> </mvc:annotation-driven>\"]},\"241\":{\"h\":\"使用 jackson\",\"t\":[\"要是用 jackson，需要首先通过构造函数构造一个 ObjectMapper 对象：\",\"ObjectMapper mapper = new ObjectMapper(); Friend friend = new Friend(\\\"yitian\\\", 25); // 写为字符串 String text = mapper.writeValueAsString(friend); // 写为文件 mapper.writeValue(new File(\\\"friend.json\\\"), friend); // 写为字节流 byte[] bytes = mapper.writeValueAsBytes(friend); System.out.println(text); // 从字符串中读取 Friend newFriend = mapper.readValue(text, Friend.class); // 从字节流中读取 newFriend = mapper.readValue(bytes, Friend.class); // 从文件中读取 newFriend = mapper.readValue(new File(\\\"friend.json\\\"), Friend.class); System.out.println(newFriend);\",\"示例：\",\"@RestController//@RestController=@Controller+@ResponseBody,不再经过视图解析器 public class JsonController { @RequestMapping(value = \\\"/json1\\\"/**, produces = \\\"application/json;charset=UTF-8\\\"-> 此段内容作用等同于在Spring中配置<mvc:message-converters>**/) public String json1() throws JsonProcessingException { ObjectMapper mapper=new ObjectMapper(); User user=new User(1,\\\"赵泽龙\\\",\\\"5937\\\"); return mapper.writeValueAsString(user); } @RequestMapping(value = \\\"/json2\\\") @CrossOrigin//允许跨域访问，由于浏览器禁止ajax跨域，通过此注解可以实现ajax跨域请求 public String json2() throws JsonProcessingException { ObjectMapper mapper=new ObjectMapper(); List<User> userList=new ArrayList<>(); User user=new User(1,\\\"赵泽龙\\\",\\\"5937\\\"); User user2=new User(2,\\\"赵泽龙\\\",\\\"5937\\\"); User user3=new User(3,\\\"赵泽龙\\\",\\\"5937\\\"); User user4=new User(4,\\\"赵泽龙\\\",\\\"5937\\\"); User user5=new User(5,\\\"赵泽龙\\\",\\\"5937\\\"); User user6=new User(6,\\\"赵泽龙\\\",\\\"5937\\\"); userList.add(user); userList.add(user2); userList.add(user3); userList.add(user4); userList.add(user5); userList.add(user6); // readValue用于将JSON字符串解析为简单Java对象 mapper.readValue(mapper.writeValueAsString(user2),User.class); String s = mapper.writeValueAsString(userList); System.out.println(s); // readTree用于解析JSON字符串为复杂集合List、Map等 JsonNode jsonNode = mapper.readTree(s); for (JsonNode node : jsonNode) { System.out.print(node.get(\\\"age\\\")); //asText方法会去掉引号 System.out.print(node.get(\\\"name\\\").asText()); System.out.println(node.get(\\\"tel\\\").asText()); } return mapper.writeValueAsString(userList); } @RequestMapping(\\\"/json3\\\") public String json3() throws JsonProcessingException { ObjectMapper mapper = new ObjectMapper(); //默认会解析为时间戳 Date date = new Date(); //使用ObjectMapper格式化,return date mapper.configure(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS,false); //自定义日期格式,return format SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); String format = simpleDateFormat.format(date); mapper.setDateFormat(simpleDateFormat); return mapper.writeValueAsString(date); } }\"]},\"242\":{\"h\":\"fastjson\"},\"243\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.47</version> </dependency>\"]},\"244\":{\"h\":\"Spring 配置\",\"t\":[\"FastJsonHttpMessageConverter 写与不写没区别(在基本使用上)，且若仅配置 FastJsonHttpMessageConverter 而不配置 StringHttpMessageConverter，会导致 JSON.toJSONString 方法返回的 JSON 字符串中包含转义反斜杠，需要前端 JavaScript 两次 JSON.parse() 才能获取到正常的 JSON 对象。\",\"<mvc:annotation-driven> <mvc:message-converters> <bean class=\\\"org.springframework.http.converter.StringHttpMessageConverter\\\"> <constructor-arg value=\\\"UTF-8\\\"/> </bean> <!-- <bean class=\\\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter\\\"> </bean> --> </mvc:message-converters> </mvc:annotation-driven>\"]},\"245\":{\"h\":\"使用 fastjson\",\"t\":[\"//Java对象转JSON字符串 System.out.println(\\\"userList to JSONString:\\\"+JSON.toJSONString(userList)); System.out.println(\\\"user to JSONString:\\\"+JSON.toJSONString(user)); //Java对象转JSON对象 JSONObject jsonObject=(JSONObject)JSON.toJSON(user2); System.out.println(\\\"Java Object to JSON Object:\\\"+jsonObject); //JSON字符串转Java对象 User temp=JSON.parseObject(JSON.toJSONString(user3),User.class); System.out.println(\\\"JSONString to Java Object:\\\"+temp); //JSON对象转Java对象 User user1 = JSON.toJavaObject(jsonObject, User.class); System.out.println(\\\"JSON Object to Java Object:\\\"+user1); //使用JSONArray JSONArray jsonArray = new JSONArray(); jsonArray.add(jsonObject); jsonArray.add(JSON.toJSON(user)); List<User> users = JSONArray.parseArray(jsonArray.toString(), User.class); users.forEach(System.out::println); System.out.println(jsonArray.toJSONString()); System.out.println(jsonArray.toString());\"]},\"246\":{\"h\":\"org.json:json\"},\"247\":{\"h\":\"相关依赖\",\"t\":[\"<dependency> <groupId>org.json</groupId> <artifactId>json</artifactId> <version>20190722</version> </dependency>\"]},\"248\":{\"h\":\"Spring 配置\",\"t\":[\"<mvc:annotation-driven> <mvc:message-converters register-defaults=\\\"true\\\"> <bean class=\\\"org.springframework.http.converter.StringHttpMessageConverter\\\"> <constructor-arg value=\\\"UTF-8\\\"/> </bean> </mvc:message-converters> </mvc:annotation-driven>\"]},\"249\":{\"h\":\"使用 org.json\",\"t\":[\"Student student = new Student(1, \\\"赵泽龙\\\"); //通过构造函数创建JSONObject JSONObject jsonObject = new JSONObject(student); System.out.println(\\\"id=\\\" + jsonObject.getInt(\\\"id\\\")); System.out.println(\\\"name=\\\"+jsonObject.getString(\\\"name\\\")); //通过put方法创建JSONObject JSONObject jsonObject2 = new JSONObject(); jsonObject2.put(\\\"id\\\",2); jsonObject2.put(\\\"name\\\", \\\"赵泽龙2\\\"); System.out.println(\\\"id=\\\" + jsonObject2.get(\\\"id\\\")); System.out.println(\\\"name=\\\"+jsonObject2.get(\\\"name\\\")); //通过put方法创建JSONArray JSONArray jsonArray = new JSONArray(); jsonArray.put(jsonObject); System.out.println(jsonArray.getJSONObject(0).toString()); //通过构造函数创建JSONArray ArrayList<Student> students = new ArrayList<>(); students.add(student); students.add(student); JSONArray jsonArray1 = new JSONArray(students); System.out.println(jsonArray1.toString());\"]},\"250\":{\"h\":\"各项依赖说明及IDEA开发注意事项\"},\"251\":{\"h\":\"全部依赖\",\"t\":[\"<dependencies> <!-- junit单元测试依赖 --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> <!-- lombok懒人依赖 --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.16.18</version> </dependency> <!-- servlet依赖，servlet-api已迁移到javax.servlet-api --> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>4.0.1</version> </dependency> <!-- jsp相关依赖，目前已迁移到javax.servlet.jsp-api --> <dependency> <groupId>javax.servlet.jsp</groupId> <artifactId>jsp-api</artifactId> <version>2.1</version> </dependency> <!-- 支持c标签等的依赖 --> <!-- 目前已发生迁移，groupId为javax.servlet.jsp.jstl，artifactId为jstl --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> <version>1.2</version> </dependency> <dependency> <groupId>javax.servlet.jsp.jstl</groupId> <artifactId>jstl-api</artifactId> <version>1.2</version> </dependency> <!-- spring依赖 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.2.9.RELEASE</version> </dependency> <!-- aop依赖 --> <dependency> <groupId>org.aspectj</groupId> <artifactId>aspectjweaver</artifactId> <version>1.9.6</version> </dependency> <!-- jackson依赖 --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.11.2</version> </dependency> <!-- fastjson依赖 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.47</version> </dependency> <!-- mysql连接驱动依赖 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.21</version> </dependency> <!-- c3p0数据源依赖 --> <dependency> <groupId>com.mchange</groupId> <artifactId>c3p0</artifactId> <version>0.9.5.5</version> </dependency> <!-- mybatis相关依赖 --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.6</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>2.0.6</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.3.3</version> </dependency> <!-- 文件上传、下载依赖 --> <dependency> <groupId>commons-fileupload</groupId> <artifactId>commons-fileupload</artifactId> <version>1.4</version> </dependency> </dependencies>\"]},\"252\":{\"h\":\"IDEA注意事项\",\"t\":[\"关于语言版本不停回溯到默认值问题：\",\"需要在 pom.xml 中指定：\",\"<properties> <java.version>1.8</java.version> </properties> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> </configuration> </plugin> </plugins> </build>\",\"代码没有问题但是运行 404、ClassNotFound 或者其他问题：\",\"在 Project Structure 的 Artifacts 中，在 WEB-INF 文件夹中创建 lib 文件夹并添加全部依赖。\",\"配置了 default handler 后静态资源依然 404：检查 out 文件夹。\"]},\"253\":{\"h\":\"Servlet\"},\"254\":{\"h\":\"实现 Servlet 的方法\",\"t\":[\"class implements Servlet：\",\"//Servlet的生命周期:从Servlet被创建到Servlet被销毁的过程 //一次创建，到处服务 //一个Servlet只会有一个对象，服务所有的请求 /* * 1.实例化（使用构造方法创建对象） * 2.初始化 执行init方法 * 3.服务 执行service方法 * 4.销毁 执行destroy方法 */ public class ServletDemo1 implements Servlet { //public ServletDemo1(){} //生命周期方法:当Servlet第一次被创建对象时执行该方法,该方法在整个生命周期中只执行一次 public void init(ServletConfig arg0) throws ServletException { System.out.println(\\\"=======init=========\\\"); } //生命周期方法:对客户端响应的方法,该方法会被执行多次，每次请求该servlet都会执行该方法 public void service(ServletRequest arg0, ServletResponse arg1) throws ServletException, IOException { System.out.println(\\\"hehe\\\"); } //生命周期方法:当Servlet被销毁时执行该方法 public void destroy() { System.out.println(\\\"******destroy**********\\\"); } //当停止tomcat时也就销毁的servlet。 public ServletConfig getServletConfig() { return null; } public String getServletInfo() { return null; } }\",\"extends GenericServlet：\",\"public class Servlet2 extends GenericServlet { @Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException { } }\",\"extends HttpServlet：\",\"public class HelloServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String method=req.getParameter(\\\"method\\\"); if (\\\"add\\\".equals(method)){ req.getSession().setAttribute(\\\"msg\\\",\\\"执行了add方法\\\"); } else if (\\\"delete\\\".equals(method)){ req.getSession().setAttribute(\\\"msg\\\",\\\"执行了delete方法\\\"); } else { req.getSession().setAttribute(\\\"msg\\\",\\\"鬼！\\\"); } req.getRequestDispatcher(\\\"/WEB-INF/jsp/test.jsp\\\").forward(req,resp); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req, resp); } }\"]},\"255\":{\"h\":\"SSM 框架整合\"},\"256\":{\"h\":\"配置 web.xml\",\"t\":[\"创建项目后，需要在 IDEA 中右击项目模块，选择 Add Framework Support 添加 web 支持 web.xml：配置 DispatcherServlet及CharacterEncodingFilter：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <servlet> <servlet-name>springmvc</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <init-param> <!-- 指定Spring xml配置文件 --> <param-name>contextConfigLocation</param-name> <param-value>classpath:beans.xml</param-value> </init-param> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>springmvc</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> <filter> <filter-name>filter</filter-name> <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> <init-param> <param-name>encoding</param-name> <param-value>UTF-8</param-value> </init-param> </filter> <filter-mapping> <filter-name>filter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> <session-config> <session-timeout>15</session-timeout> </session-config> </web-app>\",\"若仅 Spring 想通过 Config 方式配置，则需要在 servlet-class 后紧接着添加如下内容：\",\"<init-param> <param-name>contextClass</param-name> <!-- 默认是XmlWebApplicationContext，指定的是xml方式配置文件 --> <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value> </init-param> <init-param> <param-name>contextConfigLocation</param-name> <param-value>config.Config</param-value> </init-param>\"]},\"257\":{\"h\":\"配置 Spring\"},\"258\":{\"h\":\"配置数据源、注解支持、整合 Mybatis\",\"t\":[\"<!-- 开启Spring注解支持 --> <context:annotation-config/> <!-- 指定数据库配置文件 --> <context:property-placeholder location=\\\"classpath:db.properties\\\"/> <!-- 此处使用c3p0数据源 --> <bean class=\\\"com.mchange.v2.c3p0.ComboPooledDataSource\\\" id=\\\"dataSource\\\"> <property name=\\\"driverClass\\\" value=\\\"${driver}\\\"/> <property name=\\\"user\\\" value=\\\"${user}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> <property name=\\\"jdbcUrl\\\" value=\\\"${url}\\\"/> </bean> <!-- 整合Mybatis：配置SqlSessionFactory --> <bean class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\" id=\\\"sqlSessionFactory\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"/> <property name=\\\"configLocation\\\" value=\\\"classpath:mybatis-config.xml\\\"/> </bean> <!-- 开启自动扫描mapper接口 --> <!-- 通过MapperFactoryBean指定也可行，但是当mapper接口较多的时候要多次注册bean，且通过这种方式不需要在mapper接口上添加@Repository --> <bean class=\\\"org.mybatis.spring.mapper.MapperScannerConfigurer\\\"> <property name=\\\"sqlSessionFactoryBeanName\\\" value=\\\"sqlSessionFactory\\\"/> <property name=\\\"basePackage\\\" value=\\\"mapper\\\"/> </bean>\",\"关于c3p0数据源的注意事项\",\"c3p0 的用户名属性为 user，最开始在 properties 中配置为 username 时，即使通过 ${username} 并且显示取到了值但是仍然报错，修改为 user 后正常。\"]},\"259\":{\"h\":\"配置 service 层\",\"t\":[\"<!-- 开启组件自动扫描 --> <context:component-scan base-package=\\\"service\\\"/> <!-- 手动装配， 由于已经配置MapperScannerConfigurer扫描mapper接口，所以可以在ServiceImpl上添加@Service并在其中的mapper上使用@Autowired--> <bean class=\\\"service.impl.BookServiceImpl\\\" id=\\\"service\\\"> <property name=\\\"bookMapper\\\" ref=\\\"bookMapper\\\"/> </bean> <!-- 配置Spring事务管理器 --> <bean class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"/> </bean>\"]},\"260\":{\"h\":\"配置 mvc\",\"t\":[\"<!-- 开启mvc的注解驱动 --> <mvc:annotation-driven> <!-- 开启对jackson的乱码处理支持 --> <mvc:message-converters register-defaults=\\\"true\\\"> <bean class=\\\"org.springframework.http.converter.StringHttpMessageConverter\\\"> <constructor-arg value=\\\"UTF-8\\\"/> </bean> <bean class=\\\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\\\"> <property name=\\\"objectMapper\\\"> <bean class=\\\"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean\\\"> <property name=\\\"failOnEmptyBeans\\\" value=\\\"false\\\"/> </bean> </property> </bean> </mvc:message-converters> </mvc:annotation-driven> <!-- 开启默认servlet防止无法获取静态资源 --> <mvc:default-servlet-handler/> <!-- 开启controller层组件扫描 --> <context:component-scan base-package=\\\"controller\\\"/> <!-- 配置视图解析器 --> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/WEB-INF/jsp/\\\"/> <property name=\\\"suffix\\\" value=\\\".jsp\\\"/> </bean>\"]},\"261\":{\"h\":\"注解的属性\",\"t\":[\"注解的属性其实和类中定义的变量有异曲同工之处，只是注解中的变量都是成员变量（属性），并且注解中是没有方法的，只有成员变量，变量名就是使用注解括号中对应的参数名，变量返回值注解括号中对应参数类型。相信这会你应该会对上面的例子有一个更深的认识。而 @Repeatable 注解中的变量则类型则是对应 Annotation（接口）的泛型 Class。\",\"@Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface Repeatable { /** * Indicates the <em>containing annotation type</em> for the * repeatable annotation type. * @return the containing annotation type */ Class<? extends Annotation> value(); }\"]},\"262\":{\"h\":\"注解成员变量赋值\",\"t\":[\"@Documented @Inherited @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface MyTestAnnotation { String name() default \\\"mao\\\"; int age() default 18; } @MyTestAnnotation(name = \\\"father\\\",age = 50) public class Father { }\"]},\"263\":{\"h\":\"注解属性类型\",\"t\":[\"注解属性类型可以有以下列出的类型：\",\"基本数据类型。\",\"String。\",\"枚举类型。\",\"注解类型。\",\"Class 类型。\",\"以上类型的一维数组类型。\"]},\"264\":{\"h\":\"注解的本质\",\"t\":[\"注解的本质就是一个 Annotation 接口。\",\"/**Annotation接口源码*/ public interface Annotation { boolean equals(Object obj); int hashCode(); Class<? extends Annotation> annotationType(); }\",\"注解本身就是 Annotation 接口的子接口，也就是说注解中其实是可以有属性和方法，但是接口中的属性都是 static final 的，对于注解来说没什么意义，而我们定义接口的方法就相当于注解的属性，也就对应了前面说的为什么注解只有属性成员变量，其实他就是接口的方法，这就是为什么成员变量会有括号，不同于接口我们可以在注解的括号中给成员变量赋值。\"]},\"265\":{\"h\":\"使用注解进行参数配置\",\"t\":[\"假设银行有个转账业务，转账的限额可能会根据汇率的变化而变化，我们可以利用注解灵活配置转账的限额，而不用每次都去修改我们的业务代码。\",\"/**定义限额注解 * @author 16582*/ @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface BankTransferMoney { double maxMoney() default 10000; }\",\"/**转账处理业务类 * @author 16582*/ public class BankService { /** * @param money 转账金额 */ @BankTransferMoney(maxMoney = 15000) public static void transferMoney(double money){ System.out.println(processAnnotationMoney(money)); } private static String processAnnotationMoney(double money) { try { Method transferMoney = BankService.class.getDeclaredMethod(\\\"transferMoney\\\",double.class); boolean annotationPresent = transferMoney.isAnnotationPresent(BankTransferMoney.class); if(annotationPresent){ BankTransferMoney annotation = transferMoney.getAnnotation(BankTransferMoney.class); double l = annotation.maxMoney(); if(money>l){ return \\\"转账金额大于限额，转账失败\\\"; }else { return\\\"转账金额为:\\\"+money+\\\"，转账成功\\\"; } } } catch ( NoSuchMethodException e) { e.printStackTrace(); } return \\\"转账处理失败\\\"; } public static void main(String[] args){ transferMoney(10000); } }\"]},\"266\":{\"h\":\"内置注解\"},\"267\":{\"h\":\"@Override\",\"t\":[\"表示当前方法覆盖了父类的方法。\",\"此注释只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明。如果方法利用此注释类型进行注解但没有重写超类方法，则编译器会生成一条错误消息。\"]},\"268\":{\"h\":\"@Deprecated\",\"t\":[\"表示方法已经过时,方法上有横线，使用时会有警告。\",\"此注释可用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。在使用不被赞成的程序元素或在不被赞成的代码中执行重写时，编译器会发出警告。\"]},\"269\":{\"h\":\"@SuppressWarings\",\"t\":[\"用来抑制编译时的警告信息。与前两个注释有所不同，你需要添加一个参数才能正确使用，这些参数值都是已经定义好了的，我们选择性的使用就好了\",\"例如：\",\"@SuppressWarnings(value={“unchecked”, “deprecation”})\"]},\"270\":{\"h\":\"Class 对象\",\"t\":[\"public class Test1 { public static void main(String[] args) throws ClassNotFoundException { // 一个类在内存中只有一个Class对象 // 一个类被加载后，类的整个结构都会封装在Class对象中 // 方式一：通过对象.getClass()获得 User user = new User(); Class<? extends User> aClass1 = user.getClass(); System.out.println(aClass1.hashCode()); // 方式二：forName,适用于运行时动态获取Class对象 Class<?> aClass = Class.forName(\\\"reflection.entity.User\\\"); System.out.println(aClass.hashCode()); // 方式三：通过类名.Class Class<User> userClass = User.class; System.out.println(userClass.hashCode()); // 方式四：基本内置类型的包装类都有一个Type属性 Class<Integer> type = Integer.TYPE; System.out.println(type.getName()); } }\"]},\"271\":{\"h\":\"类加载器\",\"t\":[\"public class ClassLoaderTest { public static void main(String[] args) throws ClassNotFoundException { // 获取系统类的加载器 ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader(); System.out.println(systemClassLoader); // 获取系统类加载器的父类->扩展类加载器 ClassLoader parent = systemClassLoader.getParent(); System.out.println(parent); // 获取扩展类加载器的父类->根加载器(C++编写，获取为null) ClassLoader parent1 = parent.getParent(); System.out.println(parent1); Class<?> aClass = Class.forName(\\\"reflection.ClassLoaderTest\\\"); ClassLoader classLoader = aClass.getClassLoader(); System.out.println(classLoader); Class<?> aClass1 = Class.forName(\\\"java.lang.Object\\\"); ClassLoader classLoader1 = aClass1.getClassLoader(); System.out.println(classLoader1); // 获取系统类加载器可以加载的路径 String property = System.getProperty(\\\"java.class.path\\\"); System.out.println(property); } }\"]},\"272\":{\"h\":\"获取注解属性\",\"t\":[\"通过反射获取注解的属性。\",\"基本方法：\",\"/**是否存在对应 Annotation 对象*/ public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) { return GenericDeclaration.super.isAnnotationPresent(annotationClass); } /**获取 Annotation 对象*/ public <A extends Annotation> A getAnnotation(Class<A> annotationClass) { Objects.requireNonNull(annotationClass); return (A) annotationData().annotations.get(annotationClass); } /**获取所有 Annotation 对象数组*/ public Annotation[] getAnnotations() { return AnnotationParser.toArray(annotationData().annotations); }\",\"示例：\",\"提示\",\"在获取之前我们自定义的注解必须使用元注解 @Retention(RetentionPolicy.RUNTIME)。\",\"public class GetValueTest { public static void main(String[] args) throws Exception { Class<?> aClass = Class.forName(\\\"annotation.Test\\\"); MyTestAnnotation myTestAnnotation = aClass.getAnnotation(MyTestAnnotation.class); System.out.println(\\\"annotation.name==>\\\"+myTestAnnotation.name()); System.out.println(\\\"annotation.sex==>\\\"+myTestAnnotation.sex()); Field test = aClass.getDeclaredField(\\\"test\\\"); test.setAccessible(true); Age age = test.getAnnotation(Age.class); System.out.println(\\\"age.value==>\\\"+age.value()); Method show = aClass.getDeclaredMethod(\\\"show\\\", int.class); MethodAnnotation methodAnnotation = show.getAnnotation(MethodAnnotation.class); System.out.println(\\\"method name==>\\\"+methodAnnotation.methodName()); Parameter[] parameters = show.getParameters(); for (Parameter parameter : parameters) { Param param = parameter.getAnnotation(Param.class); System.out.println(param.value()); } java.lang.reflect.Constructor<?> declaredConstructor = aClass.getDeclaredConstructor(); Constructor constructor = declaredConstructor.getAnnotation(Constructor.class); System.out.println(constructor.constructor()); } } /** * @author 16582 */ @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @interface Age{ int value(); } /** * @author 16582 */ @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @interface MyTestAnnotation{ String name(); String sex(); } /** * @author 16582 */ @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @interface MethodAnnotation{ String methodName(); } /** * @author 16582 */ @Target(ElementType.CONSTRUCTOR) @Retention(RetentionPolicy.RUNTIME) @interface Constructor{ String constructor(); } /** * @author 16582 */ @Target(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME) @interface Param{ String value(); } @MyTestAnnotation(name = \\\"ppg\\\",sex = \\\"man\\\") class Test{ @Age(21) private String test; @MethodAnnotation(methodName = \\\"show\\\") public void show(@Param(\\\"show方法有一个a参数\\\")int a){ } @Constructor(constructor = \\\"Test的构造函数\\\") public Test() { } }\"]},\"273\":{\"h\":\"元注解\",\"t\":[\"元注解顾名思义我们可以理解为注解的注解，它是作用在注解中，方便我们使用注解实现想要的功能。元注解分别有 @Retention、 @Target、 @Document、 @Inherited 和 @Repeatable（JDK1.8 加入）五种。\"]},\"274\":{\"h\":\"@Retention\",\"t\":[\"Retention 英文意思有保留、保持的意思，它表示注解存在阶段是保留在源码（编译期），字节码（类加载）或者运行期（JVM 中运行）。在 @Retention 注解中使用枚举 RetentionPolicy来表示注解保留时期。\",\"/** * @author 16582 */ @Retention(RetentionPolicy.CLASS) @interface annotation1{ // 默认的保留策略，注解在class字节码文件中存在，但运行时无法获得 } /** * @author 16582 */ @Retention(RetentionPolicy.RUNTIME) @interface annotation2{ // 注解会在class字节码文件中存在，在运行时可以通过反射获取到 } /** * @author 16582 */ @Retention(RetentionPolicy.SOURCE) @interface annotation3{ //注解只存在于源码中，class字节码文件中不包含 }\"]},\"275\":{\"h\":\"@Target\",\"t\":[\"Target 的英文意思是目标，这也很容易理解，使用 @Target 元注解表示我们的注解作用的范围就比较具体了，可以是类，方法，方法参数变量等，同样也是通过枚举类 ElementType表达作用类型。\",\"@Target(ElementType.TYPE) @interface annotation4{ // 作用接口、类、枚举、注解 } @Target(ElementType.FIELD) @interface annotation5{ // 作用属性字段、枚举的常量 } @Target(ElementType.METHOD) @interface annotation6{ // 作用方法 } @Target(ElementType.PARAMETER) @interface annotation7{ // 作用方法参数 } @Target(ElementType.CONSTRUCTOR) @interface annotation8{ // 作用构造函数 } @Target(ElementType.LOCAL_VARIABLE) @interface annotation9{ // 作用局部变量 } @Target(ElementType.ANNOTATION_TYPE) @interface annotation10{ // 作用于注解 // @Retention注解中就使用该属性 } @Target(ElementType.PACKAGE) @interface annotation11{ // 作用于包 } @Target(ElementType.TYPE_PARAMETER) @interface annotation12{ // 作用于类型泛型，即泛型方法、泛型类、泛型接口 （jdk1.8加入） } @Target(ElementType.TYPE_USE) @interface annotation13{ // 可以用于标注任意类型除了 class （jdk1.8加入） }\"]},\"276\":{\"h\":\"@Document\",\"t\":[\"Document的英文意思是文档。它的作用是能够将注解中的元素包含到 Javadoc 中去。\"]},\"277\":{\"h\":\"@Inherited\",\"t\":[\"Inherited 的英文意思是继承，但是这个继承和我们平时理解的继承大同小异，一个被 @Inherited 注解了的注解修饰了一个父类，它的子类也会继承父类的注解。\",\"@Target(ElementType.TYPE) @Documented @Retention(RetentionPolicy.RUNTIME) @Inherited @interface InheritedTest{ } @InheritedTest class Father{ } class Son extends Father{ } public class MetaAnnotation { public static void main(String[] args) { Class<Son> sonClass = Son.class; Annotation[] annotations = sonClass.getAnnotations(); for (Annotation annotation : annotations) { System.out.println(annotation); } } }\"]},\"278\":{\"h\":\"@Repeatable\",\"t\":[\"Repeatable 的英文意思是可重复的。顾名思义说明被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。\",\"/** * 一个人喜欢玩游戏，他喜欢玩英雄联盟，绝地求生，极品飞车，尘埃4等， * 则我们需要定义一个人的注解， * 他属性代表喜欢玩游戏集合， * 一个游戏注解，游戏属性代表游戏名称 * @author 16582*/ @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @interface People { Game[] value() ; } /**游戏注解 * @author 16582*/ @Repeatable(People.class) @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @interface Game { String value() default \\\"\\\"; } /**玩游戏类*/ @Game(value = \\\"LOL\\\") @Game(value = \\\"PUBG\\\") @Game(value = \\\"NFS\\\") @Game(value = \\\"Dirt4\\\") class PlayGame { }\"]},\"279\":{\"h\":\"反射常用方法\",\"t\":[\"// 含包名 System.out.println(testClass.getName()); // 不含包名 System.out.println(testClass.getSimpleName()); // 获取类修饰符 // getModifiers返回一个int，使用Modifier类的方法可以进行判断 System.out.println(testClass.getModifiers()); System.out.println(Modifier.isPublic(testClass.getModifiers())); // 获取包信息 System.out.println(testClass.getPackage()); // 获取父类的class对象 System.out.println(testClass.getSuperclass()); // 获取接口信息，不包含父类实现的接口 for (Class<?> anInterface : testClass.getInterfaces()) { System.out.println(anInterface); } // 获取构造函数,只能获取到public修饰的构造函数。需要捕获NoSuchMethodException异常。 for (Constructor<?> constructor : testClass.getConstructors()) { System.out.println(constructor); } // 通过无参构造器创建对象，没有无参构造器会报错 User user = (User) aClass.newInstance(); System.out.println(user); // 有参构造器创建对象 Constructor<?> declaredConstructor = aClass.getDeclaredConstructor(String.class, int.class); Object ppg = declaredConstructor.newInstance(\\\"ppg\\\", 123); System.out.println(ppg); // 通过反射调用普通方法 // 通过反射获取一个方法 // 如果调用的是static方法，invoke()方法第一个参数就用null代替： Method getName = aClass.getDeclaredMethod(\\\"getName\\\"); Method getId = aClass.getMethod(\\\"getId\\\"); Object invoke = getName.invoke(ppg); Object invoke1 = getId.invoke(ppg); System.out.println(\\\"ppg==>\\\"+invoke+invoke1); // 通过反射设置属性 Field id = aClass.getDeclaredField(\\\"id\\\"); // 设置允许修改private属性 id.setAccessible(true); // 对象名，值 id.set(ppg,1); System.out.println(\\\"ppg==>\\\"+ppg); // 泛型 public void fx(Map<String, String> map, List<Boolean> booleans) { System.out.println(\\\"success\\\"); } Class<Fx> fxClass = Fx.class; Method fx = fxClass.getMethod(\\\"fx\\\", Map.class,List.class); // 获得泛型的参数类型 Type[] genericParameterTypes = fx.getGenericParameterTypes(); for (Type genericParameterType : genericParameterTypes) { System.out.println(\\\"泛型的参数类型：\\\"+genericParameterType); //泛型的参数类型是否等于参数化类型 if (genericParameterType instanceof ParameterizedType){ //getActualTypeArguments获得真实的参数类型信息 Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments(); for (Type actualTypeArgument : actualTypeArguments) { System.out.println(actualTypeArgument); } } }\"]},\"280\":{\"h\":\"Dubbo 配置规则\"},\"281\":{\"h\":\"配置覆盖优先级\",\"t\":[\"从 Dubbo 支持的配置来源说起，默认有 6 种配置来源：\",\"JVM System Properties：JVM -D 参数\",\"System environment：JVM 进程的环境变量\",\"Externalized Configuration：外部化配置，从配置中心读取\",\"Application Configuration：应用的属性配置，从 Spring 应用的 Environment 中提取 \\\"dubbo\\\" 打头的属性集。\",\"API、XML、注解等编程接口采集的配置可以被理解成配置来源的一种，是直接面向用户编程的配置采集方式。\",\"从 classpath 读取配置文件：dubbo.properties。\",\"从虚拟机参数到本地文件优先级依次降低\"]},\"282\":{\"h\":\"配置原则\",\"t\":[\"作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等。\",\"在 Provider 配置后，Consumer 不配置则会使用 Provider 的配置值，即 Provider 配置可以作为 Consumer 的缺省值。否则，Consumer 会使用 Consumer 端的全局设置，这对于 Provider 不可控的，并且往往是不合理的。\"]},\"283\":{\"h\":\"不同粒度配置的覆盖关系\",\"t\":[\"方法级优先，接口级次之，全局配置再次之。\",\"如果级别一样，则消费方优先，提供方次之。\"]},\"284\":{\"h\":\"配置加载流程\"},\"285\":{\"h\":\"各配置项、标签说明\"},\"286\":{\"h\":\"dubbo:application\",\"t\":[\"对应配置类org.apache.dubbo.config.ApplicationConfig\",\"属性：\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"name\",\"String\",\"必填\",\"当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样\",\"version\",\"String\",\"当前应用的版本\",\"owner\",\"String\",\"应用负责人，用于服务治理，请填写负责人公司邮箱前缀\",\"organization\",\"String\",\"组织名称(BU或部门)，用于注册中心区分服务来源，此配置项建议不要使用autoconfig，直接写死在配置中\",\"architecture\",\"String\",\"用于服务分层对应的架构。如，intl、china。不同的架构使用不同的分层。\",\"environment\",\"String\",\"应用环境，如：develop/test/product，不同环境使用不同的缺省值，以及作为只用于开发测试功能的限制条件\",\"compiler\",\"String\",\"Java字节码编译器，用于动态类的生成，可选：jdk或javassist\",\"javassist\",\"logger\",\"String\",\"日志输出方式，可选：slf4j,jcl,log4j,log4j2,jdk\",\"slf4j\"]},\"287\":{\"h\":\"dubbo:registry\",\"t\":[\"注册中心配置\",\"对应的配置类： org.apache.dubbo.config.RegistryConfig\",\"可以有多个\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"id\",\"string\",\"注册中心引用BeanId，可以在<dubbo:service registry=\\\"\\\">或<dubbo:reference registry=\\\"\\\">中引用此ID\",\"address\",\"string\",\"必填\",\"注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port，不同集群的注册中心，请配置多个dubbo:registry标签\",\"protocol\",\"string\",\"注册中心地址协议，支持dubbo, multicast, zookeeper, redis, consul(2.7.1), sofa(2.7.2), etcd(2.7.2), nacos(2.7.2)等协议\",\"dubbo\",\"port\",\"int\",\"注册中心缺省端口，当address没有带端口时使用此端口做为缺省值\",\"9090\",\"username\",\"string\",\"登录注册中心用户名，如果注册中心不需要验证可不填\",\"password\",\"string\",\"登录注册中心密码，如果注册中心不需要验证可不填\",\"transport\",\"string\",\"网络传输方式，可选mina,netty\",\"netty\",\"timeout\",\"int\",\"注册中心请求超时时间(毫秒)\",\"5000\",\"session\",\"int\",\"注册中心会话超时时间(毫秒)，用于检测提供者非正常断线后的脏数据，比如用心跳检测的实现，此时间就是心跳间隔，不同注册中心实现不一样。\",\"60000\",\"file\",\"string\",\"使用文件缓存注册中心地址列表及服务提供者列表，应用重启时将基于此文件恢复，注意：两个注册中心不能使用同一文件存储\",\"wait\",\"int\",\"停止时等待通知完成时间(毫秒)\",\"0\",\"check\",\"boolean\",\"注册中心不存在时，是否报错\",\"true\",\"register\",\"boolean\",\"是否向此注册中心注册服务，如果设为false，将只订阅，不注册\",\"true\",\"subscribe\",\"boolean\",\"是否向此注册中心订阅服务，如果设为false，将只注册，不订阅\",\"true\",\"dynamic\",\"boolean\",\"服务是否动态注册，如果设为false，注册后将显示为disable状态，需人工启用，并且服务提供者停止时，也不会自动取消注册，需人工禁用。\",\"true\",\"group\",\"string\",\"服务注册分组，跨组的服务不会相互影响，也无法相互调用，适用于环境隔离\",\"dubbo\",\"simplified\",\"boolean\",\"注册到注册中心的URL是否采用精简模式的（与低版本兼容）\",\"false\",\"extra-keys\",\"string\",\"在simplified=true时，extraKeys允许你在默认参数外将额外的key放到URL中，格式：“interface,key1,key2”。\"]},\"288\":{\"h\":\"dubbo:protocol\",\"t\":[\"服务提供者协议配置\",\"对应的配置类：org.apache.dubbo.config.ProtocolConfig\",\"可以有多个，在dubbo:service中通过protocol指定\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"id\",\"string\",\"协议BeanId，可以在<dubbo:service protocol=\\\"\\\">中引用此ID，如果ID不填，缺省和name属性值一样，重复则在name后加序号\",\"dubbo\",\"name\",\"string\",\"必填\",\"协议名称\",\"dubbo\",\"port\",\"int\",\"服务端口\",\"dubbo协议缺省端口为20880，rmi协议缺省端口为1099，http和hessian协议缺省端口为80；如果没有配置port，则自动采用默认端口，如果配置为**-1**，则会分配一个没有被占用的端口。\",\"host\",\"string\",\"自动查找本机IP\",\"threadpool\",\"string\",\"线程池类型，可选：fixed/cached\",\"fixed\",\"threads\",\"int\",\"服务线程池大小(固定大小)\",\"200\",\"iothreads\",\"int\",\"io线程池大小(固定大小)\",\"cpu个数+1\",\"payload\",\"int\",\"请求及响应数据包大小限制，单位：字节\",\"8388608(=8M)\",\"accepts\",\"int\",\"服务提供方最大可接受连接数\",\"0\",\"codec\",\"string\",\"协议编码方式\",\"dubbo\",\"serialization\",\"string\",\"协议序列化方式，当协议支持多种序列化方式时使用，比如：dubbo协议的dubbo,hessian2,java,compactedjava，以及http协议的json等\",\"dubbo协议缺省为hessian2，rmi协议缺省为java，http协议缺省为json\",\"accesslog\",\"string/boolean\",\"设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件\",\"path\",\"string\",\"提供者上下文路径，为服务path的前缀\",\"transporter\",\"string\",\"协议的服务端和客户端实现类型，比如：dubbo协议的mina,netty等，可以分拆为server和client配置\",\"dubbo协议缺省为netty\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"server\",\"string\",\"协议的服务器端实现类型，比如：dubbo协议的mina,netty等，http协议的jetty,servlet等\",\"dubbo协议缺省为netty，http协议缺省为servlet\",\"client\",\"string\",\"协议的客户端实现类型，比如：dubbo协议的mina,netty等\",\"dubbo协议缺省为netty\",\"dispatcher\",\"string\",\"协议的消息派发方式，用于指定线程模型，比如：dubbo协议的all, direct, message, execution, connection等\",\"dubbo协议缺省为all\",\"queues\",\"int\",\"线程池队列大小，当线程池满时，排队等待执行的队列大小，建议不要设置，当线程池满时应立即失败，重试其它服务提供机器，而不是排队，除非有特殊需求。\",\"0\",\"charset\",\"string\",\"序列化编码\",\"UTF-8\",\"buffer\",\"int\",\"网络读写缓冲区大小\",\"8192\",\"heartbeat\",\"int\",\"心跳间隔，对于长连接，当物理层断开时，比如拔网线，TCP的FIN消息来不及发送，对方收不到断开事件，此时需要心跳来帮助检查连接是否已断开\",\"0\",\"telnet\",\"string\",\"所支持的telnet命令，多个命令用逗号分隔\",\"register\",\"boolean\",\"该协议的服务是否注册到注册中心\",\"true\",\"contextpath\",\"string\",\"缺省为空串\"]},\"289\":{\"h\":\"dubbo:service\",\"t\":[\"服务提供者暴露服务配置\",\"对应的配置类：org.apache.dubbo.config.ServiceConfig\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"interface\",\"class\",\"必填\",\"服务接口名\",\"ref\",\"object\",\"必填\",\"服务对象实现引用\",\"version\",\"string\",\"可选\",\"服务版本，建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级\",\"0.0.0\",\"group\",\"string\",\"可选\",\"服务分组，当一个接口有多个实现，可以用分组区分\",\"path\",\"string\",\"可选\",\"服务路径 (注意：1.0不支持自定义路径，总是使用接口名，如果有1.0调2.0，配置服务路径可能不兼容)\",\"缺省为接口名\",\"delay\",\"int\",\"可选\",\"延迟注册服务时间(毫秒) ，设为-1时，表示延迟到Spring容器初始化完成时暴露服务\",\"0\",\"timeout\",\"int\",\"可选\",\"远程服务调用超时时间(毫秒)\",\"1000\",\"retries\",\"int\",\"可选\",\"远程服务调用重试次数，不包括第一次调用，不需要重试请设为0\",\"2\",\"connections\",\"int\",\"可选\",\"对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数\",\"100\",\"loadbalance\",\"string\",\"可选\",\"负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用\",\"random\",\"async\",\"boolean\",\"可选\",\"是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程\",\"false\",\"local\",\"class/boolean\",\"可选\",\"设为true，表示使用缺省代理类名，即：接口名 + Local后缀，已废弃，请使用stub\",\"false\",\"stub\",\"class/boolean\",\"可选\",\"设为true，表示使用缺省代理类名，即：接口名 + Stub后缀，服务接口客户端本地代理类名，用于在客户端执行本地逻辑，如本地缓存等，该本地代理类的构造函数必须允许传入远程代理对象，构造函数如：public XxxServiceStub(XxxService xxxService)\",\"false\",\"mock\",\"class/boolean\",\"可选\",\"设为true，表示使用缺省Mock类名，即：接口名 + Mock后缀，服务接口调用失败Mock实现类，该Mock类必须有一个无参构造函数，与Local的区别在于，Local总是被执行，而Mock只在出现非业务异常(比如超时，网络异常等)时执行，Local在远程调用之前执行，Mock在远程调用后执行。\",\"false\",\"token\",\"string/boolean\",\"可选\",\"令牌验证，为空表示不开启，如果为true，表示随机生成动态令牌，否则使用静态令牌，令牌的作用是防止消费者绕过注册中心直接访问，保证注册中心的授权功能有效，如果使用点对点调用，需关闭令牌功能\",\"false\",\"registry\",\"string\",\"可选\",\"向指定注册中心注册，在多个注册中心时使用，值为dubbo:registry的id属性，多个注册中心ID用逗号分隔，如果不想将该服务注册到任何registry，可将值设为N/A\",\"缺省向所有registry注册\",\"provider\",\"string\",\"可选\",\"指定provider，值为dubbo:provider的id属性\",\"缺省使用第一个provider配置\",\"deprecated\",\"boolean\",\"可选\",\"服务是否过时，如果设为true，消费方引用时将打印服务过时警告error日志\",\"false\",\"dynamic\",\"boolean\",\"可选\",\"服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，并且服务提供者停止时，也不会自动取消册，需人工禁用。\",\"true\",\"accesslog\",\"string/boolean\",\"可选\",\"设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件\",\"false\",\"owner\",\"string\",\"可选\",\"服务负责人，用于服务治理，请填写负责人公司邮箱前缀\",\"document\",\"string\",\"可选\",\"服务文档URL\",\"weight\",\"int\",\"可选\",\"服务权重\",\"executes\",\"int\",\"可选\",\"服务提供者每服务每方法最大可并行执行请求数\",\"0\",\"proxy\",\"string\",\"可选\",\"生成动态代理方式，可选：jdk/javassist\",\"javassist\",\"cluster\",\"string\",\"可选\",\"集群方式，可选：failover/failfast/failsafe/failback/forking\",\"failover\",\"filter\",\"string\",\"可选\",\"服务提供方远程调用过程拦截器名称，多个名称用逗号分隔\",\"default\",\"listener\",\"string\",\"可选\",\"服务提供方导出服务监听器名称，多个名称用逗号分隔\",\"default\",\"protocol\",\"string\",\"可选\",\"使用指定的协议暴露服务，在多协议时使用，值为dubbo:protocol的id属性，多个协议ID用逗号分隔\",\"layer\",\"string\",\"可选\",\"服务提供者所在的分层。如：biz、dao、intl:web、china:acton。\",\"register\",\"boolean\",\"可选\",\"该协议的服务是否注册到注册中心\",\"true\"]},\"290\":{\"h\":\"dubbo:monitor\",\"t\":[\"监控中心配置。\",\"对应的配置类：org.apache.dubbo.config.MonitorConfig\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"protocol\",\"string\",\"可选\",\"监控中心协议，如果为protocol=“registry”，表示从注册中心发现监控中心地址，否则直连监控中心。\",\"dubbo\",\"address\",\"string\",\"可选\",\"直连监控中心服务器地址，address=“10.20.130.230:12080”\",\"N/A\"]},\"291\":{\"h\":\"dubbo:reference\",\"t\":[\"服务消费者引用服务配置。\",\"对应的配置类：org.apache.dubbo.config.ReferenceConfig\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"缺省值\",\"id\",\"string\",\"必填\",\"服务引用BeanId\",\"interface\",\"class\",\"必填\",\"服务接口名\",\"version\",\"string\",\"可选\",\"服务版本，与服务提供者的版本一致\",\"group\",\"string\",\"可选\",\"服务分组，当一个接口有多个实现，可以用分组区分，必需和服务提供方一致\",\"timeout\",\"long\",\"可选\",\"服务方法调用超时时间(毫秒)\",\"缺省使用dubbo:consumer的timeout\",\"retries\",\"int\",\"可选\",\"远程服务调用重试次数，不包括第一次调用，不需要重试请设为0\",\"缺省使用dubbo:consumer的retries\",\"connections\",\"int\",\"可选\",\"对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数\",\"缺省使用dubbo:consumer的connections\",\"loadbalance\",\"string\",\"可选\",\"负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用\",\"缺省使用dubbo:consumer的loadbalance\",\"async\",\"boolean\",\"可选\",\"是否异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程\",\"缺省使用dubbo:consumer的async\",\"generic\",\"boolean\",\"可选\",\"是否缺省泛化接口，如果为泛化接口，将返回GenericService\",\"缺省使用dubbo:consumer的generic\",\"check\",\"boolean\",\"可选\",\"启动时检查提供者是否存在，true报错，false忽略\",\"缺省使用dubbo:consumer的check\",\"url\",\"string\",\"可选\",\"点对点直连服务提供者地址，将绕过注册中心\",\"stub\",\"class/boolean\",\"可选\",\"服务接口客户端本地代理类名，用于在客户端执行本地逻辑，如本地缓存等，该本地代理类的构造函数必须允许传入远程代理对象，构造函数如：public XxxServiceLocal(XxxService xxxService)\",\"mock\",\"class/boolean\",\"可选\",\"服务接口调用失败Mock实现类名，该Mock类必须有一个无参构造函数，与Local的区别在于，Local总是被执行，而Mock只在出现非业务异常(比如超时，网络异常等)时执行，Local在远程调用之前执行，Mock在远程调用后执行。\",\"cache\",\"string/boolean\",\"可选\",\"以调用参数为key，缓存返回结果，可选：lru, threadlocal, jcache等\",\"validation\",\"boolean\",\"可选\",\"是否启用JSR303标准注解验证，如果启用，将对方法参数上的注解进行校验\",\"proxy\",\"boolean\",\"可选\",\"选择动态代理实现策略，可选：javassist, jdk\",\"javassist\",\"client\",\"string\",\"可选\",\"客户端传输类型设置，如Dubbo协议的netty或mina。\",\"registry\",\"string\",\"可选\",\"从指定注册中心注册获取服务列表，在多个注册中心时使用，值为dubbo:registry的id属性，多个注册中心ID用逗号分隔\",\"缺省将从所有注册中心获服务列表后合并结果\",\"owner\",\"string\",\"可选\",\"调用服务负责人，用于服务治理，请填写负责人公司邮箱前缀\",\"actives\",\"int\",\"可选\",\"每服务消费者每服务每方法最大并发调用数\",\"0\",\"cluster\",\"string\",\"可选\",\"集群方式，可选：failover/failfast/failsafe/failback/forking\",\"failover\",\"filter\",\"string\",\"可选\",\"服务消费方远程调用过程拦截器名称，多个名称用逗号分隔\",\"default\",\"listener\",\"string\",\"可选\",\"服务消费方引用服务监听器名称，多个名称用逗号分隔\",\"default\",\"layer\",\"string\",\"可选\",\"服务调用者所在的分层。如：biz、dao、intl:web、china:acton。\",\"init\",\"boolean\",\"可选\",\"是否在afterPropertiesSet()时饥饿初始化引用，否则等到有人注入或引用该实例时再初始化。\",\"false\",\"protocol\",\"string\",\"可选\",\"属性只调用指定协议的服务提供方，其它协议忽略。\",\"对应URL参数\"]},\"292\":{\"h\":\"dubbo:config-center\",\"t\":[\"配置中心。\",\"对应的配置类：org.apache.dubbo.config.ConfigCenterConfig\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"protocol\",\"string\",\"可选\",\"使用哪个配置中心：apollo、zookeeper、nacos等。 以zookeeper为例 1. 指定protocol，则address可以简化为127.0.0.1:2181； 2. 不指定protocol，则address取值为zookeeper://127.0.0.1:2181\",\"zookeeper\",\"address\",\"string\",\"必填\",\"配置中心地址。 取值参见protocol说明\",\"highest-priority\",\"boolean\",\"可选\",\"来自配置中心的配置项具有最高优先级，即会覆盖本地配置项。\",\"true\",\"namespace\",\"string\",\"可选\",\"通常用于多租户隔离，实际含义视具体配置中心而不同。 如： zookeeper - 环境隔离，默认值dubbo； apollo - 区分不同领域的配置集合，默认使用dubbo和application\",\"dubbo\",\"cluster\",\"string\",\"可选\",\"含义视所选定的配置中心而不同。 如Apollo中用来区分不同的配置集群\",\"group\",\"string\",\"可选\",\"含义视所选定的配置中心而不同。 nacos - 隔离不同配置集 zookeeper - 隔离不同配置集\",\"dubbo\",\"check\",\"boolean\",\"可选\",\"当配置中心连接失败时，是否终止应用启动。\",\"true\",\"config-file\",\"string\",\"可选\",\"全局级配置文件所映射到的key zookeeper - 默认路径/dubbo/config/dubbo/dubbo.properties apollo - dubbo namespace中的dubbo.properties键\",\"dubbo.properties\",\"timeout\",\"integer\",\"获取配置的超时时间\",\"3000ms\",\"username\",\"string\",\"如果配置中心需要做校验，用户名 Apollo暂未启用\",\"password\",\"string\",\"如果配置中心需要做校验，密码 Apollo暂未启用\",\"parameters\",\"Map<string, string>\",\"扩展参数，用来支持不同配置中心的定制化配置参数\",\"include-spring-env\",\"boolean\",\"可选\",\"使用Spring框架时支持，为true时，会自动从Spring Environment中读取配置。 默认依次读取 key为dubbo.properties的配置 key为dubbo.properties的PropertySource\",\"false\"]},\"293\":{\"h\":\"dubbo:provider\",\"t\":[\"服务提供者缺省值配置。\",\"对应的配置类： org.apache.dubbo.config.ProviderConfig。\",\"同时该标签为 <dubbo:service> 和 <dubbo:protocol> 标签的缺省值设置。\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"id\",\"string\",\"可选\",\"协议BeanId，可以在<dubbo:service proivder=\\\"\\\">中引用此ID\",\"dubbo\",\"protocol\",\"string\",\"可选\",\"协议名称\",\"dubbo\",\"host\",\"string\",\"可选\",\"服务主机名，多网卡选择或指定VIP及域名时使用，为空则自动查找本机IP，建议不要配置，让Dubbo自动获取本机IP\",\"自动查找本机IP\",\"threads\",\"int\",\"可选\",\"服务线程池大小(固定大小)\",\"200\",\"payload\",\"int\",\"可选\",\"请求及响应数据包大小限制，单位：字节\",\"8388608(=8M)\",\"path\",\"string\",\"可选\",\"提供者上下文路径，为服务path的前缀\",\"server\",\"string\",\"可选\",\"协议的服务器端实现类型，比如：dubbo协议的mina,netty等，http协议的jetty,servlet等\",\"dubbo协议缺省为netty，http协议缺省为servlet\",\"client\",\"string\",\"可选\",\"协议的客户端实现类型，比如：dubbo协议的mina,netty等\",\"dubbo协议缺省为netty\",\"codec\",\"string\",\"可选\",\"协议编码方式\",\"dubbo\",\"serialization\",\"string\",\"可选\",\"协议序列化方式，当协议支持多种序列化方式时使用，比如：dubbo协议的dubbo,hessian2,java,compactedjava，以及http协议的json,xml等\",\"dubbo协议缺省为hessian2，rmi协议缺省为java，http协议缺省为json\",\"default\",\"boolean\",\"可选\",\"是否为缺省协议，用于多协议\",\"false\",\"filter\",\"string\",\"可选\",\"服务提供方远程调用过程拦截器名称，多个名称用逗号分隔\",\"listener\",\"string\",\"可选\",\"服务提供方导出服务监听器名称，多个名称用逗号分隔\",\"threadpool\",\"string\",\"可选\",\"线程池类型，可选：fixed/cached/limit(2.5.3以上)/eager(2.6.x以上)\",\"fixed\",\"accepts\",\"int\",\"可选\",\"服务提供者最大可接受连接数\",\"0\",\"version\",\"string\",\"可选\",\"服务版本，建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级\",\"0.0.0\",\"group\",\"string\",\"可选\",\"服务分组，当一个接口有多个实现，可以用分组区分\",\"delay\",\"int\",\"可选\",\"延迟注册服务时间(毫秒)- ，设为-1时，表示延迟到Spring容器初始化完成时暴露服务\",\"0\",\"timeout\",\"int\",\"可选\",\"远程服务调用超时时间(毫秒)\",\"1000\",\"retries\",\"int\",\"可选\",\"远程服务调用重试次数，不包括第一次调用，不需要重试请设为0\",\"2\",\"connections\",\"int\",\"可选\",\"对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数\",\"0\",\"loadbalance\",\"string\",\"可选\",\"负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用\",\"random\",\"async\",\"boolean\",\"可选\",\"是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程\",\"false\",\"stub\",\"boolean\",\"可选\",\"设为true，表示使用缺省代理类名，即：接口名 + Local后缀。\",\"false\",\"mock\",\"boolean\",\"可选\",\"设为true，表示使用缺省Mock类名，即：接口名 + Mock后缀。\",\"false\",\"token\",\"boolean\",\"可选\",\"令牌验证，为空表示不开启，如果为true，表示随机生成动态令牌\",\"false\",\"registry\",\"string\",\"可选\",\"向指定注册中心注册，在多个注册中心时使用，值为dubbo:registry的id属性，多个注册中心ID用逗号分隔，如果不想将该服务注册到任何registry，可将值设为N/A\",\"缺省向所有registry注册\",\"dynamic\",\"boolean\",\"可选\",\"服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，并且服务提供者停止时，也不会自动取消册，需人工禁用。\",\"true\",\"accesslog\",\"string/boolean\",\"可选\",\"设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件\",\"false\",\"owner\",\"string\",\"可选\",\"服务负责人，用于服务治理，请填写负责人公司邮箱前缀\",\"document\",\"string\",\"可选\",\"服务文档URL\",\"weight\",\"int\",\"可选\",\"服务权重\",\"executes\",\"int\",\"可选\",\"服务提供者每服务每方法最大可并行执行请求数\",\"0\",\"actives\",\"int\",\"可选\",\"每服务消费者每服务每方法最大并发调用数\",\"0\",\"proxy\",\"string\",\"可选\",\"生成动态代理方式，可选：jdk/javassist\",\"javassist\",\"cluster\",\"string\",\"可选\",\"集群方式，可选：failover/failfast/failsafe/failback/forking\",\"failover\",\"deprecated\",\"boolean\",\"可选\",\"服务是否过时，如果设为true，消费方引用时将打印服务过时警告error日志\",\"false\",\"queues\",\"int\",\"可选\",\"线程池队列大小，当线程池满时，排队等待执行的队列大小，建议不要设置，当线程池满时应立即失败，重试其它服务提供机器，而不是排队，除非有特殊需求。\",\"0\",\"charset\",\"string\",\"可选\",\"序列化编码\",\"UTF-8\",\"buffer\",\"int\",\"可选\",\"网络读写缓冲区大小\",\"8192\",\"iothreads\",\"int\",\"可选\",\"IO线程池，接收网络读写中断，以及序列化和反序列化，不处理业务，业务线程池参见threads配置，此线程池和CPU相关，不建议配置。\",\"CPU + 1\",\"telnet\",\"string\",\"可选\",\"所支持的telnet命令，多个命令用逗号分隔\",\"dubbo:service\",\"String\",\"可选\",\"缺省为空串\",\"layer\",\"string\",\"可选\",\"服务提供者所在的分层。如：biz、dao、intl:web、china:acton。\"]},\"294\":{\"h\":\"dubbo:consumer\",\"t\":[\"服务消费者缺省值配置。\",\"配置类： org.apache.dubbo.config.ConsumerConfig\",\"同时该标签为 <dubbo:reference> 标签的缺省值设置。\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"timeout\",\"int\",\"可选\",\"远程服务调用超时时间(毫秒)\",\"1000\",\"retries\",\"int\",\"可选\",\"远程服务调用重试次数，不包括第一次调用，不需要重试请设为0,仅在cluster为failback/failover时有效\",\"2\",\"loadbalance\",\"string\",\"可选\",\"负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用\",\"random\",\"async\",\"boolean\",\"可选\",\"是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程\",\"false\",\"connections\",\"int\",\"可选\",\"每个服务对每个提供者的最大连接数，rmi、http、hessian等短连接协议支持此配置，dubbo协议长连接不支持此配置\",\"100\",\"generic\",\"boolean\",\"可选\",\"是否缺省泛化接口，如果为泛化接口，将返回GenericService\",\"false\",\"check\",\"boolean\",\"可选\",\"启动时检查提供者是否存在，true报错，false忽略\",\"true\",\"proxy\",\"string\",\"可选\",\"生成动态代理方式，可选：jdk/javassist\",\"javassist\",\"owner\",\"string\",\"可选\",\"调用服务负责人，用于服务治理，请填写负责人公司邮箱前缀\",\"actives\",\"int\",\"可选\",\"每服务消费者每服务每方法最大并发调用数\",\"0\",\"cluster\",\"string\",\"可选\",\"集群方式，可选：failover/failfast/failsafe/failback/forking\",\"failover\",\"filter\",\"string\",\"可选\",\"服务消费方远程调用过程拦截器名称，多个名称用逗号分隔\",\"listener\",\"string\",\"可选\",\"服务消费方引用服务监听器名称，多个名称用逗号分隔\",\"registry\",\"string\",\"可选\",\"向指定注册中心注册，在多个注册中心时使用，值为dubbo:registry的id属性，多个注册中心ID用逗号分隔，如果不想将该服务注册到任何registry，可将值设为N/A\",\"缺省向所有registry注册\",\"layer\",\"string\",\"可选\",\"服务调用者所在的分层。如：biz、dao、intl:web、china:acton。\",\"init\",\"boolean\",\"可选\",\"是否在afterPropertiesSet()时饥饿初始化引用，否则等到有人注入或引用该实例时再初始化。\",\"false\",\"cache\",\"string/boolean\",\"可选\",\"以调用参数为key，缓存返回结果，可选：lru, threadlocal, jcache等\",\"validation\",\"boolean\",\"可选\",\"是否启用JSR303标准注解验证，如果启用，将对方法参数上的注解进行校验\"]},\"295\":{\"h\":\"dubbo:module\",\"t\":[\"模块信息配置。\",\"对应的配置类 org.apache.dubbo.config.ModuleConfig\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"name\",\"string\",\"必填\",\"当前模块名称，用于注册中心计算模块间依赖关系\",\"version\",\"string\",\"可选\",\"当前模块的版本\",\"owner\",\"string\",\"可选\",\"模块负责人，用于服务治理，请填写负责人公司邮箱前缀\",\"organization\",\"string\",\"可选\",\"组织名称(BU或部门)，用于注册中心区分服务来源，此配置项建议不要使用autoconfig，直接写死在配置中，比如china,intl,itu,crm,asc,dw,aliexpress等\"]},\"296\":{\"h\":\"dubbo:method\",\"t\":[\"方法级配置。\",\"对应的配置类： org.apache.dubbo.config.MethodConfig。\",\"同时该标签为 <dubbo:service> 或 <dubbo:reference> 的子标签，用于控制到方法级。\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"默认值\",\"name\",\"string\",\"必填\",\"方法名\",\"timeout\",\"int\",\"可选\",\"方法调用超时时间(毫秒)\",\"缺省为的timeout\",\"retries\",\"int\",\"可选\",\"远程服务调用重试次数，不包括第一次调用，不需要重试请设为0\",\"缺省为dubbo:reference的retries\",\"loadbalance\",\"string\",\"可选\",\"负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用\",\"缺省为的loadbalance\",\"async\",\"boolean\",\"可选\",\"是否异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程\",\"缺省为dubbo:reference的async\",\"sent\",\"boolean\",\"可选\",\"异步调用时，标记sent=true时，表示网络已发出数据\",\"true\",\"actives\",\"int\",\"可选\",\"每服务消费者最大并发调用限制\",\"0\",\"executes\",\"int\",\"可选\",\"每服务每方法最大使用线程数限制- -，此属性只在dubbo:method作为dubbo:service子标签时有效\",\"0\",\"deprecated\",\"boolean\",\"可选\",\"服务方法是否过时，此属性只在dubbo:method作为dubbo:service子标签时有效\",\"false\",\"sticky\",\"boolean\",\"可选\",\"设置true 该接口上的所有方法使用同一个provider.如果需要更复杂的规则，请使用路由\",\"false\",\"return\",\"boolean\",\"可选\",\"方法调用是否需要返回值,async设置为true时才生效，如果设置为true，则返回future，或回调onreturn等方法，如果设置为false，则请求发送成功后直接返回Null\",\"true\",\"oninvoke\",\"String\",\"可选\",\"方法执行前拦截\",\"onreturn\",\"String\",\"可选\",\"方法执行返回后拦截\",\"onthrow\",\"String\",\"可选\",\"方法执行有异常拦截\",\"cache\",\"string/boolean\",\"可选\",\"以调用参数为key，缓存返回结果，可选：lru, threadlocal, jcache等\",\"validation\",\"boolean\",\"可选\",\"是否启用JSR303标准注解验证，如果启用，将对方法参数上的注解进行校验\"]},\"297\":{\"h\":\"dubbo:argument\",\"t\":[\"方法参数配置。\",\"对应的配置类： org.apache.dubbo.config.ArgumentConfig。\",\"该标签为 <dubbo:method> 的子标签，用于方法参数的特征描述\",\"属性\",\"类型\",\"是否必填\",\"描述\",\"index\",\"int\",\"必填\",\"参数索引\",\"type\",\"String\",\"与index二选一\",\"通过参数类型查找参数的index\",\"callback\",\"boolean\",\"可选\",\"参数是否为callback接口，如果为callback，服务提供方将生成反向代理，可以从服务提供方反向调用消费方，通常用于事件推送.\"]},\"298\":{\"h\":\"环境准备\"},\"299\":{\"h\":\"注册中心 ZooKeeper\",\"t\":[\"下载地址：ZooKeeper\",\"下载完成后解压，在 conf 目录下有 zoo.cfg 文件，其中保存着 ZooKeeper 的配置，例如端口号等，这里我们使用默认配置，端口号为 2181。\",\"Windows 环境下双击 bin 目录下的 zkServer.cmd 即可开启 ZooKeeper。\"]},\"300\":{\"h\":\"Dubbo 可视化面板\",\"t\":[\"下载地址：Dubbo-Admin。\",\"以下命令需要配置 Maven 环境变量及 Node.js 环境变量：\",\"默认分支最新已经切换为 Vue 前后端分离版，master-0.2.0 分支仍然是不分离版，此处方便起见使用不分离版本，如果要使用前后端分离，则将后台打包后启动，在前端中运行 npm install 下载依赖然后运行 npm run dev 启动前端，访问对应端口即可。\",\"进入 dubbo-admin 目录中，运行 mvn package 命令，生成一个 target 文件夹，使用 java -jar 命令运行其中 jar 包即可。\",\"进入 dubbo-monitor-simple 文件夹，运行 mvn package 命令生成 target 文件夹，解压其中生成的压缩包，进入解压后的目录，其中 config 文件中的配置文件配置了相关端口等，可自行修改，这里使用默认即可，进入 bin 目录运行 start.bat 即可。\"]},\"301\":{\"h\":\"完善此前例子的配置\",\"t\":[\"这里都使用 Apache Dubbo。\"]},\"302\":{\"h\":\"服务提供者\",\"t\":[\"@Configuration @EnableDubbo(scanBasePackages = \\\"service.impl\\\") public class ProviderConfiguration { @Bean public ApplicationConfig applicationConfig(){ ApplicationConfig applicationConfig = new ApplicationConfig(); applicationConfig.setName(\\\"user-service-provider\\\"); applicationConfig.setVersion(\\\"1.0\\\"); applicationConfig.setOwner(\\\"PPG\\\"); applicationConfig.setOrganization(\\\"BBZL\\\"); applicationConfig.setEnvironment(\\\"test\\\"); return applicationConfig; } @Bean public RegistryConfig registryConfig(){ RegistryConfig registryConfig = new RegistryConfig(); registryConfig.setId(\\\"ppg\\\"); registryConfig.setAddress(\\\"localhost\\\"); registryConfig.setPort(2181); registryConfig.setProtocol(\\\"zookeeper\\\"); registryConfig.setTimeout(10000); registryConfig.setCheck(false); return registryConfig; } @Bean public ProtocolConfig protocolConfig(){ ProtocolConfig protocolConfig = new ProtocolConfig(); protocolConfig.setId(\\\"PPG\\\"); protocolConfig.setName(\\\"dubbo\\\"); protocolConfig.setPort(20880); protocolConfig.setHost(\\\"localhost\\\"); return protocolConfig; } }\",\"@DubboService(delay = -1,loadbalance = \\\"roundrobin\\\",registry = \\\"ppg\\\",protocol = \\\"PPG\\\",version = \\\"1.0\\\",weight = 2) public class UserServiceImpl implements IUserService { @Override public Integer getAge(User user) { Calendar birthday = Calendar.getInstance(); birthday.setTime(user.getBirthday()); Calendar now= Calendar.getInstance(); return now.get(Calendar.YEAR) - birthday.get(Calendar.YEAR); } }\"]},\"303\":{\"h\":\"服务消费者\",\"t\":[\"@Configuration @EnableDubbo(scanBasePackages = \\\"service\\\") @ComponentScan(basePackages = \\\"service\\\") public class ConsumerConfiguration { @Bean public ApplicationConfig applicationConfig(){ ApplicationConfig applicationConfig = new ApplicationConfig(); applicationConfig.setName(\\\"user-service-consumer\\\"); applicationConfig.setVersion(\\\"1.0\\\"); applicationConfig.setOwner(\\\"PPG\\\"); applicationConfig.setOrganization(\\\"BBZL\\\"); applicationConfig.setEnvironment(\\\"test\\\"); return applicationConfig; } @Bean public RegistryConfig registryConfig(){ RegistryConfig registryConfig = new RegistryConfig(); registryConfig.setId(\\\"ppg007\\\"); registryConfig.setAddress(\\\"localhost\\\"); registryConfig.setPort(2181); registryConfig.setProtocol(\\\"zookeeper\\\"); registryConfig.setTimeout(10000); registryConfig.setCheck(false); return registryConfig; } }\",\"@Service public class UserServiceConsumerImpl implements IUserServiceConsumer{ private IUserService userService; @DubboReference(version = \\\"1.0\\\",timeout = 1000,retries = 5,loadbalance = \\\"roundrobin\\\",check = false) public void setUserService(IUserService userService) { this.userService = userService; } @Override public void demo() { User user = new User(); Calendar instance = Calendar.getInstance(); instance.set(Calendar.YEAR,2000); Date bir = instance.getTime(); user.setBirthday(bir); System.out.println(userService.getAge(user)); } }\"]},\"304\":{\"h\":\"Dubbo 高可用\"},\"305\":{\"h\":\"注册中心宕机\",\"t\":[\"zookeeper 注册中心宕机，还可以消费 dubbo 暴露的服务。\",\"健壮性：\",\"监控中心宕掉不影响使用，只是丢失部分采样数据。\",\"数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务。\",\"注册中心对等集群，任意一台宕掉后，将自动切换到另一台。\",\"注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯。\",\"服务提供者无状态，任意一台宕掉后，不影响使用。\",\"服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复。\",\"dubbo 直连：\",\"指定 reference 的 url 属性为服务提供者的注册 url 即可绕过注册中心直接调用。\"]},\"306\":{\"h\":\"负载均衡\",\"t\":[\"默认均衡策略为随机请求。\"]},\"307\":{\"h\":\"Random LoadBalance 基于权重的随机负载均衡机制\",\"t\":[\"随机，按权重设置随机概率。 在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。\"]},\"308\":{\"h\":\"RoundRobin LoadBalance 基于权重的轮询负载均衡机制\",\"t\":[\"轮循，按公约后的权重设置轮循比率。 存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。\"]},\"309\":{\"h\":\"LeastActive LoadBalance 最少活跃数负载均衡机制\"},\"310\":{\"h\":\"ConsistentHash LoadBalance 一致性 hash 负载均衡机制\",\"t\":[\"一致性 Hash，相同参数的请求总是发到同一提供者。 当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。\"]},\"311\":{\"h\":\"服务降级\",\"t\":[\"在 dubbo-admin 面板中为对应消费者选择相应操作\",\"屏蔽：\",\"所有请求返回为 null。\",\"容错：\",\"出错返回空对象。\"]},\"312\":{\"h\":\"服务容错\"},\"313\":{\"h\":\"集群容错\",\"t\":[\"Failover Cluster：\",\"失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=“2” 来设置重试次数(不含第一次)。\",\"Failfast Cluster：\",\"快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。\",\"Failsafe Cluster：\",\"失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。\",\"Failback Cluster：\",\"失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。\",\"Forking Cluster：\",\"并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=“2” 来设置最大并行数。\",\"Broadcast Cluster：\",\"广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。\",\"具体选择使用 cluster 属性传入即可。\"]},\"314\":{\"h\":\"Spring 整合 Dubbo\",\"t\":[\"实际开发中往往存在很多接口，Dubbo 通过动态代理为接口生成代理对象，并在调用时利用 Netty 发送请求获取结果，调用的是服务提供者的接口实现类，因此消费者与提供者是面向接口交互的，为了开发方便，避免同一个接口在生产者消费者中多次重复定义的情况，将共用的接口、实体类全部放在一个工程中，并通过 Maven 管理在生产者消费者中引用。\"]},\"315\":{\"h\":\"定义接口模块\",\"t\":[\"导入依赖\",\"<dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.18</version> </dependency>\",\"定义一个实体类\",\"@Data @AllArgsConstructor @NoArgsConstructor @Accessors(chain = true) public class User implements Serializable { static final long serialVersionUID = 114514L; private Integer id; private String username; private String password; private Date birthday; }\",\"定义两个接口，一个由生产者实现，一个由消费者实现\",\"public interface IUserService { /** * 获取用户年龄 * @param user user 对象 * @return 年龄 */ Integer getAge(User user); }\",\"public interface IUserServiceConsumer { /** * 消费者调用提供者方法输出结果 */ void demo(); }\"]},\"316\":{\"h\":\"定义服务提供者\"},\"317\":{\"h\":\"导入依赖，引入 API 接口模块及 Dubbo\",\"t\":[\"依赖问题：\",\"当前 Maven 仓库中包含 com.alibaba.dubbo 以及 org.apache.dubbo。\",\"当引用阿里巴巴的 Dubbo 依赖时，需要再引入 Netty，且如果要使用 ZooKeeper 还要引入 ZooKeeper 依赖，这样引入 curator-framework 一个依赖即可：\",\"<dependency> <artifactId>UserService-API</artifactId> <groupId>org.example</groupId> <version>1.0-SNAPSHOT</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>dubbo</artifactId> <version>2.6.10</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-framework</artifactId> <version>5.1.0</version> </dependency>\",\"当引用 Apache 的 Dubbo 时，不需要再引入 Netty 但要引入 ZooKeeper，Apache为我们提供了一个集成依赖：dubbo-dependencies-zookeeper：\",\"<dependency> <artifactId>UserService-API</artifactId> <groupId>org.example</groupId> <version>1.0-SNAPSHOT</version> </dependency> <!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo --> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo</artifactId> <version>2.7.13</version> </dependency> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo-dependencies-zookeeper</artifactId> <version>2.7.13</version> <type>pom</type> </dependency>\",\"如果使用了阿里巴巴 Dubbo 同时使用了 Apache 的集成依赖，要再引入 Netty：\",\"<dependency> <groupId>io.netty</groupId> <artifactId>netty-all</artifactId> <version>4.1.55.Final</version> </dependency>\",\"如果使用了 Apache 的 Dubbo 同时使用了 curator-framework，要再引入 curator-recipes。\",\"<dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-recipes</artifactId> <version>5.2.0</version> </dependency>\",\"由于 curator-recipes 中包含了 curator-framework，所以可以不引入 curator-framework。\",\"Dubbo 中包含了 Spring 所以不需要显式引入 Spring。\",\"实现接口\",\"public class UserServiceImpl implements IUserService { @Override public Integer getAge(User user) { Calendar birthday = Calendar.getInstance(); birthday.setTime(user.getBirthday()); Calendar now= Calendar.getInstance(); return now.get(Calendar.YEAR) - birthday.get(Calendar.YEAR); } }\"]},\"318\":{\"h\":\"使用 xml 配置 Spring 并启动\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:dubbo=\\\"http://dubbo.apache.org/schema/dubbo\\\" xmlns=\\\"http://www.springframework.org/schema/beans\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\\\"> <dubbo:application name=\\\"user-service-provider\\\"/> <dubbo:registry address=\\\"127.0.0.1:2181\\\" protocol=\\\"zookeeper\\\"/> <dubbo:protocol name=\\\"dubbo\\\" port=\\\"8848\\\"/> <bean id=\\\"userService\\\" class=\\\"service.impl.UserServiceImpl\\\"> </bean> <dubbo:monitor protocol=\\\"registry\\\"/> <dubbo:service interface=\\\"service.IUserService\\\" ref=\\\"userService\\\"/> </beans>\",\"public class Main { public static void main(String[] args) throws IOException { ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); classPathXmlApplicationContext.start(); System.in.read(); } }\"]},\"319\":{\"h\":\"注解配置（2.6.3 版本以上）\",\"t\":[\"定义properties文件，内容就是xml的内容\",\"dubbo.application.name=user-service-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880\",\"启动类\",\"public class Main { public static void main(String[] args) throws IOException { AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(ProviderConfiguration.class); annotationConfigApplicationContext.start(); System.in.read(); } }\",\"引用阿里巴巴dubbo时：\",\"配置类\",\"@Configuration//com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo @EnableDubbo(scanBasePackages = \\\"service.impl\\\") @PropertySource(\\\"classpath:dubbo-provider.properties\\\") public class ProviderConfiguration { }\",\"接口实现类\",\"@Service//com.alibaba.dubbo.config.annotation.Service public class UserServiceImpl implements IUserService { @Override public Integer getAge(User user) { Calendar birthday = Calendar.getInstance(); birthday.setTime(user.getBirthday()); Calendar now= Calendar.getInstance(); return now.get(Calendar.YEAR) - birthday.get(Calendar.YEAR); } }\",\"引入Apache dubbo时：\",\"配置类\",\"@Configuration //引入的是org.apache.dubbo.config.spring.context.annotation.EnableDubbo @EnableDubbo(scanBasePackages = \\\"service.impl\\\") @PropertySource(\\\"classpath:dubbo-provider.properties\\\") public class ProviderConfiguration { }\",\"接口实现类\",\"使用DubboService注解\",\"@DubboService public class UserServiceImpl implements IUserService { @Override public Integer getAge(User user) { Calendar birthday = Calendar.getInstance(); birthday.setTime(user.getBirthday()); Calendar now= Calendar.getInstance(); return now.get(Calendar.YEAR) - birthday.get(Calendar.YEAR); } }\"]},\"320\":{\"h\":\"定义消费者\"},\"321\":{\"h\":\"导入依赖\",\"t\":[\"依赖关系与生产者相同\"]},\"322\":{\"h\":\"使用 xml 配置 Spring 并调用\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:dubbo=\\\"http://dubbo.apache.org/schema/dubbo\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\\\"> <dubbo:application name=\\\"user-service-consumer\\\"/> <dubbo:registry address=\\\"zookeeper://127.0.0.1:2181\\\"/> <dubbo:reference interface=\\\"service.IUserService\\\" id=\\\"userService\\\"/> <!--直连--> <dubbo:monitor address=\\\"localhost:8888\\\"/> <!-- <dubbo:monitor protocol=\\\"registry\\\"/>--> <context:component-scan base-package=\\\"service\\\"/> <context:annotation-config/> </beans>\",\"接口实现类\",\"@Service//spring public class UserServiceConsumerImpl implements IUserServiceConsumer{ private IUserService userService; @Autowired//会报错但是没问题 public void setUserService(IUserService userService) { this.userService = userService; } @Override public void demo() { User user = new User(); Calendar instance = Calendar.getInstance(); instance.set(Calendar.YEAR,2000); Date bir = instance.getTime(); user.setBirthday(bir); System.out.println(userService.getAge(user)); } }\",\"启动类\",\"public class Main { public static void main(String[] args) throws IOException { ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); classPathXmlApplicationContext.start(); IUserServiceConsumer bean = classPathXmlApplicationContext.getBean(IUserServiceConsumer.class); bean.demo(); System.in.read(); } }\"]},\"323\":{\"h\":\"使用注解配置\",\"t\":[\"启动类：\",\"public class Main { public static void main(String[] args) throws IOException { AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(ConsumerConfiguration.class); IUserServiceConsumer serviceConsumer = annotationConfigApplicationContext.getBean(IUserServiceConsumer.class); serviceConsumer.demo(); System.in.read(); } }\",\"properties文件\",\"dubbo.application.name=user-service-consumer dubbo.registry.address=zookeeper://127.0.0.1:2181\",\"使用阿里巴巴dubbo\",\"配置类\",\"@Configuration @PropertySource(\\\"classpath:dubbo-consumer.properties\\\") @EnableDubbo(scanBasePackages = \\\"service\\\") @ComponentScan(basePackages = \\\"service\\\") public class ConsumerConfiguration { }\",\"消费者接口实现类\",\"@Service//spring public class UserServiceConsumerImpl implements IUserServiceConsumer{ private IUserService userService; @Reference//dubbo public void setUserService(IUserService userService) { this.userService = userService; } @Override public void demo() { User user = new User(); Calendar instance = Calendar.getInstance(); instance.set(Calendar.YEAR,2000); Date bir = instance.getTime(); user.setBirthday(bir); System.out.println(userService.getAge(user)); } }\",\"使用Apache dubbo\",\"配置类\",\"@Configuration @PropertySource(\\\"classpath:dubbo-consumer.properties\\\") @EnableDubbo(scanBasePackages = \\\"service\\\")//org.apache.dubbo.config.spring.context.annotation.EnableDubbo @ComponentScan(basePackages = \\\"service\\\") public class ConsumerConfiguration { }\",\"消费者接口实现类\",\"@Service public class UserServiceConsumerImpl implements IUserServiceConsumer{ private IUserService userService; @DubboReference public void setUserService(IUserService userService) { this.userService = userService; } @Override public void demo() { User user = new User(); Calendar instance = Calendar.getInstance(); instance.set(Calendar.YEAR,2000); Date bir = instance.getTime(); user.setBirthday(bir); System.out.println(userService.getAge(user)); } }\"]},\"324\":{\"h\":\"整合 SpringBoot\"},\"325\":{\"h\":\"导入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <dependency> <artifactId>UserService-API</artifactId> <groupId>org.example</groupId> <version>1.0-SNAPSHOT</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo-spring-boot-starter</artifactId> <version>2.7.8</version> </dependency> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo-dependencies-zookeeper</artifactId> <version>2.7.8</version> <type>pom</type> </dependency>\"]},\"326\":{\"h\":\"服务提供者\",\"t\":[\"编写配置文件：\",\"spring: application: name: UserService-Provider-SpringBoot dubbo: application: name: user-service-provider-spring-boot version: 1.0 owner: PPG organization: BBZL environment: test registry: address: 127.0.0.1 protocol: zookeeper id: ppg port: 2181 check: false timeout: 10000 protocol: name: dubbo port: 8848 id: PPG host: localhost monitor: protocol: registry\",\"编写接口实现类：\",\"@Service @DubboService(delay = -1,loadbalance = \\\"roundrobin\\\",registry = \\\"ppg\\\",protocol = \\\"PPG\\\",version = \\\"1.0\\\",weight = 2) public class UserServiceImpl implements IUserService { @Override public Integer getAge(User user) { Calendar birthday = Calendar.getInstance(); birthday.setTime(user.getBirthday()); Calendar now= Calendar.getInstance(); return now.get(Calendar.YEAR) - birthday.get(Calendar.YEAR); } }\",\"主启动类上添加 @EnableDubbo。\"]},\"327\":{\"h\":\"服务消费者\",\"t\":[\"编写配置文件：\",\"spring: application: name: UserService-Consumer-SpringBoot server: port: 9999 dubbo: application: name: user-service-consumer-spring-boot version: 1.0 owner: PPG organization: BBZL environment: test registry: address: 127.0.0.1 port: 2181 protocol: zookeeper id: ppg007 timeout: 10000 check: false monitor: protocol: registry\",\"编写消费者接口实现类：\",\"@Service public class UserServiceConsumer implements IUserServiceConsumer { private IUserService userService; @DubboReference(version = \\\"1.0\\\",timeout = 1000,retries = 5,loadbalance = \\\"roundrobin\\\",check = false) public void setUserService(IUserService userService) { this.userService = userService; } @Override public void demo() { } public String getUserDetail() throws JsonProcessingException { ObjectMapper objectMapper = new ObjectMapper(); Calendar instance = Calendar.getInstance(); instance.set(Calendar.YEAR,2000); User user = new User(); user.setId(1) .setUsername(\\\"ppg\\\") .setPassword(\\\"123\\\") .setBirthday(instance.getTime()); Integer age = userService.getAge(user); HashMap<String, Object> hashMap = new HashMap<>(2); hashMap.put(\\\"user\\\",user); hashMap.put(\\\"age\\\",age); return objectMapper.writeValueAsString(hashMap); } }\",\"编写controller：\",\"@RestController public class UserController { private UserServiceConsumer userServiceConsumer; @Autowired public void setUserServiceConsumer(UserServiceConsumer userServiceConsumer) { this.userServiceConsumer = userServiceConsumer; } @RequestMapping(\\\"/userDetail\\\") public String userDetail() throws JsonProcessingException { return userServiceConsumer.getUserDetail(); } }\",\"主启动类上添加 @EnableDubbo。\"]},\"328\":{\"h\":\"Dubbo 的几个组成部分\",\"t\":[\"服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。\",\"服务消费者（Consumer）: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。\",\"注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。\",\"监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。\"]},\"329\":{\"h\":\"缓冲流\"},\"330\":{\"h\":\"字节流\",\"t\":[\"//创建文件对象 File in = new File(PATH_PREFIX + \\\"1.jpg\\\"); File out = new File(PATH_PREFIX + \\\"3.jpg\\\"); //创建节点流 FileInputStream fileInputStream = new FileInputStream(in); FileOutputStream fileOutputStream = new FileOutputStream(out); //创建缓冲流 BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream); BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream); byte[] buffer = new byte[1024]; int len; //读取、写入 while ((len=bufferedInputStream.read(buffer))!=-1){ bufferedOutputStream.write(buffer,0,len); //flush()方法刷新缓冲区 } //关闭流，先开后关 bufferedOutputStream.close(); bufferedInputStream.close(); fileOutputStream.close(); fileInputStream.close();\"]},\"331\":{\"h\":\"字符流\",\"t\":[\"File in = new File(PATH_PREFIX + \\\"1.txt\\\"); File out = new File(PATH_PREFIX + \\\"2.txt\\\"); FileReader fileReader = new FileReader(in); FileWriter fileWriter = new FileWriter(out); BufferedReader bufferedReader = new BufferedReader(fileReader); BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); // 方式一 // char[] buffer=new char[1024]; // int len; // while ((len=bufferedReader.read(buffer))!=-1){ // bufferedWriter.write(buffer,0,len); // } // 方式二 String buffer; while ((buffer=bufferedReader.readLine())!=null){ //不包含换行符 bufferedWriter.write(buffer); // 使用newLine方法换行或拼接转义字符换行 // bufferedWriter.newLine(); } bufferedWriter.close(); bufferedReader.close(); fileWriter.close(); fileReader.close();\"]},\"332\":{\"h\":\"转换流\",\"t\":[\"File in = new File(PATH_PREFIX + \\\"1.txt\\\"); File out = new File(PATH_PREFIX + \\\"2.txt\\\"); FileInputStream fileInputStream = new FileInputStream(in); FileOutputStream fileOutputStream = new FileOutputStream(out); // 指定字节流和字符集 InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8); OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, \\\"GBK\\\"); char[] buffer=new char[1024]; int len; while ((len=inputStreamReader.read(buffer))!=-1){ outputStreamWriter.write(new String(buffer,0,len)); } outputStreamWriter.close(); inputStreamReader.close(); fileInputStream.close();\"]},\"333\":{\"h\":\"数据流\",\"t\":[\"DataOutputStream dataOutputStream = new DataOutputStream(new FileOutputStream(PATH_PREFIX + \\\"3.txt\\\")); dataOutputStream.writeUTF(\\\"PPG\\\"); dataOutputStream.flush(); dataOutputStream.writeBoolean(true); dataOutputStream.flush(); dataOutputStream.writeDouble(1.1); dataOutputStream.flush(); dataOutputStream.close(); DataInputStream dataInputStream = new DataInputStream(new FileInputStream(PATH_PREFIX + \\\"3.txt\\\")); System.out.println(dataInputStream.readUTF()); System.out.println(dataInputStream.readBoolean()); System.out.println(dataInputStream.readDouble()); dataInputStream.close();\"]},\"334\":{\"h\":\"对象流\",\"t\":[\"ObjectOutputStream 和 ObjectInputStream。\",\"不能序列化 static 和 transient 修饰的变量，且序列化、反序列化的类必须实现序列化接口。\",\"Person person = new Person(); person.setName(\\\"PPG\\\"); person.setAge(21); person.setSex(\\\"male\\\"); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(PATH_PREFIX + \\\"person\\\")); objectOutputStream.writeObject(person); objectOutputStream.flush(); objectOutputStream.close(); ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(PATH_PREFIX + \\\"person\\\")); Person readObject = (Person) objectInputStream.readObject(); System.out.println(readObject); objectOutputStream.flush(); objectOutputStream.close();\",\"Person 类：\",\"public class Person implements Serializable { //表明类的不同版本间的兼容性，不指定就是Java运行时环境自动生成，若类实例变量做出了修改，这个值可能会变，建议显式指定。 public static final long serialVersionUID = 41241252L; private String name; private String sex; private Integer age; @Override public String toString() { return \\\"Person{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", sex='\\\" + sex + '\\\\'' + \\\", age=\\\" + age + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Person person = (Person) o; if (!name.equals(person.name)) return false; if (!sex.equals(person.sex)) return false; return age.equals(person.age); } @Override public int hashCode() { int result = name.hashCode(); result = 31 * result + sex.hashCode(); result = 31 * result + age.hashCode(); return result; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public Person() { } }\",\"进行反序列化时，jvm 将传进字节流的序列化 ID 与本地实体类的序列化 ID 比较如果相同则可以进行反序列化，否则异常。\"]},\"335\":{\"h\":\"打印流\",\"t\":[\"PrintStream PrintWriter PrintWriter printWriter = new PrintWriter(new FileWriter(PATH_PREFIX + \\\"3.txt\\\")); printWriter.print(PATH_PREFIX); printWriter.close(); System.setOut(new PrintStream(PATH_PREFIX+\\\"3.txt\\\")); for (int i = 0; i < 100; i++) { System.out.println(i); }\"]},\"336\":{\"h\":\"随机存取文件流\",\"t\":[\"多线程断点下载。\",\"r：以只读方式打开。\",\"rw：读写。\",\"rwd：读写、同步文件内容的更新。\",\"rws：读写、同步文件内容和元数据的更新。\",\"RandomAccessFile rw = new RandomAccessFile(PATH_PREFIX + \\\"rand.txt\\\", \\\"rw\\\"); rw.writeBoolean(true); //指定写入位置 rw.seek(0); rw.writeChar(97); rw.close(); RandomAccessFile r = new RandomAccessFile(PATH_PREFIX + \\\"rand.txt\\\", \\\"r\\\"); r.seek(1); System.out.println(r.readBoolean()); r.seek(0); System.out.println(r.readChar()); r.close();\"]},\"337\":{\"h\":\"节点流\"},\"338\":{\"h\":\"使用字符输入流 FileReader 访问文件\",\"t\":[\"使用无参 read() 方法：\",\"File file = new File(\\\"D:\\\\\\\\Javaweb\\\\\\\\Java-Basic\\\\\\\\IO\\\\\\\\src\\\\\\\\test.json\\\"); try (FileReader fileReader = new FileReader(file)) {//这种写法不需要在finally中关闭FileReader int data; while ((data = fileReader.read()) != -1) {//读到-1表示文件结束 System.out.print(((char) data)); } } catch (IOException e) { e.printStackTrace(); }\",\"注意\",\"如果创建 FileReader 不在 try 括号内，则要在 finally 中关闭流，且创建过程要使用 try...catch 包裹，防止抛出异常后不关闭流。\",\"使用有参 read() 方法，传入一个 char 数组：\",\"File file = new File(\\\"D:\\\\\\\\Javaweb\\\\\\\\Java-Basic\\\\\\\\IO\\\\\\\\src\\\\\\\\test.json\\\"); try (FileReader fileReader = new FileReader(file)){ char[] buffer=new char[1000]; int data; while ((data=fileReader.read(buffer))!=-1){ //写法一：直接输出char数组，注意遍历的终点是read方法的返回值 //如果最后一次读取的字符内容无法填充满缓冲数组，缺少的部分仍然保存上次读出的结果 // for (int i = 0; i < data; i++) { // System.out.print(buffer[i]); // } //写法二：使用String有参构造输出String，第一个参数是char数组，后两个参数分别是希望获取的数组的起点和终点 System.out.println(new String(buffer, 0, data)); } } catch (IOException e) { e.printStackTrace(); }\"]},\"339\":{\"h\":\"使用字符输出流FileWriter输出到文件\",\"t\":[\"对应文件可以不存在\",\"覆盖原内容\",\"File file = new File(PATH_PREFIX + \\\"out.txt\\\"); try (FileWriter fileWriter = new FileWriter(file)) { fileWriter.write(\\\"Hello\\\\nWorld\\\"); } catch (IOException e) { e.printStackTrace(); }\",\"在原内容后添加\",\"File file = new File(PATH_PREFIX + \\\"out.txt\\\"); try (FileWriter fileWriter = new FileWriter(file,true)) { fileWriter.write(\\\"Hello\\\\nWorld\\\"); } catch (IOException e) { e.printStackTrace(); }\"]},\"340\":{\"h\":\"使用字节输入输出流复制图片\",\"t\":[\"File in = new File(PATH_PREFIX + \\\"1.jpg\\\"); File out = new File(PATH_PREFIX + \\\"2.jpg\\\"); FileInputStream fileInputStream = new FileInputStream(in); FileOutputStream fileOutputStream = new FileOutputStream(out); byte[] buffer = new byte[100]; while (fileInputStream.read(buffer) !=-1){ fileOutputStream.write(buffer); } fileOutputStream.close(); fileInputStream.close();\"]},\"341\":{\"h\":\"标准输入输出流\",\"t\":[\"System.in//标准输入流 System.out//标准输出流 System.err//标准错误流 //调用System的setIn(InputStream)、setOut(PrintStream)方法 指定输入输出流\"]},\"342\":{\"h\":\"继承中代码的执行顺序\",\"t\":[\"顺序依次向下：\",\"父类静态对象，父类静态代码块。\",\"子类静态对象，子类静态代码块。\",\"父类非静态对象，父类非静态代码块。\",\"父类构造函数。\",\"子类费静态对象，子类非静态代码块。\",\"子类构造函数。\",\"提示\",\"如果子类重写了父类中的某些方法，则创建子类时，父类的代码块、构造器中使用到被重写的方法都会被替换为重写后的方法。\",\"不会初始化子类的几种情况：\",\"调用的是父类的 static 方法或者字段。\",\"调用的是父类的 final 方法或者字段。\",\"通过数组来引用。\"]},\"343\":{\"h\":\"索引设计原则\",\"t\":[\"适合索引的列是出现在 where 子句中的列,或者连接子句中指定的列。\",\"基数较小的表,索引效果较差,没有必要在此列建立索引。\",\"使用短索引,如果对长字符串列进行索引,应该指定一个前缀长度,这样能够节省大量索引空间,如果搜索词超过索引前缀长度,则使用索引排除不匹配的行,然后检查其佘行是否可能匹配。\",\"不要过度索引。索引需要额外的磁盘空间,并降低写操作的性能。在修改表內容的时候,索引会进行更新甚至重构,索引列越多,这个时间就会越长。所以只保持需要的索引有利于查询即可。\",\"定义有外键的数据列一定要建立索引。\",\"更新频繁字段不适合创建索引。\",\"若是不能有效区分数据的列不适合做索引列(如性别,男女未知,最多也就三种,区分度实在太低)。\",\"尽量的扩展索引,不要新建索引。比如表中已经有 a 的索引,现在要加 (a,b) 的索引,那么只需要修改原来的索引即可。\",\"对于那些查询中很少涉及的列,重复值比较多的列不要建立索引。\",\"对于定义为 text、 Image 和 bit 的数据类型的列不要建立索引。\"]},\"344\":{\"h\":\"接口与抽象类\"},\"345\":{\"h\":\"抽象类\",\"t\":[\"在 Java 中被 abstract 关键字修饰的类称为抽象类，被 abstract 关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：\",\"抽象类不能被实例化只能被继承。\",\"包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法。\",\"JDK 1.8以前，抽象类的方法默认访问权限为 protected。\",\"JDK 1.8时，抽象类的方法默认访问权限变为 default。\",\"一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类。\",\"抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。\"]},\"346\":{\"h\":\"接口\",\"t\":[\"Java 中接口使用 interface 关键字修饰，特点为:\",\"接口可以包含变量、方法；变量被隐式指定为 public static final，方法被隐式指定为 public abstract（JDK1.8 之前）。\",\"接口支持多继承，即一个接口可以 extends 多个接口，间接的解决了 Java 中类的单继承问题。\",\"一个类可以实现多个接口。\",\"JDK1.8 中对接口增加了新的特性： \",\"默认方法（default method）：JDK 1.8 允许给接口添加非抽象的方法实现，但必须使用 default 关键字修饰；定义了 default 的方法可以不被实现子类所实现，但只能被实现子类的对象调用；如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法。\",\"静态方法（static method）：JDK 1.8 中允许使用 static 关键字修饰一个方法，并提供实现，称为接口静态方法。接口静态方法只能通过接口调用（接口名.静态方法名）。\",\"JDK 1.8 以前，接口中的方法必须是 public 的。\",\"JDK 1.8 时，接口中的方法可以是 public 的，也可以是 default 的。\",\"JDK 1.9 时，接口中的方法可以是 private 的。\",\"提示\",\"JDK1.9 允许接口中出现 private 修饰的默认方法和静态方法。\"]},\"347\":{\"h\":\"is-a、has-a、like-a\",\"t\":[\"is-a 强调继承关系，如果 A is-a B，那么 B 就是 A 的父类。\",\"like-a 代表组合关系，接口，如果 A like a B，那么 B 就是 A 的接口。\",\"has-a 强调从属关系，如果 A has a B，那么 B 就是 A 的组成部分。\"]},\"348\":{\"h\":\"JVM 运行时数据区\"},\"349\":{\"h\":\"程序计数器\",\"t\":[\"程序计数器是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。\",\"注意\",\"程序计数器为线程私有。\"]},\"350\":{\"h\":\"Java 虚拟机栈\",\"t\":[\"Java 虚拟机栈也是线程私有的，生命周期与线程相同。\",\"虚拟机栈描述的是 Java 方法执行的线程内存模型：每个方法被执行的时候，Java 虚拟机都会同步创建一个栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直到执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\"]},\"351\":{\"h\":\"本地方法栈\",\"t\":[\"作用与虚拟机栈类似，区别在于虚拟机栈为执行字节码服务，本地方法栈为执行本地native方法服务。\"]},\"352\":{\"h\":\"Java 堆\",\"t\":[\"几乎所有对象实例都在这分配内存。\",\"新生代、老年代、永久代、Eden 空间、From Survivor 空间、To Survivor 空间。\"]},\"353\":{\"h\":\"方法区\",\"t\":[\"用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。\"]},\"354\":{\"h\":\"运行时常量池\",\"t\":[\"是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。\"]},\"355\":{\"h\":\"直接内存\",\"t\":[\"堆外内存，不受 JVM 管理，I/O 性能好。\"]},\"356\":{\"h\":\"MySQL 索引的类型\",\"t\":[\"普通索引：允许被索引的数据列包含重复的值。\",\"唯一索引：可以保证数据记录的唯一性。\",\"主键：是一种特殊的唯一索引。\",\"联合索引：索引可以覆盖多个数据列，最左优先。\",\"全文索引：通过建立倒排索引可以极大地提升检所效率，解决判断字段是否包含的问题，是目前搜索引擎使用的一种关键技术。\",\"提示\",\"索引可以极大地提高数据的查询速度。\",\"通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能，但是会降低插入、删除、更新表的速度。\",\"索引需要占用物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大，如果非聚集索引很多，一旦聚集索引改变，那么所有的非聚集索引都会跟着变。\"]},\"357\":{\"h\":\"MySQL 锁的分类\"},\"358\":{\"h\":\"基于属性分类\",\"t\":[\"共享锁：\",\"共享锁又称为读锁，简称 S 锁，当一个事务为数据加上读锁以后，其他事务只能对该数据加读锁，而不能对数据加写锁，直到所有的读锁释放之后其他事务才能进行加写锁，读取数据时不允许修改防止重复读。\",\"排它锁：\",\"又称写锁，简称 X 锁，当一个事务为数据加上写锁时，其它请求不能再为数据加任何锁，避免了出现脏数据和脏读的问题。\"]},\"359\":{\"h\":\"基于粒度分类\",\"t\":[\"行级锁：\",\"上锁的时候锁定的是表的某一行或多行，其他事务访问时，只有这些行才不能访问。\",\"表级锁：\",\"表锁是指上锁时锁定的对象是整个表，当下一个事务访问该表的时候，必须等待前一个事务释放锁才能进行访问。\",\"页级锁：\",\"粒度介于行级锁和表级锁之间，一次锁定相邻的一组记录，会出现死锁。\",\"记录锁。\",\"间隙锁\",\"属于行锁的一种，锁住的是表记录的某一段区间，边界遵循左开右闭，只会出现在重复读的事务级别中，防止幻读问题。\",\"临建锁：\",\"是行锁的一种，是 INNODB 的行锁默认算法，是间隙锁和记录锁的组合，临建锁会把查询出来的记录锁住，同时把查询范围内的所有间隙控件锁住，把相邻的下一个区间也锁住；触发条件：范围查询并命中，查询命中了索引，避免了脏读、重复读、幻读问题。\"]},\"360\":{\"h\":\"基于状态分类\",\"t\":[\"意向锁：让其他事务知道表中已经加锁。\",\"意向共享锁：\",\"当一个事务试图对整个表进行加共享锁之前，首先需要获得这个表的意向共享锁。\",\"意向排它锁：\",\"当一个事务试图对整个表加排它锁之前，首先需要获得这个表的意向排它锁。\"]},\"361\":{\"h\":\"switch 可选参数\",\"t\":[\"switch 语句后的控制表达式只能是 short、char、int、long 整数类型和枚举类型，不能是 float，double 和 boolean 类型。\",\"提示\",\"String 类型是 Java7 开始支持。\",\"本质上支持的参数都是可以转换为 int 的，String 比较的是 hashcode。\"]},\"362\":{\"h\":\"三目运算符\"},\"363\":{\"h\":\"三目运算符返回值类型规则\",\"t\":[\"若两个操作数不可转换，则不做转换，返回值为 Object 类型。\",\"若两个操作数是明确类型的表达式（比如变量），则按照正常的二进制数字来转换，int 类型转换为 long 类型，long 类型转换为 float 类型等。\",\"若两个操作数中有一个是数字 S,另外一个是表达式，且其类型标示为 T，那么，若数字 S 在 T 的范围内，则转换为 T 类型；若 S 超出了 T 类型的范围，则 T 转换为 S 类型。\",\"若两个操作数都是直接量数字，则返回值类型为范围较大者。\",\"Object o1 = true? new Integer(1) : new Double(2.0);\",\"上面的语句符合第四条，返回 double 类型。\",\"byte b = 1; char c = 1; short s = 1; int i = 1; // 三目，一边为byte另一边为char，结果为int // 其它情况结果为两边中范围大的。适用包装类型 i = true ? b : c; // int b = true ? b : b; // byte s = true ? b : s; // short // 表达式，两边为byte,short,char，结果为int型 // 其它情况结果为两边中范围大的。适用包装类型 i = b + c; // int i = b + b; // int i = b + s; // int // 当 a 为基本数据类型时，a += b，相当于 a = (a) (a + b) // 当 a 为包装类型时， a += b 就是 a = a + b b += s; // 没问题 c += i; // 没问题 // 常量任君搞，long以上不能越 b = (char) 1 + (short) 1 + (int) 1; // 没问题 // i = (long) 1 // 错误\"]},\"364\":{\"h\":\"ThreadLocal 内存泄漏问题\"},\"365\":{\"h\":\"引用类型\"},\"366\":{\"h\":\"强引用\",\"t\":[\"Strong Reference，例如 Object o=new Object();。\",\"只要对象有强引用指向且 GC Roots 可达，即使内存即将溢出也不会回收这个对象。\"]},\"367\":{\"h\":\"软引用\",\"t\":[\"Soft Reference，强度弱于强引用。\",\"在即将 OOM 之前软引用指向的对象将被回收，一般用来缓存服务器中间计算结果以及不需要实时保存的用户行为等。\"]},\"368\":{\"h\":\"弱引用\",\"t\":[\"Weak Reference，强度更弱，用来描述非必需对象。\",\"如果指向的对象只有弱引用，则下次 YGC（新生代 GC，频率比较高）将会回收，但是 YGC 时间上具有不确定性，弱引用何时被回收也具有不确定性。弱引用主要用于指向某个易消失的对象，在强引用断开后，此引用不会劫持对象，调用 get 可能返回 null。\"]},\"369\":{\"h\":\"虚引用\",\"t\":[\"Phantom Reference，强度最弱，定义完成后就无法通过该引用获取指向的对象。\",\"为一个对象设置虚引用的唯一目的就是希望能在这个对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用，在 GC 时，如果发现存在虚引用，就会在回收前将这个虚引用加入到引用队列中\"]},\"370\":{\"h\":\"内存泄漏问题\",\"t\":[\"每个 Thread 线程内部都有一个 Map。\",\"Map 里存储线程本地对象做 key，线程变量副本做 value。\",\"Map 由 ThreadLocal 维护，ThreadLocal 负责向 map 获取和设置线程的变量值。\",\"ThreadLocal 的内部类 ThreadLocalMap 的内部类 Entry 的 key 是弱引用，value 为强引用，ThreadLocal 在没有外部对象的强引用时，发生 GC 会回收 key，当线程没有结束，但 ThreadLocal 的 key 被回收时，存在 key 为 null 的键值对，造成内存泄漏。\"]},\"371\":{\"h\":\"解决方案\",\"t\":[\"每次使用完 ThreadLocal 都调用 remove。\"]},\"372\":{\"h\":\"事务的基本特性及隔离级别\"},\"373\":{\"h\":\"ACID\",\"t\":[\"原子性\",\"一致性：数据库总是从一个一致性状态转换到另外一个一致性的状态\",\"隔离性：一个事务在最终提交前对其他事务不可见\",\"持久性：事务一旦提交，所做的修改会永久的保存到数据库中\"]},\"374\":{\"h\":\"四个隔离级别\",\"t\":[\"读未提交：\",\"可能会读到其他事务未提交的数据，也叫脏读。\",\"读已提交：\",\"两次读取结果不同，叫做不可重复读。\",\"不可重复读解决了脏读的问题，只会读取已经提交的事务\",\"可重复读：\",\"MySQL 默认级别，每次读取结果都一样，但有可能产生幻读。\",\"串行：\",\"一般不使用，会给每一行读取的数据加锁，导致大量超时和锁竞争问题。\"]},\"375\":{\"h\":\"ACID 由何保证\",\"t\":[\"原子性：由 undo log 保证，记录了要回滚的日志信息，事务回滚是撤销已经执行成功的 SQL。\",\"一致性：由其他三大特性保证、程序代码要保证业务上的一致性。\",\"隔离性：由 MVCC 来保证。\",\"持久性：由内存+redo log 来保证，MySQL 修改数据同时要在内存和 redo log 记录这次操作，宕机时可以从 redo log 恢复。\"]},\"376\":{\"h\":\"MVCC\",\"t\":[\"多版本并发控制：读取数据时通过一种类似快照的方式将数据保存下来，这样读锁和写锁就不冲突了，不同的事务会话会看到自己特定版本的数据。\",\"MVCC 只在读已提交和可重复读两个隔离级别下工作。\",\"开始事务时创建 readview，readview 维护当前活动的事务 ID，即未提交的事务 ID，排序生成一个数组，访问数据，获取数据中的事务 ID，获取的是事务ID最大的记录，对比 readview：\",\"如果在 readview 左边，说明该事务已提交，可以访问。\",\"如果在 readview 右边或者就在 readview 中间，说明该事务未提交，不可以访问，根据 roll_pointer 取上一版本重新对比。\",\"读已提交级别下的事务在每次查询的开始都会生成一个独立的 ReadView，而可重复读级别则在第一次读的时候生成一个 ReadView，之后读都复用之前的 ReadView。\"]},\"377\":{\"h\":\"引用传递与值传递\",\"t\":[\"Java中处理 8 种基本的数据类型用的是值传递，其他所有类型都用的是引用传递。\",\"提示\",\"按引用传递的实质是将地址值的副本作为实参代替方法中的形参\",\"例如下面的代码：\",\"@Test public void test1(){ Integer integer = new Integer(11); System.out.println(integer.intValue()); change(integer); System.out.println(integer.intValue()); } public void change(Integer integer){ integer=new Integer(123); }\",\"两次输出都是 11，因为 change 方法中修改的是引用副本的指向，源引用不变，如果对引用的内部成员进行操作，则会直接影响到原对象，但是如果直接把此引用指向了其他对象，这个引用从此以后，便与之前的对象没有任何关系，当前代表的仅仅是新指向的对象。\"]},\"378\":{\"h\":\"TCP 通信\"},\"379\":{\"h\":\"简单通信\",\"t\":[\"客户端：\",\"public void client() throws IOException { //创建socket对象，指定服务器主机和端口号 Socket socket = new Socket(InetAddress.getLocalHost(),8848); //获取输出流 OutputStream outputStream = socket.getOutputStream(); //写入内容 outputStream.write(\\\"测试\\\".getBytes(StandardCharsets.UTF_8)); //关闭流 outputStream.close(); //关闭socket socket.close(); }\",\"服务端：\",\"public void server() { try(ServerSocket serverSocket = new ServerSocket(8848);//创建服务端socket对象 Socket accept = serverSocket.accept();//接收发送socket InputStream inputStream = accept.getInputStream();//获取输入流 ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();){//创建字节输出流 byte[] buffer = new byte[1024]; int len; while ((len=inputStream.read(buffer))!=-1){ //将内容写入字节数组输出流中 byteArrayOutputStream.write(buffer,0,len); } //输出获取到的内容 System.out.println(byteArrayOutputStream); }catch (Exception e){ e.printStackTrace(); } }\"]},\"380\":{\"h\":\"发送文件\",\"t\":[\"客户端：\",\"public void fileClient(){ try(Socket socket = new Socket(InetAddress.getLocalHost(),8848); OutputStream outputStream = socket.getOutputStream(); InputStream inputStream=socket.getInputStream(); ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); FileInputStream fileInputStream = new FileInputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Java-Basic\\\\\\\\IO\\\\\\\\src\\\\\\\\1.jpg\\\")){ byte[] buffer = new byte[1024]; int len; //将文件使用字节流输出 while ((len=fileInputStream.read(buffer))!=-1){ outputStream.write(buffer,0,len); } //关闭输出流，否则服务端无法获取发送的流何时结束导致一直等待 socket.shutdownOutput(); //获取服务端返回的信息并输出 while ((len=inputStream.read(buffer))!=-1){ byteArrayOutputStream.write(buffer,0,len); } System.out.println(byteArrayOutputStream); } catch (IOException e) { e.printStackTrace(); } }\",\"服务端：\",\"public void fileServer(){ try(ServerSocket serverSocket = new ServerSocket(8848); Socket accept = serverSocket.accept(); InputStream acceptInputStream = accept.getInputStream(); OutputStream acceptOutputStream = accept.getOutputStream(); FileOutputStream fileOutputStream = new FileOutputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Java-Basic\\\\\\\\Net\\\\\\\\src\\\\\\\\1.jpg\\\");) { byte[] buffer = new byte[1024]; int len; //接收文件 while ((len=acceptInputStream.read(buffer))!=-1){ fileOutputStream.write(buffer,0,len); } //发送回复信息 acceptOutputStream.write(\\\"接收成功\\\".getBytes()); }catch (IOException e){ e.printStackTrace(); } }\"]},\"381\":{\"h\":\"UDP 通信\"},\"382\":{\"h\":\"简单通信\",\"t\":[\"客户端：\",\"public void sender(){ try(DatagramSocket datagramSocket = new DatagramSocket()){ String str=\\\"蚌埠住了\\\"; //创建数据报文 DatagramPacket datagramPacket = new DatagramPacket(str.getBytes(), 0,str.getBytes().length, InetAddress.getLocalHost(), 8848); //发送数据报文 datagramSocket.send(datagramPacket); }catch (IOException e){ e.printStackTrace(); } }\",\"服务端：\",\"public void receiver(){ try(DatagramSocket datagramSocket=new DatagramSocket(8848)){ byte[] buffer = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(buffer, 0, buffer.length); //接收数据报文 datagramSocket.receive(datagramPacket); System.out.println(new String(datagramPacket.getData(),0,datagramPacket.getLength())); }catch (IOException e){ e.printStackTrace(); } }\"]},\"383\":{\"h\":\"发送文件\",\"t\":[\"注意\",\"使用 UDP 发送文件时，文件不能太大，且大小要已知，一般不用来传输文件。\",\"客户端：\",\"public void sender(){ try(DatagramSocket datagramSocket = new DatagramSocket(); ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();){ FileInputStream fileInputStream = new FileInputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Java-Basic\\\\\\\\Net\\\\\\\\src\\\\\\\\3.png\\\"); byte[] buffer = new byte[1024]; int len; while ((len=fileInputStream.read(buffer))!=-1){ byteArrayOutputStream.write(buffer,0,len); } byte[] sendPacket = byteArrayOutputStream.toByteArray(); System.out.println(sendPacket.length); DatagramPacket datagramPacket = new DatagramPacket(sendPacket, 0,sendPacket.length,InetAddress.getLocalHost(), 8848); datagramSocket.send(datagramPacket); }catch (IOException e){ e.printStackTrace(); } }\",\"服务端：\",\"public void receiver(){ try(DatagramSocket datagramSocket=new DatagramSocket(8848); FileOutputStream fileOutputStream = new FileOutputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Java-Basic\\\\\\\\Net\\\\\\\\src\\\\\\\\2.png\\\");){ byte[] buffer = new byte[58920]; DatagramPacket datagramPacket = new DatagramPacket(buffer, 0, buffer.length); datagramSocket.receive(datagramPacket); byte[] data = datagramPacket.getData(); System.out.println(data.length); fileOutputStream.write(data,0,data.length); }catch (IOException e){ e.printStackTrace(); } }\"]},\"384\":{\"h\":\"URL 通信\",\"t\":[\"public void test() throws IOException { //构造一个URL对象 URL url = new URL(\\\"http://localhost:8080/33bae299.png\\\"); //开启连接 HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.connect(); //获取输入流 InputStream inputStream = connection.getInputStream(); FileOutputStream fileOutputStream = new FileOutputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Java-Basic\\\\\\\\Net\\\\\\\\src\\\\\\\\url.png\\\"); byte[] buffer = new byte[1024]; int len; //保存到文件 while ((len=inputStream.read(buffer))!=-1){ fileOutputStream.write(buffer,0,len); } //关闭资源 fileOutputStream.close(); inputStream.close(); connection.disconnect(); }\"]},\"385\":{\"h\":\"异步回调\",\"t\":[\"public class CompletableFuture<T>\"]},\"386\":{\"h\":\"简单使用\",\"t\":[\"无返回值：\",\"CompletableFuture<Void> completableFuture=CompletableFuture.runAsync(()->{ try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName()); }); completableFuture.get();\",\"有返回值：\",\"CompletableFuture<Integer> completableFuture=CompletableFuture.supplyAsync(()->{ int a=10/0; return 777; }); System.out.println(completableFuture.whenComplete((integer, throwable) -> { // 正常结果 System.out.println(integer); // 错误信息 System.out.println(throwable.getMessage()); }).exceptionally(throwable -> { System.out.println(throwable.getMessage()); // 出现异常返回值 return 123; }).get());\"]},\"387\":{\"h\":\"原子引用\"},\"388\":{\"h\":\"使用原子引用解决 ABA 问题\",\"t\":[\"public class AtomicReferenceDemo { private static final AtomicStampedReference<Integer> atomicStampedReference=new AtomicStampedReference<>(0,1); public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor( Runtime.getRuntime().availableProcessors(), 10, 5, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), Executors.defaultThreadFactory(), new ThreadPoolExecutor.DiscardPolicy() ); System.out.println(atomicStampedReference.compareAndSet(0, 1, 1, 2)); threadPoolExecutor.execute(()->{ System.out.println(atomicStampedReference.compareAndSet(1, 0, 2, 3)); }); threadPoolExecutor.shutdown(); while (threadPoolExecutor.isTerminating()){ Thread.yield(); } // 由于记录戳被修改，这条语句会返回false，最终结果是0 // 如果不使用原子引用，这里将修改成功 System.out.println(atomicStampedReference.compareAndSet(0, 5, 2, 3)); System.out.println(atomicStampedReference.getReference().intValue()); } }\"]},\"389\":{\"h\":\"关于 IntegerCache\",\"t\":[\"如果 Integer 值在 -128~127 之间，Integer 对象在 IntegerCache.cache 中产生，这个区间中的 Integer 对象可以直接通过 == 进行判断，这个区间以外的所有数据都会在堆上产生，并不会复用已有对象，要使用 equals 方法判断：\",\"public class IntegerDemo { public static void main(String[] args) { Integer a=100; Integer b=100; Integer c=1000; Integer d=1000; // true System.out.println(a==b); // false System.out.println(c==d); // true System.out.println(a.equals(b)); // true System.out.println(c.equals(d)); } }\"]},\"390\":{\"h\":\"实现多线程的基本方法\"},\"391\":{\"h\":\"继承 Thread 类\",\"t\":[\"继承 Thread 类，重写 run() 方法，调用 start 开启线程：\",\"public class ThreadTest extends Thread{ @Override public void run() { // 不一定立即执行 for (int i = 0; i < 10; i++) { System.out.println(\\\"run Thread===>\\\"+i); } } public static void main(String[] args) { // 创建一个线程对象 ThreadTest threadTest = new ThreadTest(); // 调用start()方法开启线程 threadTest.start(); for (int i = 0; i < 100; i++) { System.out.println(\\\"run main===>\\\"+i); } } }\"]},\"392\":{\"h\":\"实现 Runnable 接口\",\"t\":[\"实现 runnable 接口，重写 run 方法，执行线程需要丢入 runnable 接口实现类，调用 start 方法。\",\"public class Test implements Runnable{ @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(\\\"run Thread===>\\\"+i); } } public static void main(String[] args) { Test test = new Test(); Thread thread = new Thread(test); thread.start(); for (int i = 0; i < 100; i++) { System.out.println(\\\"run main===>\\\"+i); } } }\"]},\"393\":{\"h\":\"实现 Callable 接口\",\"t\":[\"实现 Callable 接口，重写 call 方法，通过线程池或 FutureTask 执行：\",\"public class CallableDownload implements Callable<String> { private String url; private String name; public CallableDownload(String url, String name) { this.url = url; this.name = name; } @Override public String call() throws Exception { Downloader downloader = new Downloader(); downloader.download(url,name); System.out.println(\\\"From \\\"+url+\\\" download \\\"+name); return \\\"success\\\"; } public static void main(String[] args) throws ExecutionException, InterruptedException { CallableDownload downloadImage = new CallableDownload(\\\"http://112.126.61.130/download/src/2021.jpg\\\",\\\"1283.jpg\\\"); CallableDownload downloadImage1 = new CallableDownload(\\\"http://112.126.61.130/download/src/1.jpg\\\",\\\"1.jpg\\\"); // 创建执行服务 ExecutorService executorService = Executors.newFixedThreadPool(3); // 提交执行 Future<String> submit = executorService.submit(downloadImage); Future<String> submit1 = executorService.submit(downloadImage1); // 获取结果 String result = submit.get(); String result2 = submit1.get(); // 关闭服务 executorService.shutdown(); } } class Downloader{ public void download(String url,String name){ try { FileUtils.copyURLToFile(new URL(url),new File(name)); } catch (IOException e) { System.out.println(\\\"thread.Downloader Error\\\"); } } }\",\"FutureTask：\",\"public class CallableDownload implements Callable<String> { private String url; private String name; public CallableDownload(String url, String name) { this.url = url; this.name = name; } @Override public String call() throws Exception { Downloader downloader = new Downloader(); downloader.download(url,name); System.out.println(\\\"From \\\"+url+\\\" download \\\"+name); return \\\"success\\\"; } public static void main(String[] args) throws ExecutionException, InterruptedException { CallableDownload downloadImage = new CallableDownload(\\\"http://112.126.61.130/download/src/2222.jpg\\\",\\\"1283.jpg\\\"); CallableDownload downloadImage1 = new CallableDownload(\\\"http://112.126.61.130/download/src/1.jpg\\\",\\\"1.jpg\\\"); FutureTask<String> stringFutureTask = new FutureTask<String>(downloadImage); FutureTask<String> stringFutureTask1 = new FutureTask<String>(downloadImage1); new Thread(stringFutureTask).start(); new Thread(stringFutureTask1).start(); } } class Downloader{ public void download(String url,String name){ try { FileUtils.copyURLToFile(new URL(url),new File(name)); } catch (IOException e) { System.out.println(\\\"thread.Downloader Error\\\"); } } }\"]},\"394\":{\"h\":\"阻塞队列\",\"t\":[\"提示\",\"写入：如果队列满了，就必须阻塞等待。\",\"取：如果队列为空，就必须阻塞等待生产。\",\"阻塞队列使用场景：多线程并发、线程池。\"]},\"395\":{\"h\":\"阻塞队列的四组API\",\"t\":[\"方式\",\"抛出异常\",\"有返回值，不抛出异常\",\"阻塞、等待\",\"超时等待\",\"添加\",\"add()\",\"offer()\",\"put()\",\"offer(E e, long timeout, TimeUnit unit)\",\"移除\",\"remove()\",\"poll()\",\"take()\",\"poll(long timeout, TimeUnit unit)\",\"获取队首元素\",\"element()\",\"peek()\",\"-\",\"-\",\"抛出异常：\",\"ArrayBlockingQueue<Object> objects = new ArrayBlockingQueue<>(5); for (int i = 0; i < 5; i++) { // 队列满会报异常 System.out.println(objects.add(i)); } System.out.println(\\\"=========================\\\"); for (int i = 0; i < 5; i++) { // 队列空会报异常 System.out.println(objects.remove()); } // 获取队首元素，队空则异常 System.out.println(objects.element());\",\"有返回值，不抛异常：\",\"ArrayBlockingQueue<Object> objects = new ArrayBlockingQueue<>(5); for (int i = 0; i < 6; i++) { // 队满返回false System.out.println(objects.offer(i)); } System.out.println(\\\"=========================\\\"); for (int i = 0; i < 6; i++) { // 队空返回null System.out.println(objects.poll()); } // 队空返回null System.out.println(objects.peek());\",\"阻塞等待：\",\"ArrayBlockingQueue<Object> objects = new ArrayBlockingQueue<>(5); for (int i = 0; i < 6; i++) { // 队满，则一直等待 objects.put(i); } System.out.println(\\\"=========================\\\"); for (int i = 0; i < 6; i++) { // 队空，则一直等待 System.out.println(objects.take()); }\",\"超时等待：\",\"ArrayBlockingQueue<Object> objects = new ArrayBlockingQueue<>(5); for (int i = 0; i < 6; i++) { // 队满，则等待到指定时间后退出 System.out.println(objects.offer(i, 3, TimeUnit.SECONDS)); } System.out.println(\\\"=========================\\\"); for (int i = 0; i < 6; i++) { // 队空，则等待到指定时间后退出 System.out.println(objects.poll(3, TimeUnit.SECONDS)); }\"]},\"396\":{\"h\":\"SynchronousQueue 同步队列\",\"t\":[\"其中每个插入操作必须等待另一个线程相应的删除操作，反之亦然。 同步队列没有任何内部容量，甚至没有一个容量。\",\"提示\",\"添加元素后，必须先取出才能继续添加。\",\"仍然可以使用之前的 offer、poll 等方法，但是 offer 和 poll 只能实时。\",\"public class SynchronousQueueDemo { public static void main(String[] args) { SynchronousQueue<String> strings = new SynchronousQueue<>(true); new Thread(()->{ for (int i = 0; i < 10; i++) { System.out.println(Thread.currentThread().getName()+\\\"放入了第\\\"+i+\\\"个元素\\\"); try { strings.put(i + \\\"\\\"); } catch (InterruptedException e) { e.printStackTrace(); } } },\\\"线程一\\\").start(); new Thread(()->{ for (int i = 0; i < 10; i++) { try { TimeUnit.SECONDS.sleep(3); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName()+\\\"获取了第\\\"+i+\\\"个元素\\\"); try { System.out.println(strings.take()); } catch (InterruptedException e) { e.printStackTrace(); } } },\\\"线程二\\\").start(); } }\"]},\"397\":{\"h\":\"CAS(乐观锁)\"},\"398\":{\"h\":\"什么是 CAS\",\"t\":[\"Compare And Swap。\",\"CAS 机制当中使用了 3 个基本操作数：内存地址 V，旧的预期值 A，要修改的新值 B。\",\"更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 当中的实际值相同时，才会将内存地址 V 对应的值修改为 B。\"]},\"399\":{\"h\":\"JDK 中的实例\",\"t\":[\"AtomicInteger 类中自增方法:\",\"public final int getAndIncrement() { return unsafe.getAndAddInt(this, valueOffset, 1); }\",\"Unsafe 类:\",\"public final int getAndAddInt(Object var1, long var2, int var4) { int var5; do { // 不断获取内存中的值，C++实现 var5 = this.getIntVolatile(var1, var2); } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4)); return var5; }\"]},\"400\":{\"h\":\"应用示例\",\"t\":[\"public class AtomicDemo { private static AtomicInteger num = new AtomicInteger(0); private static void incr(){ num.getAndIncrement(); } public static void main(String[] args) throws InterruptedException { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor( Runtime.getRuntime().availableProcessors(), 10, 5L, TimeUnit.SECONDS, new LinkedBlockingQueue<>(5), Executors.defaultThreadFactory(), new ThreadPoolExecutor.DiscardPolicy()); for (int i = 0; i < 10; i++) { threadPoolExecutor.execute(()->{ for (int j = 0; j < 5000; j++) { incr(); } }); } threadPoolExecutor.shutdown(); while (threadPoolExecutor.isTerminating()){ TimeUnit.SECONDS.sleep(1); } System.out.println(num); } }\"]},\"401\":{\"h\":\"集合不安全\"},\"402\":{\"h\":\"List 不安全\",\"t\":[\"解决方案：\",\"Vector：\",\"Vector<String> strings = new Vector<>();\",\"Vector 的 add 方法安全的原因：\",\"使用了synchronized关键字。\",\"public synchronized boolean add(E e) { modCount++; ensureCapacityHelper(elementCount + 1); elementData[elementCount++] = e; return true; }\",\"Collections.synchronizedList：\",\"List<Object> objects = Collections.synchronizedList(new ArrayList<>());\",\"CopyOnWriteArrayList写入时复制：\",\"CopyOnWriteArrayList<String> strings = new CopyOnWriteArrayList<>();\"]},\"403\":{\"h\":\"Set 不安全\",\"t\":[\"解决方案：\",\"Collections.synchronizedSet：\",\"Set<Object> objects = Collections.synchronizedSet(new HashSet<>());\",\"CopyOnWriteArraySet：\",\"CopyOnWriteArraySet<String> strings = new CopyOnWriteArraySet<>();\",\"提示\",\"HashSet 通过 HashMap 的键确保不会重复：\",\"public boolean add(E e) { return map.put(e, PRESENT)==null; }\"]},\"404\":{\"h\":\"Map 不安全\"},\"405\":{\"h\":\"HashMap 的扩容机制和加载因子\",\"t\":[\"默认加载因子、默认初始容量、最大容量：\",\"public class HashMap<K,V>extends AbstractMap<K,V>implements Map<K,V>, Cloneable, Serializable{ // 默认的初始容量（容量为HashMap中桶的数目）是16，且实际容量必须是2的整数次幂。 static final int DEFAULT_INITIAL_CAPACITY = 16; // 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换） static final int MAXIMUM_CAPACITY = 1 << 30; // 默认加载因子 static final float DEFAULT_LOAD_FACTOR = 0.75f; //... 省略 }\",\"最大容量等于默认加载因子和初始容量的乘积，是用来预警的，如果 HashMap 中的容量超过这个阀值了，那就会执行扩容操作，低于则没事。\",\"加载因子存在的原因，还是因为减缓哈希冲突，如果初始桶为 16，等到满 16 个元素才扩容，某些桶里可能就有不止一个元素了。所以加载因子默认为 0.75，也就是说大小为 16 的 HashMap，到了第 13 个元素，就会扩容成 32。\",\"所以如果你心目中有明确的 Map 大小，设定时一定要考虑加载因子的存在。\",\"扩容阈值就是初始桶大小(默认 16)乘以加载因子\",\"HashMap 含参构造器：\",\"public HashMap(int initialCapacity, float loadFactor) { if (initialCapacity < 0) throw new IllegalArgumentException(\\\"Illegal initial capacity: \\\" + initialCapacity); if (initialCapacity > MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor <= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(\\\"Illegal load factor: \\\" + loadFactor); this.loadFactor = loadFactor; this.threshold = tableSizeFor(initialCapacity); }\"]},\"406\":{\"h\":\"ForkJoin\",\"t\":[\"ForkJoin特点：工作窃取。\",\"工作窃取，即每个线程负责一个任务队列，部分线程可能会较先完成自己队列中的任务，此时这个线程会从其他未完成的队列中偷走一个任务执行，任务队列使用双端队列。\"]},\"407\":{\"h\":\"ForkJoinPool\",\"t\":[\"ForkJoinPool 实现了 ExecutorService 接口，提供非 ForkJoinTask 客户 ForkJoinPool 的入场点，以及管理和监控操作。线程池中的所有线程都企图找到并执行提交给线程池的任务。当在构造方法中设置 asyncMode为true 的时候这种处理更加高效。\"]},\"408\":{\"h\":\"ForkJoinTask\",\"t\":[\"在 ForkJoinPool 内运行的任务的抽象基类。ForkJoinTask 是一个线程实体，其重量比普通线程轻得多。\",\"直接子类：\",\"CountedCompleter：无返回值任务，完成任务后可以触发回调。\",\"RecursiveTask：一个递归有结果的 ForkJoinTask（有返回值）。\",\"RecursiveAction：一个递归无结果的 ForkJoinTask（没有返回值）。\"]},\"409\":{\"h\":\"使用 ForkJoin 进行计算\",\"t\":[\"创建一个执行任务的类，并继承 ForkJoinTask 或其子类并重写 compute() 方法。\",\"class ForkJoinCalculate extends RecursiveTask<Long>{ private long start; private long end; private long temp=10000L; public ForkJoinCalculate(long start, long end) { this.start = start; this.end = end; } @Override protected Long compute() { if ((end-start)<temp){ long sum=0L; for (long i=start;i<end;i++){ sum+=i; } return sum; }else { long mid=(start+end)/2; ForkJoinCalculate forkJoinCalculate = new ForkJoinCalculate(start, mid); // 调用fork方法提交任务，在当前任务正在运行的池中异步执行此任务 // 如果是ForkJoinWorkerThread运行过程中fork()，则直接加入到它的工作队列中，否则，重新提交任务。(见ForkJoinWorkerThread) forkJoinCalculate.fork(); ForkJoinCalculate forkJoinCalculate1 = new ForkJoinCalculate(mid, end); forkJoinCalculate1.fork(); // 调用join方法返回计算结果 // 异常完成导致RuntimeException或Error // get方法异常完成会导致ExecutionException return forkJoinCalculate.join()+forkJoinCalculate1.join(); } } }\",\"创建 ForkJoinPool：\",\"ForkJoinPool forkJoinPool = new ForkJoinPool(); ForkJoinPool forkJoinPool = new ForkJoinPool(2, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true); // 参数一：parallelism - 并行级别。 对于默认值，请使用Runtime.availableProcessors() // 参数二：factory - 创建新线程的工厂。 默认值为defaultForkJoinWorkerThreadFactory 。 // 参数三：handler - 由于执行任务时遇到不可恢复的错误而终止的内部工作线程的处理程序。 默认值为null 。 // 参数四：asyncMode - 如果为true，请为从未连接的分叉任务建立本地先进先出调度模式。 在工作线程仅处理事件式异步任务的应用程序中，此模式可能比默认的基于本地堆栈的模式更合适。 默认值为false 。\",\"向 ForkJoinPool 提交任务：\",\"// submit有返回值 // execute没有返回值 ForkJoinTask<Long> submit = forkJoinPool.submit(new ForkJoinCalculate(0L,100_0000_0000L));\",\"获取结果：\",\"Long sum = submit.get();\"]},\"410\":{\"h\":\"函数式接口\",\"t\":[\"提示\",\"任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口，可以使用 lambda 表达式。\"]},\"411\":{\"h\":\"示例\",\"t\":[\"接口：\",\"public interface MyInterface { /** * 抽象方法 * @param a 参数 */ void show(int a); }\",\"运行：\",\"public static void main(String[] args) { MyInterface myInterface = new MyInterface() { @Override public void show(int a) { System.out.println(\\\"匿名内部类，参数==> \\\"+a); } }; myInterface.show(1); MyInterface myInterface1= a -> System.out.println(\\\"lambda param is ==> \\\"+a); myInterface1.show(2); }\"]},\"412\":{\"h\":\"四大函数式接口\",\"t\":[\"包：java.util.function。\"]},\"413\":{\"h\":\"Function\",\"t\":[\"@FunctionalInterface // 传入T类型，返回R类型 public interface Function<T, R> { /** * Applies this function to the given argument. * * @param t the function argument * @return the function result */ R apply(T t);\",\"简单使用：\",\"Function<String, String> function=(s -> s+\\\"??\\\"); System.out.println(function.apply(\\\"test\\\"));\"]},\"414\":{\"h\":\"Predicate\",\"t\":[\"提示\",\"断言型接口，有一个输入参数，返回一个布尔值。\",\"@FunctionalInterface public interface Predicate<T> { /** * Evaluates this predicate on the given argument. * * @param t the input argument * @return {@code true} if the input argument matches the predicate, * otherwise {@code false} */ boolean test(T t);\",\"简单使用：\",\"Predicate<Integer> integerPredicate=integer -> integer >100; System.out.println(integerPredicate.test(21)); System.out.println(integerPredicate.test(210));\"]},\"415\":{\"h\":\"Consumer\",\"t\":[\"提示\",\"消费型接口，接收一个参数，没有返回值。\",\"@FunctionalInterface public interface Consumer<T> { /** * Performs this operation on the given argument. * * @param t the input argument */ void accept(T t);\",\"简单使用：\",\"Consumer<String> stringConsumer= System.out::println; stringConsumer.accept(\\\"test\\\");\"]},\"416\":{\"h\":\"Supplier\",\"t\":[\"提示\",\"供给型接口，没有参数，只有返回值。\",\"@FunctionalInterface public interface Supplier<T> { /** * Gets a result. * * @return a result */ T get(); }\",\"简单使用：\",\"Supplier<String> stringSupplier=()->{ StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(\\\"t\\\").append(\\\"e\\\").append(\\\"s\\\").append(\\\"t\\\"); return stringBuilder.toString(); }; System.out.println(stringSupplier.get());\"]},\"417\":{\"h\":\"Stream 流式计算\",\"t\":[\"简单使用：\",\"users.stream() .sorted(Comparator.comparingInt(User::getAge)) // 过滤年龄大于等于10 .filter(user -> user.getAge() >= 10) // 过滤ID是偶数的 .filter(user -> user.getId()%2==0) .map(user -> user.getName().toUpperCase()) // 限制输出数量 .limit(3) .forEach(System.out::println);\",\"并行计算：\",\"// DoubleStream IntStream …… long reduce = LongStream.rangeClosed(0L, 100_0000_0000L) // 并行流 .parallel() .reduce(0, Long::sum);\"]},\"418\":{\"h\":\"JMM 与 volatile\"},\"419\":{\"h\":\"什么是 JMM\",\"t\":[\"JMM 即为 JAVA 内存模型（java memory model）。因为在不同的硬件生产商和不同的操作系统下，内存的访问逻辑有一定的差异，结果就是当你的代码在某个系统环境下运行良好，并且线程安全，但是换了个系统就出现各种问题。Java 内存模型，就是为了屏蔽系统和硬件的差异，让一套代码在不同平台下能到达相同的访问结果。\"]},\"420\":{\"h\":\"内存划分\",\"t\":[\"JMM 规定了内存主要划分为主内存和工作内存两种。此处的主内存和工作内存跟 JVM 内存划分（堆、栈、方法区）是在不同的层次上进行的，如果非要对应起来，主内存对应的是 Java 堆中的对象实例部分，工作内存对应的是栈中的部分区域，从更底层的来说，主内存对应的是硬件的物理内存，工作内存对应的是寄存器和高速缓存。\",\"JVM 在设计时候考虑到，如果 JAVA 线程每次读取和写入变量都直接操作主内存，对性能影响比较大，所以每条线程拥有各自的工作内存，工作内存中的变量是主内存中的一份拷贝，线程对变量的读取和写入，直接在工作内存中操作，而不能直接去操作主内存中的变量。但是这样就会出现一个问题，当一个线程修改了自己工作内存中变量，对其他线程是不可见的，会导致线程不安全的问题。因为JMM制定了一套标准来保证开发者在编写多线程程序的时候，能够控制什么时候内存会被同步给其他线程。\"]},\"421\":{\"h\":\"八种内存操作\",\"t\":[\"lock（锁定）：作用于主内存的变量，把一个变量标识为线程独占状态。\",\"unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。\",\"read（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用。\",\"load（载入）：作用于工作内存的变量，它把 read 操作从主存中变量放入工作内存中。\",\"use（使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令。\",\"assign（赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中。\",\"store（存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的 write 使用。\",\"write（写入）：作用于主内存中的变量，它把 store 操作从工作内存中得到的变量的值放入主内存的变量中。\"]},\"422\":{\"h\":\"JMM 对八大内存操作的规则\",\"t\":[\"不允许 read 和 load、store 和 write 操作之一单独出现。即使用了 read 必须 load，使用了 store 必须 write。\",\"不允许线程丢弃他最近的 assign 操作，即工作变量的数据改变了之后，必须告知主存。\",\"不允许一个线程将没有 assign的 数据从工作内存同步回主内存。\",\"一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施 use、store 操作之前，必须经过 assign 和 load 操作。\",\"一个变量同一时间只有一个线程能对其进行 lock。多次 lock 后，必须执行相同次数的 unlock 才能解锁。\",\"如果对一个变量进行 lock 操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新 load 或 assign 操作初始化变量的值。\",\"如果一个变量没有被 lock，就不能对其进行 unlock 操作。也不能 unlock 一个被其他线程锁住的变量。\",\"对一个变量进行 unlock 操作之前，必须把此变量同步回主内存。\"]},\"423\":{\"h\":\"JMM 模型特征\"},\"424\":{\"h\":\"原子性\",\"t\":[\"例如上面八项操作，在操作系统里面是不可分割的单元。被 synchronized 关键字或其他锁包裹起来的操作也可以认为是原子的。从一个线程观察另外一个线程的时候，看到的都是一个个原子性的操作。\"]},\"425\":{\"h\":\"可见性\",\"t\":[\"每个工作线程都有自己的工作内存，所以当某个线程修改完某个变量之后，在其他的线程中，未必能观察到该变量已经被修改。volatile 关键字要求被修改之后的变量要求立即更新到主内存，每次使用前从主内存处进行读取。因此 volatile 可以保证可见性。除了 volatile 以外，synchronized 和 final 也能实现可见性。synchronized 保证 unlock 之前必须先把变量刷新回主内存。final 修饰的字段在构造器中一旦完成初始化，并且构造器没有 this 逸出，那么其他线程就能看到 final 字段的值。\"]},\"426\":{\"h\":\"有序性\",\"t\":[\"java 的有序性跟线程相关。如果在线程内部观察，会发现当前线程的一切操作都是有序的。如果在线程的外部来观察的话，会发现线程的所有操作都是无序的。因为 JMM 的工作内存和主内存之间存在延迟，而且 java 会对一些指令进行重新排序。volatile 和 synchronized 可以保证程序的有序性，很多程序员只理解这两个关键字的执行互斥，而没有很好的理解到 volatile 和 synchronized 也能保证指令不进行重排序。\"]},\"427\":{\"h\":\"Happen-Before（先行发生规则）\",\"t\":[\"在常规的开发中，如果我们通过上述规则来分析一个并发程序是否安全，估计脑壳会很疼。因为更多时候，我们是分析一个并发程序是否安全，其实都依赖 Happen-Before 原则进行分析。Happen-Before 被翻译成先行发生原则，意思就是当 A 操作先行发生于 B 操作，则在发生 B 操作的时候，操作 A 产生的影响能被 B 观察到，“影响”包括修改了内存中的共享变量的值、发送了消息、调用了方法等。\",\"程序次序规则（Program Order Rule）：在一个线程内，程序的执行规则跟程序的书写规则是一致的，从上往下执行。\",\"管程锁定规则（Monitor Lock Rule）：一个 Unlock 的操作肯定先于下一次 Lock 的操作。这里必须是同一个锁。同理我们可以认为在 synchronized 同步同一个锁的时候，锁内先行执行的代码，对后续同步该锁的线程来说是完全可见的。\",\"volatile 变量规则（volatile Variable Rule）：对同一个 volatile 的变量，先行发生的写操作，肯定早于后续发生的读操作。\",\"线程启动规则（Thread Start Rule）：Thread 对象的 start() 方法先行发生于此线程的没一个动作。\",\"线程中止规则（Thread Termination Rule）：Thread对象的中止检测（如：Thread.join()，Thread.isAlive() 等）操作，必行晚于线程中所有操作。\",\"线程中断规则（Thread Interruption Rule）：对线程的 interruption() 调用，先于被调用的线程检测中断事件(Thread.interrupted())的发生。\",\"对象中止规则（Finalizer Rule）：一个对象的初始化方法先于一个方法执行 Finalizer() 方法。\",\"传递性（Transitivity）：如果操作 A 先于操作 B、操作B先于操作 C,则操作 A 先于操作 C。\"]},\"428\":{\"h\":\"volatile\",\"t\":[\"提示\",\"volatile 是 Java 虚拟机提供的轻量级同步机制。\",\"volatile 特性：\",\"保证可见性。\",\"不保证原子性。\",\"禁止指令重排。\"]},\"429\":{\"h\":\"保证可见性\",\"t\":[\"以下代码如果不使用 volatile 关键字，第一个线程将会不停循环，程序无法终止：\",\"public class VolatileDemo { private volatile static boolean flag=true; public static void main(String[] args) { new Thread(()->{ // 这个线程对主存中flag的值的变化不知道 while (flag){ } }).start(); new Thread(()->{ try { TimeUnit.SECONDS.sleep(3); } catch (InterruptedException e) { e.printStackTrace(); } flag=false; }).start(); } }\"]},\"430\":{\"h\":\"不保证原子性\",\"t\":[\"以下代码不论是否在变量前使用 volatile，最后结果都不会始终是 5000：\",\"public class VolatileDemo { private volatile static int num=0; private static void incr(){ ++num; } public static void main(String[] args) { for (int i = 0; i < 10; i++) { new Thread(()->{ for (int j = 0; j < 500; j++) { incr(); } }).start(); } while (Thread.activeCount()>2){ Thread.yield(); } // 理论结果应该是5000 System.out.println(num); } }\",\"使用原子类解决原子性问题(java.util.concurrent.atomic)：\",\"以下代码结果始终是 5000：\",\"public class VolatileDemo { private static AtomicInteger integer=new AtomicInteger(0); private static void incr(){ integer.getAndIncrement(); } public static void main(String[] args) { for (int i = 0; i < 10; i++) { new Thread(()->{ for (int j = 0; j < 500; j++) { incr(); } }).start(); } while (Thread.activeCount()>2){ Thread.yield(); } System.out.println(integer.get()); } }\"]},\"431\":{\"h\":\"Lock锁\"},\"432\":{\"h\":\"Lock接口\",\"t\":[\"Lock 实现提供比使用 synchronized 方法和语句可以获得的更广泛的锁定操作。 它们允许更灵活的结构化，可能具有完全不同的属性，并且可以支持多个相关联的对象 Condition 。\",\"实现类：\",\"ReentrantLock：可重入锁。\",\"ReentrantReadWriteLock.ReadLock：读锁。\",\"ReentrantReadWriteLock.WriteLock：写锁。\"]},\"433\":{\"h\":\"公平锁和非公平锁\",\"t\":[\"公平锁：可以先来后到。\",\"非公平锁：可以插队。\",\"创建可重入锁对象时，可以通过构造器指定是公平锁还是非公平锁，无参构造器返回非公平锁。\"]},\"434\":{\"h\":\"Demo\",\"t\":[\"public class LockTest { public static void main(String[] args) { TestLock testLock = new TestLock(); new Thread(testLock).start(); new Thread(testLock).start(); new Thread(testLock).start(); } } class TestLock implements Runnable{ private static int num=10; // 创建Lock对象 private final ReentrantLock lock=new ReentrantLock(); @Override public void run() { for (;;){ // 锁【lock.lock】必须紧跟try代码块，且unlock要放到finally第一行。 try { // 加锁 lock.lock(); if (num>0){ System.out.println(\\\"ticket number==>\\\"+num--); Thread.sleep(1000); }else { break; } } catch (InterruptedException e) { e.printStackTrace(); } finally { // 解锁 lock.unlock(); } } } }\"]},\"435\":{\"h\":\"Lock 和 synchronized 的区别\",\"t\":[\"synchronized 是 Java 关键字，Lock 是一个接口。。\",\"synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁(isLocked())。\",\"synchronized 会自动释放锁，Lock 需要手动释放锁。\",\"synchronized 会让其他线程一直等待，Lock 不一定。\",\"synchronized 可重入，不可中断，非公平。Lock 可重入锁，可以判断锁，公平性可设置。\",\"synchronized 适于少量代码同步问题，Lock 适合大量代码。\"]},\"436\":{\"h\":\"锁的不同情况\"},\"437\":{\"h\":\"标准情况\",\"t\":[\"public class EightLock { public static void main(String[] args) throws InterruptedException { 先输出A再输出B Data data = new Data(); new Thread(()->{ data.a(); }).start(); TimeUnit.SECONDS.sleep(1); new Thread(()->{ data.b(); }).start(); } } class Data { public synchronized void a(){ System.out.println(\\\"A\\\"); } public synchronized void b(){ System.out.println(\\\"B\\\"); } }\"]},\"438\":{\"h\":\"a() 方法延迟 4 秒\",\"t\":[\"synchronized 锁的是方法调用者，两个方法是同一个锁，谁先拿到谁执行。\",\"class Data { public synchronized void a() throws InterruptedException { TimeUnit.SECONDS.sleep(4); System.out.println(\\\"A\\\"); } public synchronized void b(){ System.out.println(\\\"B\\\"); } }\"]},\"439\":{\"h\":\"增加一个普通方法\",\"t\":[\"public class EightLock { public static void main(String[] args) throws InterruptedException { // 输出：C A Data data = new Data(); new Thread(()->{ try { data.a(); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); TimeUnit.SECONDS.sleep(1); new Thread(()->{ data.c(); }).start(); } } class Data { public synchronized void a() throws InterruptedException { TimeUnit.SECONDS.sleep(4); System.out.println(\\\"A\\\"); } public synchronized void b(){ System.out.println(\\\"B\\\"); } // 非同步方法，不受锁的影响 public void c(){ System.out.println(\\\"C\\\"); } }\"]},\"440\":{\"h\":\"两个对象，两个同步方法\",\"t\":[\"public class EightLock { public static void main(String[] args) throws InterruptedException { // 两个对象，两个调用者，两把锁 // 输出：B A Data data = new Data(); Data data1 = new Data(); new Thread(()->{ try { data.a(); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); TimeUnit.SECONDS.sleep(1); new Thread(()->{ data1.b(); }).start(); } } class Data { public synchronized void a() throws InterruptedException { TimeUnit.SECONDS.sleep(4); System.out.println(\\\"A\\\"); } public synchronized void b(){ System.out.println(\\\"B\\\"); } public void c(){ System.out.println(\\\"C\\\"); } }\"]},\"441\":{\"h\":\"增加两个静态同步方法，只有一个对象\",\"t\":[\"public class EightLock { public static void main(String[] args) throws InterruptedException { // 输出：A B Data data = new Data(); Data data1 = new Data(); new Thread(()->{ try { data.a(); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); TimeUnit.SECONDS.sleep(1); new Thread(()->{ data.b(); }).start(); } } class Data { // 静态方法在类加载时就被加载，锁的是Class对象，Class对象全局唯一 public static synchronized void a() throws InterruptedException { TimeUnit.SECONDS.sleep(4); System.out.println(\\\"A\\\"); } public static synchronized void b(){ System.out.println(\\\"B\\\"); } public void c(){ System.out.println(\\\"C\\\"); } }\"]},\"442\":{\"h\":\"两个对象，两个静态同步方法\",\"t\":[\"public class EightLock { public static void main(String[] args) throws InterruptedException { // 输出：A B Data data = new Data(); Data data1 = new Data(); new Thread(()->{ try { data.a(); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); TimeUnit.SECONDS.sleep(1); new Thread(()->{ data1.b(); }).start(); } }\"]},\"443\":{\"h\":\"一个静态同步方法，一个普通同步方法，一个对象\",\"t\":[\"public class EightLock { public static void main(String[] args) throws InterruptedException { // 输出：B A Data data = new Data(); Data data1 = new Data(); new Thread(()->{ try { data.a(); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); TimeUnit.SECONDS.sleep(1); new Thread(()->{ data.b(); }).start(); } } class Data { public static synchronized void a() throws InterruptedException { TimeUnit.SECONDS.sleep(4); System.out.println(\\\"A\\\"); } public synchronized void b(){ System.out.println(\\\"B\\\"); } public void c(){ System.out.println(\\\"C\\\"); } }\"]},\"444\":{\"h\":\"一个静态同步方法，一个普通同步方法，两个对象\",\"t\":[\"public class EightLock { public static void main(String[] args) throws InterruptedException { // 输出：B A Data data = new Data(); Data data1 = new Data(); new Thread(()->{ try { data.a(); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); TimeUnit.SECONDS.sleep(1); new Thread(()->{ data1.b(); }).start(); } } class Data { public static synchronized void a() throws InterruptedException { TimeUnit.SECONDS.sleep(4); System.out.println(\\\"A\\\"); } public synchronized void b(){ System.out.println(\\\"B\\\"); } public void c(){ System.out.println(\\\"C\\\"); } }\"]},\"445\":{\"h\":\"读写锁\",\"t\":[\"ReadWriteLock 维护一对关联的 locks ，一个用于只读操作，一个用于写入。 read lock 可以由多个阅读器线程同时进行，只要没有作者。 write lock 是独家的。\",\"public class ReadWriteLockDemo { public static void main(String[] args) { Cache cache = new Cache(); for (int i = 0; i < 10; i++) { int finalI = i; new Thread(()->{ cache.put(\\\"\\\"+ finalI,\\\"\\\"+ finalI); },String.valueOf(i)).start(); } for (int i = 0; i < 10; i++) { int finalI = i; new Thread(()->{ cache.read(\\\"\\\"+ finalI); },String.valueOf(i)).start(); } } } class Cache{ private volatile HashMap<String, String> hashMap=new HashMap<>(); // 自定义公平性 private ReadWriteLock readWriteLock = new ReentrantReadWriteLock(true); public void put(String key,String value){ // 写锁 readWriteLock.writeLock().lock(); try { System.out.println(Thread.currentThread().getName()+\\\"写入\\\"+key); hashMap.put(key, value); System.out.println(Thread.currentThread().getName()+\\\"写入完成\\\"); }catch (Exception e){ e.printStackTrace(); }finally { // 放开写锁 readWriteLock.writeLock().unlock(); } } public void read(String key){ // 读锁 readWriteLock.readLock().lock(); try { System.out.println(Thread.currentThread().getName()+\\\"读取\\\"+key); System.out.println(hashMap.get(key)); System.out.println(Thread.currentThread().getName()+\\\"读取完成\\\"); }catch (Exception e){ e.printStackTrace(); }finally { // 放开读锁 readWriteLock.readLock().unlock(); } } }\"]},\"446\":{\"h\":\"深入单例模式\"},\"447\":{\"h\":\"饿汉式\",\"t\":[\"public class Hungry { // 饿汉式，开始时就分配全部空间，可能浪费空间 byte[][] bytes = new byte[1024][1024]; private Hungry(){ } private static final Hungry HUNGRY =new Hungry(); public static Hungry getInstance(){ return HUNGRY; } }\"]},\"448\":{\"h\":\"懒汉式\",\"t\":[\"普通懒汉式未实现线程安全：\",\"public class LazyMan { private LazyMan(){ System.out.println(Thread.currentThread().getName()+\\\" run\\\"); } private static LazyMan lazyMan; public static LazyMan getInstance(){ if (lazyMan==null){ lazyMan=new LazyMan(); } return lazyMan; } public static void main(String[] args) { for (int i = 0; i < 10; i++) { new Thread(()->{ LazyMan.getInstance(); }).start(); } } }\",\"双重检测的懒汉式(DCL)：\",\"存在指令重排可能的代码：\",\"public class LazyMan { private LazyMan(){ System.out.println(Thread.currentThread().getName()+\\\" run\\\"); } private static LazyMan lazyMan; public static LazyMan getInstance(){ if (lazyMan==null){ synchronized (LazyMan.class){ if (lazyMan==null){ lazyMan=new LazyMan();//非原子性操作 // 1.分配内存空间 // 2.执行构造方法 // 3.把结果赋值给这个引用 // 期望执行顺序：1 2 3 // 现在有一个线程A，由于指令重排，导致1 3 2 // 此时有一个线程B，在A执行完1 3后进入，由于引用已被赋值 // 线程B会直接返回还没有被创建的对象引用 } } } return lazyMan; } public static void main(String[] args) { for (int i = 0; i < 10; i++) { new Thread(()->{ LazyMan.getInstance(); }).start(); } } }\",\"使用volatile消除指令重排：\",\"private volatile static LazyMan lazyMan;\",\"静态内部类：\",\"public class Holder { private Holder(){ } public static Holder getInstance(){ return InnerClass.holder; } public static class InnerClass{ private static Holder holder=new Holder(); } }\",\"枚举类可以禁止使用反射创建实例：\",\"public enum EnumDemo { INSTANCE; private EnumDemo getInstance(){ return INSTANCE; } } class Test{ public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException { EnumDemo instance = EnumDemo.INSTANCE; System.out.println(instance.hashCode()); Class<EnumDemo> enumDemoClass = EnumDemo.class; // 通过jad反编译获取真实的构造器 Constructor<EnumDemo> declaredConstructor = enumDemoClass.getDeclaredConstructor(String.class, int.class); declaredConstructor.setAccessible(true); // Cannot reflectively create enum objects EnumDemo enumDemo = declaredConstructor.newInstance(); } }\"]},\"449\":{\"h\":\"可重入锁、自旋锁\"},\"450\":{\"h\":\"可重入锁(递归锁)\",\"t\":[\"在如下代码中，synchronized 的是方法调用者即 home 对象，在执行完 doorA 方法前，这个锁不会释放，所以始终是 A 线程执行完两个方法后，B 线程才开始执行：\",\"public class LocksDemo { public static void main(String[] args) { Home home = new Home(); new Thread(()->{ try { home.doorA(); } catch (InterruptedException e) { e.printStackTrace(); } },\\\"A\\\").start(); new Thread(()->{ try { home.doorA(); } catch (InterruptedException e) { e.printStackTrace(); } },\\\"B\\\").start(); } } class Home{ public synchronized void doorA() throws InterruptedException { System.out.println(Thread.currentThread().getName()+\\\" enter doorA\\\"); TimeUnit.SECONDS.sleep(3); doorB(); } public synchronized void doorB(){ System.out.println(Thread.currentThread().getName()+\\\" enter doorB\\\"); } }\",\"如下代码中，线程 A 执行完 doorA 方法后释放锁去获得 doorB 的锁，此时 B 线程可以获取 doorA 的锁并执行：\",\"注意\",\"lock 与 unlock 必须成对出现，否则会出现程序无法继续执行。\",\"public class LocksDemo { public static void main(String[] args) { Home home = new Home(); new Thread(()->{ try { home.doorA(); } catch (InterruptedException e) { e.printStackTrace(); } },\\\"A\\\").start(); new Thread(()->{ try { home.doorA(); } catch (InterruptedException e) { e.printStackTrace(); } },\\\"B\\\").start(); } } class Home{ private static final ReentrantLock lock = new ReentrantLock(true); public void doorA() throws InterruptedException { try { lock.lock(); System.out.println(Thread.currentThread().getName()+\\\" enter doorA\\\"); TimeUnit.SECONDS.sleep(3); }catch (Exception e){ e.printStackTrace(); }finally { lock.unlock(); } doorB(); } public void doorB(){ try { lock.lock(); System.out.println(Thread.currentThread().getName()+\\\" enter doorB\\\"); }catch (Exception e){ e.printStackTrace(); }finally { lock.unlock(); } } }\"]},\"451\":{\"h\":\"自旋锁\",\"t\":[\"自旋锁\",\"是指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。\",\"自旋锁示例：\",\"public class SpinLock { private static final AtomicStampedReference<Integer> REFERENCE =new AtomicStampedReference<>(0,1); public static void main(String[] args) { new Thread(()->{ try { TimeUnit.SECONDS.sleep(10); REFERENCE.compareAndSet(0,1,1,2); } catch (InterruptedException e) { e.printStackTrace(); } },\\\"A\\\").start(); new Thread(()->{ // 未满足条件前，线程B将会循环等待 while (!REFERENCE.compareAndSet(1,2,2,3)){ try { TimeUnit.SECONDS.sleep(1); System.out.println(Thread.currentThread().getName()+\\\" is waiting\\\"); } catch (InterruptedException e) { e.printStackTrace(); } } },\\\"B\\\").start(); while (Thread.activeCount()>2){ Thread.yield(); } System.out.println(REFERENCE.getReference().intValue()); } }\"]},\"452\":{\"h\":\"synchronized 同步锁\"},\"453\":{\"h\":\"修饰方法，此时锁的是调用方法的对象\",\"t\":[\"public class BuyTicket implements Runnable{ private static Integer ticketNum=10; private boolean flag=true; @Override public void run() { // ticketNum：监视器 while (flag){ try { buy(); } catch (InterruptedException e) { e.printStackTrace(); } } } // 锁方法或锁代码块 private synchronized void buy() throws InterruptedException { if (ticketNum==0){ flag=false; return ; } Thread.sleep(100); System.out.println(Thread.currentThread().getName()+\\\"拿到\\\"+ticketNum--); } public static void main(String[] args) { BuyTicket buyTicket = new BuyTicket(); new Thread(buyTicket,\\\"user1\\\").start(); new Thread(buyTicket,\\\"user2\\\").start(); new Thread(buyTicket,\\\"user3\\\").start(); } }\"]},\"454\":{\"h\":\"修饰变量\",\"t\":[\"public class BuyTicket2 implements Runnable{ private static Integer num=10; private boolean flag=true; public static void main(String[] args) { BuyTicket2 buyTicket = new BuyTicket2(); new Thread(buyTicket,\\\"user1\\\").start(); new Thread(buyTicket,\\\"user2\\\").start(); new Thread(buyTicket,\\\"user3\\\").start(); } @Override public void run() { while (flag){ try { buy(); } catch (InterruptedException e) { e.printStackTrace(); } } } private void buy() throws InterruptedException { // 获取资源 synchronized (num){ if (num>0){ System.out.println(Thread.currentThread().getName()+\\\"拿到了\\\"+num--); }else { flag=false; } } } }\"]},\"455\":{\"h\":\"死锁\"},\"456\":{\"h\":\"出现死锁的情况\",\"t\":[\"public class DeadLock { public static void main(String[] args) { Consumer consumer1 = new Consumer(); Consumer consumer2 = new Consumer(); consumer1.setFlag(true); consumer2.setFlag(false); new Thread(consumer1,\\\"consumer1\\\").start(); new Thread(consumer2,\\\"consumer2\\\").start(); } } class SourceA{ } class SourceB{ } class Consumer implements Runnable{ private final static SourceA sourceA=new SourceA(); private final static SourceB sourceB=new SourceB(); private boolean flag; @Override public void run() { try { test(); } catch (InterruptedException e) { e.printStackTrace(); } } private void test() throws InterruptedException { if (flag){ // 已经拥有一个资源时，再请求其他资源容易出现死锁 synchronized (sourceA){ System.out.println(Thread.currentThread().getName()+\\\"获得了资源A\\\"); Thread.sleep(1000); synchronized (sourceB){ System.out.println(Thread.currentThread().getName()+\\\"获得了资源B\\\"); } } } else { synchronized (sourceB){ System.out.println(Thread.currentThread().getName()+\\\"获得了资源B\\\"); Thread.sleep(1000); synchronized (sourceA){ System.out.println(Thread.currentThread().getName()+\\\"获得了资源A\\\"); } } } } public void setFlag(boolean flag) { this.flag = flag; } }\"]},\"457\":{\"h\":\"死锁发现与解决\",\"t\":[\"使用 Java bin 文件夹中的 jps 工具：jps -l 命令定位进程号。\",\"使用 jstack [进程号] 查看进程堆栈找到死锁问题。\"]},\"458\":{\"h\":\"生产者消费者问题\"},\"459\":{\"h\":\"管程法\"},\"460\":{\"h\":\"synchronized 实现\",\"t\":[\"管道：\",\"public class Pool extends AbstractPool{ private Product[] products=new Product[5]; private int length=-1; @Override public void add(Product product){ synchronized (products){ // 等待总是应该出现在循环中，防止虚假唤醒 while (length==4){ try { System.out.println(\\\"仓库已满\\\"); products.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } ++length; products[length]=product; products.notifyAll(); } } @Override public Product get(){ synchronized (products){ while (length==-1){ try { System.out.println(\\\"仓库为空\\\"); products.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } Product product = products[length]; length--; products.notifyAll(); return product; } } }\",\"生产者：\",\"public class Provider extends Thread{ private AbstractPool pool; public Provider(AbstractPool pool) { this.pool = pool; } @Override public void run() { for (int i = 0; i < 100; i++) { pool.add(new Product(i)); System.out.println(\\\"生产了第\\\"+i+\\\"个产品\\\"); } } }\",\"消费者：\",\"public class Consumer extends Thread{ private AbstractPool pool; public Consumer(AbstractPool pool) { this.pool = pool; } @Override public void run() { while (true){ System.out.println(\\\"消费了第\\\"+pool.get().getId()+\\\"个产品\\\"); } } }\",\"wait 方法：\",\"该线程释放此监视器的所有权，并等待另一个线程通知等待该对象监视器的线程通过调用 notify 方法或 notifyAll 方法 notifyAll 。 然后线程等待，直到它可以重新获得监视器的所有权并恢复执行。\"]},\"461\":{\"h\":\"使用 PV 操作实现\",\"t\":[\"public class PoolC extends AbstractPool{ private static LinkedList<Product> list=new LinkedList<>(); private static ReentrantLock lock = new ReentrantLock(); // 同步信号量 private Condition empty = lock.newCondition(); private Condition full = lock.newCondition(); @Override public void add(Product product) { try { lock.lock(); while (list.size()!=0){ empty.await(); } for (int i = 1; i <= 5; i++) { list.add(new Product(i)); TimeUnit.SECONDS.sleep(1); System.out.println(\\\"生产了产品:\\\"+i); } full.signal(); }catch (Exception e){ e.printStackTrace(); }finally { lock.unlock(); } } @Override public Product get() { try { lock.lock(); while (list.size()!=5){ full.await(); } for (int i = 1; i <= 5; i++) { TimeUnit.SECONDS.sleep(1); System.out.println(\\\"消费了产品:\\\"+list.pop().getId()); } empty.signal(); }catch (Exception e){ e.printStackTrace(); }finally { lock.unlock(); } return null; } }\"]},\"462\":{\"h\":\"信号灯法\",\"t\":[\"来判断一个标志位 flag，如果为 true，就让他等待、如果为 false，就让他去通知另外一个人、把两人衔接起来。\",\"package com.macro.mall.bo; //测试生产者消费者问题2：信号灯法，通过标志位解决 public class Test { public static void main(String[] args) { TV tv = new TV(); new Player(tv).start(); new Watcher(tv).start(); } } //生产者-->演员 class Player extends Thread { TV tv; public Player(TV tv) { this.tv = tv; } @Override public void run() { for (int i = 0; i < 20; i++) { if (i % 2 == 0) { this.tv.play(\\\"什么是快乐星球\\\"); } else { this.tv.play(\\\"如果你想知道什么是快乐星球的话，那我就带你研究研究\\\"); } } } } //消费者-->观众 class Watcher extends Thread { TV tv; public Watcher(TV tv) { this.tv = tv; } @Override public void run() { for (int i = 0; i < 20; i++) { tv.watch(); } } } //产品-->节目 class TV { //演员表演，观众等待 T //观众观看，演员等待 F String voice; // 表演的节目 boolean flag = true; //表演 public synchronized void play(String voice) { if (!flag) { try { this.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\\\"演员表演了：\\\" + voice); //通知观众观看 this.notifyAll(); this.voice = voice; this.flag = !this.flag; } //观看 public synchronized void watch() { if (flag) { try { this.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\\\"观看了：\\\" + voice); //通知演员表演 this.notifyAll(); this.flag = !this.flag; } }\"]},\"463\":{\"h\":\"线程操作\"},\"464\":{\"h\":\"线程停止 stop\",\"t\":[\"建议线程正常停止-->利用次数，不建议死循环。\",\"建议使用标志位-->设置一个标志位。\",\"不要使用 stop 或者 destroy 等过时的方法。\",\"public class ThreadStop implements Runnable{ private Boolean flag=true; @Override public void run() { int i=1; while (flag){ System.out.println(\\\"Thread is running ==> \\\"+i++); } } public void stop(){ this.flag=false; } public static void main(String[] args) { ThreadStop threadStop = new ThreadStop(); new Thread(threadStop).start(); for (int i = 0; i < 90000; i++) { } threadStop.stop(); } }\"]},\"465\":{\"h\":\"线程休眠 sleep\",\"t\":[\"线程休眠存在异常 InterruptedException，且睡眠过程中不会释放锁。\",\"public class ThreadSleep{ private int start=10000; public void show() throws InterruptedException { while (start>0){ // 单位是毫秒 Thread.sleep(1); System.out.println(start--); } } public static void main(String[] args) throws InterruptedException { new ThreadSleep().show(); } }\",\"sleep 和 wait 的 区别\",\"wait 会释放锁，sleep 不会。\",\"wait 必须在同步代码块中，sleep 可以在任何地方。\",\"wait 不需要捕获异常。\"]},\"466\":{\"h\":\"线程礼让 yield\",\"t\":[\"当前线程暂停但是不阻塞，线程由运行态转为就绪态，由CPU重新调度，不一定能礼让成功。\",\"public class ThreadYield { public static void main(String[] args) { YieldTest yieldTest = new YieldTest(); new Thread(yieldTest,\\\"a\\\").start(); new Thread(yieldTest,\\\"b\\\").start(); } } class YieldTest implements Runnable{ @Override public void run() { System.out.println(Thread.currentThread().getName()+\\\"线程开始执行\\\"); Thread.yield(); System.out.println(Thread.currentThread().getName()+\\\"线程结束执行\\\"); } }\"]},\"467\":{\"h\":\"线程强制执行 join\",\"t\":[\"等待此线程执行完毕后，其他线程继续执行，期间其他线程阻塞：\",\"public class ThreadJoin implements Runnable{ @Override public void run() { for (int i = 0; i < 1000; i++) { System.out.println(\\\"vip来了\\\"+i); } } public static void main(String[] args) throws InterruptedException { ThreadJoin threadJoin = new ThreadJoin(); Thread thread = new Thread(threadJoin); thread.start(); for (int i = 0; i < 500; i++) { if (i==200){ // main线程阻塞 // 输出main200后，先输出所有的vip再输出剩下的main thread.join(); } System.out.println(\\\"main\\\"+i); } } }\"]},\"468\":{\"h\":\"观测线程状态\",\"t\":[\"NEW：线程尚未启动。\",\"RUNNABLE：线程正在执行。\",\"TIMED_WAITING：等待另一个线程执行指定动作达到指定等待时间 Thread.sleep()。\",\"TERMINATED：结束的线程。\",\"BLOCKED：线程阻塞。\",\"WAITING：等待另一个线程执行特定动作。\",\"public class ThreadState { public static void main(String[] args) throws InterruptedException { Thread thread=new Thread(()->{ for (int i = 0; i < 10; i++) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\\\"//////////\\\"); }); System.out.println(thread.getState()); thread.start(); System.out.println(thread.getState()); while (thread.getState()!= Thread.State.TERMINATED){ Thread.sleep(100); System.out.println(thread.getState()); } } }\"]},\"469\":{\"h\":\"守护线程\",\"t\":[\"public class DaemonTest { public static void main(String[] args) { Daemon daemon = new Daemon(); Thread thread = new Thread(daemon, \\\"daemon\\\"); // 开启守护线程，默认为false thread.setDaemon(true); thread.start(); BeenDaemon beenDaemon = new BeenDaemon(); new Thread(beenDaemon).start(); } } class Daemon implements Runnable{ @Override public void run() { while (true){ System.out.println(\\\"守护线程\\\"); } } } class BeenDaemon implements Runnable{ @Override public void run() { for (int i = 0; i < 36600; i++) { System.out.println(\\\"living\\\"); } System.out.println(\\\"ending\\\"); } }\"]},\"470\":{\"h\":\"线程优先级\",\"t\":[\"JDK 中：\",\"// 优先级最小值 public final static int MIN_PRIORITY = 1; // 优先级默认值 public final static int NORM_PRIORITY = 5; // 优先级最大值 public final static int MAX_PRIORITY = 10;\",\"设置优先级：\",\"提示\",\"优先级低只代表获取调度的概率低，优先级低的不一定会比优先级高的执行的慢或晚。\",\"public class PriorityTest { public static void main(String[] args) { System.out.println(Thread.currentThread().getPriority()); MyPriority myPriority = new MyPriority(); Thread thread = new Thread(myPriority, \\\"t1\\\"); thread.setPriority(1); thread.start(); Thread thread1 = new Thread(myPriority, \\\"t2\\\"); thread1.setPriority(5); thread1.start(); Thread thread2 = new Thread(myPriority, \\\"t3\\\"); thread2.setPriority(10); thread2.start(); } } class MyPriority implements Runnable{ @Override public void run() { for (int i = 0; i < 214748364; i++) { } System.out.println(Thread.currentThread().getName()+\\\" ===> \\\"+Thread.currentThread().getPriority()); } }\"]},\"471\":{\"h\":\"线程池\"},\"472\":{\"h\":\"使用 Executors 创建\",\"t\":[\"单个线程的线程池:\",\"ExecutorService executorService = Executors.newSingleThreadExecutor();\",\"固定大小的线程池:\",\"// 参数为当前环境的CPU核心数 ExecutorService service = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\",\"可变线程池:\",\"Executor executor = Executors.newCachedThreadPool();\",\"使用示例:\",\"public class PoolTest { public static void main(String[] args) { ExecutorService service = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()); service.execute(new Test()); service.execute(new Test()); service.execute(new Test()); service.execute(new Test()); service.execute(new Test()); // 关闭线程池 service.shutdown(); } } class Test implements Runnable{ @Override public void run() { System.out.println(Thread.currentThread().getName()); } }\",\"提示\",\"FixedThreadPool 和 SingleThreadExecutor 底层都是用 LinkedBlockingQueue 实现的，这个队列最大长度为 Integer.MAX_VALUE，容易导致 OOM。所以实际生产一般自己通过 ThreadPoolExecutor 的 7 个参数，自定义线程池。\"]},\"473\":{\"h\":\"手动创建线程池\",\"t\":[\"JDK 中创建线程池源码：\",\"public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; }\",\"七大参数解释：\",\"corePoolSize：线程池的基本大小。\",\"当新任务在方法 execute(java.lang.Runnable) 中提交时，如果运行的线程少于 corePoolSize，则创建新线程来处理请求，即使其他辅助线程是空闲的。如果运行的线程多于 corePoolSize 而少于 maximumPoolSize，则仅当队列满时才创建新线程。如果设置的 corePoolSize 和 maximumPoolSize 相同，则创建了固定大小的线程池。如果将 maximumPoolSize 设置为基本的无界值（如 Integer.MAX_VALUE），则允许池适应任意数量的并发任务。\",\"maximumPoolSize：能容纳的最大线程数(池子的最大容量)，如果使用了无界的任务队列 PriorityBlockingQueue 这个参数就没什么效果，此值与 CPU 核心数和有关。\",\"keepAliveTime：空闲线程存活时间，超时不用会释放。\",\"如果池中当前有多于 corePoolSize 的线程，则这些多出的线程在空闲时间超过 keepAliveTime 时将会终止。\",\"unit：存活的时间单位。\",\"workQueue：存放提交但未执行任务的队列，阻塞队列。\",\"threadFactory：创建线程的工厂类。\",\"handler：等待队列满后的拒绝策略。\",\"提示\",\"最大并发：能容纳的最大线程数(池子的最大容量)+阻塞队列大小。\",\"public class PoolTest { public static void main(String[] args) throws ExecutionException, InterruptedException { ExecutorService threadPool=new ThreadPoolExecutor(2,5, 1L, TimeUnit.SECONDS, new LinkedBlockingQueue<>(3), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); threadPool.submit(new Test()).get(); threadPool.shutdown(); } } class Test implements Runnable{ @Override public void run() { System.out.println(Thread.currentThread().getName()); } }\",\"四大拒绝策略：\",\"// 多余不处理，抛出异常 public static class AbortPolicy implements RejectedExecutionHandler // 哪里来回哪去,交由原线程处理 public static class CallerRunsPolicy implements RejectedExecutionHandler // 队列满了，去和最久的任务竞争，没有异常 public static class DiscardOldestPolicy implements RejectedExecutionHandler // 丢掉任务，没有异常 public static class DiscardPolicy implements RejectedExecutionHandler\"]},\"474\":{\"h\":\"使用依赖包创建\",\"t\":[\"<dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>r09</version> </dependency>\",\"public class ThreadPool { public static void main(String[] args) { //获取系统处理器个数，作为线程池数量 int nThreads = Runtime.getRuntime().availableProcessors(); // 不使用JDK提供的线程创建工厂 ThreadFactory namedThreadFactory = new ThreadFactoryBuilder() .setNameFormat(\\\"demo-pool-%d\\\").build(); //Common Thread Pool ExecutorService pool = new ThreadPoolExecutor(5, 200, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy()); pool.execute(new MyThread()); pool.execute(new MyThread()); pool.execute(new MyThread()); pool.execute(new MyThread()); pool.execute(new MyThread()); pool.execute(new MyThread()); pool.execute(new MyThread()); pool.execute(new MyThread()); pool.execute(new MyThread()); pool.shutdown(); } } class MyThread implements Runnable{ @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName()+i); } } }\"]},\"475\":{\"h\":\"常用辅助类\"},\"476\":{\"h\":\"CountDownLatch\",\"t\":[\"ountDownLatch 用给定的计数初始化。 await 方法阻塞，直到由于 countDown() 方法的调用而导致当前计数达到零，之后所有等待线程被释放，并且任何后续的 await 调用立即返回。 这是一个一次性的现象，计数无法重置。如果需要重置计数的版本，请考虑使用 CyclicBarrier 。\",\"public class Utils { public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(5); for (int i = 0; i < 5; i++) { new Thread(()->{ System.out.println(Thread.currentThread().getName()+\\\"run\\\"); // 数量减一 countDownLatch.countDown(); },String.valueOf(i)).start(); } // 等待计数器归零，再向下执行 countDownLatch.await(); System.out.println(\\\"all Thread Run\\\"); } }\"]},\"477\":{\"h\":\"CyclicBarrier\",\"t\":[\"允许一组线程全部等待彼此达到共同屏障点的同步辅助。 循环阻塞在涉及固定大小的线程方的程序中很有用，这些线程必须偶尔等待彼此。 屏障被称为循环 ，因为它可以在等待的线程被释放之后重新使用。\",\"public class Utils { public static void main(String[] args) throws InterruptedException { CyclicBarrier cyclicBarrier = new CyclicBarrier(5,()->{ System.out.println(\\\"all Thread runn\\\"); }); for (int i = 0; i < 5; i++) { // lambda表达式中不能直接访问i int finalI = i; new Thread(()->{ System.out.println(Thread.currentThread().getName()+\\\"run\\\"); try { cyclicBarrier.await(); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } },String.valueOf(i)).start(); } } }\"]},\"478\":{\"h\":\"Semaphore\",\"t\":[\"一个计数信号量。 在概念上，信号量维持一组许可证。 如果有必要，每个 acquire() 都会阻塞，直到许可证可用，然后才能使用它。 每个 release() 添加许可证，潜在地释放阻塞获取方。但是，没有使用实际的许可证对象; Semaphore 只保留可用数量的计数，并相应地执行。\",\"信号量通常用于限制线程数，而不是访问某些（物理或逻辑）资源。 例如，这是一个使用信号量来控制对一个项目池的访问的类：\",\"public class Utils { public static void main(String[] args) throws InterruptedException { Semaphore semaphore = new Semaphore(3); for (int i = 0; i < 6; i++) { new Thread(()->{ try { semaphore.acquire(); System.out.println(Thread.currentThread().getName()+\\\"get the position\\\"); Thread.sleep(3000); System.out.println(Thread.currentThread().getName()+\\\"leave the position\\\"); } catch (InterruptedException e) { e.printStackTrace(); }finally { semaphore.release(); } },String.valueOf(i)).start(); } } }\"]},\"479\":{\"h\":\"缓存\"},\"480\":{\"h\":\"缓存简介\",\"t\":[\"什么是缓存：\",\"存在内存中的临时数据。\",\"将用户经常查询的数据放在缓存中，从缓存中查询，提高查询效率，解决了高并发系统的性能问题。\",\"为什么用缓存：\",\"减少访问数据库的次数，减小系统开销，提高系统效率。\",\"什么样的数据适合用缓存：\",\"经常查询且不经常改变的数据。\"]},\"481\":{\"h\":\"Mybatis 缓存\",\"t\":[\"提示\",\"MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。\",\"默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。(一级缓存，sqlsession 级别的缓存)。\",\"二级缓存需要手动开启，基于 namespace 级别。\",\"mybatis 提供了 cache 接口可以自定义缓存(二级)。\"]},\"482\":{\"h\":\"Mybatis 缓存机制\",\"t\":[\"映射语句文件中的所有 select 语句的结果将会被缓存。\",\"映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。\",\"缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。\",\"缓存不会定时进行刷新（也就是说，没有刷新间隔）。\",\"缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。\",\"缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。\"]},\"483\":{\"h\":\"一级缓存\",\"t\":[\"实体类代码：\",\"@Data @EqualsAndHashCode public class User { private int id; private String username; private String password; }\",\"mapper.xml：\",\"<update id=\\\"updateUser\\\"> update mydata.usertable set password=#{password} where id=#{id} </update> <select id=\\\"queryUsers\\\" resultType=\\\"pojo.User\\\"> select * from mydata.usertable </select> <select id=\\\"queryUserById\\\" resultType=\\\"pojo.User\\\"> select * from mydata.usertable where id=#{id} </select>\",\"测试一，两次查询同一记录(sqlsession 生命周期内):\",\"Logging initialized using 'class org.apache.ibatis.logging.stdout.StdOutImpl' adapter. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. Opening JDBC Connection Created connection 293508253. Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] ==> Preparing: select * from mydata.usertable where id=? ==> Parameters: 1(Integer) <== Columns: id, username, password <== Row: 1, 丛维仪, 110 <== Total: 1 User(id=1, username=丛维仪, password=110) ============================== User(id=1, username=丛维仪, password=110) true Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] Returned connection 293508253 to pool.\",\"提示\",\"由日志文件可以看出，两次查询同一记录只访问了一次数据库。\",\"测试二，两次查询的不是同一记录：\",\"Logging initialized using 'class org.apache.ibatis.logging.stdout.StdOutImpl' adapter. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. Opening JDBC Connection Created connection 293508253. Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] ==> Preparing: select * from mydata.usertable where id=? ==> Parameters: 1(Integer) <== Columns: id, username, password <== Row: 1, 丛维仪, 110 <== Total: 1 User(id=1, username=丛维仪, password=110) ============================== ==> Preparing: select * from mydata.usertable where id=? ==> Parameters: 2(Integer) <== Columns: id, username, password <== Row: 2, 王海洋, 13573285937 <== Total: 1 User(id=2, username=王海洋, password=13573285937) false Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] Returned connection 293508253 to pool.\",\"提示\",\"由日志文件可以看出，两次查询不同记录访问了两次数据库。\",\"测试三，查询完第一条记录后，更新数据库内任意记录，再次查询同一条记录：\",\"Logging initialized using 'class org.apache.ibatis.logging.stdout.StdOutImpl' adapter. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. PooledDataSource forcefully closed/removed all connections. Opening JDBC Connection Created connection 293508253. Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] ==> Preparing: select * from mydata.usertable where id=? ==> Parameters: 1(Integer) <== Columns: id, username, password <== Row: 1, 丛维仪, 110 <== Total: 1 User(id=1, username=丛维仪, password=110) ==> Preparing: update mydata.usertable set password=? where id=? ==> Parameters: test1(String), 2(Integer) <== Updates: 1 ============================== ==> Preparing: select * from mydata.usertable where id=? ==> Parameters: 1(Integer) <== Columns: id, username, password <== Row: 1, 丛维仪, 110 <== Total: 1 User(id=1, username=丛维仪, password=110) true Rolling back JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@117e949d] Returned connection 293508253 to pool.\",\"提示\",\"由日志文件可以看出，更新数据库内容导致了缓存的更新。\"]},\"484\":{\"h\":\"缓存失效的情况\",\"t\":[\"查询不同的记录。\",\"增删改操作后，必定刷新缓存。\",\"查询不同的 mapper.xml。\",\"手动清理缓存。\",\"手动清理缓存方法：\",\"sqlSession.clearCache();\"]},\"485\":{\"h\":\"二级缓存\"},\"486\":{\"h\":\"开启二级缓存\",\"t\":[\"在映射器 xml 中添加：\",\"<cache/>\",\"注意\",\"缓存只作用于 cache 标签所在的映射文件中的语句。如果你混合使用 Java API 和 XML 映射文件，在共用接口中的语句将不会被默认缓存。你需要使用 @CacheNamespaceRef 注解指定缓存作用域。\"]},\"487\":{\"h\":\"cache 元素的属性\",\"t\":[\"<cache eviction=\\\"FIFO\\\" flushInterval=\\\"60000\\\" size=\\\"512\\\" readOnly=\\\"true\\\"/>\",\"eviction：指定清除策略，默认的清除策略是 LRU。\",\"可用的清除策略有：\",\"LRU：最近最少使用：移除最长时间不被使用的对象。\",\"FIFO：先进先出：按对象进入缓存的顺序来移除它们。\",\"SOFT：软引用：基于垃圾回收器状态和软引用规则移除对象。\",\"WEAK：弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。\",\"flushInterval：可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。\",\"size：（引用数目）可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。\",\"readOnly：（只读）可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。\",\"提示\",\"二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。\"]},\"488\":{\"h\":\"使用二级缓存的步骤\",\"t\":[\"开启全局缓存：\",\"<settings> <setting name=\\\"cacheEnabled\\\" value=\\\"true\\\"/> </settings>\",\"在要开启二级缓存的 mapper.xml 中开启二级缓存：\",\"<cache eviction=\\\"FIFO\\\" flushInterval=\\\"30000\\\" size=\\\"512\\\" readOnly=\\\"false\\\" />\",\"注意\",\"若 readOnly 属性设置为 false，可能会抛出实体类的序列化异常。\",\"测试：\",\"只有当会话提交或者关闭时，才会提交到二级缓存。\",\"所有的数据都会先放在以及惠存。\",\"异常分析：\",\"为什么要实现序列化：\",\"缓存机制：将查询结果保存到内存中。\",\"内存饱满，需要移出时，MyBatis 就会自动将内存中的内容进行移除，但是文件很重要，不能，此时就需要进行序列化，以文件的形式将内容从内存保存到硬盘上，一个内容保存成文件的读写，必须实现序列化。\",\"解决方法：\",\"实体类实现 Serializable 序列化接口。\",\"将 cache 元素的 readOnly 属性设置为 true。\"]},\"489\":{\"h\":\"二级缓存工作机制\",\"t\":[\"一个会话查询一条记录，这个记录就会被放在当前会话的一级缓存中。\",\"如果当前会话关闭了，一级缓存会消失，一级缓存中的数据被保存到二级缓存中。\",\"新的会话查询信息，就可以从二级缓存中获取内容。\",\"不同的 mapper 查出的数据会放在自己对应的缓存(map)中。\"]},\"490\":{\"h\":\"自定义缓存\",\"t\":[\"除了上述缓存的方式，也可以通过实现你己的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为。\",\"Ehcache 是一种广泛使用的开源 Java 分布式缓存。\"]},\"491\":{\"h\":\"Mybatis 配置解析\"},\"492\":{\"h\":\"Mybatis 配置文件：\",\"t\":[\"configuration（配置）。\",\"properties（属性）。\",\"settings（设置）。\",\"typeAliases（类型别名）。\",\"typeHandlers（类型处理器）。\",\"objectFactory（对象工厂）。\",\"plugins（插件）。\",\"environments（环境配置）。\",\"environment（环境变量）。\",\"transactionManager（事务管理器）。\",\"dataSource（数据源）。\",\"databaseIdProvider（数据库厂商标识）。\",\"mappers（映射器）。\"]},\"493\":{\"h\":\"各属性详解\"},\"494\":{\"h\":\"环境配置及环境变量\",\"t\":[\"尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。\"]},\"495\":{\"h\":\"事务管理器\",\"t\":[\"默认 jdbc：\",\"在 MyBatis 中有两种类型的事务管理器（也就是 type=\\\"[JDBC|MANAGED]\\\"）：\",\"如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。\"]},\"496\":{\"h\":\"数据源\",\"t\":[\"有三种内建的数据源类型（也就是 type=\\\"[UNPOOLED|POOLED|JNDI]\\\"）：\",\"UNPOOLED：这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。\",\"POOLED：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。（默认）\",\"JNDI：这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。\"]},\"497\":{\"h\":\"属性\",\"t\":[\"可以通过 properties 属性来实现引用配置文件：\",\"这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。\",\"编写一个配置文件 db.properties：\",\"driver=com.mysql.cj.jdbc.Driver url=jdbc:mysql://localhost:3306/mydata?serverTimezone=UTC username=root password=123456\",\"mybatis-config.xml 引入外部配置文件，若引用了外部文件，即使再添加 property 标签也优先使用外部配置：\",\"<properties resource=\\\"db.properties\\\"> </properties>\"]},\"498\":{\"h\":\"类型别名\",\"t\":[\"给实体类起别名：\",\"<typeAliases> <typeAlias type=\\\"pojo.User\\\" alias=\\\"user\\\"/> </typeAliases>\",\"扫描实体类的包，JavaBean 的默认别名就是类名的小写：\",\"<package name=\\\"pojo.User\\\"/>\",\"可以在 JavaBean 中使用注解指定别名：\",\"@Alias(\\\"ttt\\\") public class User { private int id; private String username; private String password; }\"]},\"499\":{\"h\":\"映射器\",\"t\":[\"映射器的多种写法：\",\"<!-- 使用相对于类路径的资源引用 --> <mappers> <mapper resource=\\\"org/mybatis/builder/AuthorMapper.xml\\\"/> <mapper resource=\\\"org/mybatis/builder/BlogMapper.xml\\\"/> <mapper resource=\\\"org/mybatis/builder/PostMapper.xml\\\"/> </mappers> <!-- 使用完全限定资源定位符（URL） --> <mappers> <mapper url=\\\"file:///var/mappers/AuthorMapper.xml\\\"/> <mapper url=\\\"file:///var/mappers/BlogMapper.xml\\\"/> <mapper url=\\\"file:///var/mappers/PostMapper.xml\\\"/> </mappers> <!-- 使用映射器接口实现类的完全限定类名 --> <mappers> <mapper class=\\\"org.mybatis.builder.AuthorMapper\\\"/> <mapper class=\\\"org.mybatis.builder.BlogMapper\\\"/> <mapper class=\\\"org.mybatis.builder.PostMapper\\\"/> </mappers> <!-- 将包内的映射器接口实现全部注册为映射器 --> <mappers> <package name=\\\"org.mybatis.builder\\\"/> </mappers>\",\"最后两种方法通过 class 或 package 注册时，dao 层接口必须和配置文件同名，且接口和配置文件必须在同一个包下。\"]},\"500\":{\"h\":\"其他\",\"t\":[\"参考文档\"]},\"501\":{\"h\":\"ybatis-CRUD\"},\"502\":{\"h\":\"select\",\"t\":[\"通过 xml 配置：\",\"提示\",\"resultMap：返回集。\",\"resultType：返回类型。\",\"parameterType：参数类型。\",\"parameterMap：参数集。\",\"<select id=\\\"getUserList\\\" resultMap=\\\"userMapper\\\"> select * from usertable; </select>\",\"通过注解：\",\"@Select(\\\"select * from usertable where id=#{id}\\\") List<User> test(int id);\"]},\"503\":{\"h\":\"update、insert、delete\",\"t\":[\"注意\",\"若没有开启自动提交，则增删改需要提交事务才能实际修改数据。\",\"开启自动提交：\",\"SqlSessionFactory sqlSessionFactory=MybatisUtil.getSqlSessionFactory(); SqlSession sqlSession = sqlSessionFactory.openSession(true);\",\"若不开启自动提交：\",\"@Insert(\\\"insert into usertable(id,username,password) values(#{id},#{username},#{password})\\\") void addUser(User user);\",\"SqlSessionFactory sqlSessionFactory=MybatisUtil.getSqlSessionFactory(); SqlSession sqlSession = sqlSessionFactory.openSession(false); UserMapper mapper = sqlSession.getMapper(UserMapper.class); try{ mapper.addUser(new User(32,\\\"zch\\\",\\\"password\\\")); sqlSession.commit(); } catch (Exception e){ System.out.println(\\\"失败\\\"); sqlSession.rollback(); } sqlSession.close();\"]},\"504\":{\"h\":\"动态 SQL\",\"t\":[\"if。\",\"choose (when, otherwise)。\",\"trim (where, set)。\",\"foreach。\"]},\"505\":{\"h\":\"环境配置\",\"t\":[\"实体类：\",\"@Data public class Blog { private String id; private String title; private String author; private Date createTime; private int views; }\",\"编写随机生成id的工具类：\",\"public class IDUtils { public static String getId(){ return UUID.randomUUID().toString().replaceAll(\\\"-\\\",\\\"\\\"); } }\",\"由于实体类中 createDate 名字与数据库中 create_date 不同，所以要在 mybatis-config.xml 中设置开启驼峰命名转换：\",\"<settings> <setting name=\\\"logImpl\\\" value=\\\"STDOUT_LOGGING\\\"/> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> </settings>\"]},\"506\":{\"h\":\"IF\",\"t\":[\"接口：\",\"List<Blog> queryBlog(Map map);\",\"mapper.xml：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"mapper.BlogMapper\\\"> <select id=\\\"queryBlog\\\" parameterType=\\\"map\\\" resultType=\\\"pojo.Blog\\\"> select * from mydata.blog where true <if test=\\\"title!=null\\\"> and title=#{title} </if> <if test=\\\"author!=null\\\"> and author=#{author} </if> </select> </mapper>\",\"执行代码：\",\"@Test public void query(){ SqlSession sqlSession=MybatisUtil.getSqlSession(); BlogMapper mapper = sqlSession.getMapper(BlogMapper.class); Map<String, String> map=new HashMap<String, String>(); map.put(\\\"title\\\",\\\"动态SQL测试3\\\"); map.put(\\\"author\\\",\\\"PPG007\\\"); List<Blog> blogs = mapper.queryBlog(map); for (Blog blog : blogs) { System.out.println(blog); } sqlSession.close(); }\"]},\"507\":{\"h\":\"其他标签\",\"t\":[\"choose (when, otherwise)：\",\"<select id=\\\"queryBlog2\\\" resultType=\\\"pojo.Blog\\\" parameterType=\\\"map\\\"> select * from mydata.blog <where> <choose> <when test=\\\"title!=null\\\"> and title=#{title} </when> <when test=\\\"author!=null\\\"> and author=#{author} </when> <otherwise> </otherwise> </choose> </where> </select>\",\"trim (where, set)：\",\"如果 where 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 where 元素的功能。\",\"prefix:前缀。\",\"prefixOverrides：要去掉的内容（注意此例中的空格是必要的）。\",\"以下动态 SQL 语句与 where 标签默认功能一致：\",\"<trim prefix=\\\"WHERE\\\" prefixOverrides=\\\"AND |OR \\\"> ... </trim>\",\"定制 set：\",\"<trim prefix=\\\"SET\\\" suffixOverrides=\\\",\\\"> ... </trim>\",\"SQL 片段：\",\"为了实现 SQL 语句的复用 ，使用 sql 标签包含要复用的内容，使用 include 标签在需要使用的地方引用即可。\",\"注意：\",\"最好基于单表定义 SQL 片段。\",\"不要在片段中包含 where 标签。\",\"<sql id=\\\"sqlTest\\\"> <if test=\\\"title!=null\\\"> and title=#{title} </if> <if test=\\\"author!=null\\\"> and author=#{author} </if> </sql> <select id=\\\"queryBlog\\\" parameterType=\\\"map\\\" resultType=\\\"pojo.Blog\\\"> select * from mydata.blog where true <include refid=\\\"sqlTest\\\"/> </select>\",\"foreach：\",\"提示\",\"当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。\",\"<select id=\\\"selectPostIn\\\" resultType=\\\"domain.blog.Post\\\"> SELECT * FROM POST P WHERE ID in <foreach item=\\\"item\\\" index=\\\"index\\\" collection=\\\"list\\\" open=\\\"(\\\" separator=\\\",\\\" close=\\\")\\\"> #{item} </foreach> </select>\",\"示例：\",\"<!-- List<Blog> queryBlog3(Map map); --> <select id=\\\"queryBlog3\\\" resultType=\\\"pojo.Blog\\\"> select * from mydata.blog <where> <foreach collection=\\\"ids\\\" item=\\\"id\\\" open=\\\"(\\\" close=\\\")\\\" separator=\\\"or\\\"> id=#{id} </foreach> </where> </select>\",\"此段 SQL 会被解析为：\",\"select * from mydata.blog WHERE ( id=? or id=? )\",\"执行代码：\",\"@Test public void query(){ SqlSession sqlSession=MybatisUtil.getSqlSession(); BlogMapper mapper = sqlSession.getMapper(BlogMapper.class); Map map=new HashMap(); map.put(\\\"author\\\",\\\"PPG007\\\"); List<String> list=new ArrayList<>(); list.add(\\\"002444de22a148c099a5e1b36dcaf0c2\\\"); list.add(\\\"f69869b0257f45c9907e3d7e0aeaa7d5\\\"); map.put(\\\"ids\\\",list); List<Blog> blogs = mapper.queryBlog3(map); for (Blog blog : blogs) { System.out.println(blog); } sqlSession.close(); }\",\"script：\",\"提示\",\"要在带注解的映射器接口类中使用动态 SQL，可以使用 script 元素。\",\"@Update({\\\"<script>\\\", \\\"update Author\\\", \\\" <set>\\\", \\\" <if test='username != null'>username=#{username},</if>\\\", \\\" <if test='password != null'>password=#{password},</if>\\\", \\\" <if test='email != null'>email=#{email},</if>\\\", \\\" <if test='bio != null'>bio=#{bio}</if>\\\", \\\" </set>\\\", \\\"where id=#{id}\\\", \\\"</script>\\\"}) void updateAuthorValues(Author author);\",\"bind：\",\"bind 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。\",\"<select id=\\\"selectBlogsLike\\\" resultType=\\\"Blog\\\"> <bind name=\\\"pattern\\\" value=\\\"'%' + _parameter.getTitle() + '%'\\\" /> SELECT * FROM BLOG WHERE title LIKE #{pattern} </select>\",\"多数据库：\",\"提示\",\"如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 databaseId 的变量来为不同的数据库构建特定的语句。\",\"<insert id=\\\"insert\\\"> <selectKey keyProperty=\\\"id\\\" resultType=\\\"int\\\" order=\\\"BEFORE\\\"> <if test=\\\"_databaseId == 'oracle'\\\"> select seq_users.nextval from dual </if> <if test=\\\"_databaseId == 'db2'\\\"> select nextval for seq_users from sysibm.sysdummy1\\\" </if> </selectKey> insert into users values (#{id}, #{name}) </insert>\"]},\"508\":{\"h\":\"Hello Mybatis\",\"t\":[\"依赖：\",\" <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>2.0.5</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.21</version> </dependency>\",\"编写实体类：\",\"@Data @AllArgsConstructor @NoArgsConstructor @ToString public class User { private int id; private String username; private String password; }\",\"编写 apper 层接口：\",\"public interface UserMapper { /** * getUserList * @return userList */ List<User> getUserList(); }\",\"编写 mapper.xml 配置文件：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!--mapper接口的名字--> <mapper namespace=\\\"dao.UserMapper\\\"> <resultMap id=\\\"userMapper\\\" type=\\\"pojo.User\\\"> <id column=\\\"id\\\" property=\\\"id\\\" javaType=\\\"java.lang.Integer\\\"/> <result column=\\\"username\\\" property=\\\"username\\\" javaType=\\\"java.lang.String\\\"/> <result column=\\\"password\\\" property=\\\"password\\\" javaType=\\\"java.lang.String\\\"/> </resultMap> <!--id与对应的方法同名--> <select id=\\\"getUserList\\\" resultMap=\\\"userMapper\\\"> select * from usertable; </select> </mapper>\",\"编写 mybatis 配置 xml：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/mydata?serverTimezone=UTC\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </dataSource> </environment> </environments> <!--映射器--> <mappers> <mapper resource=\\\"dao/UserMapper.xml\\\"/> </mappers> </configuration>\",\"编写工具类：\",\"public class MybatisUtil { // 每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实 // 例为核心的。SqlSessionFactory 的实例可以通过 // SqlSessionFactoryBuilder 获得。 // 而 SqlSessionFactoryBuilder 则可以从 XML 配置文件 // 或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。 private static SqlSessionFactory sqlSessionFactory; static { try{ String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); }catch (Exception e){ e.printStackTrace(); } } public static SqlSession getSqlSession(){ //SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。 return sqlSessionFactory.openSession(); } }\",\"由于 maven 约定大于配置，默认只会导出 resources 文件夹下的文件，若将 mapper.xml 放在 java 包中，需要在 pom.xml 中添加：\",\"<build> <resources> <resource> <directory>src/main/resources</directory> <includes> <include>**/*.xml</include> <include>**/*.properties</include> </includes> <filtering>true</filtering> </resource> <resource> <directory>src/main/java</directory> <includes> <include>**/*.xml</include> <include>**/*.properties</include> </includes> <filtering>true</filtering> </resource> </resources> </build>\",\"测试类：\",\" @Test public void test(){ SqlSession sqlSession = MybatisUtil.getSqlSession(); UserMapper mapper = sqlSession.getMapper(UserMapper.class); List<User> users= mapper.getUserList(); for (User user : users) { System.out.println(user.toString()); } sqlSession.close(); }\",\"通过注解配置 mapper 接口：\",\"@Select(\\\"select * from usertable where id=#{id}\\\") List<User> test(int id);\"]},\"509\":{\"h\":\"JDBC\"},\"510\":{\"h\":\"JDBC 进行增删改查的步骤\",\"t\":[\"配置。\",\"加载驱动。\",\"连接数据库。\",\"向数据库发送 sql 的对象 statement。\",\"编写 sql。\",\"执行 sql。\",\"关闭连接，先创建的后关闭。\",\" //配置 String url=\\\"jdbc:mysql://localhost:3306/mydata?serverTimezone=UTC\\\"; String username=\\\"root\\\"; String password=\\\"123456\\\"; //加载驱动 Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); //连接数据库 Connection connection= DriverManager.getConnection(url,username,password); //向数据库发送sql的对象statement Statement statement=connection.createStatement(); //编写sql String sql=\\\"select * from usertable\\\"; //执行sql,查询返回结果集，增删改返回受影响的行数 ResultSet resultSet = statement.executeQuery(sql); while(resultSet.next()){ System.out.println(\\\"id=\\\"+resultSet.getObject(\\\"id\\\")); System.out.println(\\\"username=\\\"+resultSet.getObject(\\\"username\\\")); System.out.println(\\\"password=\\\"+resultSet.getObject(\\\"password\\\")); System.out.println(); } //关闭连接,先创建的后关闭 resultSet.close(); statement.close(); connection.close();\"]},\"511\":{\"h\":\"JDBC 使用预编译的步骤\",\"t\":[\"配置。\",\"加载驱动。\",\"连接数据库。\",\"编写 sql。\",\"预编译。\",\"执行 sql。\",\"关闭连接，先创建的后关闭。\",\" //配置 String url=\\\"jdbc:mysql://localhost:3306/mydata?serverTimezone=UTC\\\"; String username=\\\"root\\\"; String password=\\\"123456\\\"; //加载驱动 Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); //连接数据库 Connection connection= DriverManager.getConnection(url,username,password); //编写sql String sql=\\\"insert into usertable(id,username,password) values (?,?,?)\\\"; //预编译 PreparedStatement preparedStatement=connection.prepareStatement(sql); //给对应的？赋值 preparedStatement.setInt(1,123); preparedStatement.setString(2,\\\"username\\\"); preparedStatement.setString(3,\\\"password\\\"); //执行sql,查询返回结果集，增删改返回受影响的行数 int i=preparedStatement.executeUpdate(); if(i>=1){ //成功 } //关闭连接,先创建的后关闭 preparedStatement.close(); connection.close();\"]},\"512\":{\"h\":\"JDBC 事务\",\"t\":[\"开启事务：\",\"//false是开启 connection.setAutoCommit(false);\",\"事务末尾：\",\"connection.commit();//正常执行\",\"connection.rollback();//执行异常\"]},\"513\":{\"h\":\"生命周期和作用域\",\"t\":[\"理解我们之前讨论过的不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。\",\"SqlSessionFactoryBuilder：\",\"一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。\",\"SqlSessionFactory：\",\"SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。\",\"SqlSession：\",\"每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。\"]},\"514\":{\"h\":\"日志\"},\"515\":{\"h\":\"日志工厂\",\"t\":[\"Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：\",\"SLF4J。\",\"Apache Commons Logging。\",\"Log4j 2。\",\"Log4j。\",\"JDK logging。\",\"STDOUT——LOGGING。\",\"STDOUT——LOGGING 实现：\",\"<settings> <setting name=\\\"logImpl\\\" value=\\\"STDOUT_LOGGING\\\"/> </settings>\",\"Log4j 实现：\",\"### 配置根 ### log4j.rootLogger = debug,console,fileAppender ### 设置输出sql的级别，其中logger后面的内容全部为jar包中所包含的包名 ### log4j.logger.org.apache=dubug log4j.logger.java.sql.Connection=dubug log4j.logger.java.sql.Statement=dubug log4j.logger.java.sql.PreparedStatement=dubug log4j.logger.java.sql.ResultSet=dubug ### 配置输出到控制台 ### log4j.appender.console = org.apache.log4j.ConsoleAppender log4j.appender.console.Target = System.out log4j.appender.console.layout = org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern = %d{ABSOLUTE} %5p %c{1}:%L - %m%n ### 配置输出到文件 ### log4j.appender.fileAppender = org.apache.log4j.FileAppender log4j.appender.fileAppender.File = logs/log.log log4j.appender.fileAppender.Append = true log4j.appender.fileAppender.Threshold = DEBUG log4j.appender.fileAppender.layout = org.apache.log4j.PatternLayout log4j.appender.fileAppender.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n ### 配置输出到文件，并且每天都创建一个文件 ### log4j.appender.dailyRollingFile = org.apache.log4j.DailyRollingFileAppender log4j.appender.dailyRollingFile.File = logs/log.log log4j.appender.dailyRollingFile.Append = true log4j.appender.dailyRollingFile.Threshold = DEBUG log4j.appender.dailyRollingFile.layout = org.apache.log4j.PatternLayout log4j.appender.dailyRollingFile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n### 配置输出到文件，且大小到达指定尺寸的时候产生一个新的文件 ###log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender log4j.appender.ROLLING_FILE.Threshold=ERROR log4j.appender.ROLLING_FILE.File=rolling.log log4j.appender.ROLLING_FILE.Append=true log4j.appender.ROLLING_FILE.MaxFileSize=10KB log4j.appender.ROLLING_FILE.MaxBackupIndex=1 log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n ### 配置输出到邮件 ### log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender log4j.appender.MAIL.Threshold=FATAL log4j.appender.MAIL.BufferSize=10 log4j.appender.MAIL.From=chenyl@yeqiangwei.com log4j.appender.MAIL.SMTPHost=mail.hollycrm.com log4j.appender.MAIL.Subject=Log4J Message log4j.appender.MAIL.To=chenyl@yeqiangwei.com log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n ### 配置输出到数据库 ### log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver log4j.appender.DATABASE.user=root log4j.appender.DATABASE.password= log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES ('[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n') log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender log4j.appender.A1.File=SampleMessages.log4j log4j.appender.A1.DatePattern=yyyyMMdd-HH'.log4j' log4j.appender.A1.layout=org.apache.log4j.xml.XMLLayout\",\"<settings> <setting name=\\\"logImpl\\\" value=\\\"LOG4j\\\"/> </settings>\"]},\"516\":{\"h\":\"多表查询\"},\"517\":{\"h\":\"多对一（学生对老师）\",\"t\":[\"学生类代码：\",\"@Data public class Student { private int id; private String name; private Teacher teacher; }\",\"老师类代码：\",\"@Data @ToString public class Teacher { private int id; private String name; }\",\"student mapper 层接口：\",\"public interface StudentMapper { List<Student> queryAllStudent(); List<Student> queryAllStudent2(); }\",\"student mapper.xml 配置：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!--首先绑定命名空间--> <mapper namespace=\\\"dao.StudentMapper\\\"> <!--方式一：类似子查询--> <!-- 定义结果映射集 --> <!-- 首先总体上此方法返回的是学生类的列表，因此最外层type为student --> <!-- student类具有两个基础类型属性，通过简单映射即可 --> <!-- teacher类对象通过association进行配置 定义select属性为已经写好的select语句 --> <resultMap id=\\\"student\\\" type=\\\"pojo.Student\\\"> <id property=\\\"id\\\" column=\\\"id\\\" javaType=\\\"java.lang.Integer\\\"/> <result property=\\\"name\\\" column=\\\"name\\\" javaType=\\\"java.lang.String\\\"/> <association property=\\\"teacher\\\" column=\\\"tid\\\" javaType=\\\"pojo.Teacher\\\" select=\\\"getTeacher\\\"/> </resultMap> <select id=\\\"queryAllStudent\\\" resultMap=\\\"student\\\"> select * from student; </select> <select id=\\\"getTeacher\\\" resultType=\\\"pojo.Teacher\\\"> select * from teacher where id=#{tid}; </select> <!-- 方式二：类似多表联查 --> <!-- 首先写出SQL语句 然后配置resultMap，依然使用association配置老师 其子标签中的result的property属性为老师类的属性 column为SQL语句中重命名的属性名--> <resultMap id=\\\"student2\\\" type=\\\"pojo.Student\\\"> <id property=\\\"id\\\" column=\\\"sid\\\"/> <result property=\\\"name\\\" column=\\\"sname\\\"/> <association property=\\\"teacher\\\" javaType=\\\"pojo.Teacher\\\"> <result property=\\\"name\\\" column=\\\"tname\\\"/> <result property=\\\"id\\\" column=\\\"tid\\\"/> </association> </resultMap> <select id=\\\"queryAllStudent2\\\" resultMap=\\\"student2\\\"> select s.name sname,t.name tname,t.id tid from student s,teacher t where s.tid=t.id; </select> </mapper>\"]},\"518\":{\"h\":\"一对多（老师对学生）\",\"t\":[\"学生类代码：\",\"@Data public class Student { private int id; private String name; private int tid; }\",\"老师类代码：\",\"@Data @ToString public class Teacher { private int id; private String name; private List<Student> studentList; }\",\"teacher mapper 层接口：\",\"public interface TeacherMapper { Teacher queryAllInfo(@Param(\\\"tid\\\")int id); Teacher queryAllInfo2(@Param(\\\"tid\\\")int id); }\",\"teacher mapper.xml配置：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"dao.TeacherMapper\\\"> <!-- 方式一：多表联查 --> <!-- 首先写出SQL语句，然后定义resultMap --> <!-- 由于teacher中包含一个学生列表，所以使用collection标签进行配置 --> <!-- collection子标签的column属性仍然对应SQL语句中的值，collection标签中的oftype属性为List中的数据类型，此处即为Student --> <resultMap id=\\\"teacher\\\" type=\\\"pojo.Teacher\\\"> <id property=\\\"id\\\" column=\\\"tid\\\" javaType=\\\"java.lang.Integer\\\"/> <result property=\\\"name\\\" column=\\\"tname\\\" javaType=\\\"java.lang.String\\\"/> <collection property=\\\"studentList\\\" javaType=\\\"list\\\" ofType=\\\"pojo.Student\\\"> <result property=\\\"id\\\" column=\\\"sid\\\"/> <result property=\\\"name\\\" column=\\\"sname\\\"/> <result property=\\\"tid\\\" column=\\\"tid\\\"/> </collection> </resultMap> <select id=\\\"queryAllInfo\\\" resultMap=\\\"teacher\\\"> select s.id sid,s.name sname,t.id tid,t.name tname from mydata.student s,mydata.teacher t where s.tid=t.id and t.id=#{tid} </select> <!-- 方式二：子查询 --> <select id=\\\"queryAllInfo2\\\" resultMap=\\\"teacher2\\\"> select * from mydata.teacher where id=#{tid} </select> <select id=\\\"getStudent\\\" resultType=\\\"pojo.Student\\\"> select * from mydata.student where tid=#{tid} </select> <resultMap id=\\\"teacher2\\\" type=\\\"Teacher\\\"> <collection property=\\\"studentList\\\" javaType=\\\"list\\\" ofType=\\\"pojo.Student\\\" select=\\\"getStudent\\\" column=\\\"id\\\"> </collection> </resultMap> </mapper>\"]},\"519\":{\"h\":\"ResultMap 结果集映射\",\"t\":[\"当实体类中只有基本类型时：\",\"<resultMap id=\\\"userMapper\\\" type=\\\"pojo.User\\\"> <id column=\\\"id\\\" property=\\\"id\\\" javaType=\\\"java.lang.Integer\\\"/> <result column=\\\"username\\\" property=\\\"username\\\" javaType=\\\"java.lang.String\\\"/> <result column=\\\"password\\\" property=\\\"password\\\" javaType=\\\"java.lang.String\\\"/> </resultMap>\"]},\"520\":{\"h\":\"Netty 编码解码\",\"t\":[\"Netty 本身自带的 ObjectDecoder 和 ObjectEncoder 可以用来实现 POJO 对象或各种业务对象的编码和解码,底层使用的仍是 Java 序列化技术,而 Java 序列化技术本身效率就不高,存在如下问题：\",\"无法跨语言。\",\"序列化后的体积太大,是二进制编码的 5 倍多。\",\"序列化性能太低。\",\"新的解决方案：Google Protobuf。\",\"Protobuf 官方文档：Proto。\"]},\"521\":{\"h\":\"使用 Protobuf 编码传输单个类\",\"t\":[\"引入 Maven 坐标\",\"<dependency> <groupId>com.google.protobuf</groupId> <artifactId>protobuf-java</artifactId> <version>3.17.3</version> </dependency>\",\"引入 Maven 插件，可以使用此插件将 .proto 文件编译为 .java 文件：\",\"<plugin> <groupId>org.xolstice.maven.plugins</groupId> <artifactId>protobuf-maven-plugin</artifactId> <version>0.6.1</version> <configuration> <protocExecutable> D:\\\\protoc-3.17.3-win64\\\\bin\\\\protoc.exe <!--protoc.exe--> </protocExecutable> <pluginId>protoc-java</pluginId> <!-- proto文件放置的目录 --> <protoSourceRoot>${project.basedir}/src/main/java/protocol</protoSourceRoot> <!-- 生成文件的目录 --> <outputDirectory>${project.basedir}/src/main/java</outputDirectory> <!-- 生成文件前是否把目标目录清空，这个最好设置为false，以免误删项目文件 --> <clearOutputDirectory>false</clearOutputDirectory> </configuration> <executions> <execution> <goals> <goal>compile</goal> </goals> </execution> </executions> </plugin>\",\"编译程序下载地址：protoc。\",\"在 Maven 插件配置的 proto 文件目录中新建一个 .proto 文件。\",\"Student.proto：\",\"syntax=\\\"proto3\\\";//指定版本 option java_package=\\\"pojo\\\";//指定生成的java文件在哪个包下 option java_outer_classname=\\\"StudentPOJO\\\";//指定生成java文件的名字，不能和下面定义的message重名 option java_multiple_files = true;//开启多文件，不开就生成一个java文件，开了会生成接口和类 //proto中数据类型以message定义，与class类似 message Student{ //proto中的类型，对应关系参考官方文档 int32 id=1;//等号不是赋值，而是一个标记，不能重复，就像是数据库主键一样 string name=2; double salary=3; }\",\"执行 Maven 插件的 compile 命令：\",\"在指定的包下生成三个文件：\",\"Netty 客户端设置编码器，注意添加 handler 的先后顺序，发送放在自定义 handler 中，所以编码要放在自定义 handler 之前。\",\"bootstrap.group(eventExecutors) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ch.pipeline().addLast(new ProtobufEncoder()); ch.pipeline().addLast(new ClientHandler()); } });\",\"Netty 客户端自定义 handler：\",\"public class ClientHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ByteBuf byteBuf = (ByteBuf) msg; System.out.println(\\\"client received==>\\\"+byteBuf.toString(StandardCharsets.UTF_8)); System.out.println(\\\"server address==>\\\"+ctx.channel().remoteAddress()); } @Override public void channelActive(ChannelHandlerContext ctx) { System.out.println(\\\"client \\\"+ctx); Student student = Student.newBuilder().setId(31).setName(\\\"李在干神魔\\\").setSalary(5.5).build(); ctx.writeAndFlush(student); } }\",\"Netty 服务端设置解码器，自定义 handler 负责读取输出，所以解码放在自定义 handler 前：\",\".childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new ProtobufDecoder(Student.getDefaultInstance())); pipeline.addLast(new ServerHandler()); } });\",\"Netty 服务端自定义 handler：\",\"public class ServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelReadComplete(ChannelHandlerContext ctx) { ctx.writeAndFlush(Unpooled.copiedBuffer(\\\"扎不多得嘞\\\",StandardCharsets.UTF_8)); } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { ctx.channel().close(); } @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { System.out.println(\\\"server ctx==>\\\"+ctx); //强制类型转换 Student student = (Student) msg; System.out.println(student.getId()); System.out.println(student.getName()); System.out.println(student.getSalary()); } }\",\"如果继承的父类 handler 是支持泛型的，也可以通过泛型指定消息类型，不需要强制类型转换，如 SimpleChannelInboundHandler\"]},\"522\":{\"h\":\"使用 Protobuf 编码传输多个类\",\"t\":[\"同样先创建 .proto 文件：\",\"syntax=\\\"proto3\\\"; option java_package=\\\"pojo\\\"; option java_outer_classname=\\\"SchoolPOJO\\\"; option java_multiple_files = true; option optimize_for=SPEED;//加速编译 message Teacher{//定义一个Teacher int32 id=1; string name=2; } message Child{//定义一个Child int32 age=1; string name=2; } message School{//定义School，由School管理前面的两个类型 enum DataType{//创建枚举类，注意枚举类元素标记从0开始，枚举是内部枚举 TeacherType=0; ChildType=1; } //标识传递的是哪个枚举类型，注意：上面的是枚举，而下面的是数据类型(相当于实例)，也就是说Teacher中有两个数据类型 DataType data_type=1; //oneof表示其中的类型只能是其中一个，要么是Teacher要么是Child oneof dataBody{ Teacher teacher=2; Child child=3; } }\",\"Netty 客户端编码器配置不变，自定义 handler 如下：\",\"public class ClientHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ByteBuf byteBuf = (ByteBuf) msg; System.out.println(\\\"client received==>\\\"+byteBuf.toString(StandardCharsets.UTF_8)); System.out.println(\\\"server address==>\\\"+ctx.channel().remoteAddress()); } @Override public void channelActive(ChannelHandlerContext ctx) { System.out.println(\\\"client \\\"+ctx); Child child = Child.newBuilder().setName(\\\"孩子\\\").setAge(1).build(); School school = School.newBuilder().setDataType(School.DataType.ChildType).setChild(child).build(); ctx.writeAndFlush(school); Teacher teacher = Teacher.newBuilder().setId(2).setName(\\\"教师\\\").build(); School school1 = School.newBuilder().setDataType(School.DataType.TeacherType).setTeacher(teacher).build(); ctx.channel().eventLoop().schedule(()->{ ctx.writeAndFlush(school1); },10,TimeUnit.SECONDS); } }\",\"创建 School 类还是使用 newBuilder()，但是还要设置数据类型，因为 .proto 文件使用了 oneof，然后传入对应的实例对象调用 build() 完成创建：\",\"Netty 服务端解码器配置，这里就变成了传入 School 对象。\",\".childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new ProtobufDecoder(School.getDefaultInstance())); pipeline.addLast(new ServerHandler()); } });\",\"Netty 服务端自定义 handler：\",\"public class ServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelReadComplete(ChannelHandlerContext ctx) { ctx.writeAndFlush(Unpooled.copiedBuffer(\\\"扎不多得嘞\\\",StandardCharsets.UTF_8)); } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { ctx.channel().close(); } @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { System.out.println(\\\"server ctx==>\\\"+ctx); School school = (School) msg; School.DataType dataType = school.getDataType(); if (dataType== School.DataType.ChildType){ Child child = school.getChild(); System.out.println(child.getName()); System.out.println(child.getAge()); }else { Teacher teacher = school.getTeacher(); System.out.println(teacher.getId()); System.out.println(teacher.getName()); } } }\",\"先强制转换为大类型(School)，然后判断 DataType 再调用对应方法即可获取对应值。\"]},\"523\":{\"h\":\"Netty 案例：群聊系统\"},\"524\":{\"h\":\"服务端\",\"t\":[\"public class Server { private final int port; public Server(int port) { this.port = port; } public void run(){ // 给BossEventLoopGroup只分配一个EventLoop NioEventLoopGroup boss = new NioEventLoopGroup(1); NioEventLoopGroup worker = new NioEventLoopGroup(); ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(boss,worker) .channel(NioServerSocketChannel.class) .option(ChannelOption.SO_BACKLOG,128) .childOption(ChannelOption.SO_KEEPALIVE,true) .childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ChannelPipeline pipeline = ch.pipeline(); // 使用Netty提供的字符串编码、解码器 pipeline.addLast(new StringDecoder()); pipeline.addLast(new StringEncoder()); // 添加自己的处理器 pipeline.addLast(new MyHandler()); } }); try { ChannelFuture channelFuture = serverBootstrap.bind(this.port).sync(); channelFuture.addListener((ChannelFutureListener) future -> { if (future.isSuccess()){ System.out.println(\\\"服务端启动成功\\\"); } }); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { e.printStackTrace(); }finally { worker.shutdownGracefully(); boss.shutdownGracefully(); } } public static void main(String[] args) { Server server = new Server(8848); server.run(); } }\"]},\"525\":{\"h\":\"服务端处理器\",\"t\":[\"public class MyHandler extends SimpleChannelInboundHandler<String> { /** * 创建channelGroup管理所有连接的channel */ private static final ChannelGroup CHANNELS = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE); /** * 一连接就调用，第一个调用 * @param ctx 上下文 */ @Override public void handlerAdded(ChannelHandlerContext ctx) { System.out.println(ctx.channel().remoteAddress()+\\\"上线\\\"); CHANNELS.writeAndFlush(\\\"[客户端] \\\"+ctx.channel().remoteAddress()+\\\"上线\\\\n\\\"); CHANNELS.add(ctx.channel()); } private final SimpleDateFormat dateFormat = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); /** * channel被激活时调用 * @param ctx 上下文 */ @Override public void channelActive(ChannelHandlerContext ctx) { System.out.println(ctx.channel().remoteAddress()+\\\"加入聊天\\\"); } /** * 断开连接时调用 * @param ctx 上下文 */ @Override public void handlerRemoved(ChannelHandlerContext ctx) { CHANNELS.writeAndFlush(\\\"[客户端] \\\"+ctx.channel().remoteAddress()+\\\" \\\"+dateFormat.format(new Date())+\\\" 断开连接\\\\n\\\"); } /** * channel失活时调用 * @param ctx 上下文 */ @Override public void channelInactive(ChannelHandlerContext ctx) { CHANNELS.writeAndFlush(\\\"[客户端] \\\"+ctx.channel().remoteAddress()+\\\" \\\"+dateFormat.format(new Date())+\\\" 下线\\\\n\\\"); } /** * 发生异常时调用 * @param ctx 上下文 * @param cause 异常 */ @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { ctx.close(); } /** * 读取客户端发送的消息 * @param ctx 上下文 * @param msg 客户端发来的经过解码的字符串消息 */ @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) { Channel channel = ctx.channel(); CHANNELS.forEach(channel1 -> { if (channel!=channel1){ channel1.writeAndFlush(\\\"[客户端] \\\"+channel.remoteAddress()+\\\" \\\"+dateFormat.format(new Date())+\\\"：\\\\n\\\"+msg+\\\"\\\\n\\\"); }else { channel1.writeAndFlush(\\\"[我] \\\"+dateFormat.format(new Date())+\\\"：\\\\n\\\"+msg+\\\"\\\\n\\\"); } }); } }\"]},\"526\":{\"h\":\"客户端\",\"t\":[\"public class Client { private final String host; private final int port; public Client(String host, int port) { this.host = host; this.port = port; } public void run(){ NioEventLoopGroup eventExecutors = new NioEventLoopGroup(); Bootstrap bootstrap = new Bootstrap(); bootstrap.group(eventExecutors) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ChannelPipeline pipeline = ch.pipeline(); // 添加Netty提供的字符串解码、编码器 pipeline.addLast(new StringDecoder()) .addLast(new StringEncoder()) // 添加自定义处理器 .addLast(new ClientHandler()); } }); try { ChannelFuture channelFuture = bootstrap.connect(this.host, this.port).sync(); channelFuture.addListener((ChannelFutureListener) future -> { if (future.isSuccess()){ System.out.println(\\\"客户端启动成功\\\"); } }); // 不断读取输入 Scanner scanner = new Scanner(System.in); while (scanner.hasNextLine()){ String s = scanner.nextLine(); channelFuture.channel().writeAndFlush(s); } channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { e.printStackTrace(); }finally { eventExecutors.shutdownGracefully(); } } public static void main(String[] args) { Client localhost = new Client(\\\"localhost\\\", 8848); localhost.run(); } }\"]},\"527\":{\"h\":\"客户端处理器\",\"t\":[\"public class ClientHandler extends SimpleChannelInboundHandler<String> { @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) { System.out.print(msg); } }\"]},\"528\":{\"h\":\"Netty 心跳检测\",\"t\":[\"服务端配置心跳检测处理器：\",\"serverBootstrap.group(boss,worker) .channel(NioServerSocketChannel.class) .handler(new LoggingHandler(LogLevel.INFO)) .childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ChannelPipeline pipeline = ch.pipeline(); // Netty提供的空闲状态处理器 // 参数一：多长时间没有读取，发送心跳检测包，检测是否连接 // 参数二：多长时间没有写操作，发送心跳检测包，检测是否连接 // 参数三：多长时间没有读写，发送心跳检测包，检测是否连接 // IdleEvent触发后会传递给管道中下一个handler pipeline.addLast(new IdleStateHandler(3,5,6, TimeUnit.SECONDS)) //自定义IdleEvent处理器 .addLast(new HeartBeatHandler()); } });\",\"自定义 IdleEvent 处理器：\",\"重写 userEventTriggered 方法即可。\",\"public class HeartBeatHandler extends ChannelInboundHandlerAdapter { @Override public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception { if (evt instanceof IdleStateEvent){ IdleStateEvent idleStateEvent = (IdleStateEvent) evt; String msg=\\\"\\\"; switch (idleStateEvent.state()){ case ALL_IDLE: msg=\\\"读写空闲\\\"; break; case READER_IDLE: msg=\\\"读空闲\\\"; break; case WRITER_IDLE: msg=\\\"写空闲\\\"; break; default: break; } System.out.println(ctx.channel().remoteAddress()+\\\" \\\"+msg); ctx.channel().close(); } } }\"]},\"529\":{\"h\":\"Netty 入站出站机制\",\"t\":[\"对客户端和服务端来说，向外发送是出站(相对自己)，向内接收是入站(相对自己)。\",\"入站会调用解码器将字节解码成对象，出站会调用编码器，将对象编码成字节。\"]},\"530\":{\"h\":\"解码器 ByteToMessageDecoder\",\"t\":[\"类图：\",\"由于不可能知道远程节点是否会一次性发送一个完整的信息，TCP 有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理。\"]},\"531\":{\"h\":\"编码器 MessageToByteEncoder\"},\"532\":{\"h\":\"Handler 链与编解码器调用实例\",\"t\":[\"案例目标：客户端发送一个 Long 类型的数据，服务端接收到后回送一个 Long 类型数据。\",\"Long 向字节转换编码器，LongToByteEncoder：\",\"public class LongToByteEncoder extends MessageToByteEncoder<Long> { @Override protected void encode(ChannelHandlerContext ctx, Long msg, ByteBuf out) throws Exception { out.writeLong(msg); } }\",\"字节向 Long 解码器，ByteToLongDecoder：\",\"public class ByteToLongDecoder extends ByteToMessageDecoder { @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception { if (in.readableBytes()>=8){//判断够不够8个字节 out.add(in.readLong()); } } }\",\"服务端初始化类：\",\"public class ServerInitialize extends ChannelInitializer<SocketChannel> { @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { ctx.channel().close(); } @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); //注意先后顺序 pipeline.addLast(new ByteToLongDecoder()); pipeline.addLast(new LongToByteEncoder()); pipeline.addLast(new ServerHandler()); } }\",\"客户端初始化类：\",\"public class ClientInitialize extends ChannelInitializer<SocketChannel> { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new LongToByteEncoder()) .addLast(new ByteToLongDecoder()) .addLast(new ClientHandler()); } }\",\"自定义 handler 直接调用 writeAndFlush() 方法传入一个 msg 即可。\",\"注意\",\"不论编码器和解码器，接收的消息类型必须与待处理的消息类型一致，否则 Handler 不会执行。\"]},\"533\":{\"h\":\"Netty 中其他常用编解码器\",\"t\":[\"ReplayingDecoder：\",\"ReplayingDecoder 扩展了 ByteToMessageDecoder 类,使用这个类,我们不必调用 readableBytes() 方法，即不需要判断字节数是否满足转换要求。\",\"示例：\",\"public class ByteToLongDecoder2 extends ReplayingDecoder<Long> { @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception { out.add(in.readLong()); } }\",\"缺点：\",\"并不是所有的 ByteBuf 操作都被支持,如果调用了一个不被支持的方法,将会抛出一个 UnsupportedOperationException，ReplayingDecoder 在某些情况下可能稍慢于 ByteToMessageDecoder,例如网络缓慢并且消息格式复杂时,消息会被拆成了多个碎片,速度变慢。\",\"LineBasedFrameDecoder：使用行尾控制字符(\\\\n\\\\r)做分隔符解析数据。\",\"DelimiterBasedFrameDecoder：使用自定义的特殊字符作为消息的分隔符。\",\"Httpobjectdecoder：一个 HTTP 数据的解码器。\",\"LengthFieldBasedFrameDecoder：通过指定长度来标识整包消息,这样就可以自动的处理黏包和半包消息。\"]},\"534\":{\"h\":\"IO模型\",\"t\":[\"用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。\"]},\"535\":{\"h\":\"Java BIO\",\"t\":[\"同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理如果这个连接不做任何事就会造成不必要的开销，适用于连接数目比较小且固定的架构，对服务器资源要求较高。\"]},\"536\":{\"h\":\"BIO 服务器示例\",\"t\":[\"本示例使用 Telnet 做客户端，当然自己写也是可以的，服务端使用线程池为每个请求创建一个对应的处理线程，主线程循环监听请求。\",\"import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.net.ServerSocket; import java.net.Socket; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * @author ppg007 * @version 1.0 * @since 2021/8/11 16:34 */ public class BIOServer { public static void main(String[] args) throws IOException { // 创建线程池 ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() / 2 , Runtime.getRuntime().availableProcessors() , 10L , TimeUnit.SECONDS, new ArrayBlockingQueue<>(10) , new ThreadPoolExecutor.DiscardPolicy()); ServerSocket serverSocket = new ServerSocket(8848); System.out.println(\\\"server has started!\\\"); while (true){ System.out.println(\\\"waiting for connection\\\"); Socket accept = serverSocket.accept();//卡在此处 System.out.println(\\\"a client has connected!\\\"); threadPoolExecutor.submit(()->{ handler(accept); }); } // 如果有客户端连接，就创建一个线程，与之通讯 } private static void handler(Socket socket) { char[] chars = new char[1024]; try(InputStream inputStream = socket.getInputStream(); InputStreamReader inputStreamReader = new InputStreamReader(inputStream,\\\"GBK\\\")) {//使用转换流支持Windows中文 while (true){ System.out.println(\\\"reading\\\"); int len = inputStreamReader.read(chars);//卡在此处 if (len==-1){ break; } System.out.println(Thread.currentThread().getName()+\\\"===>\\\"+new String(chars,0,len)); } System.out.println(Thread.currentThread().getName()+\\\"===>\\\"+\\\"disconnected\\\"); }catch (IOException e){ e.printStackTrace(); } } }\",\"在启动 Telnet 连接前，服务端在输出 server has started 和 waiting for connection 后就一直等待，卡在接受连接处，连接上后，每次发送内容结束后，都会卡在 read 处，这就是 BIO 中阻塞的体现，且通过线程名并通过多个 Telnet 客户端连接可以发现确实是一个线程对应一个连接。\"]},\"537\":{\"h\":\"Java NIO\",\"t\":[\"同步非阻塞，服务器实现模式为一个线程处理多个请求，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询连接，有 I/O 请求就进行处理，适用于连接数量多且连接比较短的架构，如聊天服务器、弹幕系统服务期间通讯等，jdk1.4 加入。\",\"三大核心部分：\",\"Channel(通道)。\",\"Buffer(缓冲区)。\",\"Selector(选择器)。\",\"NIO 是面向缓冲区、或者面向块编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区前后移动，提高了处理过程中的灵活性。\",\"每个 channel 对应一个 buffer(一一对应)。\",\"一个 selector 对应一个线程，一个线程对应多个 selector。\",\"channel 注册到 selector 中。\",\"程序切换到那个 channel 是由事件 Event 决定的。\",\"selector 会根据不同的事件在各个通道上进行切换。\",\"buffer 就是一个内存块，底层是数组。\",\"数据读取、写入通过 buffer，buffer 可读可写，需要通过 flip() 方法切换(与 BIO 本质的区别)。\",\"channel 是双向的，可以返回底层操作系统的情况。\",\"常用 channel 类： \",\"FileChannel。\",\"DatagramChannel。\",\"ServerSocketChannel。\",\"SocketChannel。\",\"读写Buffer：\",\"IntBuffer intBuffer = IntBuffer.allocate(10); Random random = new Random(); for (int i = 0; i < intBuffer.capacity(); i++) { intBuffer.put(random.nextInt(100)); } // 切换为只读buffer，再调用put方法会抛出异常 // intBuffer.asReadOnlyBuffer(); // intBuffer.put(1); // 读写切换，不写下方循环不会输出 intBuffer.flip(); while (intBuffer.hasRemaining()){ System.out.println(intBuffer.get()); }\",\"通过 channel 将字符串写入文件：\",\"String str=\\\"蚌埠住了\\\"; FileOutputStream fileOutputStream = new FileOutputStream(\\\"src/main/resources/1.txt\\\"); FileChannel channel = fileOutputStream.getChannel(); ByteBuffer byteBuffer = ByteBuffer.allocate(1024); byteBuffer.put(str.getBytes()); byteBuffer.flip(); channel.write(byteBuffer); fileOutputStream.close();\",\"通过 channel 从文件中读取内容并输出：\",\"FileInputStream fileInputStream = new FileInputStream(\\\"src/main/resources/1.txt\\\"); FileChannel channel = fileInputStream.getChannel(); ByteBuffer byteBuffer = ByteBuffer.allocate(12); channel.read(byteBuffer); System.out.println(new String(byteBuffer.array())); fileInputStream.close();\",\"通过 channel 结合 buffer 拷贝文件：\",\"FileInputStream fileInputStream = new FileInputStream(\\\"src/main/resources/1.txt\\\"); FileChannel channel = fileInputStream.getChannel(); ByteBuffer byteBuffer = ByteBuffer.allocate(1); FileOutputStream fileOutputStream = new FileOutputStream(\\\"src/main/resources/2.txt\\\"); FileChannel fileOutputStreamChannel = fileOutputStream.getChannel(); while (channel.read(byteBuffer) !=-1){ byteBuffer.flip(); fileOutputStreamChannel.write(byteBuffer); // 一下两句选择一句即可，清空缓冲区 // byteBuffer.flip(); byteBuffer.clear(); } fileOutputStream.close(); fileInputStream.close();\",\"只使用 channel 复制文件：\",\"FileInputStream fileInputStream = new FileInputStream(\\\"src/main/resources/69.jpg\\\"); FileOutputStream fileOutputStream = new FileOutputStream(\\\"src/main/resources/69-1.jpg\\\"); FileChannel source = fileInputStream.getChannel(); FileChannel dest = fileOutputStream.getChannel(); source.transferTo(0,source.size(),dest); dest.close(); source.close(); fileOutputStream.close(); fileInputStream.close();\",\"MappedBuffer 直接修改文件内容：\",\"// 直接在堆外内存修改，操作系统不需要拷贝一次 RandomAccessFile randomAccessFile = new RandomAccessFile(\\\"src/main/resources/1.txt\\\",\\\"rw\\\"); FileChannel channel = randomAccessFile.getChannel(); MappedByteBuffer map = channel.map(FileChannel.MapMode.READ_WRITE, 0, 100);//指定范围 map.put(0,(byte) 'q'); map.put(99,(byte) 'c'); // map.put(100,(byte) 'c');溢出异常 randomAccessFile.close();\",\"NIO 支持使用多个 buffer 进行读写操作：\",\"ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); InetSocketAddress inetSocketAddress = new InetSocketAddress(8848); serverSocketChannel.socket().bind(inetSocketAddress); ByteBuffer[] byteBuffers = new ByteBuffer[2]; byteBuffers[0]=ByteBuffer.allocate(5); byteBuffers[1]=ByteBuffer.allocate(3); SocketChannel accept = serverSocketChannel.accept(); while (true){ long byteRead=0; while (byteRead<8){ long read = accept.read(byteBuffers); byteRead+=read; System.out.println(\\\"read\\\"); System.out.println(byteRead); } byteBuffers[0].flip(); byteBuffers[1].flip(); long byteWrite=0; while (byteWrite<8){ long write = accept.write(byteBuffers); byteWrite+=write; System.out.println(\\\"write\\\"); } byteBuffers[0].clear(); byteBuffers[1].clear(); System.out.println(byteRead); System.out.println(byteWrite); }\",\"selector 能够检测多个注册通道上是否有事件发生，如果有事件发生就获取事件进行处理，从而做到一个线程管理多个通道。\",\"当客户端连接时，会通过 ServerSocketChannel 的 accept 方法得到 SocketChannel，每个客户端都有一个 channel。\",\"selector 进行监听，select 方法返回有事件发生的通道个数。\",\"将 SocketChannel 注册到 selector 上，一个 selector 可以注册多个 channel，通过 register 方法。\",\"注册后返回一个 SelectionKey 和指定的 selector 关联。\",\"进一步得到各个 key。\",\"通过 key 反向获取 channel。\",\"通过得到的 channel 进行业务处理。\",\"服务器代码示例：\",\"ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); // 得到一个选择器对象 Selector selector = Selector.open(); serverSocketChannel.socket().bind(new InetSocketAddress(8848)); serverSocketChannel.configureBlocking(false); serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT); while (true){ // select有三个方法 // 无参方法是阻塞的 // 一个参数的方法是阻塞指定毫秒数 // selectNow不阻塞立刻返回 // 还有一个唤醒方法wakeup if (selector.select(1000)==0){ System.out.println(\\\"服务器等待了一秒，无连接\\\"); continue; } Set<SelectionKey> selectionKeys = selector.selectedKeys(); Iterator<SelectionKey> iterator = selectionKeys.iterator(); while (iterator.hasNext()){ SelectionKey key = iterator.next(); if (key.isAcceptable()){ SocketChannel accept = serverSocketChannel.accept(); accept.configureBlocking(false); accept.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(1024)); } if (key.isReadable()){ SocketChannel channel = (SocketChannel) key.channel(); ByteBuffer buffer = (ByteBuffer) key.attachment(); channel.read(buffer); System.out.println(\\\"客户端发来：\\\"+new String(buffer.array())); } iterator.remove(); } }\",\"客户端代码示例：\",\"SocketChannel channel = SocketChannel.open(); channel.configureBlocking(false); InetSocketAddress inetSocketAddress = new InetSocketAddress(\\\"localhost\\\", 8848); if (!channel.connect(inetSocketAddress)){ while (!channel.finishConnect()){ System.out.println(\\\"客户端不阻塞\\\"); } } String str=\\\"蚌埠住了\\\"; ByteBuffer buffer = ByteBuffer.wrap(str.getBytes()); channel.write(buffer); System.in.read();\"]},\"538\":{\"h\":\"利用 NIO 实现在线群聊系统\",\"t\":[\"服务端代码：\",\"package groupchat; import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.*; import java.util.Iterator; import java.util.Set; /** * @author ppg007 * @version 1.0 * @since 2021/8/12 19:57 */ public class Server { // 服务端拥有selector private Selector selector; // 服务端channel private ServerSocketChannel serverSocketChannel; // 服务端监听端口 private static final int port=8848; public Server() { try { // 初始化 this.selector=Selector.open(); this.serverSocketChannel= ServerSocketChannel.open(); this.serverSocketChannel.socket().bind(new InetSocketAddress(port)); this.serverSocketChannel.configureBlocking(false); // 监听连接事件 this.serverSocketChannel.register(this.selector, SelectionKey.OP_ACCEPT); }catch (IOException e){ e.printStackTrace(); } } public void listen(){ try { while (true){ // 间隔两秒监听 int count = this.selector.select(2000); if (count>0){ Iterator<SelectionKey> iterator = this.selector.selectedKeys().iterator(); while (iterator.hasNext()){ SelectionKey key = iterator.next(); // 如果可以连接 if (key.isAcceptable()){ // 创建连接channel SocketChannel accept = this.serverSocketChannel.accept(); accept.configureBlocking(false); // 注册到selector并监听读事件，是服务端读这个客户端可读 accept.register(this.selector,SelectionKey.OP_READ); System.out.println(accept.getRemoteAddress()+\\\" 上线 \\\"); }else if(key.isReadable()){ // 如果可读就读取指定key对应的channel read(key); } iterator.remove(); } }else { System.out.println(\\\"等待......\\\"); } } }catch (IOException e){ e.printStackTrace(); } } private void read(SelectionKey key){ SocketChannel channel=null; try { channel= ((SocketChannel) key.channel()); ByteBuffer buffer = ByteBuffer.allocate(1024); int count = channel.read(buffer); if (count>0) { String msg = new String(buffer.array()); System.out.println(\\\"收到客户端消息：\\\"+msg); // 转发给其他客户端 forward(msg,channel); } } catch (IOException e) { try { System.out.println(channel.getRemoteAddress()+\\\" 离线了\\\"); // 转发离线消息给其他客户端 forward(channel.getRemoteAddress()+ \\\"离线了\\\",channel); // 取消注册 key.cancel(); // 关闭channel channel.close(); } catch (IOException ex) { ex.printStackTrace(); } } } private void forward(String msg,SocketChannel channel) throws IOException { System.out.println(\\\"服务器转发消息中\\\"); // 获取所有注册的key Set<SelectionKey> keys = this.selector.keys(); for (SelectionKey key : keys) { Channel target = key.channel(); // 排除自己，不转发给自己 if (target instanceof SocketChannel && target!=channel){ SocketChannel destination = (SocketChannel) target; ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes()); destination.write(buffer); } } } public static void main(String[] args) { Server server = new Server(); server.listen(); } }\",\"客户端代码：\",\"package groupchat; import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.SelectionKey; import java.nio.channels.Selector; import java.nio.channels.SocketChannel; import java.util.Iterator; import java.util.Scanner; import java.util.concurrent.TimeUnit; /** * @author ppg007 * @version 1.0 * @since 2021/8/12 20:13 */ public class Client { // 指定主机地址 private static final String HOST=\\\"localhost\\\"; // private static final String HOST=\\\"39.107.112.172\\\"; // 指定主机端口号 private static final int PORT=8848; // 定义selector用于监听事件，不用也可以，但是就要一直receive private Selector selector; // 定义channel private SocketChannel socketChannel; // 客户端名字 private String name; public Client() throws IOException { // 初始化 this.selector=Selector.open(); this.socketChannel=SocketChannel.open(new InetSocketAddress(HOST,PORT)); this.socketChannel.configureBlocking(false); this.socketChannel.register(selector, SelectionKey.OP_READ); this.name=this.socketChannel.getLocalAddress().toString(); System.out.println(\\\"客户端\\\"+this.name+\\\"准备好了\\\"); } public void send(String msg){ msg=this.name+\\\" 说：\\\\n\\\"+msg; try { // 写入channel this.socketChannel.write(ByteBuffer.wrap(msg.getBytes())); }catch (IOException e){ e.printStackTrace(); } } public void receive(){ try { int readChannels = this.selector.select(); if (readChannels>0){ Iterator<SelectionKey> iterator = this.selector.selectedKeys().iterator(); while (iterator.hasNext()){ SelectionKey key = iterator.next(); // 读取channel到buffer if (key.isReadable()){ SocketChannel channel = (SocketChannel) key.channel(); ByteBuffer buffer = ByteBuffer.allocate(1024); channel.read(buffer); String msg = new String(buffer.array()); System.out.println(msg.trim()); } iterator.remove(); } } } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) throws IOException { Client client = new Client(); // 用另一个线程循环接收 new Thread(()->{ while (true){ client.receive(); try { TimeUnit.SECONDS.sleep(3); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); // 主线程接收命令行输入 Scanner scanner = new Scanner(System.in); while (scanner.hasNextLine()){ client.send(scanner.nextLine()); } scanner.close(); } }\"]},\"539\":{\"h\":\"零拷贝\",\"t\":[\"传统文件传输：数据读取和写入是从用户空间到内核空间来回复制，而内核空间的数据是通过操作系统层面的 I/O 接口从磁盘读取或写入。\",\"发生了 4 次用户态与内核态的上下文切换。\",\"发生了 4 次数据拷贝：\",\"第一次拷贝，把磁盘上的数据拷贝到操作系统内核的缓冲区里，这个拷贝的过程是通过 DMA 搬运的。\",\"第二次拷贝，把内核缓冲区的数据拷贝到用户的缓冲区里，于是我们应用程序就可以使用这部分数据了，这个拷贝到过程是由 CPU 完成的。\",\"第三次拷贝，把刚才拷贝到用户的缓冲区里的数据，再拷贝到内核的 socket 的缓冲区里，这个过程依然还是由 CPU 搬运的。\",\"第四次拷贝，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程又是由 DMA 搬运的。\",\"零拷贝技术实现的方式通常有 2 种：\",\"mmap + write：\",\"mmap() 系统调用函数会直接把内核缓冲区里的数据「映射」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。\",\"应用进程调用了 mmap() 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；\",\"应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；\",\"最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。\",\"减少一次数据拷贝的过程，仍然需要 4 次上下文切换，因为系统调用还是 2 次。\",\"sendfile(linux2.1)：\",\"该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。\",\"从 Linux 内核 2.4 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， sendfile() 系统调用的过程发生了点变化，具体过程如下：\",\"第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里。\",\"第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝。\",\"这就是所谓的零拷贝（*Zero-copy*）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。。\",\"零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。\",\"所以，总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。\"]},\"540\":{\"h\":\"BIO 实现拷贝(文件大小 35.4MB)\",\"t\":[\"服务端：\",\"public class BIOServer { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(); serverSocket.bind(new InetSocketAddress(8848)); while (true){ Socket accept = serverSocket.accept(); InputStream inputStream = accept.getInputStream(); int len; byte[] buffer = new byte[1024]; FileOutputStream fileOutputStream = new FileOutputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Netty-Learn\\\\\\\\NIO-Demo\\\\\\\\src\\\\\\\\main\\\\\\\\java\\\\\\\\zerocopy\\\\\\\\bio\\\\\\\\test.jpg\\\"); while ((len=inputStream.read(buffer))!=-1){ fileOutputStream.write(buffer,0,len); } fileOutputStream.close(); } } }\",\"客户端：\",\"public class BIOClient { public static void main(String[] args) throws IOException { long clientStart = System.currentTimeMillis(); Socket socket = new Socket(); socket.connect(new InetSocketAddress(8848)); OutputStream outputStream = socket.getOutputStream(); FileInputStream fileInputStream = new FileInputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Netty-Learn\\\\\\\\NIO-Demo\\\\\\\\src\\\\\\\\main\\\\\\\\resources\\\\\\\\340.jpg\\\"); byte[] buffer = new byte[1024]; int len; long copyStart = System.currentTimeMillis(); while ((len=fileInputStream.read(buffer))!=-1){ outputStream.write(buffer,0,len); } long copyEnd = System.currentTimeMillis(); fileInputStream.close(); socket.close(); long clientEnd = System.currentTimeMillis(); System.out.println(\\\"发送文件耗时：\\\"+(copyEnd-copyStart)); System.out.println(\\\"客户端总耗时：\\\"+(clientEnd-clientStart)); } }\",\"耗时情况：\"]},\"541\":{\"h\":\"NIO 实现拷贝(文件大小 35.4MB)\",\"t\":[\"服务端：\",\"public class NIOServer { public static void main(String[] args) throws IOException { ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.socket().bind(new InetSocketAddress(8848)); ByteBuffer buffer = ByteBuffer.allocate(1024); FileOutputStream fileOutputStream = new FileOutputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Netty-Learn\\\\\\\\NIO-Demo\\\\\\\\src\\\\\\\\main\\\\\\\\java\\\\\\\\zerocopy\\\\\\\\nio\\\\\\\\test.jpg\\\"); while (true){ FileChannel channel = fileOutputStream.getChannel(); SocketChannel accept = serverSocketChannel.accept(); int len; while ((len=accept.read(buffer))!=-1){ buffer.flip(); channel.write(buffer); buffer.clear(); } } } }\",\"客户端：\",\"public class NIOClient { public static void main(String[] args) throws IOException { long clientStart = System.currentTimeMillis(); SocketChannel socketChannel = SocketChannel.open(); socketChannel.connect(new InetSocketAddress(8848)); FileInputStream fileInputStream = new FileInputStream(\\\"D:\\\\\\\\Javaweb\\\\\\\\Netty-Learn\\\\\\\\NIO-Demo\\\\\\\\src\\\\\\\\main\\\\\\\\resources\\\\\\\\340.jpg\\\"); FileChannel channel = fileInputStream.getChannel(); long size = channel.size(); double segment = size / (double) (8 * 1024 * 1024); long copyStart = System.currentTimeMillis(); int i=0; for (; i < (int)segment; i++) { channel.transferTo(i*(8*1024*1024),(8*1024*1024),socketChannel); } if (segment!=(int)segment){ channel.transferTo(i*(8*1024*1024),size,socketChannel); } long copyEnd = System.currentTimeMillis(); channel.close(); fileInputStream.close(); socketChannel.close(); long clientEnd = System.currentTimeMillis(); System.out.println(\\\"发送文件耗时：\\\"+(copyEnd-copyStart)); System.out.println(\\\"客户端总耗时：\\\"+(clientEnd-clientStart)); } }\",\"耗时情况：\",\"注意\",\"Windows 环境中，调用一次 transfer 方法最大传输 8MB，需要分段，Linux 则不需要。\"]},\"542\":{\"h\":\"Java AIO\",\"t\":[\"异步非阻塞，引入异步通道概念，采用 Proactor 模式，有效的请求才启动线程，特点：先由操作系统完成后才通知服务端程序启动线程去处理，适用于连接数较多且连接时间较长的应用，比如相册服务器，jdk1.7 加入。\"]},\"543\":{\"h\":\"Netty核心模块\"},\"544\":{\"h\":\"Bootstrap、ServerBootstrap\",\"t\":[\"Bootstrap 是客户端的启动引导类，ServerBootstrap 是服务端的启动引导类。\",\"常用方法：\",\"group(bossGroup,workerGroup)//用于服务端指定两个EventLoopGroup group(eventGroup)//用于客户端设置一个EventLoopGroup channel(NioServerSocketChannel.class)//用于服务端指定服务端channel或客户端指定客户端channel类型 option(ChannelOption.SO_BACKLOG,128)//给自己的channel添加配置 childOption(ChannelOption.SO_KEEPALIVE,true)//给接收到的channel添加配置 childHandler()//添加自定义handler serverBootstrap.bind()//用于服务端，绑定监听端口号 bootstrap.connect()//用于客户端连接服务端\"]},\"545\":{\"h\":\"Future、ChannelFuture\",\"t\":[\"Netty 中 I/O 操作都是异步的，不能立刻得知消息是否正确处理，通过 Future、ChannelFuture 注册监听回调获取执行结果。\"]},\"546\":{\"h\":\"Channel\",\"t\":[\"支持关联 I/O 操作与对应的处理程序。\",\"不同协议、不同的阻塞类型的连接都有不同的 Channel 与之对应，常用的 Channel 类型：\",\"NioSocketChannel：异步的客户端 TCP Socket 连接。\",\"NioServerSocketChannel：异步的服务端 TCP Socket 连接。\",\"NioDatagramChannel：异步的 UDP 连接。\",\"NioSctpChannel：异步的客户端 Sctp 连接。\",\"NioSctpServerChannel：异步的服务端 Sctp 连接。\"]},\"547\":{\"h\":\"Selector\",\"t\":[\"Netty 基于 Selector 对象实现 I/O 多路复用，通过 Selector 一个线程可以监听多个连接的 Channel 事件。\",\"当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询(Select)这些注册的 Channel 是否有已就绪的 I/O 事件（例如可读，可写，网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个 Channel。\"]},\"548\":{\"h\":\"ChannelHandler 及其实现类\",\"t\":[\"ChannelHandler 是一个接口，处理 I/О 事件或拦截 I/O 操作，并将其转发到其 ChannelPipeline(业务处理链)中的下一个处理程序。\",\"ChannelHandler 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类。\",\"ChannelInboundHandler：处理入站 I/O 事件。\",\"ChannelOutboundHandler：处理出站 I/O 操作。\",\"ChannelInboundHandlerAdapter：处理入站 I/O 事件。\",\"ChannelOutboundHandlerAdapter：处理出站 I/O 操作。\",\"ChannelDuplexHandler：用于处理入站和出站事件。\"]},\"549\":{\"h\":\"Pipeline 和 ChannelPipeline\",\"t\":[\"ChannelPipeline 是一个 Handler 的集合，它负责处理和拦截 inbound 或者 outbound 的事件和操作，相当于一个贯穿 Netty 的链(也可以这样理解:ChannelPipeline 是保存 ChannelHandler 的 List，用于处理或拦截 Channel 的入站事件和出站操作)。\",\"ChannelPipeline 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 Channel 中各个的 ChannelHandler 如何相互交互。\",\"一个 Channel 包含了一个ChannelPipeline，而 ChannelPipeline 中又维护了一个由 ChannelHandlerContext 组成的双向链表，并且每个 channelHandlerContext 中又关联着一个 channelHandler 入站事件和出站事件在一个双向链表中，入站事件会从链表 head 往后传递到最后一个入站的 handler,出站事件会从链表 tail 往前传递到最前一个出站的 handler，两种类型的 handler 互不干扰。\"]},\"550\":{\"h\":\"ChannelHandlerContext\",\"t\":[\"保存 Channel 相关所有上下文信息，同时关联一个 ChannelHandler 对象。\",\"即 ChannelHandlerContext 中包含了一个具体的事件处理器 ChannelHandler 同时 ChannelHandlerContext 中也绑定了对应的 pipeline 和 Channel 信息。\"]},\"551\":{\"h\":\"ChannelOption\",\"t\":[\"SO_BACKLOG：\",\"对应 TCP/IP 协议 listen 函数中的 backlog 参数，用来初始化服务器可连接队列大小，多个请求到来时，服务端一次处理一个，把暂时没处理的放入队列。\",\"SO_KEETALIVE：\",\"一直保持连接活动状态，布尔值。\"]},\"552\":{\"h\":\"EventLoopGroup 及其实现类 NioEventLoopGroup\",\"t\":[\"EventLoopGroup 是一组 EventLoop 的抽象,Netty 为了更好的利用多核 CPU 资源一般会有多个 EventLoop 同时工作,每个 EventLoop 维护着一个 Selector 实例。\",\"EventLoopGroup 提供 next 接口,可以从组里面按照一定规则获取其中一个 EventLoop 来处理任务。在 Netty 服务器端编程中,我们一般都需要提供两个 EventLoopGroup,例如: BossEventLoopGroup 和 WorkerEventLoopGroup。\",\"通常一个服务端口即一个 ServerSocketChannel 对应一个 Selector 和一个 EventLoop 线程。 BossEventLoop 负责接收客户端的连接并将 SocketChannel 交给 WorkerEventLoopGroup 来进行 I/O 处理。\",\"BossEventLoopGroup 通常是一个单线程的 EventLoop, EventLoop 维护着一个注册了 ServerSocketChannel 的 Selector 实例 BossEventLoop 不断轮询 Selector 将连接事件分离出来。\",\"通常是 OP_ACCEPT 事件,然后将接收到的 SocketChannel 交给 WorkerEventLoopGroup。\",\"WorkerGroup 会由 next 选择其中一个 EventLoop 来将这个 SocketChannel 注册到其维护的 Selector 并对其后续的 I/O 事件进行处理。\"]},\"553\":{\"h\":\"Unpooled 类\",\"t\":[\"Netty 提供的一个专门用来操作缓冲区的工具类，用来将字符串、整数等值转化为 Netty 中的 ByteBuf。\"]},\"554\":{\"h\":\"RPC 调用\"},\"555\":{\"h\":\"RPC 流程\",\"t\":[\"RPC 服务将 2-11 步封装起来，消费者只能看到调用与结果。\"]},\"556\":{\"h\":\"Netty 实现 RPC\"},\"557\":{\"h\":\"设计描述\",\"t\":[\"创建一个接口，定义抽象方法，用于消费者和提供者的约定。\",\"创建一个提供者，该类需要监听消费者的请求，并按照约定返回数据。\",\"创建一个消费者，该类需要透明的调用自己不存在的方法，内部需要使用 Netty 请求提供者返回数据。\"]},\"558\":{\"h\":\"具体实现\",\"t\":[\"接口：\",\"public interface DemoInterface { /** * 返回逆序字符串 * @param source 源串 * @return 逆序字符串 */ String reverse(String source); /** * 返回两个整数的和 * @param a 整数a * @param b 整数b * @return a+b */ Integer sum(int a,int b); }\",\"Provider 中的实现类:\",\"public class DemoInterfaceImpl implements DemoInterface { @Override public String reverse(String source) { return new StringBuilder(source).reverse().toString(); } @Override public Integer sum(int a, int b) { return a + b; } }\",\"服务端 Netty Handler：\",\"RPC 要有规定传输格式，这里简化为使用井号分隔，分割后第一个字符串是要调用的方法名，之后是参数，由于只添加了 String 编码解码器，所有为了简化这里都用 String 传输。\",\"public class NettyServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { String[] split = msg.toString().split(\\\"#\\\"); if (\\\"reverse\\\".equals(split[0])){ String reverse = new DemoInterfaceImpl().reverse(split[1]); ctx.writeAndFlush(reverse); }else if (\\\"sum\\\".equals(split[0])){ Integer sum = new DemoInterfaceImpl().sum(Integer.parseInt(split[1]), Integer.parseInt(split[2])); ctx.writeAndFlush(String.valueOf(sum)); } } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { ctx.channel().closeFuture(); } @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { } @Override public void handlerAdded(ChannelHandlerContext ctx) throws Exception { } }\",\"编写 Netty 服务端：\",\"public class NettyServer { private NioEventLoopGroup boss; private NioEventLoopGroup worker; public void run(int port){ this.boss=new NioEventLoopGroup(1); this.worker=new NioEventLoopGroup(); ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap .group(boss,worker) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new StringEncoder()) .addLast(new StringDecoder()) .addLast(new NettyServerHandler()); } }); try { ChannelFuture channelFuture = serverBootstrap.bind(port).sync(); channelFuture.addListener((ChannelFutureListener) future -> { if (future.isSuccess()){ System.out.println(\\\"服务端启动成功\\\"); } }); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { e.printStackTrace(); } finally { this.boss.shutdownGracefully(); this.worker.shutdownGracefully(); } } }\",\"编写 Provider 启动类：\",\"public class Server { public static void main(String[] args) { NettyServer nettyServer = new NettyServer(); nettyServer.run(8848); } }\",\"编写 Netty 客户端Handler，客户端实现 Callable 接口，具体思路是在消费者发出 RPC 请求后，创建一个 Handler 对象，然后启动 Netty 客户端，添加 Handler，调用了 active 方法，此时成员变量 context 被赋值，由于 Handler 实现了 Callable 接口，可以交给线程池运行，在 call 方法中发出 RPC 请求，并调用 wait 阻塞等待结果，read 方法在服务提供者传回消息后调用，将结果赋给成员变量 result 并调用 notify 唤醒 call 方法，返回执行结果，call 和 read 方法要使用 synchronized 同步。\",\"public class NettyClientHandler extends ChannelInboundHandlerAdapter implements Callable { private ChannelHandlerContext context; private String result; private String params; public void setParams(String params) { this.params = params; } @Override public synchronized Object call() throws Exception { System.out.println(\\\"发出RPC请求\\\"); this.context.writeAndFlush(this.params); wait(); return this.result; } @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { this.context=ctx; } @Override public synchronized void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { this.result=msg.toString(); System.out.println(\\\"获取结果，准备唤醒\\\"); notify(); } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { ctx.channel().close(); } }\",\"编写 Netty 客户端：\",\"静态代码块中初始化线程池与启动 Netty 客户端并连接，为连接添加监听，在连接成功后给标志位 success 赋值 1，失败赋值为 0，success 初始值为 -1，success 要使用 volatile 保证对 getInstance 方法可见，getInstance 方法接收一个 Class 对象使用动态代理创建一个此类对象，这样消费者在调用 getInstance 方法后获取到的就是接口的动态代理对象，可以直接调用方法。通过 Proxy.newProxyInstance 方法创建动态代理，由于只用了 String 编码解码器，所以要判断调用的 method 的返回值类型，如果是 int 就调用 parseInt 解析为 int，将客户端 Handler 对象提交给线程池并调用 get 方法获取最终结果。\",\"public class NettyClient { public static ExecutorService executorService; static { executorService = new ThreadPoolExecutor( Runtime.getRuntime().availableProcessors() / 2, Runtime.getRuntime().availableProcessors(), 10, TimeUnit.SECONDS, new ArrayBlockingQueue<>(10), new ThreadPoolExecutor.DiscardPolicy()); executorService.execute(NettyClient::init); } private static NettyClientHandler clientHandler; private volatile static int success=-1; public static void init(){ clientHandler=new NettyClientHandler(); NioEventLoopGroup eventExecutors = new NioEventLoopGroup(); Bootstrap bootstrap = new Bootstrap(); bootstrap.group(eventExecutors) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new StringDecoder()) .addLast(new StringEncoder()) .addLast(clientHandler); } }); try { ChannelFuture channelFuture = bootstrap.connect(\\\"localhost\\\",8848).sync(); channelFuture.addListener((ChannelFutureListener) future -> { if (future.isSuccess()){ System.out.println(\\\"请求启动成功\\\"); success=1; }else{ success=0; } }); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { System.out.println(\\\"连接断开\\\"); }finally { eventExecutors.shutdownGracefully(); } } public Object getInstance(Class<?> service){ return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader() , new Class<?>[]{service}, ((proxy, method, args) -> { while (success<=0); String str=method.getName(); for (Object arg : args) { str+=\\\"#\\\"+arg; } clientHandler.setParams(str); return method.getReturnType()==Integer.class ?Integer.parseInt(executorService.submit(clientHandler).get().toString()) :executorService.submit(clientHandler).get(); })); } }\",\"编写消费者：\",\"public class Client { public static void main(String[] args) { NettyClient nettyClient = new NettyClient(); DemoInterface instance = (DemoInterface) nettyClient.getInstance(DemoInterface.class); String result = instance.reverse(\\\"蚌埠住了\\\"); System.out.println(result); System.out.println(instance.sum(1, 2)); NettyClient.executorService.shutdownNow(); } }\"]},\"559\":{\"h\":\"任务队列 Task\"},\"560\":{\"h\":\"用户程序自定义的普通任务\",\"t\":[\"在 handler 类中通过 ctx.channel().eventLoop().execute() 方法执行即可，但是任务添加到队列后是单线程运行的。\",\"public void channelRead(ChannelHandlerContext ctx, Object msg) { System.out.println(\\\"server ctx==>\\\"+ctx); ByteBuf byteBuf = (ByteBuf) msg; System.out.println(\\\"client send==>\\\"+byteBuf.toString(StandardCharsets.UTF_8)); System.out.println(\\\"client address==>\\\"+ctx.channel().remoteAddress()); try { TimeUnit.SECONDS.sleep(5); } catch (InterruptedException e) { e.printStackTrace(); } // 10秒 ctx.channel().eventLoop().execute(()->{ try { TimeUnit.SECONDS.sleep(10); System.out.println(\\\"耗时任务1结束\\\"); } catch (InterruptedException e) { e.printStackTrace(); } }); // 30秒 ctx.channel().eventLoop().execute(()->{ try { TimeUnit.SECONDS.sleep(20); System.out.println(\\\"耗时任务2结束\\\"); } catch (InterruptedException e) { e.printStackTrace(); } }); }\"]},\"561\":{\"h\":\"用户自定义定时任务\",\"t\":[\"在 handler 类中使用 ctx.channel().eventLoop().schedule() 方法执行即可。\",\"@Override public void channelActive(ChannelHandlerContext ctx) { System.out.println(\\\"client \\\"+ctx); ctx.writeAndFlush(Unpooled.copiedBuffer(\\\"蚌埠住了\\\", StandardCharsets.UTF_8)); ctx.channel().eventLoop().schedule(()->{ ctx.writeAndFlush(Unpooled.copiedBuffer(\\\"定时任务\\\",StandardCharsets.UTF_8)); },5, TimeUnit.SECONDS); }\"]},\"562\":{\"h\":\"非当前 Reactor 线程调用 channel 的各种方法\",\"t\":[\"推送系统根据用户标识找到对应的 channel 调用 write 推送信息，write 被提交到任务队列中异步消费。\"]},\"563\":{\"h\":\"Netty 搭建简单 HTTP服务器\",\"t\":[\"handler：\",\"public class HttpServerHandler extends SimpleChannelInboundHandler<HttpObject> { @Override protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception { if (msg instanceof HttpRequest){ HttpRequest httpRequest = (HttpRequest) msg; URI uri = new URI(httpRequest.uri()); if (\\\"/favicon.ico\\\".equals(uri.getPath())){ return; } System.out.println(\\\"msg类型：\\\"+msg.getClass()); System.out.println(\\\"client address:\\\"+ctx.channel().remoteAddress()); //回复信息 ByteBuf content=Unpooled.copiedBuffer(\\\"扎不多得嘞\\\", StandardCharsets.UTF_8); DefaultFullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content); response.headers().set(HttpHeaderNames.CONTENT_TYPE,\\\"text/plain; charset=utf-8\\\"); response.headers().set(HttpHeaderNames.CONTENT_LENGTH,content.readableBytes()); ctx.writeAndFlush(response); } } }\",\"Initialize:\",\"public class HttpServerInitialize extends ChannelInitializer<SocketChannel> { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(\\\"HttpServerHandler\\\",new HttpServerHandler()); pipeline.addBefore(\\\"HttpServerHandler\\\",\\\"MyCodec\\\",new HttpServerCodec()); } }\",\"server:\",\"public class HttpServer { public static void main(String[] args) { NioEventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); try { ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup,workerGroup) .channel(NioServerSocketChannel.class) .childHandler(new HttpServerInitialize()); ChannelFuture channelFuture = serverBootstrap.bind(8848).sync(); channelFuture.addListener((ChannelFutureListener) future -> { if (future.isSuccess()){ System.out.println(\\\"启动成功\\\"); } }); channelFuture.channel().closeFuture().sync().addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (future.isSuccess()) { System.out.println(\\\"关闭成功\\\"); } } }); } catch (InterruptedException e) { e.printStackTrace(); }finally { workerGroup.shutdownGracefully(); bossGroup.shutdownGracefully(); } } }\"]},\"564\":{\"h\":\"TCP粘包拆包\"},\"565\":{\"h\":\"基本介绍\",\"t\":[\"假设客户端分别发送了两个数据包 D1 和 D2 给服务端,由于服务端一次读取到字节数是不确定的,故可能存在以下四种情况:\",\"服务端分两次读取到了两个独立的数据包,分别是 D1 和 D2,没有粘包和拆包。\",\"服务端一次接受到了两个数据包,D1 和 D2 粘合在一起,称之为 TCP 粘包。\",\"服务端分两次读取到了数据包,第一次读取到了完整的 D1 包和 D2 包的部分内容,第二次读取到了 D2 包的剩余内容,这称之为 TCP 拆包。\",\"服务端分两次读取到了数据包,第一次读取到了 D1 包的部分内容 D11,第二次读取到了 D1 包的剩余部分内容 D12 和完整的 D2 包。\"]},\"566\":{\"h\":\"TCP 粘包拆包示例\",\"t\":[\"客户端向服务端循环发送 10 条数据：\",\"public class ClientHandler extends SimpleChannelInboundHandler<ByteBuf> { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { for (int i = 0; i < 10; i++) { ByteBuf byteBuf = Unpooled.copiedBuffer(\\\" 蚌埠住了 \\\" + i, StandardCharsets.UTF_8); ctx.writeAndFlush(byteBuf); } } @Override protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception { //接收服务端回传 byte[] bytes = new byte[msg.readableBytes()]; ByteBuf byteBuf = msg.readBytes(bytes); System.out.println(new String(bytes, StandardCharsets.UTF_8)); } }\",\"服务端读取一次就回送一个随机字符串：\",\"public class ServerHandler extends SimpleChannelInboundHandler<ByteBuf> { @Override protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception { byte[] bytes = new byte[msg.readableBytes()]; msg.readBytes(bytes); System.out.println(new String(bytes, StandardCharsets.UTF_8)); ctx.writeAndFlush(Unpooled.copiedBuffer(UUID.randomUUID().toString(),StandardCharsets.UTF_8)); } }\",\"运行上述代码，每次运行客户端，服务端收到的内容不同，有时在同一行，有时在不同行，客户端则是有时回送一个字符串，有时回送多个字符串，这就是 TCP 的粘包拆包现象。\"]},\"567\":{\"h\":\"自定义协议解决 TCP 粘包拆包问题\",\"t\":[\"使用自定义协议+编码解码器解决。\",\"关键是要解决服务器每次读取数据长度的问题。\",\"定义实体类，实体类有两个成员变量，第一个成员变量表示 byte 数组的长度：\",\"public class Message { public Message(long len, byte[] content) { this.len = len; this.content = content; } public Message() { } public long getLen() { return len; } public void setLen(long len) { this.len = len; } public byte[] getContent() { return content; } public void setContent(byte[] content) { this.content = content; } @Override public String toString() { return \\\"Message{\\\" + \\\"len=\\\" + len + \\\", content=\\\" + Arrays.toString(content) + '}'; } private long len; private byte[] content; }\",\"解码器：\",\"public class MessageEncoder extends MessageToByteEncoder<Message> { @Override protected void encode(ChannelHandlerContext ctx, Message msg, ByteBuf out) throws Exception { System.out.println(\\\"编码方法调用\\\"); out.writeLong(msg.getLen()); out.writeBytes(msg.getContent()); } }\",\"编码器，这里继承了 ReplayingDecoder，不需要判断字节数是否够：\",\"public class MessageDecoder extends ReplayingDecoder<Message> { @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception { System.out.println(\\\"解码方法调用\\\"); long l = in.readLong(); byte[] content = new byte[(int) l]; in.readBytes(content); Message message = new Message(l, content); out.add(message); } }\",\"客户端 Handler：\",\"public class ClientHandler extends SimpleChannelInboundHandler<Message> { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { for (int i = 0; i < 10; i++) { String msg=\\\"第\\\"+i+\\\"此蚌埠住了\\\"; byte[] bytes = msg.getBytes(StandardCharsets.UTF_8); Message message = new Message(bytes.length, bytes); ctx.writeAndFlush(message); } } @Override protected void channelRead0(ChannelHandlerContext ctx, Message msg) throws Exception { System.out.println(new String(msg.getContent(), StandardCharsets.UTF_8)); } }\",\"服务端 Handler：\",\"public class ServerHandler extends SimpleChannelInboundHandler<Message> { @Override protected void channelRead0(ChannelHandlerContext ctx, Message msg) throws Exception { System.out.println(new String(msg.getContent(), StandardCharsets.UTF_8)); String content=\\\"扎不多得嘞\\\"; Message message = new Message(content.getBytes(StandardCharsets.UTF_8).length, content.getBytes(StandardCharsets.UTF_8)); ctx.writeAndFlush(message); } }\",\"为服务端和客户端均添加编码、解码器即可，注意顺序。\"]},\"568\":{\"h\":\"线程模型\"},\"569\":{\"h\":\"传统阻塞 I/O 服务模型\",\"t\":[\"每个连接都需要一个线程完成业务处理、输入输出，如果线程没有数据可读，会阻塞在 read，浪费资源，并发量很大时，创建大量线程，占用很大系统资源。\"]},\"570\":{\"h\":\"Reactor模型\",\"t\":[\"基于 I/O 复用模型，多个连接共用一个阻塞对象。\",\"基于线程池复用线程。\"]},\"571\":{\"h\":\"单Reactor单线程\",\"t\":[\"服务端用一个线程多路复用实现了所有的处理任务，例如 NIO 群聊系统，性能不强，适合客户端数量少且业务处理很快的场景。\"]},\"572\":{\"h\":\"单 Reactor 多线程\",\"t\":[\"Reactor 通过 select 监控客户端请求事件，收到事件后，通过 dispatch 分发。\",\"如果是建立连接请求，则由 acceptor处理并创建一个 handler 对象处理连接后的各种事件。\",\"如果不是连接事件则由 reactor 分发给对应 handler 进行处理。\",\"handler 只负责响应事件，不做具体业务处理，通过 read 读取数据后，分发给后面的 worker 线程池的某个线程处理业务。\",\"worker 线程池分配线程完成任务将结果返回 handler。\",\"handler 收到结果后调用 send 将结果返回 client。\",\"充分利用多核 CPU，多线程共享比较复杂，reactor 处理所有事件监听和响应还是单线程，高并发会有性能瓶颈。\"]},\"573\":{\"h\":\"主从 Reactor 多线程\",\"t\":[\"Reactor 监听连接事件，通过 Acceptor 处理连接事件。\",\"处理连接事件后，将连接分配到 SubReactor。\",\"SubReactor 将连接加入到连接队列进行监听，并创建 handler 进行各种事件处理。\",\"当新事件发生时，SubReactor 调用相应 handler 处理。\",\"handler 通过 read 获取数据，分发给 worker 线程处理。\",\"worker 线程池分配独立线程进行业务处理，返回结果。\",\"handler 收到结果后通过 send 返回给 client。\",\"MainReactor 可以对应多个 SubReactor。\"]},\"574\":{\"h\":\"Netty 工作原理\",\"t\":[\"Netty 抽象出两组线程池，BossGroup 负责接收客户端的连接，WorkerGroup 负责网络的读写。\",\"BossGroup 和 WorkerGroup 类型都是 NioEventLoopGroup。\",\"NioEventLoopGroup 相当于一个事件循环组，这个组中有多个事件循环，每一个事件循环是 NioEventLoop。\",\"NioEventLoop 表示一个不断循环执行处理任务的线程，每个 NioEventLoop 都有一个 selector，用于监听绑定在其上的 socket 的网络通讯。\",\"NioEventLoop 是串行的。\",\"NioEventLoopGroup 可以有多个线程，即可以有多个 NioEventLoop。\",\"每个 Boss NioEventLoop 循环执行步骤有三步： \",\"轮询 accept 事件。\",\"处理 accept 事件，与 client 建立连接，生成 NioSocketChannel，并将其注册到某个 Worker NioEventLoop 上的 selector。\",\"处理任务队列的任务，即 runAllTasks。\",\"每个 Worker NioEventLoop 循环执行的步骤： \",\"轮询 read、write 事件。\",\"处理 I/O 事件，在对应的 NioSocketChannel 处理。\",\"处理任务队列的任务，即 runAllTasks。\",\"每个 Worker NioEventLoop 处理业务时，会使用 pipeline 管道，管道中包含 channel，即通过管道可以获取 channel，管道中维护了很多处理器。\",\"每个 NioEventLoop 包含一个 Selector、一个 taskQueue。\",\"每个 NioEventLoop 的Selector上可以注册监听多个 NioChannel。\",\"每个 NioChannel 只会绑定在唯一的 NioEventLoop。\",\"每个 NioChannel 都绑定有一个自己的 ChannelPipeline。\"]},\"575\":{\"h\":\"Netty 示例程序\",\"t\":[\"本示例在收到客户端发来的消息后将消息和客户端信息输出到控制台并发送一条消息返回给客户端，客户端在控制台输出这条消息和服务端的信息。\",\"引入依赖：\",\"<dependency> <groupId>io.netty</groupId> <artifactId>netty-all</artifactId> <version>4.1.55.Final</version> </dependency>\",\"服务端：\",\"public class Server { public static void main(String[] args) { // 创建BossGroup和WorkerGroup NioEventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); try { // 创建配置对象 ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup,workerGroup) // 指定服务端channel类型 .channel(NioServerSocketChannel.class) // 设置线程队列连接个数 .option(ChannelOption.SO_BACKLOG,128) // 设置保持活动连接状态 .childOption(ChannelOption.SO_KEEPALIVE,true) // 设置处理器 .childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new ServerHandler()); } }); System.out.println(\\\"server is ready\\\"); // 绑定端口并且同步 ChannelFuture channelFuture = serverBootstrap.bind(8848).sync(); // 对关闭通道进行监听 channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { e.printStackTrace(); } finally { // 关闭group workerGroup.shutdownGracefully(); bossGroup.shutdownGracefully(); } } }\",\"服务端处理器：\",\"处理器继承一个 Adapter 并重写需要的方法即可。\",\"public class ServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelReadComplete(ChannelHandlerContext ctx) { ctx.writeAndFlush(Unpooled.copiedBuffer(\\\"扎不多得嘞\\\",StandardCharsets.UTF_8)); } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { ctx.channel().close(); } @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { System.out.println(\\\"server ctx==>\\\"+ctx); ByteBuf byteBuf = (ByteBuf) msg; System.out.println(\\\"client send==>\\\"+byteBuf.toString(StandardCharsets.UTF_8)); System.out.println(\\\"client address==>\\\"+ctx.channel().remoteAddress()); } }\",\"客户端：\",\"public class Client { public static void main(String[] args) { // 客户端同样是事件驱动 NioEventLoopGroup eventExecutors = new NioEventLoopGroup(); Bootstrap bootstrap = new Bootstrap(); bootstrap.group(eventExecutors) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ch.pipeline().addLast(new ClientHandler()); } }); System.out.println(\\\"client is ready\\\"); try { ChannelFuture channelFuture = bootstrap.connect(\\\"localhost\\\", 8848).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { e.printStackTrace(); }finally { eventExecutors.shutdownGracefully(); } } }\",\"客户端处理器：\",\"public class ClientHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ByteBuf byteBuf = (ByteBuf) msg; System.out.println(\\\"client received==>\\\"+byteBuf.toString(StandardCharsets.UTF_8)); System.out.println(\\\"server address==>\\\"+ctx.channel().remoteAddress()); } @Override public void channelActive(ChannelHandlerContext ctx) { System.out.println(\\\"client \\\"+ctx); ctx.writeAndFlush(Unpooled.copiedBuffer(\\\"蚌埠住了\\\", StandardCharsets.UTF_8)); } }\"]},\"576\":{\"h\":\"WebSocket长连接\",\"t\":[\"HTTP 传输的是帧，所以泛型都使用 Frame。\",\"服务端：\",\"public class Server { public static void main(String[] args) { NioEventLoopGroup boss = new NioEventLoopGroup(1); NioEventLoopGroup worker = new NioEventLoopGroup(); ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(boss,worker) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); // 使用HTTP编码解码器 pipeline.addLast(new HttpServerCodec()); // 以块方式写，添加这个处理器 pipeline.addLast(new ChunkedWriteHandler()); // HTTP数据分段，这个处理器将多个段聚合 pipeline.addLast(new HttpObjectAggregator(8192)); // 将HTTP协议升级为ws协议获得长连接、匹配url pipeline.addLast(new WebSocketServerProtocolHandler(\\\"/ppg\\\")); pipeline.addLast(new TextWebSocketFrameHandler()); } }); try { ChannelFuture channelFuture = serverBootstrap.bind(8848).sync(); channelFuture.channel().closeFuture().sync(); } catch (InterruptedException e) { e.printStackTrace(); }finally { worker.shutdownGracefully(); boss.shutdownGracefully(); } } }\",\"自定义的处理器：\",\"public class TextWebSocketFrameHandler extends SimpleChannelInboundHandler<TextWebSocketFrame> { @Override public void handlerRemoved(ChannelHandlerContext ctx) throws Exception { System.out.println(\\\"已断开\\\"); // 唯一 System.out.println(ctx.channel().id().asLongText()); // 不唯一 System.out.println(ctx.channel().id().asShortText()); } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { System.out.println(cause.getMessage()); ctx.channel().close(); } @Override public void handlerAdded(ChannelHandlerContext ctx) { System.out.println(\\\"已连接\\\"); // 唯一 System.out.println(ctx.channel().id().asLongText()); // 不唯一 System.out.println(ctx.channel().id().asShortText()); } @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { super.channelActive(ctx); } @Override protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) { System.out.println(\\\"服务器端收到消息\\\"+msg.text()); ctx.channel().writeAndFlush(new TextWebSocketFrame(\\\"时间\\\"+ LocalTime.now()+\\\"\\\\n\\\"+msg.text())); } }\",\"前端 HTML：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>Title</title> <script> let socket; if (window.WebSocket) { socket = new WebSocket('ws://localhost:8848/ppg'); socket.onmessage = function (ev) { let res = document.getElementById('res'); res.value = res.value + '\\\\n' + ev.data; }; socket.onopen = function () { let res = document.getElementById('res'); res.value = '连接开启了'; }; socket.onclose = function () { let res = document.getElementById('res'); res.value = res.value + '\\\\n连接关闭了'; }; } else { alert('浏览器不支持WebSocket'); } function send(msg) { if (socket.readyState === WebSocket.OPEN) { socket.send(msg); } else { alert('未连接'); } } </script> </head> <body> <form onsubmit=\\\"return false\\\"> <label> <textarea style=\\\"height: 300px;width: 300px\\\" name=\\\"message\\\"></textarea> </label> <input type=\\\"button\\\" value=\\\"发送\\\" onclick=\\\"send(this.form.message.value)\\\" /> <label> <textarea style=\\\"height: 300px;width: 300px\\\" name=\\\"res\\\" id=\\\"res\\\"></textarea> </label> <input type=\\\"button\\\" value=\\\"清空\\\" onclick=\\\"document.getElementById('res').value=''\\\" /> </form> </body> </html>\"]},\"577\":{\"h\":\"使用注解开发\",\"t\":[\"在 Spring4 以后，要想使用注解，必须保证 aop 包导入。\",\"使用注解需要导入 context 约束，并且开启注解的支持。\"]},\"578\":{\"h\":\"常用注解\",\"t\":[\"@Autowired：\",\"自动装配注解，通过ByType实现。\",\"@Resource：\",\"自动装配注解，默认ByName，也会ByType。\",\"@Nullable：\",\"可为空注解。\",\"@Component：\",\"组件注解，需要在配置文件中开启组件扫描，相当于在配置文件中注册bean，默认名字是类名的小写。\",\"<context:component-scan base-package=\\\"pojo\\\"/>\",\"@Value：\",\"加在类属性或方法上，为简单类型的成员赋值，不适用于复杂类型如 List。\",\"@Component public class User { @Value(\\\"test\\\") public String name; }\",\"@Scope：\",\"设置作用域（单例、原型）\",\"@Scope(value = \\\"singleton\\\")\"]},\"579\":{\"h\":\"衍生注解\",\"t\":[\"@Component 的相关注解：\",\"在web开发中，依照MVC三层架构分层：\",\"DAO 层中，使用 @Repository 注解。\",\"Service 层中，使用 @Service 注解。\",\"controller 层中，使用 @Controller 注解。\",\"上述注解功能一致，代表将某个类注册到 Spring 中。\"]},\"580\":{\"h\":\"AOP\"},\"581\":{\"h\":\"AOP 在 Spring 中的作用\",\"t\":[\"提供声明式事务，允许用户自定义切面。\",\"横切关注点：跨越应用程序多个模块的方法或功能。如日志、安全、缓存、事务等。\",\"切面：是一个类，横切关注点被模块化的特殊对象。\",\"通知：切面必须要完成的工作，类中的一个方法。\",\"目标：被通知对象。\",\"代理：向目标对象应用通知之后创建的对象。\",\"切入点：切面通知执行的地点的定义。\",\"连接点：与切入点匹配的执行点。\"]},\"582\":{\"h\":\"使用 Spring 实现 AOP\",\"t\":[\"依赖：\",\"<dependency> <groupId>aspectj</groupId> <artifactId>aspectjweaver</artifactId> <version>1.5.4</version> </dependency>\",\"方式一：使用Spring的接口（xml配置）。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\\\"> <!--注册bean--> <bean id=\\\"userService\\\" class=\\\"demo.service.UserServiceImpl\\\"/> <bean id=\\\"log\\\" class=\\\"demo.Log.Log\\\"/> <bean id=\\\"afterLog\\\" class=\\\"demo.Log.AfterLog\\\"/> <aop:config> <!--切入点--> <!--修饰符 返回值 包名.类名/接口名.方法名(参数列表)--> <aop:pointcut id=\\\"pointcut\\\" expression=\\\"execution(* demo.service.UserServiceImpl.*(..))\\\"/> <!--执行环绕增加--> <aop:advisor advice-ref=\\\"log\\\" pointcut-ref=\\\"pointcut\\\"/> <aop:advisor advice-ref=\\\"afterLog\\\" pointcut-ref=\\\"pointcut\\\"/> </aop:config> </beans>\",\"前置通知：\",\"public class Log implements MethodBeforeAdvice { /** * * @param method 要执行的目标对象的方法 * @param args 参数 * @param target 目标对象 * @throws Throwable 异常 */ public void before(Method method, Object[] args, Object target) throws Throwable { assert target != null; System.out.println(target.getClass().getName()+\\\"的\\\"+method.getName()+\\\"被执行了\\\"); } }\",\"后置通知：\",\"public class AfterLog implements AfterReturningAdvice { public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable { System.out.println(\\\"执行了\\\"+method.getName()+\\\"返回结果为\\\"+returnValue); } }\",\"测试代码如下：\",\"public void test(){ ApplicationContext context = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); //代理的是接口，所以要调用接口才能运行 UserService userService = context.getBean(\\\"userService\\\", UserService.class); userService.add(); }\",\"方式二：自定义类实现AOP（xml）。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\\\"> <bean id=\\\"userService\\\" class=\\\"demo.service.UserServiceImpl\\\"/> <bean id=\\\"log\\\" class=\\\"demo.Log.Log\\\"/> <bean id=\\\"afterLog\\\" class=\\\"demo.Log.AfterLog\\\"/> <!--方式2--> <bean id=\\\"diy\\\" class=\\\"demo.zch.MyPointCut\\\"/> <aop:config> <!--自定义切面--> <aop:aspect ref=\\\"diy\\\"> <aop:pointcut id=\\\"point\\\" expression=\\\"execution(* demo.service.UserServiceImpl.*(..))\\\"/> <!--前置通知--> <aop:before method=\\\"before\\\" pointcut-ref=\\\"point\\\"/> <!--后置通知--> <aop:after-returning method=\\\"after\\\" pointcut-ref=\\\"point\\\"/> </aop:aspect> </aop:config> </beans>\",\"自定义类代码：\",\"public class MyPointCut { public void before(){ System.out.println(\\\"=====方法执行前=====\\\"); } public void after(){ System.out.println(\\\"=====方法执行后=====\\\"); } }\",\"方式三：注解实现。\",\"@Configuration @ComponentScan(\\\"demo\\\") @EnableAspectJAutoProxy //开启自动代理功能 //相当于xml中的<aop:aspectj-autoproxy/> public class Config { //注册bean @Bean(name = \\\"userService\\\") public UserServiceImpl getUserServiceImpl(){ return new UserServiceImpl(); } }\",\"定义切面类代码如下：\",\"@Aspect @Component//切面也必须是Spring管理的一个bean public class AnnoPointCut { @Before(value = \\\"execution(* demo.service.UserServiceImpl.*(..))\\\") public void before(){ System.out.println(\\\"=====方法执行前=====\\\"); } @AfterReturning(value = \\\"execution(* demo.service.UserServiceImpl.*(..))\\\") public void after(){ System.out.println(\\\"=====方法执行后=====\\\"); } @Around(value = \\\"execution(* demo.service.UserServiceImpl.*(..))\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { System.out.println(\\\"=====环绕前=====\\\"); Object o=pjp.proceed(); System.out.println(\\\"=====环绕后=====\\\"); return o; } }\",\"定义切点（可选）：\",\"@Pointcut(\\\"execution(* demo.service.UserServiceImpl.*(..))\\\") public void test(){//方法名就是切点名 }\",\"定义通知：\",\"@Before：在目标方法执行前执行通知。\",\"@After：在目标方法执行后执行通知。\",\"@AfterReturning：在目标方法执行完成后执行通知。\",\"@AfterThrowing：在目标方法抛出异常后执行通知。\",\"@Around：可在目标方法执行前后自定义通知行为。\",\"@Before(\\\"test()\\\")//引用已定义的切点 public void before(){ System.out.println(\\\"=====方法执行前=====\\\"); } @AfterReturning(value = \\\"execution(* demo.service.UserServiceImpl.*(..))\\\")//直接定义切点 public void after(){ System.out.println(\\\"=====方法执行后=====\\\"); } @Around(value = \\\"execution(* demo.service.UserServiceImpl.*(..))\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { System.out.println(\\\"=====环绕前=====\\\"); Object o=pjp.proceed(); System.out.println(\\\"=====环绕后=====\\\"); return o; }\",\"测试代码：\",\" @Test public void test(){ ApplicationContext context = new AnnotationConfigApplicationContext(Config.class); UserService userService = context.getBean(\\\"userService\\\", UserService.class); userService.add(); }\"]},\"583\":{\"h\":\"Bean 的自动装配\",\"t\":[\"自动装配是 Spring 满足 bean 依赖的一种方式！\",\"Spring 会在上下文中自动寻找，并自动给 bean 装配属性。\",\"Spring 中三种装配方式： \",\"在 xml 中显式的配置。\",\"在 Java 中显式的配置。\",\"隐式的自动装配。\"]},\"584\":{\"h\":\"ByName 自动装配\",\"t\":[\"自动在容器上下文中查找，和自己对象 set 方法后面的值对应的 bean id。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"dog\\\" class=\\\"pojo.Dog\\\"/> <bean id=\\\"cat\\\" class=\\\"pojo.Cat\\\"/> <bean id=\\\"man\\\" class=\\\"pojo.Man\\\" p:name=\\\"PPG007\\\" autowire=\\\"byName\\\"/> </beans>\"]},\"585\":{\"h\":\"ByType 自动装配\",\"t\":[\"自动查找和对象属性类型相同的 bean，允许 id 与对象的属性名不同，允许注入的 bean 没有 id 属性，必须保证类型全局唯一。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"dog1\\\" class=\\\"pojo.Dog\\\"/> <bean id=\\\"cat\\\" class=\\\"pojo.Cat\\\"/> <bean id=\\\"man\\\" class=\\\"pojo.Man\\\" p:name=\\\"PPG007\\\" autowire=\\\"byType\\\"/> </beans>\"]},\"586\":{\"h\":\"注解实现自动装配\",\"t\":[\"导入约束：context 约束。\",\"配置注解的支持：<context:annotation-config/>;\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <context:annotation-config/> </beans>\"]},\"587\":{\"h\":\"@Autowired 注解实现自动装配\",\"t\":[\"xml 代码如下：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <bean id=\\\"dog\\\" class=\\\"pojo.Dog\\\"/> <bean id=\\\"cat\\\" class=\\\"pojo.Cat\\\"/> <bean id=\\\"man\\\" class=\\\"pojo.Man\\\"/> <!--必须开启注解支持才能实现--> <!--注解驱动--> <context:annotation-config/> </beans>\",\"Java 代码：\",\"public class Man { @Autowired private Cat cat; @Autowired private Dog dog; private String name; ……………\",\"@Autowired 注解直接在属性上使用，也可以在 set 方法上使用。\",\"使用 @Autowired 可以省略 set 方法，前提是要自动装配的属性在 IOC 容器中存在并且符合 ByType 自动装配的要求。\",\"拓展：@Nullable 允许所被标记的字段为 null。\",\"例如如下代码允许 name 为空值而不会报错：\",\"public void setName(@Nullable String name) { this.name = name; }\",\"拓展：@Autowired具有如下用法\",\"@Autowired(required = false)\",\"如果显式定义了 required 的属性值为 false，说明这个对象可以为 null，否则不允许为空。\",\"拓展：@Autowired 与 @Qualifier 组合使用，可以指定某个确定的 bean 进行装配：\",\"@Autowired @Qualifier(value = \\\"cat\\\")\",\"注意\",\"如果 @Autowired 用作 field 注入会出现以下问题：\",\"不允许声明不可变域。\",\"基于字段的依赖注入在声明为 final/immutable 的字段上不起作用，因为这些字段必须在类实例化时实例化。声明不可变依赖项的惟一方法是使用基于构造器的依赖注入。\",\"容易违反单一职责原则。\",\"使用基于字段的依赖注入，高频使用的类随着时间的推移，我们会在类中逐渐添加越来越多的依赖项，我们用着很爽，很容易忽略类中的依赖已经太多了。但是如果使用基于构造函数的依赖注入，随着越来越多的依赖项被添加到类中，构造函数会变得越来越大，我们一眼就可以察觉到哪里不对劲。\",\"有一个有超过 10 个参数的构造函数是一个明显的信号，表明类已经转变一个大而全的功能合集，需要将类分割成更小、更容易维护的块。\",\"因此，尽管属性注入并不是破坏单一责任原则的直接原因，但它隐藏了信号，使我们很容易忽略这些信号。\",\"与依赖注入容器紧耦合。\",\"使用基于字段的依赖注入的主要原因是为了避免 getter 和 setter 的样板代码或为类创建构造函数。最后，这意味着设置这些字段的唯一方法是通过 Spring 容器实例化类并使用反射注入它们，否则字段将保持 null。\",\"依赖注入设计模式将类依赖项的创建与类本身分离开来，并将此责任转移到类注入容器，从而允许程序设计解耦，并遵循单一职责和依赖项倒置原则(同样可靠)。因此，通过自动装配（autowiring）字段来实现的类的解耦，最终会因为再次与类注入容器(在本例中是Spring)耦合而丢失，从而使类在 Spring 容器之外变得无用。\",\"这意味着，如果您想在应用程序容器之外使用您的类，例如用于单元测试，您将被迫使用 Spring 容器来实例化您的类，因为没有其他可能的方法(除了反射)来设置自动装配字段。\",\"隐藏依赖关系。\",\"在使用依赖注入时，受影响的类应该使用公共接口清楚地公开这些依赖项，方法是在构造函数中公开所需的依赖项，或者使用方法(setter)公开可选的依赖项。当使用基于字段的依赖注入时，实质上是将这些依赖对外隐藏了。 \"]},\"588\":{\"h\":\"@Resource 注解实现自动装配\",\"t\":[\" @Resource private Dog dog;\",\"同样允许使用指定的 bean。\",\" @Resource(name=\\\"dag\\\") private Dog dog;\"]},\"589\":{\"h\":\"@Resource 和 @Autowired 的区别\",\"t\":[\"@Autowired 通过 ByType 方式实现，而且要求被装配的对象必须存在于 IOC 容器。\",\"@Resource 默认通过 ByName 进行，若无法实现，则通过 ByType 实现，两种方式均不行则报错。\",\"@Resource 是 Java 原生注解。\"]},\"590\":{\"h\":\"DI（依赖注入）\"},\"591\":{\"h\":\"构造器注入\"},\"592\":{\"h\":\"set 方式注入\",\"t\":[\"依赖：bean 对象的创建依赖于容器。\",\"注入：bean 对象中的所有属性，由容器来注入。\"]},\"593\":{\"h\":\"例子\",\"t\":[\"简单类：\",\"package pojo; /** * @author ppg007 * @date 2021/1/19 21:16 */ public class Address { private String address; public void setAddress(String address) { this.address = address; } @Override public String toString() { return \\\"Address{\\\" + \\\"address='\\\" + address + '\\\\'' + '}'; } }\",\"复杂类：\",\"package pojo; import java.util.*; /** * @author ppg007 * @date 2021/1/19 21:16 */ public class Student { private String name; private Address address; private String[] books; private List<String> hobbies; private Map<String, String> card; private Set<String> games; private Properties info; private String wife; public Address getAddress() { return address; } public void setAddress(Address address) { this.address = address; } public String[] getBooks() { return books; } public void setBooks(String[] books) { this.books = books; } public List<String> getHobbies() { return hobbies; } public void setHobbies(List<String> hobbies) { this.hobbies = hobbies; } public Map<String, String> getCard() { return card; } public void setCard(Map<String, String> card) { this.card = card; } public Set<String> getGames() { return games; } public void setGames(Set<String> games) { this.games = games; } public Properties getInfo() { return info; } public void setInfo(Properties info) { this.info = info; } public String getWife() { return wife; } public void setWife(String wife) { this.wife = wife; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", address=\\\" + address.toString() + \\\", books=\\\" + Arrays.toString(books) + \\\", hobbies=\\\" + hobbies + \\\", card=\\\" + card + \\\", games=\\\" + games + \\\", info=\\\" + info + \\\", wife='\\\" + wife + '\\\\'' + '}'; } }\",\"测试类：\",\"import com.sun.jnlp.AppletContainerCallback; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import pojo.Student; /** * @author ppg007 * @date 2021/1/19 21:20 */ public class MyTest { public static void main(String[] args) { ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); Student student= (Student) applicationContext.getBean(\\\"student\\\"); System.out.println(student.toString()); } }\",\"xml 文件配置：\",\" <!--普通值注入 value--> <property name=\\\"name\\\" value=\\\"PPG007\\\"/>\",\" <!--bean注入 ref--> <property name=\\\"address\\\" ref=\\\"address\\\"/>\",\" <!--数组注入 array--> <property name=\\\"books\\\"> <array> <value>test1</value> <value>test2</value> <value>test3</value> <value>test4</value> <value>test5</value> </array> </property>\",\" <!--List集合注入--> <property name=\\\"hobbies\\\"> <list> <value>ListTest1</value> <value>ListTest2</value> <value>ListTest3</value> <value>ListTest4</value> <value>ListTest5</value> </list> </property>\",\" <!--Map注入--> <property name=\\\"card\\\"> <map> <entry key=\\\"key1\\\" value=\\\"MapTest1\\\"/> <entry key=\\\"key2\\\" value=\\\"MapTest2\\\"/> <entry key=\\\"key3\\\" value=\\\"MapTest3\\\"/> </map> </property>\",\" <!--Set注入--> <property name=\\\"games\\\"> <set> <value>SetTest1</value> <value>SetTest2</value> <value>SetTest3</value> <value>SetTest4</value> <value>SetTest5</value> </set> </property>\",\" <!--Property注入--> <property name=\\\"info\\\"> <props> <prop key=\\\"学号\\\">201801060431</prop> <prop key=\\\"性别\\\">男</prop> </props> </property>\",\"<!--空值注入--> <property name=\\\"wife\\\"> <null/><!--null标签赋null--> <!--<value></value> value为空赋空值--> </property> </bean>\"]},\"594\":{\"h\":\"拓展方式注入\",\"t\":[\"p 标签，相当于 property 标签：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!--p命名空间注入 直接注入属性的值--> <bean id=\\\"user\\\" class=\\\"pojo.User\\\" p:name=\\\"PPG007\\\" p:age=\\\"21\\\"/> </beans>\",\"c 标签，通过构造器注入（有参）：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!--c命名空间注入--> <bean id=\\\"user2\\\" class=\\\"pojo.User\\\" c:age=\\\"20\\\" c:name=\\\"PPG\\\"/> </beans>\"]},\"595\":{\"h\":\"HelloSpring\"},\"596\":{\"h\":\"最简单的Spring配置\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 使用Spring创建对象 bean标签相当于Hello hello=new Hello(); property标签相当于调用了相应属性的set方法 实现了控制反转 控制：使用Spring后，对象是由Spring来创建的 反转：程序本身不创建对象，而变成被动的接收对象 依赖注入：利用set方法来进行注入 --> <bean id=\\\"hello\\\" class=\\\"pojo.Hello\\\"> <property name=\\\"name\\\" value=\\\"Spring\\\"/> </bean> </beans>\"]},\"597\":{\"h\":\"修改第二部分中的代码\",\"t\":[\"添加 beans.xml：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean class=\\\"dao.UserDaoImpl\\\" id=\\\"userDao\\\"/> <bean class=\\\"dao.UserDaoMysqlImpl\\\" id=\\\"userDaoMysql\\\"/> <bean class=\\\"dao.UserDaoOracleImpl\\\" id=\\\"userDaoOracle\\\"/> <!-- 由于UserServiceImpl中类成员是一个UserDao对象，所以要使用ref赋值,ref引用Spring中创建的类 --> <bean class=\\\"service.UserServiceImpl\\\" id=\\\"userService\\\"> <property name=\\\"userDao\\\" ref=\\\"userDaoMysql\\\"/> </bean> </beans>\",\"测试代码：\",\"public class MyTest2 { public static void main(String[] args) { ApplicationContext context=new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); Object o=context.getBean(\\\"userService\\\"); ((UserServiceImpl)o).getUser(); } }\"]},\"598\":{\"h\":\"IOC 理论\"},\"599\":{\"h\":\"IOC 基本原理与思想\",\"t\":[\"public class UserServiceImpl implements UserService { private UserDao userDao; //使用set实现了动态注入 public void setUserDao(UserDao userDao) { this.userDao = userDao; } public void getUser() { userDao.getUser(); } }\",\"若不使用 set 方法，程序主动创建对象，控制权在程序员手中。\",\"使用后，程序不再具有主动性，转而被动接收对象，通过 set 实现了控制反转。\",\"使用 set 方法的用户代码如下:\",\"public static void main(String[] args) { UserService userService=new UserServiceImpl(); ((UserServiceImpl)userService).setUserDao(new UserDaoMysqlImpl()); userService.getUser(); }\",\"若不使用 set 方法，则需要在 UserServiceImpl 中不停修改代码：\",\"//每个Dao层实现都要赋值 private UserDao userDao=new UserDaoMysqlImpl(); public void getUser() { userDao.getUser(); }\"]},\"600\":{\"h\":\"IOC 本质\",\"t\":[\"提示\",\"控制反转 IOC 是一种设计思想，DI（依赖注入）是实现 IOC 的一种方法\",\"控制反转：对象的创建转移给第三方，获得依赖对象的方式反转了。 Spring 容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从 IOC 容器中取出需要的对象。\"]},\"601\":{\"h\":\"IOC 创建对象的方式\",\"t\":[\"默认使用无参构造。\",\"配置文件加载时，bean 已被实例化。\",\"若使用有参创建：\",\"使用下标赋值：\",\"<bean class=\\\"service.UserServiceImpl\\\" id=\\\"userService\\\"> <constructor-arg index=\\\"0\\\" ref=\\\"userDao\\\"/> </bean>\",\"通过类型赋值（不建议使用，若有多个参数，无法使用）：\",\"<bean class=\\\"service.UserServiceImpl\\\" id=\\\"userService\\\"> <constructor-arg type=\\\"dao.UserDao\\\" ref=\\\"userDao\\\"/> </bean>\",\"直接通过参数名设置：\",\"<bean class=\\\"service.UserServiceImpl\\\" id=\\\"userService\\\"> <constructor-arg ref=\\\"userDaoOracle\\\" name=\\\"userDao\\\"/> </bean>\",\"若参数是基本类型则使用value、name属性指定值即可。\"]},\"602\":{\"h\":\"使用 Java 方式配置 Spring\",\"t\":[\"@Configuration：\",\"添加在配置类前，表示此 Java 类是一个配置文件。\",\"@Configuration public class Config { ………… }\",\"@ComponentScan：\",\"添加在配置类前，用于开启组件注册扫描，value 值为全包名。\",\"@Configuration @ComponentScan(value = \\\"pojo\\\") public class Config { ………… }\",\"@Import：\",\"与 xml 中 import 标签作用相同，参数为要引用的配置类的 class。\",\"@Import(Config2.class) public class Config { ………… }\",\"@Bean：\",\"添加在配置类的方法名上，表示注册一个 bean,方法名就是 bean 的名字，也可以通过 name 属性指定 bean 的名字。\",\"@Configuration @ComponentScan(value = \\\"pojo\\\") @Import(Config2.class) public class Config { @Bean public User getUser(){ return new User(); } }\",\"通过注解进行配置，获取容器时要调用注解对应的上下文：\",\"ApplicationContext context=new AnnotationConfigApplicationContext(Config.class); User user= (User) context.getBean(\\\"getUser\\\"); System.out.println(user.toString());\"]},\"603\":{\"h\":\"Mybatis\",\"t\":[\"Mybatis\"]},\"604\":{\"h\":\"相关依赖\",\"t\":[\" <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.21</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.5</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.2.9.RELEASE</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>2.0.5</version> </dependency>\"]},\"605\":{\"h\":\"整合Mybatis\",\"t\":[\"要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。\"]},\"606\":{\"h\":\"使用 xml 配置整合\",\"t\":[\"配置数据源：\",\"<bean id=\\\"datasource\\\" class=\\\"org.springframework.jdbc.datasource.DriverManagerDataSource\\\"> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/mydata?serverTimezone=UTC\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> <property name=\\\"driverClassName\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> </bean>\",\"配置 SqlSessionFactory，对应的 class 为 SqlSessionFactoryBean：\",\"<bean id=\\\"sqlSessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <property name=\\\"dataSource\\\" ref=\\\"datasource\\\"/> <property name=\\\"configLocation\\\" value=\\\"mybatis-config.xml\\\"/> <property name=\\\"mapperLocations\\\" value=\\\"classpath:mapper/UserMapper.xml\\\"/> </bean>\",\"配置 mapper 接口：\",\"<bean id=\\\"userMapper\\\" class=\\\"org.mybatis.spring.mapper.MapperFactoryBean\\\"> <property name=\\\"sqlSessionFactory\\\" ref=\\\"sqlSessionFactory\\\"/> <property name=\\\"mapperInterface\\\" value=\\\"zch.mapper.UserMapper\\\"/> </bean>\",\"调用代码：\",\"@Test public void test() throws Exception { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); UserMapper userMapper = context.getBean(\\\"userMapper\\\", UserMapper.class); List<User> users = userMapper.queryUsers(); users.forEach(System.out::println); }\",\"提示\",\"也可以不使用 MapperFactoryBean 来注册 mapper 接口，首先构造 mapper 接口的实现类，实现类中设置一个 sqlsession 对象，通过 sqlSession 实现增删改查，并在 Spring 配置中使用 set 方法注入。\",\"还可以直接在 Spring 中配置 sqlSession，sqlSession 对应的 class 为 sqlSessionTemplate。\",\"<bean id=\\\"sqlSession\\\" class=\\\"org.mybatis.spring.SqlSessionTemplate\\\"> <constructor-arg index=\\\"0\\\" ref=\\\"sqlSessionFactory\\\"/> </bean> <bean id=\\\"userMapper\\\" class=\\\"org.mybatis.spring.mapper.MapperFactoryBean\\\"> <property name=\\\"sqlSessionFactory\\\" ref=\\\"sqlSessionFactory\\\"/> <property name=\\\"sqlSessionTemplate\\\" ref=\\\"sqlSession\\\"/> <property name=\\\"mapperInterface\\\" value=\\\"zch.mapper.UserMapper\\\"/> </bean>\"]},\"607\":{\"h\":\"关于 SqlSessionFactoryBean\",\"t\":[\"多数据库支持：设置 databaseIdProvider 属性。\",\"<bean id=\\\"databaseIdProvider\\\" class=\\\"org.apache.ibatis.mapping.VendorDatabaseIdProvider\\\"> <property name=\\\"properties\\\"> <props> <prop key=\\\"SQL Server\\\">sqlserver</prop> <prop key=\\\"DB2\\\">db2</prop> <prop key=\\\"Oracle\\\">oracle</prop> <prop key=\\\"MySQL\\\">mysql</prop> </props> </property> </bean>\",\"设置 sqlSessionFactory 属性：\",\"<bean id=\\\"sqlSessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> <property name=\\\"mapperLocations\\\" value=\\\"classpath*:sample/config/mappers/**/*.xml\\\" /> <property name=\\\"databaseIdProvider\\\" ref=\\\"databaseIdProvider\\\"/> </bean>\",\"通过 configuration 属性在没有对应的 MyBatis XML 配置文件的情况下，直接设置 Configuration 实例。\",\"注意：configLocation 不能与 configuration 同时存在。\",\"<bean id=\\\"sqlSessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <property name=\\\"dataSource\\\" ref=\\\"datasource\\\"/> <!-- <property name=\\\"configLocation\\\" value=\\\"mybatis-config.xml\\\"/>--> <property name=\\\"mapperLocations\\\" value=\\\"classpath:mapper/UserMapper.xml\\\"/> <property name=\\\"configuration\\\"> <bean class=\\\"org.apache.ibatis.session.Configuration\\\"> <!-- 配置标准日志 --> <property name=\\\"logImpl\\\" value=\\\"org.apache.ibatis.logging.stdout.StdOutImpl\\\"/> <!-- 开启驼峰命名转换 --> <property name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> </bean> </property> </bean>\"]},\"608\":{\"h\":\"关于SqlSession\",\"t\":[\"SqlSessionTemplate：\",\"SqlSessionTemplate 是线程安全的，是 SqlSession 的一个实现，可以被多个 DAO 或映射器所共享使用。\",\"<bean id=\\\"sqlSession\\\" class=\\\"org.mybatis.spring.SqlSessionTemplate\\\"> <constructor-arg index=\\\"0\\\" ref=\\\"sqlSessionFactory\\\" /> </bean>\",\"在 mapper 的实现类中实现注入：\",\"<bean id=\\\"userDao\\\" class=\\\"org.mybatis.spring.sample.dao.UserDaoImpl\\\"> <property name=\\\"sqlSession\\\" ref=\\\"sqlSession\\\" /> </bean>\",\"SqlSessionDaoSupport：\",\"SqlSessionDaoSupport 是一个抽象的支持类，用来为你提供 SqlSession。调用 getSqlSession() 方法你会得到一个 SqlSessionTemplate，之后可以用于执行 SQL 方法，就像下面这样:\",\"public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao { public User getUser(String userId) { return getSqlSession().selectOne(\\\"org.mybatis.spring.sample.mapper.UserMapper.getUser\\\", userId); } }\",\"SqlSessionDaoSupport 需要通过属性设置一个 sqlSessionFactory 或 SqlSessionTemplate。如果两个属性都被设置了，那么 SqlSessionFactory 将被忽略。\",\"假设类 UserMapperImpl 是 SqlSessionDaoSupport 的子类，可以编写如下的 Spring 配置来执行设置：\",\"<bean id=\\\"userDao\\\" class=\\\"org.mybatis.spring.sample.dao.UserDaoImpl\\\"> <property name=\\\"sqlSessionFactory\\\" ref=\\\"sqlSessionFactory\\\" /> </bean>\"]},\"609\":{\"h\":\"使用 Java 注解进行配置\",\"t\":[\"Java Config文件：\",\"@Configuration public class Config { @Bean(\\\"user\\\") public User getUser(){ return new User(); } @Bean(\\\"userMapper\\\") public MapperFactoryBean<UserMapper> getUserMapper() throws Exception { MapperFactoryBean<UserMapper> userMapperMapperFactoryBean = new MapperFactoryBean<>(UserMapper.class); userMapperMapperFactoryBean.setSqlSessionFactory(getSqlSessionFactory()); return userMapperMapperFactoryBean; } @Bean(\\\"sqlSessionFactory\\\") public SqlSessionFactory getSqlSessionFactory() throws Exception { SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); sqlSessionFactoryBean.setDataSource(getDataSource()); return sqlSessionFactoryBean.getObject(); } @Bean(\\\"dataSource\\\") public DriverManagerDataSource getDataSource(){ DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setDriverClassName(\\\"com.mysql.cj.jdbc.Driver\\\"); driverManagerDataSource.setUrl(\\\"jdbc:mysql://localhost:3306/mydata?serverTimezone=UTC\\\"); driverManagerDataSource.setUsername(\\\"root\\\"); driverManagerDataSource.setPassword(\\\"123456\\\"); return driverManagerDataSource; } }\",\"mapper接口：\",\"public interface UserMapper { /** * get users * @return userList */ @Select(\\\"select * from mydata.usertable\\\") List<User> getUsers(); }\",\"@Test public void test(){ AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(Config.class); UserMapper userMapper = annotationConfigApplicationContext.getBean(\\\"userMapper\\\", UserMapper.class); List<User> users = userMapper.getUsers(); users.forEach(System.out::println); }\"]},\"610\":{\"h\":\"总结\",\"t\":[\"配置数据源 \",\"数据源对应的Java Class为：DriverManagerDataSource\",\"通过注解配置时，要注意返回的类型是 DriverManagerDataSource\",\"配置SqlSessionFactory \",\"对应的Java Class为：SqlSessionFactoryBean 通过注解配置时同样返回SqlSessionFactoryBean的getObject()\",\"直接利用SqlSessionFactory配置mapper \",\"对应的Java Class为：MapperFactoryBean\",\"或者在mapper接口的实现类中进行SqlSession的配置 \",\"直接使用SqlSession实现CRUD，mapper注入SqlSessionTemplate，在SqlSessionTemplate中注入SqlSessionFactory\",\"通过继承SqlSessionDaoSupport，注入SqlSessionFactory\"]},\"611\":{\"h\":\"代理模式\"},\"612\":{\"h\":\"静态代理\"},\"613\":{\"h\":\"角色\",\"t\":[\"抽象角色：一般用抽象类或接口。\",\"真实角色：被代理的角色。\",\"代理角色：代理真实角色的角色，一般有附属操作。\",\"客户：访问代理对象的人。\"]},\"614\":{\"h\":\"代码过程\",\"t\":[\"接口。\",\"真实角色。\",\"代理角色。\",\"客户端访问代理角色。\"]},\"615\":{\"h\":\"代理模式优点\",\"t\":[\"使真实角色的操作更加纯粹，不用去关注一些公共的业务。\",\"实现了业务的分工。\",\"公共业务发生扩展时，便于集中管理。\"]},\"616\":{\"h\":\"静态代理模式缺点\",\"t\":[\"每个真实角色都会有一个代理角色，代码量翻倍，开发效率降低。\"]},\"617\":{\"h\":\"动态代理\",\"t\":[\"动态代理的代理类是动态生成的。\",\"动态代理分类： \",\"基于接口的动态代理：JDK动态代理。InvocationHandler\",\"基于类的动态代理：CGLIB。\",\"Java字节码实现：Javassist。\",\"InvocationHandler 是由代理实例的调用处理程序实现的接口。\",\"每个代理实例都有一个关联的调用处理程序。 当在代理实例上调用方法时，方法调用将被编码并分派到其调用处理程序的 invoke 方法。\",\"实现类：Proxy.\",\"InvocationHandler handler = new MyInvocationHandler(...); Class<?> proxyClass = Proxy.getProxyClass(Foo.class.getClassLoader(), Foo.class); Foo f = (Foo) proxyClass.getConstructor(InvocationHandler.class).newInstance(handler);\",\"或\",\"Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),new Class<?>[] { Foo.class },handler);\",\"方法： \"]},\"618\":{\"h\":\"示例代码（中介租房）\",\"t\":[\"要代理的接口：\",\"public interface Rent { /** * test */ void rent(); }\",\"被代理的真实角色（要实现被代理的接口）：\",\"public class Host implements Rent{ public void rent() { System.out.println(\\\"房东出租\\\"); } }\",\"代理类：\",\"public class ProxyInvocationHandler implements InvocationHandler { //要被代理的真实角色 private Object target; public void setTarget(Object target) { this.target = target; } //动态生成代理类 public Object getProxy(){ return Proxy.newProxyInstance(this.getClass().getClassLoader(),target.getClass().getInterfaces(),this); } //处理代理的实例，返回结果 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { see(); System.out.println(method.getName()); return method.invoke(target,args); } //自定义的方法 public void see(){ System.out.println(\\\"看房\\\"); } }\",\"入口方法：\",\"public class Client { public static void main(String[] args) { //要代理的真实角色 Host host=new Host(); //创建代理类对象 ProxyInvocationHandler proxyInvocationHandler = new ProxyInvocationHandler(); //设置要代理的对象 proxyInvocationHandler.setTarget(host); //动态生成代理类 Rent proxy= (Rent) proxyInvocationHandler.getProxy(); //调用相关方法 proxy.rent(); } }\"]},\"619\":{\"h\":\"Spring 配置\",\"t\":[\"别名。\",\"通过 alias 标签起：\",\"<alias name=\\\"userService\\\" alias=\\\"userService2\\\"/>\",\"通过 bean 标签中的 name 属性起别名，可以用逗号或者空格或者分号进行分割起多个别名：\",\"<bean class=\\\"service.UserServiceImpl\\\" id=\\\"userService\\\" name=\\\"userService2,userService3\\\"> <constructor-arg ref=\\\"userDaoOracle\\\"/> </bean>\",\"scope 作用域：\",\"import：\",\"一般用于团队开发，将多个配置文件导入合并为一个,允许多个相同别名。\",\"<!--在applicationContext.xml中添加import标签--> <import resource=\\\"beans.xml\\\"/>\",\"//测试代码只读取applicationContext.xml public class MyTest2 { public static void main(String[] args) { ApplicationContext context=new ClassPathXmlApplicationContext(\\\"applicationContext.xml\\\"); Object o=context.getBean(\\\"userService3\\\"); ((UserServiceImpl)o).getUser(); } }\"]},\"620\":{\"h\":\"Spring 组成\",\"t\":[\"提示\",\"Spring 核心是控制反转 IOC 和面向切面 AOP。\"]},\"621\":{\"h\":\"Spring Core 核心容器\",\"t\":[\"核心容器提供 Spring 框架的基本功能。Spring 以 bean 的方式组织和管理 Java 应用中的各个组件及其关系。Spring 使用 BeanFactory 来产生和管理 Bean，它是工厂模式的实现。BeanFactory 使用 控制反转IOC 模式将应用的配置和依赖性规范与实际的应用程序代码分开。\"]},\"622\":{\"h\":\"Spring Context 上下文\",\"t\":[\"Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，如 JNDI、EJB、电子邮件、国际化、校验和调度功能。\"]},\"623\":{\"h\":\"Spring AOP 面向切面编程\",\"t\":[\"通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。\"]},\"624\":{\"h\":\"Spring DAO\",\"t\":[\"JDBC、DAO 的抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理，和不同数据库供应商所抛出的错误信息。异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。\"]},\"625\":{\"h\":\"Spring ORM\",\"t\":[\"Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 对象的关系工具，其中包括了 Hibernate、JDO 和 IBatis SQL Map 等，所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。\"]},\"626\":{\"h\":\"Spring Web\",\"t\":[\"Web 上下文模块建立在应用程序上下文模块之上，为基于 web 的应用程序提供了上下文。所以 Spring 框架支持与 Struts 集成，web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。\"]},\"627\":{\"h\":\"Spring Web MVC\",\"t\":[\"MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的。MVC 容纳了大量视图技术，其中包括 JSP、POI 等，模型来有 JavaBean 来构成，存放于 M 当中，而视图是一个接口，负责实现模型，控制器表示逻辑代码Spring 框架的功能可以用在任何 J2EE 服务器当中，大多数功能也适用于不受管理的环境。Spring 的核心要点就是支持不绑定到特定 J2EE 服务的可重用业务和数据的访问的对象，毫无疑问这样的对象可以在不同的 J2EE 环境，独立应用程序和测试环境之间重用。\"]},\"628\":{\"h\":\"事务\"},\"629\":{\"h\":\"声明式事务：AOP\",\"t\":[\"MyBatis-Spring 借助了 Spring 中的 DataSourceTransactionManager 来实现事务管理。\",\"配置对应的 Java Class为：DataSourceTransactionManager。\",\"xml 方式方式配置：\",\"<bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <constructor-arg ref=\\\"dataSource\\\" /> </bean>\",\"Java 方式：\",\"@Configuration public class DataSourceConfig { @Bean public DataSourceTransactionManager transactionManager() { return new DataSourceTransactionManager(dataSource()); } }\",\"注意\",\"为事务管理器指定的 DataSource 必须和用来创建 SqlSessionFactoryBean 的是同一个数据源，否则事务管理器就无法工作了。\"]},\"630\":{\"h\":\"纯Java Config配置实现事务\",\"t\":[\"要开启事务，必须在配置类上使用 @EnableTransactionManagement 注解开启事务：\",\"@Configuration @EnableTransactionManagement public class Config { @Bean(\\\"user\\\") public User getUser(){ return new User(); } @Bean(\\\"userMapper\\\") public MapperFactoryBean<UserMapper> getUserMapper() throws Exception { MapperFactoryBean<UserMapper> userMapperMapperFactoryBean = new MapperFactoryBean<>(UserMapper.class); userMapperMapperFactoryBean.setSqlSessionFactory(getSqlSessionFactory()); return userMapperMapperFactoryBean; } @Bean(\\\"sqlSessionFactory\\\") public SqlSessionFactory getSqlSessionFactory() throws Exception { SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); sqlSessionFactoryBean.setDataSource(getDataSource()); return sqlSessionFactoryBean.getObject(); } @Bean(\\\"dataSource\\\") public DriverManagerDataSource getDataSource(){ DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setDriverClassName(\\\"com.mysql.cj.jdbc.Driver\\\"); driverManagerDataSource.setUrl(\\\"jdbc:mysql://localhost:3306/mydata?serverTimezone=UTC\\\"); driverManagerDataSource.setUsername(\\\"root\\\"); driverManagerDataSource.setPassword(\\\"123456\\\"); return driverManagerDataSource; } // 配置事务管理器 @Bean public DataSourceTransactionManager transactionManager() { return new DataSourceTransactionManager(getDataSource()); } @Bean(\\\"userMapperImpl\\\") public UserMapper getUserMapperImpl() throws Exception { UserMapperImpl userMapper = new UserMapperImpl(); userMapper.setSqlSessionFactory(getSqlSessionFactory()); return userMapper; } }\",\"在要开启事务的类或方法上添加 @Transactional 注解：\",\"@Transactional(rollbackFor = RuntimeException.class,propagation = Propagation.REQUIRED) public interface UserMapper { /** * get users * @return userList */ @Select(\\\"select * from mydata.usertable\\\") List<User> getUsers(); /** * add user * @param user user */ @Insert(\\\"insert into mydata.usertable(id,username,password) values(#{id},#{username},#{password})\\\") void addUser(User user); /** * delete user * @param id id */ @Delete(\\\"delete from mydata.usertable where id=#{id}\\\") void deleteUser(int id); @Update(\\\"update usertable set password=#{password} where id=31\\\") void update(String password); void test()throws RuntimeException; }\",\"mapperImpl.java：\",\"public class UserMapperImpl extends SqlSessionDaoSupport implements UserMapper{ @Override public List<User> getUsers() { return getSqlSession().getMapper(UserMapper.class).getUsers(); } @Override public void addUser(User user) { getSqlSession().getMapper(UserMapper.class).addUser(user); } @Override public void deleteUser(int id) { getSqlSession().getMapper(UserMapper.class).deleteUser(id); } @Override public void update(String password) { getSqlSession().getMapper(UserMapper.class).update(password); } @Override public void test(){ update(\\\"www\\\"); throw new RuntimeException(\\\"手动异常\\\"); } }\",\"测试代码：\",\"AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(Config.class); UserMapper userMapperImpl = annotationConfigApplicationContext.getBean(\\\"userMapperImpl\\\", UserMapper.class); userMapperImpl.test();\",\"结果：数据库未进行任何修改。\"]},\"631\":{\"h\":\"关于 @Transactional\",\"t\":[\"作用于类：当把 @Transactional 注解放在类上时，表示所有该类的public方法都配置相同的事务属性信息。\",\"作用于方法：当类配置了 @Transactional，方法也配置了 @Transactional，方法的事务会覆盖类的事务配置信息。\",\"作用于接口：不推荐这种使用方法，因为一旦标注在 Interface 上并且配置了 Spring AOP 使用 CGLib 动态代理，将会导致 @Transactional 注解失效。\"]},\"632\":{\"h\":\"@Transactional 失效的几种情况\",\"t\":[\"@Transactional 应用在非 public 修饰的方法上\",\"注意\",\"protected、private 修饰的方法上使用 @Transactional 注解，虽然事务无效，但不会有任何报错，这是我们很容犯错的一点。\",\"@Transactional 注解属性 propagation 设置错误。\",\"@Transactional 注解属性 rollbackFor 设置错误。\",\"同一个类中方法调用，导致 @Transactional 失效。\",\"提示\",\"比如有一个类 Test，它的一个方法 A，A 再调用本类的方法 B（不论方法 B 是用 public 还是 private 修饰），但方法 A 没有声明注解事务，而 B 方法有。则外部调用方法 A 之后，方法 B 的事务是不会起作用的。这也是经常犯错误的一个地方。\",\"异常被你的 catch “吃了”导致 @Transactional 失效。\",\"数据库引擎不支持事务。\"]},\"633\":{\"h\":\"xml 配置实现事务\",\"t\":[\"Spring xml 配置：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd\\\"> <context:annotation-config/> <bean id=\\\"user\\\" class=\\\"zch.pojo.User\\\"/> <bean id=\\\"datasource\\\" class=\\\"org.springframework.jdbc.datasource.DriverManagerDataSource\\\"> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/mydata?serverTimezone=UTC\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> <property name=\\\"driverClassName\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> </bean> <bean id=\\\"sqlSessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <property name=\\\"dataSource\\\" ref=\\\"datasource\\\"/> <!-- <property name=\\\"configLocation\\\" value=\\\"mybatis-config.xml\\\"/>--> <property name=\\\"mapperLocations\\\" value=\\\"classpath:mapper/UserMapper.xml\\\"/> <property name=\\\"configuration\\\"> <bean class=\\\"org.apache.ibatis.session.Configuration\\\"> <property name=\\\"logImpl\\\" value=\\\"org.apache.ibatis.logging.stdout.StdOutImpl\\\"/> </bean> </property> </bean> <bean id=\\\"sqlSession\\\" class=\\\"org.mybatis.spring.SqlSessionTemplate\\\"> <constructor-arg index=\\\"0\\\" ref=\\\"sqlSessionFactory\\\"/> </bean> <bean id=\\\"userMapper\\\" class=\\\"org.mybatis.spring.mapper.MapperFactoryBean\\\"> <property name=\\\"sqlSessionFactory\\\" ref=\\\"sqlSessionFactory\\\"/> <property name=\\\"sqlSessionTemplate\\\" ref=\\\"sqlSession\\\"/> <property name=\\\"mapperInterface\\\" value=\\\"zch.mapper.UserMapper\\\"/> </bean> <bean id=\\\"userMapperImpl\\\" class=\\\"zch.mapper.UserMapperImpl\\\"> <property name=\\\"sqlSessionFactory\\\" ref=\\\"sqlSessionFactory\\\"/> </bean> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"datasource\\\"/> </bean> <tx:advice id=\\\"txAdvice\\\" transaction-manager=\\\"transactionManager\\\"> <tx:attributes> <tx:method name=\\\"*\\\" propagation=\\\"REQUIRED\\\"/> </tx:attributes> </tx:advice> <aop:config> <aop:pointcut id=\\\"txPointCut\\\" expression=\\\"execution(* zch.mapper.UserMapperImpl.*(..))\\\"/> <aop:advisor advice-ref=\\\"txAdvice\\\" pointcut-ref=\\\"txPointCut\\\"/> </aop:config> </beans>\"]},\"634\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"635\":{\"h\":\"Docs\"},\"636\":{\"h\":\"Docs\"},\"637\":{\"h\":\"Docs\"},\"638\":{\"h\":\"Docs\"},\"639\":{\"h\":\"Docs\"},\"640\":{\"h\":\"Docs\"},\"641\":{\"h\":\"Docs\"},\"642\":{\"h\":\"Docs\"},\"643\":{\"h\":\"Docs\"},\"644\":{\"h\":\"Docs\"},\"645\":{\"h\":\"Docs\"},\"646\":{\"h\":\"Docs\"}},\"dirtCount\":0,\"index\":[[\"吃了\",{\"1\":{\"632\":1}}],[\"失效\",{\"1\":{\"632\":2}}],[\"失效的几种情况\",{\"0\":{\"632\":1}}],[\"失败赋值为\",{\"1\":{\"558\":1}}],[\"失败\",{\"1\":{\"503\":1}}],[\"失败自动恢复\",{\"1\":{\"313\":1}}],[\"失败自动切换\",{\"1\":{\"313\":1}}],[\"失败安全\",{\"1\":{\"313\":1}}],[\"失败立即报错\",{\"1\":{\"313\":1}}],[\"失败的百分比\",{\"1\":{\"147\":1}}],[\"纯java\",{\"0\":{\"630\":1}}],[\"借助了\",{\"1\":{\"629\":1}}],[\"声明式事务\",{\"0\":{\"629\":1}}],[\"声明不可变依赖项的惟一方法是使用基于构造器的依赖注入\",{\"1\":{\"587\":1}}],[\"独立应用程序和测试环境之间重用\",{\"1\":{\"627\":1}}],[\"毫无疑问这样的对象可以在不同的\",{\"1\":{\"627\":1}}],[\"毫秒\",{\"1\":{\"207\":1,\"287\":3,\"289\":2,\"291\":1,\"293\":2,\"294\":1,\"296\":1}}],[\"大多数功能也适用于不受管理的环境\",{\"1\":{\"627\":1}}],[\"大小\",{\"1\":{\"405\":1}}],[\"面向切面编程\",{\"0\":{\"623\":1}}],[\"面板中为对应消费者选择相应操作\",{\"1\":{\"311\":1}}],[\"电子邮件\",{\"1\":{\"622\":1}}],[\"别名\",{\"1\":{\"619\":1}}],[\"入口方法\",{\"1\":{\"618\":1}}],[\"入站事件会从链表\",{\"1\":{\"549\":1}}],[\"入站事件和出站事件在一个双向链表中\",{\"1\":{\"549\":1}}],[\"入站会调用解码器将字节解码成对象\",{\"1\":{\"529\":1}}],[\"入站出站机制\",{\"0\":{\"529\":1}}],[\"看房\",{\"1\":{\"618\":1}}],[\"看到的都是一个个原子性的操作\",{\"1\":{\"424\":1}}],[\"房东出租\",{\"1\":{\"618\":1}}],[\"便于集中管理\",{\"1\":{\"615\":1}}],[\"便与之前的对象没有任何关系\",{\"1\":{\"377\":1}}],[\"真实角色\",{\"1\":{\"613\":1,\"614\":1}}],[\"角色\",{\"0\":{\"613\":1}}],[\"角色进行验证和管理\",{\"1\":{\"62\":1}}],[\"性别\",{\"1\":{\"593\":1}}],[\"性能不强\",{\"1\":{\"571\":1}}],[\"性能表现则依赖于使用的数据库\",{\"1\":{\"496\":1}}],[\"性能好\",{\"1\":{\"355\":1}}],[\"学号\",{\"1\":{\"593\":1}}],[\"学生类代码\",{\"1\":{\"517\":1,\"518\":1}}],[\"学生对老师\",{\"0\":{\"517\":1}}],[\"公共业务发生扩展时\",{\"1\":{\"615\":1}}],[\"公开可选的依赖项\",{\"1\":{\"587\":1}}],[\"公平性可设置\",{\"1\":{\"435\":1}}],[\"公平锁\",{\"1\":{\"433\":1}}],[\"公平锁和非公平锁\",{\"0\":{\"433\":1}}],[\"受影响的类应该使用公共接口清楚地公开这些依赖项\",{\"1\":{\"587\":1}}],[\"隐藏依赖关系\",{\"1\":{\"587\":1}}],[\"隐式的自动装配\",{\"1\":{\"583\":1}}],[\"您将被迫使用\",{\"1\":{\"587\":1}}],[\"耦合而丢失\",{\"1\":{\"587\":1}}],[\"使真实角色的操作更加纯粹\",{\"1\":{\"615\":1}}],[\"使我们很容易忽略这些信号\",{\"1\":{\"587\":1}}],[\"使用下标赋值\",{\"1\":{\"601\":1}}],[\"使用后\",{\"1\":{\"599\":1}}],[\"使用基于字段的依赖注入的主要原因是为了避免\",{\"1\":{\"587\":1}}],[\"使用基于字段的依赖注入\",{\"1\":{\"587\":1}}],[\"使用http编码解码器\",{\"1\":{\"576\":1}}],[\"使用hystrix\",{\"0\":{\"142\":1}}],[\"使用自定义协议+编码解码器解决\",{\"1\":{\"567\":1}}],[\"使用自定义的特殊字符作为消息的分隔符\",{\"1\":{\"533\":1}}],[\"使用自定义的登录界面\",{\"1\":{\"62\":1}}],[\"使用户可以完全控制事件的处理方式\",{\"1\":{\"549\":1}}],[\"使用转换流支持windows中文\",{\"1\":{\"536\":1}}],[\"使用行尾控制字符\",{\"1\":{\"533\":1}}],[\"使用这个类\",{\"1\":{\"533\":1}}],[\"使用netty提供的字符串编码\",{\"1\":{\"524\":1}}],[\"使用newline方法换行或拼接转义字符换行\",{\"1\":{\"331\":1}}],[\"使用预编译的步骤\",{\"0\":{\"511\":1}}],[\"使用映射器接口实现类的完全限定类名\",{\"1\":{\"499\":1}}],[\"使用完全限定资源定位符\",{\"1\":{\"499\":1}}],[\"使用相对于类路径的资源引用\",{\"1\":{\"499\":1}}],[\"使用连接池并不重要\",{\"1\":{\"496\":1}}],[\"使用二级缓存的步骤\",{\"0\":{\"488\":1}}],[\"使用依赖包创建\",{\"0\":{\"474\":1}}],[\"使用示例\",{\"1\":{\"472\":1}}],[\"使用volatile消除指令重排\",{\"1\":{\"448\":1}}],[\"使用了\",{\"1\":{\"422\":1}}],[\"使用了synchronized关键字\",{\"1\":{\"402\":1}}],[\"使用原子类解决原子性问题\",{\"1\":{\"430\":1}}],[\"使用原子引用解决\",{\"0\":{\"388\":1}}],[\"使用原生\",{\"0\":{\"39\":1}}],[\"使用优化隐藏器\",{\"1\":{\"356\":1}}],[\"使用短索引\",{\"1\":{\"343\":1}}],[\"使用字节输入输出流复制图片\",{\"0\":{\"340\":1}}],[\"使用字符输出流filewriter输出到文件\",{\"0\":{\"339\":1}}],[\"使用字符输入流\",{\"0\":{\"338\":1}}],[\"使用set实现了动态注入\",{\"1\":{\"599\":1}}],[\"使用spring后\",{\"1\":{\"596\":1}}],[\"使用spring创建对象\",{\"1\":{\"596\":1}}],[\"使用spring的接口\",{\"1\":{\"582\":1}}],[\"使用spring框架时支持\",{\"1\":{\"292\":1}}],[\"使用string有参构造输出string\",{\"1\":{\"338\":1}}],[\"使用有参\",{\"1\":{\"338\":1}}],[\"使用无参\",{\"1\":{\"338\":1}}],[\"使用apache\",{\"1\":{\"323\":1}}],[\"使用阿里巴巴dubbo\",{\"1\":{\"323\":1}}],[\"使用dubboservice注解\",{\"1\":{\"319\":1}}],[\"使用哪个配置中心\",{\"1\":{\"292\":1}}],[\"使用指定的协议暴露服务\",{\"1\":{\"289\":1}}],[\"使用文件缓存注册中心地址列表及服务提供者列表\",{\"1\":{\"287\":1}}],[\"使用modifier类的方法可以进行判断\",{\"1\":{\"279\":1}}],[\"使用mapperscannerconfigurer后\",{\"1\":{\"233\":1}}],[\"使用时会有警告\",{\"1\":{\"268\":1}}],[\"使用时通过\",{\"1\":{\"33\":1}}],[\"使用构造方法创建对象\",{\"1\":{\"254\":1}}],[\"使用jsonarray\",{\"1\":{\"245\":1}}],[\"使用objectmapper格式化\",{\"1\":{\"241\":1}}],[\"使用纯\",{\"0\":{\"231\":1}}],[\"使用视图解析器相当于访问对应的controller\",{\"1\":{\"217\":1}}],[\"使用对象实例时\",{\"1\":{\"184\":1}}],[\"使用一对单引号引用的内容就是字符串字面值了\",{\"1\":{\"67\":1}}],[\"使用准备\",{\"0\":{\"66\":1}}],[\"使用注解需要导入\",{\"1\":{\"577\":1}}],[\"使用注解开发\",{\"0\":{\"577\":1}}],[\"使用注解配置\",{\"0\":{\"323\":1}}],[\"使用注解配置时\",{\"1\":{\"46\":1}}],[\"使用注解进行参数配置\",{\"0\":{\"265\":1}}],[\"使用注解\",{\"0\":{\"215\":1}}],[\"使用注解实现\",{\"0\":{\"215\":1}}],[\"使用注入的认证接口实现类对用户权限\",{\"1\":{\"62\":1}}],[\"使用认证接口类实例\",{\"1\":{\"62\":1}}],[\"使用定时任务\",{\"0\":{\"27\":1}}],[\"使用\",{\"0\":{\"36\":1,\"37\":1,\"40\":1,\"48\":1,\"86\":1,\"114\":1,\"144\":1,\"146\":1,\"201\":1,\"236\":1,\"241\":1,\"245\":1,\"249\":1,\"318\":1,\"322\":1,\"409\":1,\"461\":1,\"472\":1,\"521\":1,\"522\":1,\"582\":1,\"602\":1,\"606\":1,\"609\":1},\"1\":{\"20\":1,\"22\":1,\"23\":1,\"24\":2,\"36\":1,\"78\":1,\"172\":2,\"194\":1,\"207\":1,\"227\":1,\"235\":1,\"275\":1,\"300\":1,\"383\":1,\"421\":2,\"457\":2,\"507\":2,\"513\":1,\"579\":3,\"587\":1,\"599\":1,\"621\":2,\"631\":1}}],[\"随着越来越多的依赖项被添加到类中\",{\"1\":{\"587\":1}}],[\"随机存取文件流\",{\"0\":{\"336\":1}}],[\"随机\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1,\"307\":1}}],[\"随机号\",{\"1\":{\"147\":1}}],[\"装配属性\",{\"1\":{\"583\":1}}],[\"满足\",{\"1\":{\"583\":1}}],[\"满足要求才通过\",{\"1\":{\"134\":1}}],[\"切入点\",{\"1\":{\"581\":1,\"582\":1}}],[\"切面也必须是spring管理的一个bean\",{\"1\":{\"582\":1}}],[\"切面通知执行的地点的定义\",{\"1\":{\"581\":1}}],[\"切面必须要完成的工作\",{\"1\":{\"581\":1}}],[\"切面\",{\"1\":{\"581\":1}}],[\"切换为只读buffer\",{\"1\":{\"537\":1}}],[\"跨越应用程序多个模块的方法或功能\",{\"1\":{\"581\":1}}],[\"跨组的服务不会相互影响\",{\"1\":{\"287\":1}}],[\"横切关注点被模块化的特殊对象\",{\"1\":{\"581\":1}}],[\"横切关注点\",{\"1\":{\"581\":1}}],[\"衍生注解\",{\"0\":{\"579\":1}}],[\"约束\",{\"1\":{\"577\":1,\"586\":1}}],[\"约定大于配置\",{\"1\":{\"508\":1}}],[\"清空\",{\"1\":{\"576\":1}}],[\"清空缓冲区\",{\"1\":{\"537\":1}}],[\"浏览器不支持websocket\",{\"1\":{\"576\":1}}],[\"浏览器前端界面乱码\",{\"1\":{\"218\":1}}],[\"唯一\",{\"1\":{\"576\":2}}],[\"唯一索引\",{\"1\":{\"356\":1}}],[\"匹配url\",{\"1\":{\"576\":1}}],[\"匹配请求的远程地址\",{\"1\":{\"135\":1}}],[\"建立连接\",{\"1\":{\"574\":1}}],[\"建议使用标志位\",{\"1\":{\"464\":1}}],[\"建议使用两位数字版本\",{\"1\":{\"289\":1,\"293\":1}}],[\"建议线程正常停止\",{\"1\":{\"464\":1}}],[\"建议显式指定\",{\"1\":{\"334\":1}}],[\"建议不要配置\",{\"1\":{\"293\":1}}],[\"建议不要设置\",{\"1\":{\"288\":1,\"293\":1}}],[\"高频使用的类随着时间的推移\",{\"1\":{\"587\":1}}],[\"高并发会有性能瓶颈\",{\"1\":{\"572\":1}}],[\"高可用\",{\"0\":{\"304\":1}}],[\"充分利用多核\",{\"1\":{\"572\":1}}],[\"占用很大系统资源\",{\"1\":{\"569\":1}}],[\"浪费资源\",{\"1\":{\"569\":1}}],[\"输入输出\",{\"1\":{\"569\":1}}],[\"输出main200后\",{\"1\":{\"467\":1}}],[\"输出\",{\"1\":{\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1}}],[\"输出获取到的内容\",{\"1\":{\"379\":1}}],[\"条数据\",{\"1\":{\"566\":1}}],[\"条件运算\",{\"1\":{\"67\":1}}],[\"拆包\",{\"1\":{\"565\":1}}],[\"粘包拆包问题\",{\"0\":{\"567\":1}}],[\"粘包拆包示例\",{\"0\":{\"566\":1}}],[\"粘包\",{\"1\":{\"565\":1}}],[\"粘合在一起\",{\"1\":{\"565\":1}}],[\"称之为\",{\"1\":{\"565\":1}}],[\"称为接口静态方法\",{\"1\":{\"346\":1}}],[\"故可能存在以下四种情况\",{\"1\":{\"565\":1}}],[\"回复信息\",{\"1\":{\"563\":1}}],[\"搭建简单\",{\"0\":{\"563\":1}}],[\"搭建可视化监控面板\",{\"1\":{\"175\":1}}],[\"推送信息\",{\"1\":{\"562\":1}}],[\"推送系统根据用户标识找到对应的\",{\"1\":{\"562\":1}}],[\"耗时任务2结束\",{\"1\":{\"560\":1}}],[\"耗时任务1结束\",{\"1\":{\"560\":1}}],[\"耗时情况\",{\"1\":{\"540\":1,\"541\":1}}],[\"初始值为\",{\"1\":{\"558\":1}}],[\"初始化\",{\"1\":{\"254\":1,\"538\":2}}],[\"初始化大小\",{\"1\":{\"31\":1}}],[\"唤醒\",{\"1\":{\"558\":1}}],[\"逆序字符串\",{\"1\":{\"558\":1}}],[\"源串\",{\"1\":{\"558\":1}}],[\"源引用不变\",{\"1\":{\"377\":1}}],[\"步封装起来\",{\"1\":{\"555\":1}}],[\"步骤\",{\"1\":{\"235\":1}}],[\"流程\",{\"0\":{\"555\":1}}],[\"流式计算\",{\"0\":{\"417\":1}}],[\"布尔值\",{\"1\":{\"551\":1}}],[\"布尔字面值\",{\"1\":{\"67\":1}}],[\"函数中的\",{\"1\":{\"551\":1}}],[\"函数式接口\",{\"0\":{\"410\":1}}],[\"互不干扰\",{\"1\":{\"549\":1}}],[\"互相注册\",{\"1\":{\"109\":1}}],[\"往前传递到最前一个出站的\",{\"1\":{\"549\":1}}],[\"往后传递到最后一个入站的\",{\"1\":{\"549\":1}}],[\"组件\",{\"1\":{\"623\":1}}],[\"组件注解\",{\"1\":{\"578\":1}}],[\"组成\",{\"0\":{\"620\":1}}],[\"组成的双向链表\",{\"1\":{\"549\":1}}],[\"组合使用\",{\"1\":{\"587\":1}}],[\"组织名称\",{\"1\":{\"286\":1,\"295\":1}}],[\"业务处理链\",{\"1\":{\"548\":1}}],[\"业务线程池参见threads配置\",{\"1\":{\"293\":1}}],[\"о\",{\"1\":{\"548\":1}}],[\"事件进行处理\",{\"1\":{\"552\":1}}],[\"事件或拦截\",{\"1\":{\"548\":1}}],[\"事件\",{\"1\":{\"547\":2,\"548\":2,\"552\":1,\"574\":4}}],[\"事务等\",{\"1\":{\"581\":1}}],[\"事务末尾\",{\"1\":{\"512\":1}}],[\"事务\",{\"0\":{\"512\":1,\"628\":1}}],[\"事务管理器\",{\"0\":{\"495\":1},\"1\":{\"492\":1}}],[\"事务回滚是撤销已经执行成功的\",{\"1\":{\"375\":1}}],[\"事务一旦提交\",{\"1\":{\"373\":1}}],[\"事务的基本特性及隔离级别\",{\"0\":{\"372\":1}}],[\"绑定端口并且同步\",{\"1\":{\"575\":1}}],[\"绑定监听端口号\",{\"1\":{\"544\":1}}],[\"绑定注解\",{\"1\":{\"164\":1}}],[\"采用\",{\"1\":{\"542\":1}}],[\"技术\",{\"1\":{\"539\":1}}],[\"技术的情况下\",{\"1\":{\"539\":1}}],[\"控制器表示逻辑代码spring\",{\"1\":{\"627\":1}}],[\"控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里\",{\"1\":{\"539\":1}}],[\"控制反转ioc\",{\"1\":{\"621\":1}}],[\"控制反转\",{\"1\":{\"600\":2}}],[\"控制权在程序员手中\",{\"1\":{\"599\":1}}],[\"控制\",{\"1\":{\"596\":1}}],[\"控制台输出乱码\",{\"1\":{\"218\":1}}],[\"仍然需要\",{\"1\":{\"539\":1}}],[\"仍然可以使用之前的\",{\"1\":{\"396\":1}}],[\"共享\",{\"1\":{\"539\":1}}],[\"共享锁又称为读锁\",{\"1\":{\"358\":1}}],[\"共享锁\",{\"1\":{\"358\":1}}],[\"系统调用的过程发生了点变化\",{\"1\":{\"539\":1}}],[\"系统调用函数会直接把内核缓冲区里的数据\",{\"1\":{\"539\":1}}],[\"系统级配置\",{\"1\":{\"85\":1}}],[\"拷贝到网卡的缓冲区里\",{\"1\":{\"539\":2}}],[\"拷贝文件\",{\"1\":{\"537\":1}}],[\"于是我们应用程序就可以使用这部分数据了\",{\"1\":{\"539\":1}}],[\"搬运的\",{\"1\":{\"539\":4}}],[\"次都是由\",{\"1\":{\"539\":1}}],[\"次的数据拷贝过程\",{\"1\":{\"539\":1}}],[\"次\",{\"1\":{\"539\":1}}],[\"次上下文切换和数据拷贝次数\",{\"1\":{\"539\":2}}],[\"次上下文切换\",{\"1\":{\"539\":2}}],[\"次数据拷贝\",{\"1\":{\"539\":2}}],[\"次用户态与内核态的上下文切换\",{\"1\":{\"539\":1}}],[\"零拷贝技术可以把文件传输的性能提高至少一倍以上\",{\"1\":{\"539\":1}}],[\"零拷贝技术的文件传输方式相比传统文件传输的方式\",{\"1\":{\"539\":1}}],[\"零拷贝技术实现的方式通常有\",{\"1\":{\"539\":1}}],[\"零拷贝\",{\"0\":{\"539\":1}}],[\"说\",{\"1\":{\"538\":1}}],[\"说明这个对象可以为\",{\"1\":{\"587\":1}}],[\"说明这个类可以通过\",{\"1\":{\"69\":1}}],[\"说明该事务未提交\",{\"1\":{\"376\":1}}],[\"说明该事务已提交\",{\"1\":{\"376\":1}}],[\"说明访问\",{\"1\":{\"69\":1}}],[\"说明只有在容器中没有\",{\"1\":{\"46\":1}}],[\"离线了\",{\"1\":{\"538\":2}}],[\"收到结果后通过\",{\"1\":{\"573\":1}}],[\"收到结果后调用\",{\"1\":{\"572\":1}}],[\"收到事件后\",{\"1\":{\"572\":1}}],[\"收到客户端消息\",{\"1\":{\"538\":1}}],[\"收集这样\",{\"1\":{\"143\":1}}],[\"利用set方法来进行注入\",{\"1\":{\"596\":1}}],[\"利用\",{\"0\":{\"538\":1}}],[\"得到一个选择器对象\",{\"1\":{\"537\":1}}],[\"溢出异常\",{\"1\":{\"537\":1}}],[\"复杂类\",{\"1\":{\"593\":1}}],[\"复杂类型的赋值方法\",{\"1\":{\"20\":1}}],[\"复用模型\",{\"1\":{\"570\":1}}],[\"复制文件\",{\"1\":{\"537\":1}}],[\"决定的\",{\"1\":{\"537\":1}}],[\"弹幕系统服务期间通讯等\",{\"1\":{\"537\":1}}],[\"弹出框<\",{\"1\":{\"33\":1}}],[\"处\",{\"1\":{\"536\":1}}],[\"处理代理的实例\",{\"1\":{\"618\":1}}],[\"处理业务时\",{\"1\":{\"574\":1}}],[\"处理任务队列的任务\",{\"1\":{\"574\":2}}],[\"处理连接事件后\",{\"1\":{\"573\":1}}],[\"处理连接事件\",{\"1\":{\"573\":1}}],[\"处理所有事件监听和响应还是单线程\",{\"1\":{\"572\":1}}],[\"处理出站\",{\"1\":{\"548\":2}}],[\"处理入站\",{\"1\":{\"548\":2}}],[\"处理器继承一个\",{\"1\":{\"575\":1}}],[\"处理器\",{\"1\":{\"528\":1}}],[\"处理器适配器的一种\",{\"1\":{\"213\":1}}],[\"处理器映射器的一种\",{\"1\":{\"213\":1}}],[\"处理前端\",{\"0\":{\"208\":1}}],[\"处理\",{\"1\":{\"117\":1,\"207\":1,\"548\":1,\"552\":1,\"573\":1,\"574\":3}}],[\"卡在接受连接处\",{\"1\":{\"536\":1}}],[\"卡在此处\",{\"1\":{\"536\":2}}],[\"速度变慢\",{\"1\":{\"533\":1}}],[\"速度上会慢一些\",{\"1\":{\"487\":1}}],[\"链与编解码器调用实例\",{\"0\":{\"532\":1}}],[\"心跳检测\",{\"0\":{\"528\":1}}],[\"心跳间隔\",{\"1\":{\"288\":1}}],[\"群聊系统\",{\"0\":{\"523\":1},\"1\":{\"571\":1}}],[\"案例目标\",{\"1\":{\"532\":1}}],[\"案例\",{\"0\":{\"523\":1}}],[\"教师\",{\"1\":{\"522\":1}}],[\"孩子\",{\"1\":{\"522\":1}}],[\"扎不多得嘞\",{\"1\":{\"521\":1,\"522\":1,\"563\":1,\"567\":1,\"575\":1}}],[\"李在干神魔\",{\"1\":{\"521\":1}}],[\"坐标\",{\"1\":{\"521\":1}}],[\"倍多\",{\"1\":{\"520\":1}}],[\"底层是数组\",{\"1\":{\"537\":1}}],[\"底层使用的仍是\",{\"1\":{\"520\":1}}],[\"底层都是用\",{\"1\":{\"472\":1}}],[\"依照mvc三层架构分层\",{\"1\":{\"579\":1}}],[\"依然使用association配置老师\",{\"1\":{\"517\":1}}],[\"依赖注入\",{\"0\":{\"590\":1},\"1\":{\"596\":1,\"600\":1}}],[\"依赖注入设计模式将类依赖项的创建与类本身分离开来\",{\"1\":{\"587\":1}}],[\"依赖的一种方式\",{\"1\":{\"583\":1}}],[\"依赖关系与生产者相同\",{\"1\":{\"321\":1}}],[\"依赖时\",{\"1\":{\"317\":1}}],[\"依赖问题\",{\"1\":{\"317\":1}}],[\"依赖引入\",{\"0\":{\"192\":1}}],[\"依赖管理\",{\"1\":{\"180\":1}}],[\"依赖与\",{\"1\":{\"98\":1}}],[\"依赖替换为\",{\"1\":{\"192\":1}}],[\"依赖替换\",{\"1\":{\"97\":1}}],[\"依赖\",{\"0\":{\"101\":1,\"150\":1,\"186\":1},\"1\":{\"23\":1,\"180\":1,\"192\":1,\"317\":1,\"508\":1,\"582\":1,\"592\":1}}],[\"依赖均在父项目中\",{\"1\":{\"16\":1}}],[\"块中\",{\"1\":{\"513\":1}}],[\"换句话说\",{\"1\":{\"513\":1}}],[\"考虑将\",{\"1\":{\"513\":1}}],[\"甚至一个类的实例变量也不行\",{\"1\":{\"513\":1}}],[\"甚至没有一个容量\",{\"1\":{\"396\":1}}],[\"绝对不能将\",{\"1\":{\"513\":1}}],[\"绝地求生\",{\"1\":{\"278\":1}}],[\"坏习惯\",{\"1\":{\"513\":1}}],[\"理论\",{\"0\":{\"598\":1}}],[\"理论结果应该是5000\",{\"1\":{\"430\":1}}],[\"理解我们之前讨论过的不同作用域和生命周期类别是至关重要的\",{\"1\":{\"513\":1}}],[\"成功\",{\"1\":{\"511\":1}}],[\"成立\",{\"1\":{\"67\":1}}],[\"预编译\",{\"1\":{\"511\":2}}],[\"预期返回的数据类型\",{\"1\":{\"207\":1}}],[\"连接点\",{\"1\":{\"581\":1}}],[\"连接开启了\",{\"1\":{\"576\":1}}],[\"连接断开\",{\"1\":{\"558\":1}}],[\"连接\",{\"1\":{\"546\":5}}],[\"连接上后\",{\"1\":{\"536\":1}}],[\"连接前\",{\"1\":{\"536\":1}}],[\"连接数据库\",{\"1\":{\"510\":2,\"511\":2}}],[\"连接对象组织起来\",{\"1\":{\"496\":1}}],[\"片段\",{\"1\":{\"507\":2}}],[\"名字与数据库中\",{\"1\":{\"505\":1}}],[\"名字和值的正则表达式进行匹配\",{\"1\":{\"129\":1}}],[\"参考文档\",{\"1\":{\"500\":1}}],[\"参数为要引用的配置类的\",{\"1\":{\"602\":1}}],[\"参数为当前环境的cpu核心数\",{\"1\":{\"472\":1}}],[\"参数列表\",{\"1\":{\"582\":1}}],[\"参数集\",{\"1\":{\"502\":1}}],[\"参数类型\",{\"1\":{\"502\":1}}],[\"参数==>\",{\"1\":{\"411\":1}}],[\"参数四\",{\"1\":{\"409\":1}}],[\"参数三\",{\"1\":{\"409\":1,\"528\":1}}],[\"参数二\",{\"1\":{\"409\":1,\"528\":1}}],[\"参数一\",{\"1\":{\"409\":1,\"528\":1}}],[\"参数是否为callback接口\",{\"1\":{\"297\":1}}],[\"参数索引\",{\"1\":{\"297\":1}}],[\"参数都是string数组\",{\"1\":{\"233\":1}}],[\"参数\",{\"1\":{\"207\":1,\"281\":1,\"411\":1,\"551\":1,\"582\":1}}],[\"参数名\",{\"1\":{\"134\":1}}],[\"你应该把这个关闭操作放到\",{\"1\":{\"513\":1}}],[\"你就可以在动态代码中使用名为\",{\"1\":{\"507\":1}}],[\"你也可以通过自定义\",{\"1\":{\"507\":1}}],[\"你既可以在典型的\",{\"1\":{\"497\":1}}],[\"你需要使用\",{\"1\":{\"486\":1}}],[\"你需要添加一个参数才能正确使用\",{\"1\":{\"269\":1}}],[\"池\",{\"1\":{\"496\":1}}],[\"池子的最大容量\",{\"1\":{\"473\":2}}],[\"虽然事务无效\",{\"1\":{\"632\":1}}],[\"虽然有点慢\",{\"1\":{\"496\":1}}],[\"虽然不配置仅靠stringhttpmessageconverter也没有乱码\",{\"1\":{\"233\":1}}],[\"尽管属性注入并不是破坏单一责任原则的直接原因\",{\"1\":{\"587\":1}}],[\"尽管可以配置多个环境\",{\"1\":{\"494\":1}}],[\"尽量的扩展索引\",{\"1\":{\"343\":1}}],[\"插件的\",{\"1\":{\"521\":1}}],[\"插件配置的\",{\"1\":{\"521\":1}}],[\"插件\",{\"1\":{\"492\":1,\"521\":1}}],[\"序列化性能太低\",{\"1\":{\"520\":1}}],[\"序列化后的体积太大\",{\"1\":{\"520\":1}}],[\"序列化技术本身效率就不高\",{\"1\":{\"520\":1}}],[\"序列化技术\",{\"1\":{\"520\":1}}],[\"序列化接口\",{\"1\":{\"488\":1}}],[\"序列化编码\",{\"1\":{\"288\":1,\"293\":1}}],[\"更容易维护的块\",{\"1\":{\"587\":1}}],[\"更积极地基于垃圾收集器状态和弱引用规则移除对象\",{\"1\":{\"487\":1}}],[\"更新数据库内容导致了缓存的更新\",{\"1\":{\"483\":1}}],[\"更新数据库内任意记录\",{\"1\":{\"483\":1}}],[\"更新一个变量的时候\",{\"1\":{\"398\":1}}],[\"更新表的速度\",{\"1\":{\"356\":1}}],[\"更新频繁字段不适合创建索引\",{\"1\":{\"343\":1}}],[\"映射\",{\"1\":{\"539\":1}}],[\"映射器的多种写法\",{\"1\":{\"499\":1}}],[\"映射器\",{\"0\":{\"499\":1},\"1\":{\"492\":1,\"508\":1}}],[\"映射文件\",{\"1\":{\"486\":1}}],[\"映射语句文件中的所有\",{\"1\":{\"482\":2}}],[\"王海洋\",{\"1\":{\"483\":1}}],[\"丛维仪\",{\"1\":{\"483\":4}}],[\"算法来清除不需要的缓存\",{\"1\":{\"482\":1}}],[\"算术运算\",{\"1\":{\"67\":1}}],[\"级别\",{\"1\":{\"481\":1}}],[\"级别的缓存\",{\"1\":{\"481\":1}}],[\"二级缓存工作机制\",{\"0\":{\"489\":1}}],[\"二级缓存是事务性的\",{\"1\":{\"487\":1}}],[\"二级缓存\",{\"0\":{\"485\":1}}],[\"二级缓存需要手动开启\",{\"1\":{\"481\":1}}],[\"二级\",{\"1\":{\"481\":1}}],[\"二狗\",{\"1\":{\"67\":1}}],[\"经常查询且不经常改变的数据\",{\"1\":{\"480\":1}}],[\"什么样的数据适合用缓存\",{\"1\":{\"480\":1}}],[\"什么是缓存\",{\"1\":{\"480\":1}}],[\"什么是快乐星球\",{\"1\":{\"462\":1}}],[\"什么是\",{\"0\":{\"398\":1,\"419\":1}}],[\"减少了\",{\"1\":{\"539\":1}}],[\"减少一次数据拷贝的过程\",{\"1\":{\"539\":1}}],[\"减少访问数据库的次数\",{\"1\":{\"480\":1}}],[\"减小系统开销\",{\"1\":{\"480\":1}}],[\"物理或逻辑\",{\"1\":{\"478\":1}}],[\"潜在地释放阻塞获取方\",{\"1\":{\"478\":1}}],[\"屏障被称为循环\",{\"1\":{\"477\":1}}],[\"屏蔽\",{\"1\":{\"311\":1}}],[\"计数无法重置\",{\"1\":{\"476\":1}}],[\"丢掉任务\",{\"1\":{\"473\":1}}],[\"去和最久的任务竞争\",{\"1\":{\"473\":1}}],[\"去掉后监控界面sql无法统计\",{\"1\":{\"31\":1}}],[\"交由原线程处理\",{\"1\":{\"473\":1}}],[\"交给\",{\"1\":{\"117\":1,\"552\":2}}],[\"哪里来回哪去\",{\"1\":{\"473\":1}}],[\"空值注入\",{\"1\":{\"593\":1}}],[\"空闲线程存活时间\",{\"1\":{\"473\":1}}],[\"空间\",{\"1\":{\"352\":3}}],[\"能够检测多个注册通道上是否有事件发生\",{\"1\":{\"537\":1}}],[\"能够控制什么时候内存会被同步给其他线程\",{\"1\":{\"420\":1}}],[\"能使并发\",{\"1\":{\"496\":1}}],[\"能容纳的最大线程数\",{\"1\":{\"473\":2}}],[\"七大参数解释\",{\"1\":{\"473\":1}}],[\"守护线程\",{\"0\":{\"469\":1},\"1\":{\"469\":1}}],[\"期间其他线程阻塞\",{\"1\":{\"467\":1}}],[\"期望执行顺序\",{\"1\":{\"448\":1}}],[\"演员等待\",{\"1\":{\"462\":1}}],[\"演员表演了\",{\"1\":{\"462\":1}}],[\"演员表演\",{\"1\":{\"462\":1}}],[\"观测线程状态\",{\"0\":{\"468\":1}}],[\"观看了\",{\"1\":{\"462\":1}}],[\"观看\",{\"1\":{\"462\":1}}],[\"观众观看\",{\"1\":{\"462\":1}}],[\"观众等待\",{\"1\":{\"462\":1}}],[\"观察到\",{\"1\":{\"427\":1}}],[\"产品\",{\"1\":{\"462\":1}}],[\"产生的影响能被\",{\"1\":{\"427\":1}}],[\"工具\",{\"1\":{\"457\":1}}],[\"工作原理\",{\"0\":{\"574\":1}}],[\"工作内存中的变量是主内存中的一份拷贝\",{\"1\":{\"420\":1}}],[\"工作内存对应的是寄存器和高速缓存\",{\"1\":{\"420\":1}}],[\"工作内存对应的是栈中的部分区域\",{\"1\":{\"420\":1}}],[\"工作窃取\",{\"1\":{\"406\":2}}],[\"工作流程\",{\"0\":{\"211\":1}}],[\"死锁发现与解决\",{\"0\":{\"457\":1}}],[\"死锁\",{\"0\":{\"455\":1}}],[\"拿到了\",{\"1\":{\"454\":1}}],[\"拿到\",{\"1\":{\"453\":1}}],[\"监听连接事件\",{\"1\":{\"538\":1,\"573\":1}}],[\"监视器\",{\"1\":{\"453\":1}}],[\"监控客户端请求事件\",{\"1\":{\"572\":1}}],[\"监控中心\",{\"1\":{\"328\":1}}],[\"监控中心宕掉不影响使用\",{\"1\":{\"305\":1}}],[\"监控中心协议\",{\"1\":{\"290\":1}}],[\"监控中心配置\",{\"1\":{\"290\":1}}],[\"监控面板配置\",{\"1\":{\"151\":1}}],[\"监控配置\",{\"0\":{\"31\":1}}],[\"递归锁\",{\"0\":{\"450\":1}}],[\"现在有一个线程a\",{\"1\":{\"448\":1}}],[\"现在要加\",{\"1\":{\"343\":1}}],[\"双重检测的懒汉式\",{\"1\":{\"448\":1}}],[\"普通值注入\",{\"1\":{\"593\":1}}],[\"普通懒汉式未实现线程安全\",{\"1\":{\"448\":1}}],[\"普通索引\",{\"1\":{\"356\":1}}],[\"懒汉式\",{\"0\":{\"448\":1}}],[\"饿汉式\",{\"0\":{\"447\":1},\"1\":{\"447\":1}}],[\"深入单例模式\",{\"0\":{\"446\":1}}],[\"谁先拿到谁执行\",{\"1\":{\"438\":1}}],[\"秒\",{\"0\":{\"438\":1}}],[\"非当前\",{\"0\":{\"562\":1}}],[\"非原子性操作\",{\"1\":{\"448\":1}}],[\"非同步方法\",{\"1\":{\"439\":1}}],[\"非公平\",{\"1\":{\"435\":1}}],[\"非公平锁\",{\"1\":{\"433\":1}}],[\"非注解\",{\"0\":{\"214\":1}}],[\"特点\",{\"1\":{\"542\":1}}],[\"特点为\",{\"1\":{\"346\":1}}],[\"特性\",{\"1\":{\"428\":1}}],[\"肯定早于后续发生的读操作\",{\"1\":{\"427\":1}}],[\"管道中维护了很多处理器\",{\"1\":{\"574\":1}}],[\"管道中包含\",{\"1\":{\"574\":1}}],[\"管道\",{\"1\":{\"460\":1,\"574\":1}}],[\"管程法\",{\"0\":{\"459\":1}}],[\"管程锁定规则\",{\"1\":{\"427\":1}}],[\"管理\",{\"1\":{\"355\":1}}],[\"管理在生产者消费者中引用\",{\"1\":{\"314\":1}}],[\"管理所有\",{\"1\":{\"54\":1}}],[\"影响\",{\"1\":{\"427\":1}}],[\"意思就是当\",{\"1\":{\"427\":1}}],[\"意向排它锁\",{\"1\":{\"360\":1}}],[\"意向共享锁\",{\"1\":{\"360\":1}}],[\"意向锁\",{\"1\":{\"360\":1}}],[\"估计脑壳会很疼\",{\"1\":{\"427\":1}}],[\"很容易忽略类中的依赖已经太多了\",{\"1\":{\"587\":1}}],[\"很多程序员只理解这两个关键字的执行互斥\",{\"1\":{\"426\":1}}],[\"很大程度上决定了程序通信的性能\",{\"1\":{\"534\":1}}],[\"很大\",{\"1\":{\"44\":1}}],[\"逸出\",{\"1\":{\"425\":1}}],[\"赋值\",{\"1\":{\"421\":1,\"511\":1,\"558\":1}}],[\"赋予角色时\",{\"1\":{\"63\":1}}],[\"赋予权限或角色\",{\"1\":{\"63\":1}}],[\"操作与对应的处理程序\",{\"1\":{\"546\":1}}],[\"操作都是异步的\",{\"1\":{\"545\":1}}],[\"操作都被支持\",{\"1\":{\"533\":1}}],[\"操作系统直接将内核缓冲区的数据拷贝到\",{\"1\":{\"539\":1}}],[\"操作系统内核与用户空间就不需要再进行任何的数据拷贝操作\",{\"1\":{\"539\":1}}],[\"操作系统不需要拷贝一次\",{\"1\":{\"537\":1}}],[\"操作实现\",{\"0\":{\"461\":1}}],[\"操作b先于操作\",{\"1\":{\"427\":1}}],[\"操作的时候\",{\"1\":{\"427\":1}}],[\"操作先行发生于\",{\"1\":{\"427\":1}}],[\"操作初始化变量的值\",{\"1\":{\"422\":1}}],[\"操作之前\",{\"1\":{\"422\":2}}],[\"操作之一单独出现\",{\"1\":{\"422\":1}}],[\"操作\",{\"1\":{\"422\":4,\"427\":3,\"548\":3}}],[\"操作从工作内存中得到的变量的值放入主内存的变量中\",{\"1\":{\"421\":1}}],[\"操作从主存中变量放入工作内存中\",{\"1\":{\"421\":1}}],[\"操作数栈\",{\"1\":{\"350\":1}}],[\"载入\",{\"1\":{\"421\":1}}],[\"动态生成代理类\",{\"1\":{\"618\":2}}],[\"动态代理分类\",{\"1\":{\"617\":1}}],[\"动态代理的代理类是动态生成的\",{\"1\":{\"617\":1}}],[\"动态代理\",{\"0\":{\"617\":1},\"1\":{\"631\":1}}],[\"动态sql测试3\",{\"1\":{\"506\":1}}],[\"动态\",{\"0\":{\"504\":1}}],[\"动态连接\",{\"1\":{\"350\":1}}],[\"动作使用\",{\"1\":{\"421\":1}}],[\"释放后的变量才可以被其他线程锁定\",{\"1\":{\"421\":1}}],[\"八种内存操作\",{\"0\":{\"421\":1}}],[\"栈\",{\"1\":{\"420\":1}}],[\"规定了内存主要划分为主内存和工作内存两种\",{\"1\":{\"420\":1}}],[\"供给型接口\",{\"1\":{\"416\":1}}],[\"四大拒绝策略\",{\"1\":{\"473\":1}}],[\"四大函数式接口\",{\"0\":{\"412\":1}}],[\"四个隔离级别\",{\"0\":{\"374\":1}}],[\"匿名内部类\",{\"1\":{\"411\":1}}],[\"见forkjoinworkerthread\",{\"1\":{\"409\":1}}],[\"完成的\",{\"1\":{\"539\":1}}],[\"完成创建\",{\"1\":{\"522\":1}}],[\"完成并提交时\",{\"1\":{\"487\":1}}],[\"完成任务后可以触发回调\",{\"1\":{\"408\":1}}],[\"完善此前例子的配置\",{\"0\":{\"301\":1}}],[\"客户\",{\"1\":{\"407\":1,\"613\":1}}],[\"客户端访问代理角色\",{\"1\":{\"614\":1}}],[\"客户端同样是事件驱动\",{\"1\":{\"575\":1}}],[\"客户端在控制台输出这条消息和服务端的信息\",{\"1\":{\"575\":1}}],[\"客户端则是有时回送一个字符串\",{\"1\":{\"566\":1}}],[\"客户端向服务端循环发送\",{\"1\":{\"566\":1}}],[\"客户端并连接\",{\"1\":{\"558\":1}}],[\"客户端实现\",{\"1\":{\"558\":1}}],[\"客户端handler\",{\"1\":{\"558\":1}}],[\"客户端总耗时\",{\"1\":{\"540\":1,\"541\":1}}],[\"客户端名字\",{\"1\":{\"538\":1}}],[\"客户端代码\",{\"1\":{\"538\":1}}],[\"客户端代码示例\",{\"1\":{\"537\":1}}],[\"客户端不阻塞\",{\"1\":{\"537\":1}}],[\"客户端连接可以发现确实是一个线程对应一个连接\",{\"1\":{\"536\":1}}],[\"客户端初始化类\",{\"1\":{\"532\":1}}],[\"客户端发来\",{\"1\":{\"537\":1}}],[\"客户端发来的经过解码的字符串消息\",{\"1\":{\"525\":1}}],[\"客户端发送一个\",{\"1\":{\"532\":1}}],[\"客户端处理器\",{\"0\":{\"527\":1},\"1\":{\"575\":1}}],[\"客户端启动成功\",{\"1\":{\"526\":1}}],[\"客户端编码器配置不变\",{\"1\":{\"522\":1}}],[\"客户端自定义\",{\"1\":{\"521\":1}}],[\"客户端设置编码器\",{\"1\":{\"521\":1}}],[\"客户端传输类型设置\",{\"1\":{\"291\":1}}],[\"客户端都会使用这个规则\",{\"1\":{\"173\":1}}],[\"客户端建立接口\",{\"1\":{\"164\":1}}],[\"客户端配置\",{\"0\":{\"85\":1,\"88\":1}}],[\"客户端\",{\"0\":{\"174\":1,\"526\":1},\"1\":{\"81\":1,\"379\":1,\"380\":1,\"382\":1,\"383\":1,\"525\":4,\"538\":1,\"540\":1,\"541\":1,\"558\":2,\"567\":1,\"575\":1}}],[\"任务队列\",{\"0\":{\"559\":1}}],[\"任务队列使用双端队列\",{\"1\":{\"406\":1}}],[\"任何接口\",{\"1\":{\"410\":1}}],[\"任意一台报错则报错\",{\"1\":{\"313\":1}}],[\"任意一台宕掉后\",{\"1\":{\"305\":2}}],[\"部分线程可能会较先完成自己队列中的任务\",{\"1\":{\"406\":1}}],[\"部署\",{\"0\":{\"155\":1}}],[\"乘以加载因子\",{\"1\":{\"405\":1}}],[\"扩展了\",{\"1\":{\"533\":1}}],[\"扩展参数\",{\"1\":{\"292\":1}}],[\"扩容阈值就是初始桶大小\",{\"1\":{\"405\":1}}],[\"某些桶里可能就有不止一个元素了\",{\"1\":{\"405\":1}}],[\"那我就带你研究研究\",{\"1\":{\"462\":1}}],[\"那就会执行扩容操作\",{\"1\":{\"405\":1}}],[\"那么其他线程就能看到\",{\"1\":{\"425\":1}}],[\"那么它就是一个函数式接口\",{\"1\":{\"410\":1}}],[\"那么所有的非聚集索引都会跟着变\",{\"1\":{\"356\":1}}],[\"那么所有的概要统计都将返回\",{\"1\":{\"143\":1}}],[\"那么需要的空间就会更大\",{\"1\":{\"356\":1}}],[\"那么\",{\"1\":{\"347\":3,\"363\":1,\"608\":1}}],[\"那么只需要修改原来的索引即可\",{\"1\":{\"343\":1}}],[\"那么下线期间产生的消息也会被消费\",{\"1\":{\"190\":1}}],[\"那么该线程将循环等待\",{\"1\":{\"451\":1}}],[\"那么该\",{\"1\":{\"143\":1}}],[\"省略\",{\"1\":{\"405\":1}}],[\"旧的预期值\",{\"1\":{\"398\":1}}],[\"个引用\",{\"1\":{\"482\":1}}],[\"个参数的构造函数是一个明显的信号\",{\"1\":{\"587\":1}}],[\"个参数\",{\"1\":{\"472\":1}}],[\"个产品\",{\"1\":{\"460\":2}}],[\"个基本操作数\",{\"1\":{\"398\":1}}],[\"个元素才扩容\",{\"1\":{\"405\":1}}],[\"个元素\",{\"1\":{\"396\":2,\"405\":1}}],[\"机制当中使用了\",{\"1\":{\"398\":1}}],[\"乐观锁\",{\"0\":{\"397\":1}}],[\"放在一个和\",{\"1\":{\"513\":1}}],[\"放在\",{\"1\":{\"508\":1}}],[\"放开读锁\",{\"1\":{\"445\":1}}],[\"放开写锁\",{\"1\":{\"445\":1}}],[\"放入了第\",{\"1\":{\"396\":1}}],[\"放最后\",{\"1\":{\"67\":1}}],[\"队满\",{\"1\":{\"395\":2}}],[\"队满返回false\",{\"1\":{\"395\":1}}],[\"队空\",{\"1\":{\"395\":2}}],[\"队空返回null\",{\"1\":{\"395\":2}}],[\"队空则异常\",{\"1\":{\"395\":1}}],[\"队列满了\",{\"1\":{\"473\":1}}],[\"队列满会报异常\",{\"1\":{\"395\":1}}],[\"队列空会报异常\",{\"1\":{\"395\":1}}],[\"队列不能动态修改它的对象大小\",{\"1\":{\"143\":1}}],[\"队列的朴充\",{\"1\":{\"143\":1}}],[\"移除最长时间不被使用的对象\",{\"1\":{\"487\":1}}],[\"移除\",{\"1\":{\"395\":1}}],[\"阻塞等待结果\",{\"1\":{\"558\":1}}],[\"阻塞等待\",{\"1\":{\"395\":1}}],[\"阻塞\",{\"1\":{\"395\":1}}],[\"阻塞队列的四组api\",{\"0\":{\"395\":1}}],[\"阻塞队列使用场景\",{\"1\":{\"394\":1}}],[\"阻塞队列\",{\"0\":{\"394\":1},\"1\":{\"473\":1}}],[\"抛出异常\",{\"1\":{\"395\":2,\"473\":1}}],[\"问题\",{\"0\":{\"388\":1}}],[\"正常执行\",{\"1\":{\"512\":1}}],[\"正常结果\",{\"1\":{\"386\":1}}],[\"正文\",{\"1\":{\"44\":1}}],[\"蚌埠住了\",{\"1\":{\"382\":1,\"537\":2,\"558\":1,\"561\":1,\"566\":1,\"575\":1}}],[\"种\",{\"1\":{\"539\":1}}],[\"种基本的数据类型用的是值传递\",{\"1\":{\"377\":1}}],[\"种配置来源\",{\"1\":{\"281\":1}}],[\"取消注册\",{\"1\":{\"538\":1}}],[\"取\",{\"1\":{\"394\":1}}],[\"取上一版本重新对比\",{\"1\":{\"376\":1}}],[\"取值参见protocol说明\",{\"1\":{\"292\":1}}],[\"右边或者就在\",{\"1\":{\"376\":1}}],[\"左边\",{\"1\":{\"376\":1}}],[\"恢复\",{\"1\":{\"375\":1}}],[\"宕机时可以从\",{\"1\":{\"375\":1}}],[\"导入约束\",{\"1\":{\"586\":1}}],[\"导入依赖\",{\"0\":{\"317\":1,\"321\":1,\"325\":1},\"1\":{\"66\":1,\"315\":1}}],[\"导致\",{\"1\":{\"632\":2}}],[\"导致1\",{\"1\":{\"448\":1}}],[\"导致大量超时和锁竞争问题\",{\"1\":{\"374\":1}}],[\"串行\",{\"1\":{\"374\":1}}],[\"叫做不可重复读\",{\"1\":{\"374\":1}}],[\"持久性\",{\"1\":{\"373\":1,\"375\":1}}],[\"持久化\",{\"0\":{\"160\":1}}],[\"隔离性\",{\"1\":{\"373\":1,\"375\":1}}],[\"隔离不同配置集\",{\"1\":{\"292\":2}}],[\"造成内存泄漏\",{\"1\":{\"370\":1}}],[\"负责实现模型\",{\"1\":{\"627\":1}}],[\"负责网络的读写\",{\"1\":{\"574\":1}}],[\"负责接收客户端的连接\",{\"1\":{\"574\":1}}],[\"负责接收客户端的连接并将\",{\"1\":{\"552\":1}}],[\"负责读取输出\",{\"1\":{\"521\":1}}],[\"负责向\",{\"1\":{\"370\":1}}],[\"负载均衡机制\",{\"0\":{\"310\":1}}],[\"负载均衡\",{\"0\":{\"306\":1}}],[\"负载均衡策略\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"负载均衡规则\",{\"1\":{\"172\":1}}],[\"负载均衡地发起调用\",{\"1\":{\"117\":1}}],[\"维护着一个注册了\",{\"1\":{\"552\":1}}],[\"维护着一个\",{\"1\":{\"552\":1}}],[\"维护一对关联的\",{\"1\":{\"445\":1}}],[\"维护当前活动的事务\",{\"1\":{\"376\":1}}],[\"维护\",{\"1\":{\"370\":1}}],[\"里存储线程本地对象做\",{\"1\":{\"370\":1}}],[\"里面的\",{\"1\":{\"235\":1}}],[\"线程处理\",{\"1\":{\"573\":1}}],[\"线程模型\",{\"0\":{\"568\":1}}],[\"线程调用\",{\"0\":{\"562\":1}}],[\"线程优先级\",{\"0\":{\"470\":1}}],[\"线程阻塞\",{\"1\":{\"468\":1}}],[\"线程正在执行\",{\"1\":{\"468\":1}}],[\"线程尚未启动\",{\"1\":{\"468\":1}}],[\"线程强制执行\",{\"0\":{\"467\":1}}],[\"线程结束执行\",{\"1\":{\"466\":1}}],[\"线程开始执行\",{\"1\":{\"466\":1}}],[\"线程由运行态转为就绪态\",{\"1\":{\"466\":1}}],[\"线程礼让\",{\"0\":{\"466\":1}}],[\"线程休眠存在异常\",{\"1\":{\"465\":1}}],[\"线程休眠\",{\"0\":{\"465\":1}}],[\"线程停止\",{\"0\":{\"464\":1}}],[\"线程操作\",{\"0\":{\"463\":1}}],[\"线程b将会循环等待\",{\"1\":{\"451\":1}}],[\"线程b会直接返回还没有被创建的对象引用\",{\"1\":{\"448\":1}}],[\"线程可以获取\",{\"1\":{\"450\":1}}],[\"线程\",{\"1\":{\"450\":1,\"552\":1}}],[\"线程才开始执行\",{\"1\":{\"450\":1}}],[\"线程执行完两个方法后\",{\"1\":{\"450\":1}}],[\"线程中断规则\",{\"1\":{\"427\":1}}],[\"线程中止规则\",{\"1\":{\"427\":1}}],[\"线程启动规则\",{\"1\":{\"427\":1}}],[\"线程对变量的读取和写入\",{\"1\":{\"420\":1}}],[\"线程每次读取和写入变量都直接操作主内存\",{\"1\":{\"420\":1}}],[\"线程二\",{\"1\":{\"396\":1}}],[\"线程一\",{\"1\":{\"396\":1}}],[\"线程变量副本做\",{\"1\":{\"370\":1}}],[\"线程内部都有一个\",{\"1\":{\"370\":1}}],[\"线程池分配独立线程进行业务处理\",{\"1\":{\"573\":1}}],[\"线程池分配线程完成任务将结果返回\",{\"1\":{\"572\":1}}],[\"线程池的某个线程处理业务\",{\"1\":{\"572\":1}}],[\"线程池的基本大小\",{\"1\":{\"473\":1}}],[\"线程池中的所有线程都企图找到并执行提交给线程池的任务\",{\"1\":{\"407\":1}}],[\"线程池\",{\"0\":{\"471\":1},\"1\":{\"394\":1}}],[\"线程池队列大小\",{\"1\":{\"288\":1,\"293\":1}}],[\"线程池类型\",{\"1\":{\"288\":1,\"293\":1}}],[\"线程池将使用synchronousqueue\",{\"1\":{\"143\":1}}],[\"虚引用必须与引用队列联合使用\",{\"1\":{\"369\":1}}],[\"虚引用\",{\"0\":{\"369\":1}}],[\"虚拟机提供的轻量级同步机制\",{\"1\":{\"428\":1}}],[\"虚拟机都会同步创建一个栈帧用于存储局部变量表\",{\"1\":{\"350\":1}}],[\"虚拟机栈描述的是\",{\"1\":{\"350\":1}}],[\"虚拟机栈也是线程私有的\",{\"1\":{\"350\":1}}],[\"虚拟机栈\",{\"0\":{\"350\":1}}],[\"频率比较高\",{\"1\":{\"368\":1}}],[\"弱引用主要用于指向某个易消失的对象\",{\"1\":{\"368\":1}}],[\"弱引用何时被回收也具有不确定性\",{\"1\":{\"368\":1}}],[\"弱引用\",{\"0\":{\"368\":1},\"1\":{\"487\":1}}],[\"软引用\",{\"0\":{\"367\":1},\"1\":{\"487\":1}}],[\"强制类型转换\",{\"1\":{\"521\":1}}],[\"强度最弱\",{\"1\":{\"369\":1}}],[\"强度更弱\",{\"1\":{\"368\":1}}],[\"强度弱于强引用\",{\"1\":{\"367\":1}}],[\"强引用\",{\"0\":{\"366\":1}}],[\"强调从属关系\",{\"1\":{\"347\":1}}],[\"强调继承关系\",{\"1\":{\"347\":1}}],[\"没问题\",{\"1\":{\"363\":3}}],[\"没有声明注解事务\",{\"1\":{\"632\":1}}],[\"没有\",{\"1\":{\"585\":1}}],[\"没有粘包和拆包\",{\"1\":{\"565\":1}}],[\"没有任何理由丢弃它或重新创建另一个实例\",{\"1\":{\"513\":1}}],[\"没有刷新间隔\",{\"1\":{\"482\":1}}],[\"没有使用实际的许可证对象\",{\"1\":{\"478\":1}}],[\"没有异常\",{\"1\":{\"473\":2}}],[\"没有参数\",{\"1\":{\"416\":1}}],[\"没有返回值\",{\"1\":{\"408\":1,\"415\":1}}],[\"没有方法体\",{\"1\":{\"345\":1}}],[\"没有必要在此列建立索引\",{\"1\":{\"343\":1}}],[\"没有无参构造器会报错\",{\"1\":{\"279\":1}}],[\"没有角色将显示\",{\"1\":{\"56\":1}}],[\"没有权限将显示\",{\"1\":{\"56\":1}}],[\"超时不用会释放\",{\"1\":{\"473\":1}}],[\"超时等待\",{\"1\":{\"395\":2}}],[\"超时设置\",{\"0\":{\"165\":1}}],[\"超出了\",{\"1\":{\"363\":1}}],[\"语句的复用\",{\"1\":{\"507\":1}}],[\"语句的结果将会被缓存\",{\"1\":{\"482\":1}}],[\"语句与\",{\"1\":{\"507\":1}}],[\"语句时\",{\"1\":{\"487\":1}}],[\"语句会刷新缓存\",{\"1\":{\"482\":1}}],[\"语句后的控制表达式只能是\",{\"1\":{\"361\":1}}],[\"语法结构\",{\"1\":{\"67\":1}}],[\"语法格式大体如下\",{\"1\":{\"21\":1}}],[\"幻读问题\",{\"1\":{\"359\":1}}],[\"范围查询并命中\",{\"1\":{\"359\":1}}],[\"触发条件\",{\"1\":{\"359\":1}}],[\"把暂时没处理的放入队列\",{\"1\":{\"551\":1}}],[\"把内核的\",{\"1\":{\"539\":2}}],[\"把内核缓冲区的数据拷贝到用户的缓冲区里\",{\"1\":{\"539\":1}}],[\"把刚才拷贝到用户的缓冲区里的数据\",{\"1\":{\"539\":1}}],[\"把磁盘上的数据拷贝到操作系统内核的缓冲区里\",{\"1\":{\"539\":1}}],[\"把两人衔接起来\",{\"1\":{\"462\":1}}],[\"把结果赋值给这个引用\",{\"1\":{\"448\":1}}],[\"把一个变量标识为线程独占状态\",{\"1\":{\"421\":1}}],[\"把相邻的下一个区间也锁住\",{\"1\":{\"359\":1}}],[\"把登陆信息放入上下文信息\",{\"1\":{\"205\":1}}],[\"临建锁会把查询出来的记录锁住\",{\"1\":{\"359\":1}}],[\"临建锁\",{\"1\":{\"359\":1}}],[\"边界遵循左开右闭\",{\"1\":{\"359\":1}}],[\"属于行锁的一种\",{\"1\":{\"359\":1}}],[\"属性起别名\",{\"1\":{\"619\":1}}],[\"属性在没有对应的\",{\"1\":{\"607\":1}}],[\"属性文件中配置这些属性\",{\"1\":{\"497\":1}}],[\"属性来实现引用配置文件\",{\"1\":{\"497\":1}}],[\"属性设置为\",{\"1\":{\"488\":2}}],[\"属性传入即可\",{\"1\":{\"313\":1}}],[\"属性只调用指定协议的服务提供方\",{\"1\":{\"291\":1}}],[\"属性\",{\"0\":{\"497\":1},\"1\":{\"261\":1,\"268\":1,\"286\":2,\"287\":1,\"288\":2,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"492\":1,\"585\":1,\"607\":2}}],[\"属性对应相关的\",{\"1\":{\"235\":1}}],[\"属性区别开\",{\"1\":{\"227\":1}}],[\"属性为服务提供者的注册\",{\"1\":{\"305\":1}}],[\"属性为\",{\"1\":{\"221\":1}}],[\"属性必须以\",{\"1\":{\"213\":1}}],[\"属性值进行匹配\",{\"1\":{\"213\":1}}],[\"属性且值符合定义的主机列表则通过\",{\"1\":{\"131\":1}}],[\"属性中添加所有的注册中心\",{\"1\":{\"110\":1}}],[\"属性中添加另外两个的注册地址\",{\"1\":{\"109\":1}}],[\"属性指定\",{\"1\":{\"164\":1,\"602\":1}}],[\"属性指定默认备用方法\",{\"1\":{\"144\":1}}],[\"属性指定编码\",{\"1\":{\"20\":1}}],[\"属性指定要使用的\",{\"1\":{\"20\":1}}],[\"属性用于指定端口号\",{\"1\":{\"17\":1}}],[\"间隔两秒监听\",{\"1\":{\"538\":1}}],[\"间隙锁\",{\"1\":{\"359\":1}}],[\"间接的解决了\",{\"1\":{\"346\":1}}],[\"粒度介于行级锁和表级锁之间\",{\"1\":{\"359\":1}}],[\"页级锁\",{\"1\":{\"359\":1}}],[\"页面中引入约束\",{\"1\":{\"66\":1}}],[\"行级锁\",{\"1\":{\"359\":1}}],[\"又称写锁\",{\"1\":{\"358\":1}}],[\"排除自己\",{\"1\":{\"538\":1}}],[\"排序生成一个数组\",{\"1\":{\"376\":1}}],[\"排它锁\",{\"1\":{\"358\":1}}],[\"排队等待执行的队列大小\",{\"1\":{\"288\":1,\"293\":1}}],[\"简称\",{\"1\":{\"358\":2}}],[\"简单类\",{\"1\":{\"593\":1}}],[\"简单通信\",{\"0\":{\"379\":1,\"382\":1}}],[\"简单的登录验证拦截器\",{\"1\":{\"234\":1}}],[\"简单配置\",{\"0\":{\"54\":1}}],[\"简单使用\",{\"0\":{\"44\":1,\"55\":1,\"59\":1,\"172\":1,\"386\":1},\"1\":{\"413\":1,\"414\":1,\"415\":1,\"416\":1,\"417\":1}}],[\"锁方法或锁代码块\",{\"1\":{\"453\":1}}],[\"锁的是class对象\",{\"1\":{\"441\":1}}],[\"锁的是方法调用者\",{\"1\":{\"438\":1}}],[\"锁的不同情况\",{\"0\":{\"436\":1}}],[\"锁的分类\",{\"0\":{\"357\":1}}],[\"锁内先行执行的代码\",{\"1\":{\"427\":1}}],[\"锁定\",{\"1\":{\"421\":1}}],[\"锁住的是表记录的某一段区间\",{\"1\":{\"359\":1}}],[\"锁住浏览器\",{\"1\":{\"207\":1}}],[\"锁\",{\"1\":{\"358\":2,\"434\":1}}],[\"删除\",{\"1\":{\"356\":1}}],[\"联合索引\",{\"1\":{\"356\":1}}],[\"永久代\",{\"1\":{\"352\":1}}],[\"老师对学生\",{\"0\":{\"518\":1}}],[\"老师类代码\",{\"1\":{\"517\":1,\"518\":1}}],[\"老年代\",{\"1\":{\"352\":1}}],[\"老版本这里是hystrix\",{\"1\":{\"145\":1}}],[\"新的解决方案\",{\"1\":{\"520\":1}}],[\"新的会话查询信息\",{\"1\":{\"489\":1}}],[\"新生代\",{\"1\":{\"352\":1,\"368\":1}}],[\"新版本\",{\"1\":{\"165\":1}}],[\"新版\",{\"1\":{\"143\":1}}],[\"几乎所有对象实例都在这分配内存\",{\"1\":{\"352\":1}}],[\"堆中的对象实例部分\",{\"1\":{\"420\":1}}],[\"堆外内存\",{\"1\":{\"355\":1}}],[\"堆\",{\"0\":{\"352\":1},\"1\":{\"420\":1}}],[\"抽象角色\",{\"1\":{\"613\":1}}],[\"抽象出两组线程池\",{\"1\":{\"574\":1}}],[\"抽象方法\",{\"1\":{\"411\":1}}],[\"抽象方法只有方法的声明\",{\"1\":{\"345\":1}}],[\"抽象类可以包含属性\",{\"1\":{\"345\":1}}],[\"抽象类的方法默认访问权限变为\",{\"1\":{\"345\":1}}],[\"抽象类的方法默认访问权限为\",{\"1\":{\"345\":1}}],[\"抽象类的特点\",{\"1\":{\"345\":1}}],[\"抽象类不能被实例化只能被继承\",{\"1\":{\"345\":1}}],[\"抽象类\",{\"0\":{\"345\":1}}],[\"索引需要占用物理空间\",{\"1\":{\"356\":1}}],[\"索引需要额外的磁盘空间\",{\"1\":{\"343\":1}}],[\"索引可以极大地提高数据的查询速度\",{\"1\":{\"356\":1}}],[\"索引可以覆盖多个数据列\",{\"1\":{\"356\":1}}],[\"索引的类型\",{\"0\":{\"356\":1}}],[\"索引列越多\",{\"1\":{\"343\":1}}],[\"索引会进行更新甚至重构\",{\"1\":{\"343\":1}}],[\"索引效果较差\",{\"1\":{\"343\":1}}],[\"索引设计原则\",{\"0\":{\"343\":1}}],[\"子查询\",{\"1\":{\"518\":1}}],[\"子句中的列\",{\"1\":{\"343\":1}}],[\"子类构造函数\",{\"1\":{\"342\":1}}],[\"子类非静态代码块\",{\"1\":{\"342\":1}}],[\"子类费静态对象\",{\"1\":{\"342\":1}}],[\"子类静态代码块\",{\"1\":{\"342\":1}}],[\"子类静态对象\",{\"1\":{\"342\":1}}],[\"适合客户端数量少且业务处理很快的场景\",{\"1\":{\"571\":1}}],[\"适合大量代码\",{\"1\":{\"435\":1}}],[\"适合索引的列是出现在\",{\"1\":{\"343\":1}}],[\"适于少量代码同步问题\",{\"1\":{\"435\":1}}],[\"适用包装类型\",{\"1\":{\"363\":2}}],[\"适用于连接数较多且连接时间较长的应用\",{\"1\":{\"542\":1}}],[\"适用于连接数量多且连接比较短的架构\",{\"1\":{\"537\":1}}],[\"适用于连接数目比较小且固定的架构\",{\"1\":{\"535\":1}}],[\"适用于环境隔离\",{\"1\":{\"287\":1}}],[\"适用于运行时动态获取class对象\",{\"1\":{\"270\":1}}],[\"构造器注入\",{\"0\":{\"591\":1}}],[\"构造器中使用到被重写的方法都会被替换为重写后的方法\",{\"1\":{\"342\":1}}],[\"构造函数会变得越来越大\",{\"1\":{\"587\":1}}],[\"构造函数如\",{\"1\":{\"289\":1,\"291\":1}}],[\"构造一个url对象\",{\"1\":{\"384\":1}}],[\"构造方法\",{\"1\":{\"345\":1}}],[\"父类的代码块\",{\"1\":{\"342\":1}}],[\"父类构造函数\",{\"1\":{\"342\":1}}],[\"父类非静态代码块\",{\"1\":{\"342\":1}}],[\"父类非静态对象\",{\"1\":{\"342\":1}}],[\"父类静态代码块\",{\"1\":{\"342\":1}}],[\"父类静态对象\",{\"1\":{\"342\":1}}],[\"顺序依次向下\",{\"1\":{\"342\":1}}],[\"继承\",{\"0\":{\"391\":1},\"1\":{\"391\":1}}],[\"继承中代码的执行顺序\",{\"0\":{\"342\":1}}],[\"继续向后执行\",{\"1\":{\"205\":1}}],[\"覆盖原内容\",{\"1\":{\"339\":1}}],[\"缺点\",{\"1\":{\"533\":1}}],[\"缺少的部分仍然保存上次读出的结果\",{\"1\":{\"338\":1}}],[\"缺省将从所有注册中心获服务列表后合并结果\",{\"1\":{\"291\":1}}],[\"缺省使用dubbo\",{\"1\":{\"291\":7}}],[\"缺省使用第一个provider配置\",{\"1\":{\"289\":1}}],[\"缺省值\",{\"1\":{\"291\":1}}],[\"缺省向所有registry注册\",{\"1\":{\"289\":1,\"293\":1,\"294\":1}}],[\"缺省为的loadbalance\",{\"1\":{\"296\":1}}],[\"缺省为的timeout\",{\"1\":{\"296\":1}}],[\"缺省为dubbo\",{\"1\":{\"296\":2}}],[\"缺省为接口名\",{\"1\":{\"289\":1}}],[\"缺省为空串\",{\"1\":{\"288\":1,\"293\":1}}],[\"缺省和name属性值一样\",{\"1\":{\"288\":1}}],[\"传输的是帧\",{\"1\":{\"576\":1}}],[\"传输\",{\"1\":{\"558\":1}}],[\"传统阻塞\",{\"0\":{\"569\":1}}],[\"传统阻塞型\",{\"1\":{\"535\":1}}],[\"传统文件传输\",{\"1\":{\"539\":1}}],[\"传递性\",{\"1\":{\"427\":1}}],[\"传递数据\",{\"0\":{\"236\":1}}],[\"传入t类型\",{\"1\":{\"413\":1}}],[\"传入容量过大将被这个值替换\",{\"1\":{\"405\":1}}],[\"传入一个\",{\"1\":{\"338\":1}}],[\"括号内\",{\"1\":{\"338\":1}}],[\"括号内为\",{\"1\":{\"27\":1}}],[\"节点流\",{\"0\":{\"337\":1}}],[\"读空闲\",{\"1\":{\"528\":1}}],[\"读锁\",{\"1\":{\"432\":1,\"445\":1}}],[\"读已提交级别下的事务在每次查询的开始都会生成一个独立的\",{\"1\":{\"376\":1}}],[\"读已提交\",{\"1\":{\"374\":1}}],[\"读未提交\",{\"1\":{\"374\":1}}],[\"读到\",{\"1\":{\"338\":1}}],[\"读写切换\",{\"1\":{\"537\":1}}],[\"读写buffer\",{\"1\":{\"537\":1}}],[\"读写空闲\",{\"1\":{\"528\":1}}],[\"读写锁\",{\"0\":{\"445\":1}}],[\"读写\",{\"1\":{\"336\":3}}],[\"读取数据后\",{\"1\":{\"572\":1}}],[\"读取数据时通过一种类似快照的方式将数据保存下来\",{\"1\":{\"376\":1}}],[\"读取数据时不允许修改防止重复读\",{\"1\":{\"358\":1}}],[\"读取channel到buffer\",{\"1\":{\"538\":1}}],[\"读取客户端发送的消息\",{\"1\":{\"525\":1}}],[\"读取完成\",{\"1\":{\"445\":1}}],[\"读取\",{\"1\":{\"330\":1,\"421\":1,\"445\":1}}],[\"读取配置文件\",{\"1\":{\"281\":1}}],[\"反转\",{\"1\":{\"596\":1}}],[\"反向获取\",{\"1\":{\"537\":1}}],[\"反之亦然\",{\"1\":{\"396\":1}}],[\"反序列化的类必须实现序列化接口\",{\"1\":{\"334\":1}}],[\"反射常用方法\",{\"0\":{\"279\":1}}],[\"修饰\",{\"1\":{\"632\":1}}],[\"修饰符\",{\"1\":{\"582\":1}}],[\"修饰变量\",{\"0\":{\"454\":1}}],[\"修饰方法\",{\"0\":{\"453\":1}}],[\"修饰的方法上使用\",{\"1\":{\"632\":1}}],[\"修饰的方法上\",{\"1\":{\"632\":1}}],[\"修饰的字段在构造器中一旦完成初始化\",{\"1\":{\"425\":1}}],[\"修饰的默认方法和静态方法\",{\"1\":{\"346\":1}}],[\"修饰的变量\",{\"1\":{\"334\":1}}],[\"修改第二部分中的代码\",{\"0\":{\"597\":1}}],[\"修改数据同时要在内存和\",{\"1\":{\"375\":1}}],[\"修改为\",{\"1\":{\"198\":1,\"258\":1}}],[\"修改主启动类注解\",{\"1\":{\"194\":1}}],[\"修改消费者配置文件\",{\"1\":{\"189\":1}}],[\"修改超时配置如下\",{\"1\":{\"165\":1}}],[\"修改业务类代码\",{\"1\":{\"147\":1}}],[\"修改配置文件\",{\"0\":{\"151\":1,\"178\":1},\"1\":{\"123\":1,\"145\":1,\"187\":1}}],[\"修改要刷新的类\",{\"0\":{\"92\":1}}],[\"修改\",{\"0\":{\"75\":1,\"76\":1,\"77\":1,\"91\":1,\"198\":1},\"1\":{\"93\":1,\"181\":1}}],[\"先由操作系统完成后才通知服务端程序启动线程去处理\",{\"1\":{\"542\":1}}],[\"先强制转换为大类型\",{\"1\":{\"522\":1}}],[\"先创建的后关闭\",{\"1\":{\"510\":2,\"511\":2}}],[\"先进先出\",{\"1\":{\"487\":1}}],[\"先输出所有的vip再输出剩下的main\",{\"1\":{\"467\":1}}],[\"先输出a再输出b\",{\"1\":{\"437\":1}}],[\"先于操作\",{\"1\":{\"427\":2}}],[\"先于被调用的线程检测中断事件\",{\"1\":{\"427\":1}}],[\"先行发生的写操作\",{\"1\":{\"427\":1}}],[\"先行发生规则\",{\"0\":{\"427\":1}}],[\"先开后关\",{\"1\":{\"330\":1}}],[\"先执行\",{\"1\":{\"181\":1}}],[\"缓冲区描述符和数据长度传到\",{\"1\":{\"539\":1}}],[\"缓冲区里\",{\"1\":{\"539\":1}}],[\"缓冲区里的数据\",{\"1\":{\"539\":2}}],[\"缓冲区中\",{\"1\":{\"539\":2}}],[\"缓冲区\",{\"1\":{\"537\":1,\"539\":1}}],[\"缓冲流\",{\"0\":{\"329\":1}}],[\"缓存仅仅会在调用语句时刷新\",{\"1\":{\"487\":1}}],[\"缓存只作用于\",{\"1\":{\"486\":1}}],[\"缓存失效的情况\",{\"0\":{\"484\":1}}],[\"缓存会获得更新\",{\"1\":{\"487\":1}}],[\"缓存会被视为读\",{\"1\":{\"482\":1}}],[\"缓存会保存列表或对象\",{\"1\":{\"482\":1}}],[\"缓存会使用最近最少使用算法\",{\"1\":{\"482\":1}}],[\"缓存不会定时进行刷新\",{\"1\":{\"482\":1}}],[\"缓存机制\",{\"0\":{\"482\":1},\"1\":{\"488\":1}}],[\"缓存简介\",{\"0\":{\"480\":1}}],[\"缓存\",{\"0\":{\"479\":1,\"481\":1},\"1\":{\"581\":1}}],[\"缓存返回结果\",{\"1\":{\"291\":1,\"294\":1,\"296\":1}}],[\"选一台提供者进行调用\",{\"1\":{\"328\":1}}],[\"选择其中一个\",{\"1\":{\"552\":1}}],[\"选择器\",{\"1\":{\"537\":1}}],[\"选择动态代理实现策略\",{\"1\":{\"291\":1}}],[\"选择\",{\"1\":{\"256\":1}}],[\"选择环境\",{\"1\":{\"85\":1}}],[\"版本开始起\",{\"1\":{\"539\":1}}],[\"版本以上\",{\"0\":{\"319\":1}}],[\"版本后不再需要单独搭建\",{\"1\":{\"176\":1}}],[\"年龄\",{\"1\":{\"315\":1}}],[\"避免了创建新的连接实例时所必需的初始化和认证时间\",{\"1\":{\"496\":1}}],[\"避免了脏读\",{\"1\":{\"359\":1}}],[\"避免了出现脏数据和脏读的问题\",{\"1\":{\"358\":1}}],[\"避免同一个接口在生产者消费者中多次重复定义的情况\",{\"1\":{\"314\":1}}],[\"避免client与server的网络问题\",{\"1\":{\"102\":1}}],[\"具体思路是在消费者发出\",{\"1\":{\"558\":1}}],[\"具体实现\",{\"0\":{\"558\":1}}],[\"具体过程如下\",{\"1\":{\"539\":1}}],[\"具体选择使用\",{\"1\":{\"313\":1}}],[\"具有较强的层次性\",{\"1\":{\"21\":1}}],[\"逐个调用\",{\"1\":{\"313\":1}}],[\"广播调用所有提供者\",{\"1\":{\"313\":1}}],[\"出站事件会从链表\",{\"1\":{\"549\":1}}],[\"出站会调用编码器\",{\"1\":{\"529\":1}}],[\"出现死锁的情况\",{\"0\":{\"456\":1}}],[\"出现异常返回值\",{\"1\":{\"386\":1}}],[\"出现异常时\",{\"1\":{\"313\":1}}],[\"出错返回空对象\",{\"1\":{\"311\":1}}],[\"快速失败\",{\"1\":{\"313\":1}}],[\"容纳了大量视图技术\",{\"1\":{\"627\":1}}],[\"容易违反单一职责原则\",{\"1\":{\"587\":1}}],[\"容易导致\",{\"1\":{\"472\":1}}],[\"容器在初始化时先读取配置文件\",{\"1\":{\"600\":1}}],[\"容器\",{\"1\":{\"589\":1}}],[\"容器来实例化您的类\",{\"1\":{\"587\":1}}],[\"容器之外变得无用\",{\"1\":{\"587\":1}}],[\"容器实例化类并使用反射注入它们\",{\"1\":{\"587\":1}}],[\"容器可以集中或在外部配置数据源\",{\"1\":{\"496\":1}}],[\"容器中取出需要的对象\",{\"1\":{\"600\":1}}],[\"容器中存在并且符合\",{\"1\":{\"587\":1}}],[\"容器中注册\",{\"1\":{\"214\":1}}],[\"容器中定义的处理器\",{\"1\":{\"213\":1}}],[\"容器中\",{\"1\":{\"35\":1,\"36\":1,\"117\":1}}],[\"容量为hashmap中桶的数目\",{\"1\":{\"405\":1}}],[\"容错\",{\"1\":{\"311\":1}}],[\"平摊到其它提供者\",{\"1\":{\"310\":1}}],[\"久而久之\",{\"1\":{\"308\":1}}],[\"按对象进入缓存的顺序来移除它们\",{\"1\":{\"487\":1}}],[\"按引用传递的实质是将地址值的副本作为实参代替方法中的形参\",{\"1\":{\"377\":1}}],[\"按公约后的权重设置轮循比率\",{\"1\":{\"308\":1}}],[\"按权重设置随机概率\",{\"1\":{\"307\":1}}],[\"轮循\",{\"1\":{\"308\":1}}],[\"轮询\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1,\"574\":2}}],[\"健壮性\",{\"1\":{\"305\":1}}],[\"暴露服务的服务提供方\",{\"1\":{\"328\":1}}],[\"暴露的服务\",{\"1\":{\"305\":1}}],[\"暴露出供动态刷新的接口\",{\"1\":{\"75\":1}}],[\"解码方法调用\",{\"1\":{\"567\":1}}],[\"解码器即可\",{\"1\":{\"567\":1}}],[\"解码器\",{\"0\":{\"530\":1},\"1\":{\"524\":1,\"532\":1,\"567\":1}}],[\"解析为\",{\"1\":{\"558\":1}}],[\"解锁\",{\"1\":{\"421\":1,\"434\":1}}],[\"解压其中生成的压缩包\",{\"1\":{\"300\":1}}],[\"解决方法\",{\"1\":{\"488\":1}}],[\"解决方案\",{\"0\":{\"371\":1},\"1\":{\"402\":1,\"403\":1}}],[\"解决了高并发系统的性能问题\",{\"1\":{\"480\":1}}],[\"解决判断字段是否包含的问题\",{\"1\":{\"356\":1}}],[\"解决\",{\"1\":{\"218\":3}}],[\"解决重复消费问题\",{\"0\":{\"189\":1}}],[\"命令所需的所有方法\",{\"1\":{\"508\":1}}],[\"命令定位进程号\",{\"1\":{\"457\":1}}],[\"命令生成\",{\"1\":{\"300\":1}}],[\"命令运行其中\",{\"1\":{\"300\":1}}],[\"命令\",{\"1\":{\"300\":1,\"521\":1}}],[\"命名空间\",{\"1\":{\"56\":1,\"60\":1}}],[\"运行上述代码\",{\"1\":{\"566\":1}}],[\"运行时常量池\",{\"0\":{\"354\":1}}],[\"运行时数据区\",{\"0\":{\"348\":1}}],[\"运行\",{\"1\":{\"300\":2,\"411\":1}}],[\"运算\",{\"1\":{\"67\":1}}],[\"标识传递的是哪个枚举类型\",{\"1\":{\"522\":1}}],[\"标准情况\",{\"0\":{\"437\":1}}],[\"标准错误流\",{\"1\":{\"341\":1}}],[\"标准输出流\",{\"1\":{\"341\":1}}],[\"标准输入流\",{\"1\":{\"341\":1}}],[\"标准输入输出流\",{\"0\":{\"341\":1}}],[\"标记sent=true时\",{\"1\":{\"296\":1}}],[\"标签中的\",{\"1\":{\"619\":1}}],[\"标签中通过\",{\"1\":{\"67\":1}}],[\"标签起\",{\"1\":{\"619\":1}}],[\"标签作用相同\",{\"1\":{\"602\":1}}],[\"标签在需要使用的地方引用即可\",{\"1\":{\"507\":1}}],[\"标签包含要复用的内容\",{\"1\":{\"507\":1}}],[\"标签默认功能一致\",{\"1\":{\"507\":1}}],[\"标签也优先使用外部配置\",{\"1\":{\"497\":1}}],[\"标签所在的映射文件中的语句\",{\"1\":{\"486\":1}}],[\"标签说明\",{\"0\":{\"285\":1}}],[\"标签会在插入\",{\"1\":{\"207\":1}}],[\"标签的缺省值设置\",{\"1\":{\"293\":1,\"294\":1}}],[\"标签的配置\",{\"1\":{\"233\":1}}],[\"标签的所有元素都由\",{\"1\":{\"67\":1}}],[\"标签的接口\",{\"1\":{\"46\":1}}],[\"标签\",{\"1\":{\"56\":10,\"507\":1,\"594\":3}}],[\"让一套代码在不同平台下能到达相同的访问结果\",{\"1\":{\"419\":1}}],[\"让其他事务知道表中已经加锁\",{\"1\":{\"360\":1}}],[\"让dubbo自动获取本机ip\",{\"1\":{\"293\":1}}],[\"让后续的解析器得不到执行\",{\"1\":{\"213\":1}}],[\"区别\",{\"1\":{\"465\":1}}],[\"区别在于虚拟机栈为执行字节码服务\",{\"1\":{\"351\":1}}],[\"区分度实在太低\",{\"1\":{\"343\":1}}],[\"区分不同领域的配置集合\",{\"1\":{\"292\":1}}],[\"区域解析器我们直接选择\",{\"1\":{\"36\":1}}],[\"点对点直连服务提供者地址\",{\"1\":{\"291\":1}}],[\"直到它准备好被处理\",{\"1\":{\"530\":1}}],[\"直到它可以重新获得监视器的所有权并恢复执行\",{\"1\":{\"460\":1}}],[\"直到许可证可用\",{\"1\":{\"478\":1}}],[\"直到由于\",{\"1\":{\"476\":1}}],[\"直到获取到锁才会退出循环\",{\"1\":{\"451\":1}}],[\"直到所有的读锁释放之后其他事务才能进行加写锁\",{\"1\":{\"358\":1}}],[\"直连\",{\"1\":{\"305\":1,\"322\":1}}],[\"直连监控中心服务器地址\",{\"1\":{\"290\":1}}],[\"直接使用sqlsession实现crud\",{\"1\":{\"610\":1}}],[\"直接利用sqlsessionfactory配置mapper\",{\"1\":{\"610\":1}}],[\"直接设置\",{\"1\":{\"607\":1}}],[\"直接通过参数名设置\",{\"1\":{\"601\":1}}],[\"直接注入属性的值\",{\"1\":{\"594\":1}}],[\"直接定义切点\",{\"1\":{\"582\":1}}],[\"直接修改文件内容\",{\"1\":{\"537\":1}}],[\"直接调用\",{\"1\":{\"532\":1}}],[\"直接子类\",{\"1\":{\"408\":1}}],[\"直接内存\",{\"0\":{\"355\":1}}],[\"直接输出char数组\",{\"1\":{\"338\":1}}],[\"直接忽略\",{\"1\":{\"313\":1}}],[\"直接把访问日志输出到指定文件\",{\"1\":{\"288\":1,\"289\":1,\"293\":1}}],[\"直接写死在配置中\",{\"1\":{\"286\":1,\"295\":1}}],[\"直接从web文件夹下寻找\",{\"1\":{\"217\":1}}],[\"直接在堆外内存修改\",{\"1\":{\"537\":1}}],[\"直接在工作内存中操作\",{\"1\":{\"420\":1}}],[\"直接在\",{\"1\":{\"176\":1}}],[\"保存\",{\"1\":{\"550\":1}}],[\"保存到文件\",{\"1\":{\"384\":1}}],[\"保证对\",{\"1\":{\"558\":1}}],[\"保证可见性\",{\"0\":{\"429\":1},\"1\":{\"428\":1}}],[\"保证\",{\"1\":{\"375\":1,\"425\":1}}],[\"保证注册中心的授权功能有效\",{\"1\":{\"289\":1}}],[\"保持的意思\",{\"1\":{\"274\":1}}],[\"已被实例化\",{\"1\":{\"601\":1}}],[\"已连接\",{\"1\":{\"576\":1}}],[\"已断开\",{\"1\":{\"576\":1}}],[\"已经拥有一个资源时\",{\"1\":{\"456\":1}}],[\"已经进入维护状态\",{\"1\":{\"140\":1}}],[\"已废弃\",{\"1\":{\"289\":1}}],[\"远程服务调用重试次数\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"远程服务调用超时时间\",{\"1\":{\"289\":1,\"293\":1,\"294\":1}}],[\"延迟注册服务时间\",{\"1\":{\"289\":1,\"293\":1}}],[\"设计描述\",{\"0\":{\"557\":1}}],[\"设定时一定要考虑加载因子的存在\",{\"1\":{\"405\":1}}],[\"设为\",{\"1\":{\"289\":1,\"293\":1}}],[\"设为true\",{\"1\":{\"288\":1,\"289\":4,\"293\":3}}],[\"设置错误\",{\"1\":{\"632\":2}}],[\"设置要代理的对象\",{\"1\":{\"618\":1}}],[\"设置作用域\",{\"1\":{\"578\":1}}],[\"设置处理器\",{\"1\":{\"575\":1}}],[\"设置处理登出的url\",{\"1\":{\"62\":1}}],[\"设置保持活动连接状态\",{\"1\":{\"575\":1}}],[\"设置线程队列连接个数\",{\"1\":{\"575\":1}}],[\"设置输出sql的级别\",{\"1\":{\"515\":1}}],[\"设置的值应该是一个以毫秒为单位的合理时间量\",{\"1\":{\"487\":1}}],[\"设置为基本的无界值\",{\"1\":{\"473\":1}}],[\"设置为true启动\",{\"1\":{\"31\":1}}],[\"设置优先级\",{\"1\":{\"470\":1}}],[\"设置true\",{\"1\":{\"296\":1}}],[\"设置允许修改private属性\",{\"1\":{\"279\":1}}],[\"设置标准日志输出\",{\"1\":{\"233\":1}}],[\"设置mybatis选项\",{\"1\":{\"233\":1}}],[\"设置数据源\",{\"1\":{\"233\":1}}],[\"设置\",{\"1\":{\"221\":1,\"492\":1,\"607\":2}}],[\"设置响应信息\",{\"1\":{\"205\":1}}],[\"设置响应状态码\",{\"1\":{\"205\":1}}],[\"设置响应的头信息\",{\"1\":{\"204\":1}}],[\"设置响应体\",{\"1\":{\"204\":1}}],[\"设置是否跳过前缀\",{\"1\":{\"203\":1}}],[\"设置隔离策略\",{\"1\":{\"143\":1}}],[\"设置git的相关信息\",{\"1\":{\"76\":1}}],[\"设置有效时间\",{\"1\":{\"62\":1}}],[\"设置登出成功的跳转界面\",{\"1\":{\"62\":1}}],[\"设置默认成功转发到的路径\",{\"1\":{\"62\":1}}],[\"设置用于登录处理的url\",{\"1\":{\"62\":1}}],[\"设置用户名\",{\"1\":{\"30\":1}}],[\"设置自定义403报错界面\",{\"1\":{\"62\":1}}],[\"设置收信人\",{\"1\":{\"44\":1}}],[\"设置编码\",{\"1\":{\"44\":1}}],[\"固定大小的线程池\",{\"1\":{\"472\":1}}],[\"固定大小\",{\"1\":{\"288\":2,\"293\":1}}],[\"协议\",{\"1\":{\"551\":1}}],[\"协议的消息派发方式\",{\"1\":{\"288\":1}}],[\"协议的客户端实现类型\",{\"1\":{\"288\":1,\"293\":1}}],[\"协议的服务器端实现类型\",{\"1\":{\"288\":1,\"293\":1}}],[\"协议的服务端和客户端实现类型\",{\"1\":{\"288\":1}}],[\"协议序列化方式\",{\"1\":{\"288\":1,\"293\":1}}],[\"协议编码方式\",{\"1\":{\"288\":1,\"293\":1}}],[\"协议名称\",{\"1\":{\"288\":1,\"293\":1}}],[\"协议beanid\",{\"1\":{\"288\":1,\"293\":1}}],[\"停止时等待通知完成时间\",{\"1\":{\"287\":1}}],[\"必定刷新缓存\",{\"1\":{\"484\":1}}],[\"必行晚于线程中所有操作\",{\"1\":{\"427\":1}}],[\"必需和服务提供方一致\",{\"1\":{\"291\":1}}],[\"必填\",{\"1\":{\"286\":1,\"287\":1,\"288\":1,\"289\":2,\"291\":2,\"292\":1,\"295\":1,\"296\":1,\"297\":1}}],[\"必须和用来创建\",{\"1\":{\"629\":1}}],[\"必须开启注解支持才能实现\",{\"1\":{\"587\":1}}],[\"必须保证类型全局唯一\",{\"1\":{\"585\":1}}],[\"必须保证\",{\"1\":{\"577\":1}}],[\"必须实现序列化\",{\"1\":{\"488\":1}}],[\"必须成对出现\",{\"1\":{\"450\":1}}],[\"必须紧跟try代码块\",{\"1\":{\"434\":1}}],[\"必须把此变量同步回主内存\",{\"1\":{\"422\":1}}],[\"必须重新\",{\"1\":{\"422\":1}}],[\"必须执行相同次数的\",{\"1\":{\"422\":1}}],[\"必须经过\",{\"1\":{\"422\":1}}],[\"必须告知主存\",{\"1\":{\"422\":1}}],[\"必须\",{\"1\":{\"422\":2}}],[\"必须先取出才能继续添加\",{\"1\":{\"396\":1}}],[\"必须等待前一个事务释放锁才能进行访问\",{\"1\":{\"359\":1}}],[\"必须在配置类上使用\",{\"1\":{\"630\":1}}],[\"必须在同步代码块中\",{\"1\":{\"465\":1}}],[\"必须在\",{\"1\":{\"235\":1}}],[\"必须是2的幂且小于2的30次方\",{\"1\":{\"405\":1}}],[\"必须是\",{\"1\":{\"222\":1}}],[\"必须能被numbuckets\",{\"1\":{\"143\":1}}],[\"必须通过\",{\"1\":{\"67\":1}}],[\"必须加上role\",{\"1\":{\"63\":1}}],[\"必须拥有记住我功能才能使用\",{\"1\":{\"54\":1}}],[\"必须认证才能访问\",{\"1\":{\"54\":1}}],[\"描述\",{\"1\":{\"286\":1,\"287\":1,\"288\":2,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1}}],[\"端的全局设置\",{\"1\":{\"282\":1}}],[\"端口号为\",{\"1\":{\"299\":1}}],[\"端口号\",{\"1\":{\"85\":1,\"188\":1}}],[\"端口号即可\",{\"1\":{\"79\":1}}],[\"合理的重试次数\",{\"1\":{\"282\":1}}],[\"含参构造器\",{\"1\":{\"405\":1}}],[\"含义视所选定的配置中心而不同\",{\"1\":{\"292\":2}}],[\"含包名\",{\"1\":{\"279\":1}}],[\"含标签\",{\"1\":{\"67\":1}}],[\"玩游戏类\",{\"1\":{\"278\":1}}],[\"游戏注解\",{\"1\":{\"278\":1}}],[\"游戏属性代表游戏名称\",{\"1\":{\"278\":1}}],[\"他属性代表喜欢玩游戏集合\",{\"1\":{\"278\":1}}],[\"他喜欢玩英雄联盟\",{\"1\":{\"278\":1}}],[\"尘埃4等\",{\"1\":{\"278\":1}}],[\"极品飞车\",{\"1\":{\"278\":1}}],[\"顾名思义说明被这个元注解修饰的注解可以同时作用一个对象多次\",{\"1\":{\"278\":1}}],[\"泛型的参数类型是否等于参数化类型\",{\"1\":{\"279\":1}}],[\"泛型的参数类型\",{\"1\":{\"279\":1}}],[\"泛型\",{\"1\":{\"279\":1}}],[\"泛型接口\",{\"1\":{\"275\":1}}],[\"泛型类\",{\"1\":{\"275\":1}}],[\"英文意思有保留\",{\"1\":{\"274\":1}}],[\"五种\",{\"1\":{\"273\":1}}],[\"加在类属性或方法上\",{\"1\":{\"578\":1}}],[\"加速编译\",{\"1\":{\"522\":1}}],[\"加载驱动\",{\"1\":{\"510\":2,\"511\":2}}],[\"加载因子存在的原因\",{\"1\":{\"405\":1}}],[\"加锁\",{\"1\":{\"434\":1}}],[\"加入聊天\",{\"1\":{\"525\":1}}],[\"加入\",{\"1\":{\"273\":1,\"537\":1,\"542\":1}}],[\"加不加没啥影响\",{\"1\":{\"187\":1}}],[\"它是工厂模式的实现\",{\"1\":{\"621\":1}}],[\"它是作用在注解中\",{\"1\":{\"273\":1}}],[\"它负责处理和拦截\",{\"1\":{\"549\":1}}],[\"它仅仅对一个会话中的数据进行缓存\",{\"1\":{\"481\":1}}],[\"它可以非常方便地配置和定制\",{\"1\":{\"481\":1}}],[\"它们允许更灵活的结构化\",{\"1\":{\"432\":1}}],[\"它把工作内存中的变量传输给执行引擎\",{\"1\":{\"421\":1}}],[\"它把\",{\"1\":{\"421\":2}}],[\"它把一个从工作内存中一个变量的值传送到主内存中\",{\"1\":{\"421\":1}}],[\"它把一个从执行引擎中接受到的值放入工作内存的变量副本中\",{\"1\":{\"421\":1}}],[\"它把一个变量的值从主内存传输到线程的工作内存中\",{\"1\":{\"421\":1}}],[\"它把一个处于锁定状态的变量释放出来\",{\"1\":{\"421\":1}}],[\"它的一个方法\",{\"1\":{\"632\":1}}],[\"它的子类也会继承父类的注解\",{\"1\":{\"277\":1}}],[\"它的作用是能够将注解中的元素包含到\",{\"1\":{\"276\":1}}],[\"它表示注解存在阶段是保留在源码\",{\"1\":{\"274\":1}}],[\"它提供了常见的rest请求方案的模版\",{\"1\":{\"184\":1}}],[\"元素允许你在\",{\"1\":{\"507\":1}}],[\"元素\",{\"1\":{\"507\":1}}],[\"元素来定制\",{\"1\":{\"507\":1}}],[\"元素与你期望的不太一样\",{\"1\":{\"507\":1}}],[\"元素的功能\",{\"1\":{\"507\":1}}],[\"元素的子元素中设置\",{\"1\":{\"497\":1}}],[\"元素的\",{\"1\":{\"488\":1}}],[\"元素的属性\",{\"0\":{\"487\":1}}],[\"元素的个数\",{\"1\":{\"67\":1}}],[\"元注解表示我们的注解作用的范围就比较具体了\",{\"1\":{\"275\":1}}],[\"元注解分别有\",{\"1\":{\"273\":1}}],[\"元注解顾名思义我们可以理解为注解的注解\",{\"1\":{\"273\":1}}],[\"元注解\",{\"0\":{\"273\":1}}],[\"转而被动接收对象\",{\"1\":{\"599\":1}}],[\"转换为\",{\"1\":{\"363\":1}}],[\"转换流\",{\"0\":{\"332\":1}}],[\"转账处理失败\",{\"1\":{\"265\":1}}],[\"转账处理业务类\",{\"1\":{\"265\":1}}],[\"转账成功\",{\"1\":{\"265\":1}}],[\"转账失败\",{\"1\":{\"265\":1}}],[\"转账金额为\",{\"1\":{\"265\":1}}],[\"转账金额大于限额\",{\"1\":{\"265\":1}}],[\"转账金额\",{\"1\":{\"265\":1}}],[\"转账的限额可能会根据汇率的变化而变化\",{\"1\":{\"265\":1}}],[\"转发离线消息给其他客户端\",{\"1\":{\"538\":1}}],[\"转发给其他客户端\",{\"1\":{\"538\":1}}],[\"转发\",{\"1\":{\"217\":2}}],[\"假设类\",{\"1\":{\"608\":1}}],[\"假设客户端分别发送了两个数据包\",{\"1\":{\"565\":1}}],[\"假设银行有个转账业务\",{\"1\":{\"265\":1}}],[\"假设有三个\",{\"1\":{\"109\":1}}],[\"变量规则\",{\"1\":{\"427\":1}}],[\"变量被隐式指定为\",{\"1\":{\"346\":1}}],[\"变量返回值注解括号中对应参数类型\",{\"1\":{\"261\":1}}],[\"变量名就是使用注解括号中对应的参数名\",{\"1\":{\"261\":1}}],[\"变成了\",{\"1\":{\"140\":1}}],[\"手动异常\",{\"1\":{\"630\":1}}],[\"手动清理缓存方法\",{\"1\":{\"484\":1}}],[\"手动清理缓存\",{\"1\":{\"484\":1}}],[\"手动创建线程池\",{\"0\":{\"473\":1}}],[\"手动装配\",{\"1\":{\"259\":1}}],[\"手动刷新\",{\"0\":{\"89\":1}}],[\"想通过\",{\"1\":{\"256\":1}}],[\"框架的功能可以用在任何\",{\"1\":{\"627\":1}}],[\"框架的基本功能\",{\"1\":{\"621\":1}}],[\"框架变成为高度可配置的\",{\"1\":{\"627\":1}}],[\"框架是一个全功能的构建\",{\"1\":{\"627\":1}}],[\"框架支持与\",{\"1\":{\"626\":1}}],[\"框架插入了若干个\",{\"1\":{\"625\":1}}],[\"框架管理的任何对象支持\",{\"1\":{\"623\":1}}],[\"框架中\",{\"1\":{\"623\":1}}],[\"框架中的\",{\"1\":{\"513\":1}}],[\"框架提供上下文信息\",{\"1\":{\"622\":1}}],[\"框架提供的\",{\"1\":{\"228\":1}}],[\"框架\",{\"1\":{\"513\":1,\"625\":1}}],[\"框架整合\",{\"0\":{\"255\":1}}],[\"鬼\",{\"1\":{\"254\":1}}],[\"生产了产品\",{\"1\":{\"461\":1}}],[\"生产了第\",{\"1\":{\"460\":1}}],[\"生产者\",{\"1\":{\"460\":1,\"462\":1}}],[\"生产者消费者问题\",{\"0\":{\"458\":1}}],[\"生命周期和作用域\",{\"0\":{\"513\":1}}],[\"生命周期内\",{\"1\":{\"483\":1}}],[\"生命周期与线程相同\",{\"1\":{\"350\":1}}],[\"生命周期方法\",{\"1\":{\"254\":3}}],[\"生成文件前是否把目标目录清空\",{\"1\":{\"521\":1}}],[\"生成文件的目录\",{\"1\":{\"521\":1}}],[\"生成一个\",{\"1\":{\"300\":1}}],[\"生成动态代理方式\",{\"1\":{\"289\":1,\"293\":1,\"294\":1}}],[\"生成\",{\"1\":{\"117\":1,\"574\":1}}],[\"销毁\",{\"1\":{\"254\":1}}],[\"各属性详解\",{\"0\":{\"493\":1}}],[\"各配置项\",{\"0\":{\"285\":1}}],[\"各项依赖说明及idea开发注意事项\",{\"0\":{\"250\":1}}],[\"各位置配置文件的优先级顺序\",{\"1\":{\"24\":1}}],[\"赵泽龙2\",{\"1\":{\"249\":1}}],[\"赵泽龙\",{\"1\":{\"241\":7,\"249\":1}}],[\"写空闲\",{\"1\":{\"528\":1}}],[\"写缓存\",{\"1\":{\"482\":1}}],[\"写锁\",{\"1\":{\"432\":1,\"445\":1}}],[\"写法二\",{\"1\":{\"338\":1}}],[\"写法一\",{\"1\":{\"338\":1}}],[\"写入channel\",{\"1\":{\"538\":1}}],[\"写入通过\",{\"1\":{\"537\":1}}],[\"写入完成\",{\"1\":{\"445\":1}}],[\"写入内容\",{\"1\":{\"379\":1}}],[\"写入\",{\"1\":{\"330\":1,\"394\":1,\"421\":1,\"445\":1}}],[\"写与不写没区别\",{\"1\":{\"244\":1}}],[\"写为字节流\",{\"1\":{\"241\":1}}],[\"写为字符串\",{\"1\":{\"241\":1}}],[\"写为文件\",{\"1\":{\"241\":1}}],[\"写一个类实现\",{\"1\":{\"35\":1}}],[\"定制\",{\"1\":{\"507\":1}}],[\"定时每分钟发送一次统计数据到监控中心\",{\"1\":{\"328\":1}}],[\"定时重发\",{\"1\":{\"313\":1}}],[\"定时任务\",{\"0\":{\"25\":1},\"1\":{\"561\":1}}],[\"定义通知\",{\"1\":{\"582\":1}}],[\"定义切点\",{\"1\":{\"582\":1}}],[\"定义切面类代码如下\",{\"1\":{\"582\":1}}],[\"定义实体类\",{\"1\":{\"567\":1}}],[\"定义抽象方法\",{\"1\":{\"557\":1}}],[\"定义channel\",{\"1\":{\"538\":1}}],[\"定义selector用于监听事件\",{\"1\":{\"538\":1}}],[\"定义select属性为已经写好的select语句\",{\"1\":{\"517\":1}}],[\"定义school\",{\"1\":{\"522\":1}}],[\"定义一个child\",{\"1\":{\"522\":1}}],[\"定义一个teacher\",{\"1\":{\"522\":1}}],[\"定义一个实体类\",{\"1\":{\"315\":1}}],[\"定义结果映射集\",{\"1\":{\"517\":1}}],[\"定义完成后就无法通过该引用获取指向的对象\",{\"1\":{\"369\":1}}],[\"定义了\",{\"1\":{\"346\":1}}],[\"定义有外键的数据列一定要建立索引\",{\"1\":{\"343\":1}}],[\"定义消费者\",{\"0\":{\"320\":1}}],[\"定义properties文件\",{\"1\":{\"319\":1}}],[\"定义服务提供者\",{\"0\":{\"316\":1}}],[\"定义两个接口\",{\"1\":{\"315\":1}}],[\"定义接口模块\",{\"0\":{\"315\":1}}],[\"定义限额注解\",{\"1\":{\"265\":1}}],[\"定义对象\",{\"1\":{\"237\":1}}],[\"之后\",{\"1\":{\"632\":1}}],[\"之后可以用于执行\",{\"1\":{\"608\":1}}],[\"之后是参数\",{\"1\":{\"558\":1}}],[\"之后所有等待线程被释放\",{\"1\":{\"476\":1}}],[\"之后读都复用之前的\",{\"1\":{\"376\":1}}],[\"之后被注入到\",{\"1\":{\"235\":1}}],[\"之前必须先把变量刷新回主内存\",{\"1\":{\"425\":1}}],[\"之前软引用指向的对象将被回收\",{\"1\":{\"367\":1}}],[\"之前\",{\"1\":{\"346\":1,\"521\":1}}],[\"之间\",{\"1\":{\"389\":1}}],[\"之间的调用数据通过二进制协议进行传输\",{\"1\":{\"118\":1}}],[\"之间没有空格\",{\"1\":{\"67\":1}}],[\"层中\",{\"1\":{\"579\":3}}],[\"层接口\",{\"1\":{\"508\":1,\"517\":1,\"518\":1}}],[\"层接口必须和配置文件同名\",{\"1\":{\"499\":1}}],[\"层\",{\"0\":{\"259\":1}}],[\"层的\",{\"1\":{\"235\":1}}],[\"层自动扫描及\",{\"1\":{\"235\":1}}],[\"织入包\",{\"1\":{\"235\":1}}],[\"找不到切点问题\",{\"1\":{\"235\":1}}],[\"找到刷新的\",{\"1\":{\"78\":1}}],[\"找到\",{\"1\":{\"66\":1}}],[\"乱码\",{\"1\":{\"235\":1}}],[\"乱码问题\",{\"0\":{\"218\":1}}],[\"忽略即可\",{\"1\":{\"233\":1}}],[\"均在getservletconfigclasses返回的类中配置\",{\"1\":{\"232\":1}}],[\"及其实现类\",{\"0\":{\"548\":1,\"552\":1}}],[\"及\",{\"0\":{\"232\":1}}],[\"环境\",{\"1\":{\"627\":1}}],[\"环境中\",{\"1\":{\"541\":1}}],[\"环境配置及环境变量\",{\"0\":{\"494\":1}}],[\"环境配置\",{\"0\":{\"505\":1},\"1\":{\"492\":1}}],[\"环境变量\",{\"1\":{\"300\":1,\"492\":1}}],[\"环境变量及\",{\"1\":{\"300\":1}}],[\"环境下双击\",{\"1\":{\"299\":1}}],[\"环境准备\",{\"0\":{\"298\":1}}],[\"环境隔离\",{\"1\":{\"292\":1}}],[\"环境搭建\",{\"0\":{\"181\":1,\"182\":1,\"183\":1}}],[\"环绕通知\",{\"1\":{\"229\":1}}],[\"思想的一种实践\",{\"1\":{\"228\":1}}],[\"拦截admin后的所有请求\",{\"1\":{\"230\":1}}],[\"拦截器是\",{\"1\":{\"228\":1}}],[\"拦截器\",{\"0\":{\"228\":1}}],[\"拦截所有请求\",{\"1\":{\"212\":1}}],[\"上并且配置了\",{\"1\":{\"631\":1}}],[\"上述注解功能一致\",{\"1\":{\"579\":1}}],[\"上述代码实现了\",{\"1\":{\"47\":1}}],[\"上的\",{\"1\":{\"574\":1}}],[\"上\",{\"1\":{\"537\":1}}],[\"上线\",{\"1\":{\"525\":2,\"538\":1}}],[\"上下文模块建立在应用程序上下文模块之上\",{\"1\":{\"626\":1}}],[\"上下文包括企业服务\",{\"1\":{\"622\":1}}],[\"上下文是一个配置文件\",{\"1\":{\"622\":1}}],[\"上下文\",{\"0\":{\"622\":1},\"1\":{\"525\":6}}],[\"上下文的数据源引用\",{\"1\":{\"496\":1}}],[\"上面的是枚举\",{\"1\":{\"522\":1}}],[\"上面的语句符合第四条\",{\"1\":{\"363\":1}}],[\"上锁的时候锁定的是表的某一行或多行\",{\"1\":{\"359\":1}}],[\"上传\",{\"0\":{\"220\":1},\"1\":{\"221\":1}}],[\"调用相关方法\",{\"1\":{\"618\":1}}],[\"调用相应\",{\"1\":{\"573\":1}}],[\"调用代码\",{\"1\":{\"606\":1}}],[\"调用了\",{\"1\":{\"558\":1}}],[\"调用了方法等\",{\"1\":{\"427\":1}}],[\"调用一次\",{\"1\":{\"541\":1}}],[\"调用立即返回\",{\"1\":{\"476\":1}}],[\"调用join方法返回计算结果\",{\"1\":{\"409\":1}}],[\"调用fork方法提交任务\",{\"1\":{\"409\":1}}],[\"调用start\",{\"1\":{\"391\":1}}],[\"调用system的setin\",{\"1\":{\"341\":1}}],[\"调用的是父类的\",{\"1\":{\"342\":2}}],[\"调用的是服务提供者的接口实现类\",{\"1\":{\"314\":1}}],[\"调用远程服务的服务消费方\",{\"1\":{\"328\":1}}],[\"调用服务负责人\",{\"1\":{\"291\":1,\"294\":1}}],[\"调用\",{\"0\":{\"554\":1},\"1\":{\"223\":1,\"368\":1,\"391\":1,\"392\":1,\"427\":1,\"562\":1,\"608\":1}}],[\"调用拼接函数\",{\"1\":{\"208\":1}}],[\"调试中\",{\"1\":{\"218\":1}}],[\"情况三\",{\"1\":{\"218\":1}}],[\"情况二\",{\"1\":{\"218\":1}}],[\"情况一\",{\"1\":{\"218\":1}}],[\"未连接\",{\"1\":{\"576\":1}}],[\"未满足条件前\",{\"1\":{\"451\":1}}],[\"未必能观察到该变量已经被修改\",{\"1\":{\"425\":1}}],[\"未找到\",{\"1\":{\"217\":1}}],[\"未查询到结果\",{\"1\":{\"182\":1}}],[\"既可以跳转controller\",{\"1\":{\"217\":1}}],[\"既影响prefix也影响给服务指定的url前缀\",{\"1\":{\"203\":1}}],[\"显式指定redirect或forward后\",{\"1\":{\"217\":1}}],[\"重新提交任务\",{\"1\":{\"409\":1}}],[\"重写\",{\"1\":{\"391\":1,\"392\":1,\"393\":1,\"528\":1}}],[\"重写的方法均为\",{\"1\":{\"233\":1}}],[\"重复读\",{\"1\":{\"359\":1}}],[\"重复值比较多的列不要建立索引\",{\"1\":{\"343\":1}}],[\"重复则在name后加序号\",{\"1\":{\"288\":1}}],[\"重试其它服务器\",{\"1\":{\"313\":1}}],[\"重试其它服务提供机器\",{\"1\":{\"288\":1,\"293\":1}}],[\"重定向\",{\"1\":{\"217\":2}}],[\"重定向与转发\",{\"0\":{\"217\":1}}],[\"重构消费者\",{\"0\":{\"164\":1}}],[\"防止虚假唤醒\",{\"1\":{\"460\":1}}],[\"防止幻读问题\",{\"1\":{\"359\":1}}],[\"防止抛出异常后不关闭流\",{\"1\":{\"338\":1}}],[\"防止\",{\"1\":{\"235\":1}}],[\"防止为空\",{\"1\":{\"227\":1}}],[\"防止静态资源404\",{\"1\":{\"215\":1,\"233\":1}}],[\"防止中文乱码\",{\"1\":{\"20\":1}}],[\"仅在cluster为failback\",{\"1\":{\"294\":1}}],[\"仅支持get方式请求\",{\"1\":{\"215\":1}}],[\"仅\",{\"0\":{\"215\":1}}],[\"仅记录请求方法\",{\"1\":{\"167\":1}}],[\"效率极低\",{\"1\":{\"214\":1}}],[\"给服务端\",{\"1\":{\"565\":1}}],[\"给接收到的channel添加配置\",{\"1\":{\"544\":1}}],[\"给自己的channel添加配置\",{\"1\":{\"544\":1}}],[\"给bosseventloopgroup只分配一个eventloop\",{\"1\":{\"524\":1}}],[\"给对应的\",{\"1\":{\"511\":1}}],[\"给实体类起别名\",{\"1\":{\"498\":1}}],[\"给\",{\"1\":{\"213\":1}}],[\"给属性赋值\",{\"0\":{\"20\":1,\"22\":1}}],[\"核心容器提供\",{\"1\":{\"621\":1}}],[\"核心容器\",{\"0\":{\"621\":1}}],[\"核心是控制反转\",{\"1\":{\"620\":1}}],[\"核心数和有关\",{\"1\":{\"473\":1}}],[\"核心\",{\"1\":{\"211\":1}}],[\"后就一直等待\",{\"1\":{\"536\":1}}],[\"后两个参数分别是希望获取的数组的起点和终点\",{\"1\":{\"338\":1}}],[\"后正常\",{\"1\":{\"258\":1}}],[\"后紧接着添加如下内容\",{\"1\":{\"256\":1}}],[\"后静态资源依然\",{\"1\":{\"252\":1}}],[\"后注入到\",{\"1\":{\"235\":1}}],[\"后\",{\"1\":{\"235\":1,\"422\":1,\"539\":1,\"547\":1}}],[\"后置通知\",{\"1\":{\"229\":1,\"582\":2}}],[\"后缀\",{\"1\":{\"213\":1}}],[\"后缀为\",{\"1\":{\"66\":1}}],[\"后台记录失败请求\",{\"1\":{\"313\":1}}],[\"后台代码\",{\"0\":{\"223\":1,\"226\":1}}],[\"后台通过\",{\"1\":{\"209\":1}}],[\"后台处理\",{\"0\":{\"209\":1}}],[\"形式调用函数时\",{\"1\":{\"207\":1}}],[\"除非有特殊需求\",{\"1\":{\"288\":1,\"293\":1}}],[\"除非设置了\",{\"1\":{\"207\":1}}],[\"除了反射\",{\"1\":{\"587\":1}}],[\"除了上述缓存的方式\",{\"1\":{\"490\":1}}],[\"除了数据表占数据空间之外\",{\"1\":{\"356\":1}}],[\"除了\",{\"1\":{\"167\":2,\"425\":1}}],[\"文档\",{\"1\":{\"207\":1}}],[\"文件配置\",{\"1\":{\"593\":1}}],[\"文件使用了\",{\"1\":{\"522\":1}}],[\"文件目录中新建一个\",{\"1\":{\"521\":1}}],[\"文件编译为\",{\"1\":{\"521\":1}}],[\"文件不能太大\",{\"1\":{\"383\":1}}],[\"文件中除了有类的版本\",{\"1\":{\"354\":1}}],[\"文件中的配置文件配置了相关端口等\",{\"1\":{\"300\":1}}],[\"文件上传\",{\"1\":{\"251\":1}}],[\"文件上传和下载\",{\"0\":{\"219\":1}}],[\"文件大小\",{\"0\":{\"540\":1,\"541\":1},\"1\":{\"222\":1}}],[\"文件命名需要符合以下规范\",{\"1\":{\"33\":1}}],[\"文件夹下的文件\",{\"1\":{\"508\":1}}],[\"文件夹并添加全部依赖\",{\"1\":{\"252\":1}}],[\"文件夹并在其中创建配置文件\",{\"1\":{\"24\":1}}],[\"文件夹同级\",{\"1\":{\"24\":1}}],[\"文件夹与\",{\"1\":{\"24\":1}}],[\"文件夹中的\",{\"1\":{\"457\":1}}],[\"文件夹中创建\",{\"1\":{\"252\":1}}],[\"文件夹中创建配置文件\",{\"1\":{\"24\":1}}],[\"文件夹中有一个\",{\"1\":{\"17\":1}}],[\"文件夹名字必须为\",{\"1\":{\"24\":1}}],[\"文件夹\",{\"1\":{\"24\":1,\"252\":1,\"300\":3}}],[\"文件内容\",{\"1\":{\"20\":1}}],[\"文件内容如下\",{\"1\":{\"17\":1}}],[\"文件强制使用\",{\"1\":{\"20\":1}}],[\"文件进行配置\",{\"1\":{\"19\":1}}],[\"文件\",{\"1\":{\"17\":1,\"20\":1,\"33\":1,\"72\":1,\"181\":1,\"183\":1,\"217\":1,\"299\":1,\"521\":2,\"522\":1}}],[\"登陆校验逻辑\",{\"1\":{\"205\":1}}],[\"登录注册中心密码\",{\"1\":{\"287\":1}}],[\"登录注册中心用户名\",{\"1\":{\"287\":1}}],[\"登录认证实现类详解\",{\"0\":{\"63\":1}}],[\"登录验证url\",{\"1\":{\"59\":1}}],[\"登录界面\",{\"1\":{\"59\":1}}],[\"登录成功\",{\"1\":{\"56\":1}}],[\"登录\",{\"1\":{\"55\":1}}],[\"例为核心的\",{\"1\":{\"508\":1}}],[\"例子\",{\"0\":{\"593\":1},\"1\":{\"205\":1}}],[\"例如用于单元测试\",{\"1\":{\"587\":1}}],[\"例如如下代码允许\",{\"1\":{\"587\":1}}],[\"例如可读\",{\"1\":{\"547\":1}}],[\"例如网络缓慢并且消息格式复杂时\",{\"1\":{\"533\":1}}],[\"例如上面八项操作\",{\"1\":{\"424\":1}}],[\"例如下面的代码\",{\"1\":{\"377\":1}}],[\"例如端口号等\",{\"1\":{\"299\":1}}],[\"例如原先访问\",{\"1\":{\"69\":1}}],[\"例如访问\",{\"1\":{\"69\":1}}],[\"例如localhost\",{\"1\":{\"69\":1}}],[\"例如\",{\"1\":{\"19\":1,\"69\":1,\"143\":2,\"184\":1,\"203\":1,\"207\":1,\"230\":1,\"269\":1,\"366\":1,\"478\":1,\"552\":1,\"571\":1}}],[\"错误信息\",{\"1\":{\"386\":1}}],[\"错误\",{\"1\":{\"204\":1,\"363\":1}}],[\"错误百分比\",{\"1\":{\"143\":1}}],[\"请考虑使用\",{\"1\":{\"476\":1}}],[\"请为从未连接的分叉任务建立本地先进先出调度模式\",{\"1\":{\"409\":1}}],[\"请使用runtime\",{\"1\":{\"409\":1}}],[\"请使用路由\",{\"1\":{\"296\":1}}],[\"请使用stub\",{\"1\":{\"289\":1}}],[\"请配置多个dubbo\",{\"1\":{\"287\":1}}],[\"请填写负责人公司邮箱前缀\",{\"1\":{\"286\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"295\":1}}],[\"请稍后再试\",{\"1\":{\"204\":1}}],[\"请求启动成功\",{\"1\":{\"558\":1}}],[\"请求后\",{\"1\":{\"558\":1}}],[\"请求提供者返回数据\",{\"1\":{\"557\":1}}],[\"请求就进行处理\",{\"1\":{\"537\":1}}],[\"请求相似的作用域中\",{\"1\":{\"513\":1}}],[\"请求及响应数据包大小限制\",{\"1\":{\"288\":1,\"293\":1}}],[\"请求适配到一个控制器的实现进行处理\",{\"1\":{\"213\":1}}],[\"请求都将转为\",{\"1\":{\"207\":1}}],[\"请求方式\",{\"1\":{\"207\":1}}],[\"请求方式需要携带参数\",{\"1\":{\"164\":1}}],[\"请求要注意参数的拼接\",{\"1\":{\"184\":1}}],[\"请求以及一些通用的请求执行方法\",{\"1\":{\"184\":1}}],[\"请求工具\",{\"1\":{\"184\":1}}],[\"请求成功\",{\"1\":{\"147\":1}}],[\"请求的成功\",{\"1\":{\"143\":1}}],[\"请求路径符合限制才通过\",{\"1\":{\"133\":1}}],[\"请求\",{\"1\":{\"93\":1,\"117\":1,\"118\":1,\"184\":5,\"207\":1,\"228\":1,\"513\":1,\"558\":1}}],[\"做客户端\",{\"1\":{\"536\":1}}],[\"做分隔符解析数据\",{\"1\":{\"533\":1}}],[\"做如下配置\",{\"1\":{\"204\":1}}],[\"做配置中心\",{\"0\":{\"82\":1}}],[\"替换\",{\"1\":{\"194\":1}}],[\"本示例在收到客户端发来的消息后将消息和客户端信息输出到控制台并发送一条消息返回给客户端\",{\"1\":{\"575\":1}}],[\"本示例使用\",{\"1\":{\"536\":1}}],[\"本身并没有提供很多方法\",{\"1\":{\"548\":1}}],[\"本身自带的\",{\"1\":{\"520\":1}}],[\"本质\",{\"0\":{\"600\":1}}],[\"本质的区别\",{\"1\":{\"537\":1}}],[\"本质上支持的参数都是可以转换为\",{\"1\":{\"361\":1}}],[\"本地方法栈为执行本地native方法服务\",{\"1\":{\"351\":1}}],[\"本地方法栈\",{\"0\":{\"351\":1}}],[\"本实例的端口号\",{\"1\":{\"194\":1}}],[\"本实例的ip地址\",{\"1\":{\"194\":1}}],[\"本服务的名字\",{\"1\":{\"97\":1}}],[\"本服务的部署ip\",{\"1\":{\"97\":1}}],[\"模型来有\",{\"1\":{\"627\":1}}],[\"模型特征\",{\"0\":{\"423\":1}}],[\"模式将应用的配置和依赖性规范与实际的应用程序代码分开\",{\"1\":{\"621\":1}}],[\"模式\",{\"1\":{\"542\":1}}],[\"模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作\",{\"1\":{\"626\":1}}],[\"模块为基于\",{\"1\":{\"623\":1}}],[\"模块直接将面向方面的编程功能集成到了\",{\"1\":{\"623\":1}}],[\"模块会使用自带的管理器来覆盖前面的配置\",{\"1\":{\"495\":1}}],[\"模块负责人\",{\"1\":{\"295\":1}}],[\"模块信息配置\",{\"1\":{\"295\":1}}],[\"模块\",{\"0\":{\"193\":1,\"195\":1}}],[\"模板引擎不仅可以渲染\",{\"1\":{\"67\":1}}],[\"模板\",{\"1\":{\"67\":1}}],[\"模板编码\",{\"1\":{\"19\":1}}],[\"消费了产品\",{\"1\":{\"461\":1}}],[\"消费了第\",{\"1\":{\"460\":1}}],[\"消费型接口\",{\"1\":{\"415\":1}}],[\"消费方引用时将打印服务过时警告error日志\",{\"1\":{\"289\":1,\"293\":1}}],[\"消费者只能看到调用与结果\",{\"1\":{\"555\":1}}],[\"消费者\",{\"1\":{\"460\":1,\"462\":1}}],[\"消费者接口实现类\",{\"1\":{\"323\":2}}],[\"消费者调用提供者方法输出结果\",{\"1\":{\"315\":1}}],[\"消费者和提供者应用名不要一样\",{\"1\":{\"286\":1}}],[\"消费者1号收到消息\",{\"1\":{\"188\":1}}],[\"消息会被拆成了多个碎片\",{\"1\":{\"533\":1}}],[\"消息持久化\",{\"0\":{\"190\":1}}],[\"消息消费者\",{\"0\":{\"188\":1}}],[\"消息生产者\",{\"0\":{\"187\":1}}],[\"程序使用时再从\",{\"1\":{\"600\":1}}],[\"程序不再具有主动性\",{\"1\":{\"599\":1}}],[\"程序主动创建对象\",{\"1\":{\"599\":1}}],[\"程序本身不创建对象\",{\"1\":{\"596\":1}}],[\"程序切换到那个\",{\"1\":{\"537\":1}}],[\"程序无法终止\",{\"1\":{\"429\":1}}],[\"程序的执行规则跟程序的书写规则是一致的\",{\"1\":{\"427\":1}}],[\"程序次序规则\",{\"1\":{\"427\":1}}],[\"程序代码要保证业务上的一致性\",{\"1\":{\"375\":1}}],[\"程序计数器为线程私有\",{\"1\":{\"349\":1}}],[\"程序计数器是一块较小的内存空间\",{\"1\":{\"349\":1}}],[\"程序计数器\",{\"0\":{\"349\":1}}],[\"程序将进行两次连接\",{\"1\":{\"187\":1}}],[\"程序会进行包扫描\",{\"1\":{\"117\":1}}],[\"键值对传递请求参数\",{\"1\":{\"184\":1}}],[\"存放于\",{\"1\":{\"627\":1}}],[\"存放提交但未执行任务的队列\",{\"1\":{\"473\":1}}],[\"存活的时间单位\",{\"1\":{\"473\":1}}],[\"存储\",{\"1\":{\"421\":1}}],[\"存储请求参数\",{\"1\":{\"184\":2}}],[\"存在如下问题\",{\"1\":{\"520\":1}}],[\"存在内存中的临时数据\",{\"1\":{\"480\":1}}],[\"存在指令重排可能的代码\",{\"1\":{\"448\":1}}],[\"存在\",{\"1\":{\"370\":1}}],[\"存在慢的提供者累积请求的问题\",{\"1\":{\"308\":1}}],[\"存在这样一个访问静态资源路径即webjars中的所有资源\",{\"1\":{\"69\":1}}],[\"订单模块\",{\"0\":{\"183\":1}}],[\"查出的数据会放在自己对应的缓存\",{\"1\":{\"489\":1}}],[\"查询返回结果集\",{\"1\":{\"510\":1,\"511\":1}}],[\"查询不同的\",{\"1\":{\"484\":1}}],[\"查询不同的记录\",{\"1\":{\"484\":1}}],[\"查询完第一条记录后\",{\"1\":{\"483\":1}}],[\"查询命中了索引\",{\"1\":{\"359\":1}}],[\"查询成功\",{\"1\":{\"182\":2}}],[\"查询结果为\",{\"1\":{\"182\":2}}],[\"查看进程堆栈找到死锁问题\",{\"1\":{\"457\":1}}],[\"查看\",{\"0\":{\"148\":1}}],[\"查看仓库中配置文件内容的可选路径\",{\"0\":{\"84\":1}}],[\"准备唤醒\",{\"1\":{\"558\":1}}],[\"准备好了\",{\"1\":{\"538\":1}}],[\"准备查询所有支付记录\",{\"1\":{\"182\":1}}],[\"准备根据id查询支付记录\",{\"1\":{\"182\":1}}],[\"准备创建支付记录\",{\"1\":{\"182\":1}}],[\"再拷贝到内核的\",{\"1\":{\"539\":1}}],[\"再调用本类的方法\",{\"1\":{\"632\":1}}],[\"再调用put方法会抛出异常\",{\"1\":{\"537\":1}}],[\"再调用对应方法即可获取对应值\",{\"1\":{\"522\":1}}],[\"再次查询同一条记录\",{\"1\":{\"483\":1}}],[\"再向下执行\",{\"1\":{\"476\":1}}],[\"再请求其他资源容易出现死锁\",{\"1\":{\"456\":1}}],[\"再选另一台调用\",{\"1\":{\"328\":1}}],[\"再使用访问\",{\"1\":{\"184\":1}}],[\"再执行\",{\"1\":{\"181\":1}}],[\"再判断用户权限和角色\",{\"1\":{\"64\":1}}],[\"网络连接完成等\",{\"1\":{\"547\":1}}],[\"网络异常等\",{\"1\":{\"289\":1,\"291\":1}}],[\"网络读写缓冲区大小\",{\"1\":{\"288\":1,\"293\":1}}],[\"网络传输方式\",{\"1\":{\"287\":1}}],[\"网络通信\",{\"0\":{\"8\":1}}],[\"网关的服务中\",{\"1\":{\"204\":1}}],[\"网关中实现服务降级\",{\"1\":{\"204\":1}}],[\"网站后\",{\"1\":{\"180\":1}}],[\"通道\",{\"1\":{\"537\":1}}],[\"通知\",{\"1\":{\"581\":1}}],[\"通知演员表演\",{\"1\":{\"462\":1}}],[\"通知观众观看\",{\"1\":{\"462\":1}}],[\"通信\",{\"0\":{\"378\":1,\"381\":1,\"384\":1}}],[\"通常一个服务端口即一个\",{\"1\":{\"552\":1}}],[\"通常用于通知所有提供者更新缓存或日志等本地资源信息\",{\"1\":{\"313\":1}}],[\"通常用于实时性要求较高的读操作\",{\"1\":{\"313\":1}}],[\"通常用于消息通知操作\",{\"1\":{\"313\":1}}],[\"通常用于写入审计日志等操作\",{\"1\":{\"313\":1}}],[\"通常用于非幂等性的写操作\",{\"1\":{\"313\":1}}],[\"通常用于读操作\",{\"1\":{\"313\":1}}],[\"通常用于事件推送\",{\"1\":{\"297\":1}}],[\"通常用于多租户隔离\",{\"1\":{\"292\":1}}],[\"通常在接口不兼容时版本号才需要升级\",{\"1\":{\"289\":1,\"293\":1}}],[\"通常是\",{\"1\":{\"552\":1}}],[\"通常是一个单线程的\",{\"1\":{\"552\":1}}],[\"通常是因为它很危险或存在更好的选择\",{\"1\":{\"268\":1}}],[\"通常是开发时要引用通用类\",{\"1\":{\"180\":1}}],[\"通用模块\",{\"0\":{\"181\":1}}],[\"通过策略接口\",{\"1\":{\"627\":1}}],[\"通过配置管理特性\",{\"1\":{\"623\":1}}],[\"通过配置文件向实体类赋值的注解\",{\"1\":{\"17\":1}}],[\"通过类型赋值\",{\"1\":{\"601\":1}}],[\"通过类名\",{\"1\":{\"270\":1}}],[\"通过构造器注入\",{\"1\":{\"594\":1}}],[\"通过构造函数创建jsonarray\",{\"1\":{\"249\":1}}],[\"通过构造函数创建jsonobject\",{\"1\":{\"249\":1}}],[\"通过自动装配\",{\"1\":{\"587\":1}}],[\"通过bytype实现\",{\"1\":{\"578\":1}}],[\"通过得到的\",{\"1\":{\"537\":1}}],[\"通过指定长度来标识整包消息\",{\"1\":{\"533\":1}}],[\"通过简单映射即可\",{\"1\":{\"517\":1}}],[\"通过使用\",{\"1\":{\"623\":1}}],[\"通过使用内置的日志工厂提供日志功能\",{\"1\":{\"515\":1}}],[\"通过使用索引\",{\"1\":{\"356\":1}}],[\"通过注解进行配置\",{\"1\":{\"602\":1}}],[\"通过注解配置时同样返回sqlsessionfactorybean的getobject\",{\"1\":{\"610\":1}}],[\"通过注解配置时\",{\"1\":{\"610\":1}}],[\"通过注解配置\",{\"1\":{\"508\":1}}],[\"通过注解\",{\"1\":{\"502\":1}}],[\"通过序列化\",{\"1\":{\"487\":1}}],[\"通过标志位解决\",{\"1\":{\"462\":1}}],[\"通过jad反编译获取真实的构造器\",{\"1\":{\"448\":1}}],[\"通过线程池或\",{\"1\":{\"393\":1}}],[\"通过建立倒排索引可以极大地提升检所效率\",{\"1\":{\"356\":1}}],[\"通过数组来引用\",{\"1\":{\"342\":1}}],[\"通过动态代理为接口生成代理对象\",{\"1\":{\"314\":1}}],[\"通过参数类型查找参数的index\",{\"1\":{\"297\":1}}],[\"通过反射设置属性\",{\"1\":{\"279\":1}}],[\"通过反射获取一个方法\",{\"1\":{\"279\":1}}],[\"通过反射获取注解的属性\",{\"1\":{\"272\":1}}],[\"通过反射调用普通方法\",{\"1\":{\"279\":1}}],[\"通过无参构造器创建对象\",{\"1\":{\"279\":1}}],[\"通过对象\",{\"1\":{\"270\":1}}],[\"通过mapperfactorybean指定也可行\",{\"1\":{\"258\":1}}],[\"通过put方法创建jsonarray\",{\"1\":{\"249\":1}}],[\"通过put方法创建jsonobject\",{\"1\":{\"249\":1}}],[\"通过此注解可以实现ajax跨域请求\",{\"1\":{\"241\":1}}],[\"通过继承sqlsessiondaosupport\",{\"1\":{\"610\":1}}],[\"通过继承\",{\"1\":{\"232\":1}}],[\"通过流读取文件\",{\"1\":{\"226\":1}}],[\"通过流读取文件并输出\",{\"1\":{\"223\":1}}],[\"通过实现\",{\"1\":{\"214\":1,\"233\":1}}],[\"通过分组实现解决重复消费问题\",{\"1\":{\"189\":1}}],[\"通过id查询支付记录\",{\"1\":{\"164\":1,\"182\":1}}],[\"通过该参数\",{\"1\":{\"143\":1}}],[\"通过两个参数\",{\"1\":{\"129\":1}}],[\"通过浏览器发起请求的头部信息决定返回何种语言资源\",{\"1\":{\"33\":1}}],[\"通过浏览器自动进行国际化\",{\"0\":{\"33\":1}}],[\"通过connectproperties属性来打开mergesql功能\",{\"1\":{\"31\":1}}],[\"通过yml读取配置\",{\"1\":{\"30\":1}}],[\"通过\",{\"0\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1},\"1\":{\"20\":1,\"24\":1,\"31\":1,\"67\":1,\"117\":1,\"208\":1,\"216\":1,\"235\":1,\"403\":1,\"502\":1,\"537\":5,\"539\":1,\"545\":1,\"547\":1,\"558\":1,\"572\":3,\"573\":2,\"589\":1,\"599\":1,\"606\":1,\"607\":1,\"619\":2}}],[\"打印流\",{\"0\":{\"335\":1}}],[\"打头的属性集\",{\"1\":{\"281\":1}}],[\"打成\",{\"1\":{\"180\":2}}],[\"打出来的可以作为其他项目的\",{\"1\":{\"180\":1}}],[\"打开\",{\"1\":{\"143\":2}}],[\"项目作为父项目\",{\"1\":{\"180\":1}}],[\"项目基础结构搭建\",{\"0\":{\"180\":1}}],[\"目标对象\",{\"1\":{\"582\":1}}],[\"目标\",{\"1\":{\"581\":1}}],[\"目前已发生迁移\",{\"1\":{\"251\":1}}],[\"目前已迁移到javax\",{\"1\":{\"251\":1}}],[\"目前要求每台被调用5次\",{\"1\":{\"173\":1}}],[\"目的是节省资源\",{\"1\":{\"180\":1}}],[\"目录运行\",{\"1\":{\"300\":1}}],[\"目录中\",{\"1\":{\"300\":1}}],[\"目录下的\",{\"1\":{\"299\":1}}],[\"目录下的文件必须通过\",{\"1\":{\"66\":1}}],[\"目录下有\",{\"1\":{\"299\":1}}],[\"目录下创建\",{\"1\":{\"24\":1,\"33\":1}}],[\"目录\",{\"1\":{\"24\":1,\"33\":1}}],[\"三大核心部分\",{\"1\":{\"537\":1}}],[\"三目\",{\"1\":{\"363\":1}}],[\"三目运算符返回值类型规则\",{\"0\":{\"363\":1}}],[\"三目运算符\",{\"0\":{\"362\":1}}],[\"三种打包方式的不同\",{\"1\":{\"180\":1}}],[\"三台\",{\"1\":{\"173\":1}}],[\"三元运算\",{\"1\":{\"67\":1}}],[\"需关闭令牌功能\",{\"1\":{\"289\":1}}],[\"需人工禁用\",{\"1\":{\"287\":1,\"289\":1,\"293\":1}}],[\"需人工启用\",{\"1\":{\"287\":1,\"289\":1,\"293\":1}}],[\"需实现\",{\"1\":{\"172\":5}}],[\"需要将类分割成更小\",{\"1\":{\"587\":1}}],[\"需要分段\",{\"1\":{\"541\":1}}],[\"需要通过属性设置一个\",{\"1\":{\"608\":1}}],[\"需要通过\",{\"1\":{\"537\":1}}],[\"需要时可在缓冲区前后移动\",{\"1\":{\"537\":1}}],[\"需要移出时\",{\"1\":{\"488\":1}}],[\"需要手动释放锁\",{\"1\":{\"435\":1}}],[\"需要再引入\",{\"1\":{\"317\":1}}],[\"需要捕获nosuchmethodexception异常\",{\"1\":{\"279\":1}}],[\"需要前端\",{\"1\":{\"244\":1}}],[\"需要首先通过构造函数构造一个\",{\"1\":{\"241\":1}}],[\"需要在配置文件中开启组件扫描\",{\"1\":{\"578\":1}}],[\"需要在\",{\"1\":{\"235\":1,\"252\":1,\"256\":1,\"508\":1,\"605\":1}}],[\"需要在主启动类上添加\",{\"1\":{\"64\":1}}],[\"需要返回全路径\",{\"1\":{\"217\":1}}],[\"需要占位符\",{\"1\":{\"184\":1}}],[\"需要导入\",{\"1\":{\"180\":1}}],[\"需要服务提供端\",{\"1\":{\"164\":1}}],[\"需要开启熔断的方法还要使用\",{\"1\":{\"144\":1}}],[\"需要注意的是\",{\"1\":{\"67\":1}}],[\"需要使用\",{\"1\":{\"31\":1}}],[\"日志工厂\",{\"0\":{\"515\":1}}],[\"日志\",{\"0\":{\"514\":1}}],[\"日志输出方式\",{\"1\":{\"286\":1}}],[\"日志形式可以是\",{\"1\":{\"169\":1}}],[\"日志级别\",{\"0\":{\"167\":1}}],[\"还是\",{\"1\":{\"632\":1}}],[\"还是因为减缓哈希冲突\",{\"1\":{\"405\":1}}],[\"还可以直接在\",{\"1\":{\"606\":1}}],[\"还可以消费\",{\"1\":{\"305\":1}}],[\"还有一个唤醒方法wakeup\",{\"1\":{\"537\":1}}],[\"还有常量池表\",{\"1\":{\"354\":1}}],[\"还有请求和响应的正文及元数据\",{\"1\":{\"167\":1}}],[\"还有请求和响应的头信息\",{\"1\":{\"167\":1}}],[\"还要引入\",{\"1\":{\"317\":1}}],[\"还调用了\",{\"1\":{\"71\":1}}],[\"增删改返回受影响的行数\",{\"1\":{\"510\":1,\"511\":1}}],[\"增删改操作后\",{\"1\":{\"484\":1}}],[\"增加两个静态同步方法\",{\"0\":{\"441\":1}}],[\"增加一个普通方法\",{\"0\":{\"439\":1}}],[\"增加该值的大小将会增加内存量的消耗\",{\"1\":{\"143\":1}}],[\"增强日志\",{\"0\":{\"166\":1}}],[\"集成\",{\"1\":{\"626\":1}}],[\"集成了\",{\"1\":{\"165\":1}}],[\"集合不安全\",{\"0\":{\"401\":1}}],[\"集群容错\",{\"0\":{\"313\":1}}],[\"集群方式\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"集群部署\",{\"0\":{\"161\":1}}],[\"集群中\",{\"0\":{\"110\":1}}],[\"集群\",{\"0\":{\"109\":1,\"111\":1}}],[\"风格\",{\"0\":{\"216\":1},\"1\":{\"164\":1}}],[\"应该指定一个前缀长度\",{\"1\":{\"343\":1}}],[\"应当使用\",{\"1\":{\"164\":1}}],[\"应用在非\",{\"1\":{\"632\":1}}],[\"应用程序的\",{\"1\":{\"627\":1}}],[\"应用中的各个组件及其关系\",{\"1\":{\"621\":1}}],[\"应用上下文中定义至少两样东西\",{\"1\":{\"605\":1}}],[\"应用进程再调用\",{\"1\":{\"539\":1}}],[\"应用进程跟操作系统内核\",{\"1\":{\"539\":1}}],[\"应用进程调用了\",{\"1\":{\"539\":1}}],[\"应用快速响应请求\",{\"1\":{\"496\":1}}],[\"应用示例\",{\"0\":{\"400\":1}}],[\"应用重启时将基于此文件恢复\",{\"1\":{\"287\":1}}],[\"应用环境\",{\"1\":{\"286\":1}}],[\"应用负责人\",{\"1\":{\"286\":1}}],[\"应用的\",{\"1\":{\"281\":1}}],[\"应用的属性配置\",{\"1\":{\"281\":1}}],[\"应用服务\",{\"1\":{\"19\":1}}],[\"应用名称\",{\"1\":{\"19\":1}}],[\"结束的线程\",{\"1\":{\"468\":1}}],[\"结果集映射\",{\"0\":{\"519\":1}}],[\"结果就是当你的代码在某个系统环境下运行良好\",{\"1\":{\"419\":1}}],[\"结果为int型\",{\"1\":{\"363\":1}}],[\"结果为int\",{\"1\":{\"363\":1}}],[\"结果\",{\"1\":{\"164\":1,\"630\":1}}],[\"结合注册中心实现负载均衡\",{\"0\":{\"137\":1}}],[\"结合\",{\"1\":{\"117\":1,\"175\":1,\"537\":1}}],[\"支付对象\",{\"1\":{\"182\":2}}],[\"支付模块\",{\"0\":{\"182\":1}}],[\"支付记录列表\",{\"1\":{\"182\":1}}],[\"支付记录信息\",{\"1\":{\"164\":1}}],[\"支付记录id\",{\"1\":{\"164\":1,\"182\":1}}],[\"支持关联\",{\"1\":{\"546\":1}}],[\"支持使用多个\",{\"1\":{\"537\":1}}],[\"支持dubbo\",{\"1\":{\"287\":1}}],[\"支持c标签等的依赖\",{\"1\":{\"251\":1}}],[\"支持\",{\"0\":{\"116\":1,\"202\":1},\"1\":{\"73\":1,\"185\":1,\"256\":1}}],[\"支持的配置来源说起\",{\"1\":{\"281\":1}}],[\"支持的比较运算\",{\"1\":{\"67\":1}}],[\"支持的算术运算符\",{\"1\":{\"67\":1}}],[\"概念与配置\",{\"0\":{\"159\":1}}],[\"单例\",{\"1\":{\"578\":1}}],[\"单\",{\"0\":{\"572\":1}}],[\"单reactor单线程\",{\"0\":{\"571\":1}}],[\"单个线程的线程池\",{\"1\":{\"472\":1}}],[\"单独成类\",{\"1\":{\"214\":1}}],[\"单机\",{\"0\":{\"155\":1}}],[\"单位\",{\"1\":{\"288\":1,\"293\":1}}],[\"单位是毫秒\",{\"1\":{\"465\":1}}],[\"单位是字节\",{\"1\":{\"222\":1}}],[\"单位是秒\",{\"1\":{\"62\":1}}],[\"单位为毫秒\",{\"1\":{\"143\":1}}],[\"官方文档\",{\"1\":{\"154\":1,\"520\":1}}],[\"官网即可获取对应的依赖\",{\"1\":{\"69\":1}}],[\"微服务\",{\"1\":{\"153\":1}}],[\"信号量通常用于限制线程数\",{\"1\":{\"478\":1}}],[\"信号量维持一组许可证\",{\"1\":{\"478\":1}}],[\"信号灯法\",{\"0\":{\"462\":1},\"1\":{\"462\":1}}],[\"信号他隔离\",{\"1\":{\"143\":1}}],[\"信息\",{\"1\":{\"207\":1,\"550\":1}}],[\"信息及状态\",{\"0\":{\"148\":1}}],[\"寄了\",{\"1\":{\"147\":1}}],[\"窗口期事件\",{\"1\":{\"147\":1}}],[\"达到熔断的最小请求次数\",{\"1\":{\"147\":1}}],[\"降级\",{\"0\":{\"146\":1}}],[\"熔断异常\",{\"1\":{\"147\":1}}],[\"熔断\",{\"1\":{\"144\":1}}],[\"熔断目前的唯一实现\",{\"1\":{\"140\":1}}],[\"該参数主要是対linkedblockingqueue\",{\"1\":{\"143\":1}}],[\"另外一个是表达式\",{\"1\":{\"363\":1}}],[\"另外\",{\"1\":{\"143\":1}}],[\"另⻅\",{\"1\":{\"19\":1}}],[\"燎动窗口为10秒\",{\"1\":{\"143\":1}}],[\"整数b\",{\"1\":{\"558\":1}}],[\"整数a\",{\"1\":{\"558\":1}}],[\"整数等值转化为\",{\"1\":{\"553\":1}}],[\"整数类型和枚举类型\",{\"1\":{\"361\":1}}],[\"整除\",{\"1\":{\"143\":1}}],[\"整合mybatis\",{\"0\":{\"605\":1},\"1\":{\"258\":1}}],[\"整合\",{\"0\":{\"56\":1,\"60\":1,\"258\":1,\"314\":1,\"324\":1}}],[\"整合thymeleaf\",{\"1\":{\"54\":1}}],[\"整合shirodialect\",{\"1\":{\"54\":1}}],[\"比较的是\",{\"1\":{\"361\":1}}],[\"比较如果相同则可以进行反序列化\",{\"1\":{\"334\":1}}],[\"比较运算\",{\"1\":{\"67\":1}}],[\"比如有一个类\",{\"1\":{\"632\":1}}],[\"比如打开和关闭链接\",{\"1\":{\"624\":1}}],[\"比如相册服务器\",{\"1\":{\"542\":1}}],[\"比如变量\",{\"1\":{\"363\":1}}],[\"比如表中已经有\",{\"1\":{\"343\":1}}],[\"比如新增记录\",{\"1\":{\"313\":1}}],[\"比如china\",{\"1\":{\"295\":1}}],[\"比如超时\",{\"1\":{\"289\":1,\"291\":1}}],[\"比如拔网线\",{\"1\":{\"288\":1}}],[\"比如\",{\"1\":{\"288\":5,\"293\":3,\"308\":1,\"513\":1}}],[\"比如用心跳检测的实现\",{\"1\":{\"287\":1}}],[\"比如10秒内拆分成10个\",{\"1\":{\"143\":1}}],[\"比服务使用方更清楚服务性能参数\",{\"1\":{\"282\":1}}],[\"段时间内的采集指标\",{\"1\":{\"143\":1}}],[\"记录这次操作\",{\"1\":{\"375\":1}}],[\"记录锁\",{\"1\":{\"359\":1}}],[\"记录了要回滚的日志信息\",{\"1\":{\"375\":1}}],[\"记录了\",{\"1\":{\"143\":1}}],[\"记住我\",{\"1\":{\"59\":1}}],[\"记住我登录后显示相应的信息\",{\"1\":{\"56\":1}}],[\"每当虚拟机遇到一个需要使用到变量的值\",{\"1\":{\"421\":1}}],[\"每次运行客户端\",{\"1\":{\"566\":1}}],[\"每次发送内容结束后\",{\"1\":{\"536\":1}}],[\"每次收到\",{\"1\":{\"513\":1}}],[\"每次使用前从主内存处进行读取\",{\"1\":{\"425\":1}}],[\"每次使用完\",{\"1\":{\"371\":1}}],[\"每次读取结果都一样\",{\"1\":{\"374\":1}}],[\"每次请求该servlet都会执行该方法\",{\"1\":{\"254\":1}}],[\"每一个事件循环是\",{\"1\":{\"574\":1}}],[\"每一个索引还要占一定的物理空间\",{\"1\":{\"356\":1}}],[\"每一个方法被调用直到执行完毕的过程\",{\"1\":{\"350\":1}}],[\"每服务每方法最大使用线程数限制\",{\"1\":{\"296\":1}}],[\"每服务消费者最大并发调用限制\",{\"1\":{\"296\":1}}],[\"每服务消费者每服务每方法最大并发调用数\",{\"1\":{\"291\":1,\"293\":1,\"294\":1}}],[\"每个代理实例都有一个关联的调用处理程序\",{\"1\":{\"617\":1}}],[\"每个真实角色都会有一个代理角色\",{\"1\":{\"616\":1}}],[\"每个dao层实现都要赋值\",{\"1\":{\"599\":1}}],[\"每个dispatcherservlet的bean如controller\",{\"1\":{\"232\":1}}],[\"每个连接都需要一个线程完成业务处理\",{\"1\":{\"569\":1}}],[\"每个客户端都有一个\",{\"1\":{\"537\":1}}],[\"每个线程都应该有它自己的\",{\"1\":{\"513\":1}}],[\"每个基于\",{\"1\":{\"508\":1}}],[\"每个工作线程都有自己的工作内存\",{\"1\":{\"425\":1}}],[\"每个方法被执行的时候\",{\"1\":{\"350\":1}}],[\"每个服务对每个提供者的最大连接数\",{\"1\":{\"294\":1}}],[\"每个\",{\"1\":{\"143\":1,\"214\":1,\"370\":1,\"478\":2,\"537\":1,\"552\":1,\"574\":8}}],[\"每日n石更\",{\"1\":{\"44\":1}}],[\"桶\",{\"1\":{\"143\":7}}],[\"滚动时间窗设置\",{\"1\":{\"143\":1}}],[\"尝试熔断的请求命令\",{\"1\":{\"143\":1}}],[\"半开\",{\"1\":{\"143\":1}}],[\"休眠时间窗结束之后\",{\"1\":{\"143\":1}}],[\"状态码\",{\"1\":{\"184\":1}}],[\"状态\",{\"1\":{\"143\":5}}],[\"断开连接\",{\"1\":{\"525\":1}}],[\"断开连接时调用\",{\"1\":{\"525\":1}}],[\"断路器在收集指标信息的时候会根据设置的时间窗长度拆分成多个\",{\"1\":{\"143\":1}}],[\"断路器强制关闭\",{\"1\":{\"143\":1}}],[\"断路器强制打开\",{\"1\":{\"143\":1}}],[\"断路器也不会打开\",{\"1\":{\"143\":1}}],[\"断路器熔断的最小请求数\",{\"1\":{\"143\":1}}],[\"断言型接口\",{\"1\":{\"414\":1}}],[\"断言\",{\"1\":{\"123\":1}}],[\"允许多个相同别名\",{\"1\":{\"619\":1}}],[\"允许所被标记的字段为\",{\"1\":{\"587\":1}}],[\"允许注入的\",{\"1\":{\"585\":1}}],[\"允许\",{\"1\":{\"585\":1}}],[\"允许用户自定义切面\",{\"1\":{\"581\":1}}],[\"允许一组线程全部等待彼此达到共同屏障点的同步辅助\",{\"1\":{\"477\":1}}],[\"允许被索引的数据列包含重复的值\",{\"1\":{\"356\":1}}],[\"允许接口中出现\",{\"1\":{\"346\":1}}],[\"允许给接口添加非抽象的方法实现\",{\"1\":{\"346\":1}}],[\"允许跨域访问\",{\"1\":{\"241\":1}}],[\"允许回调方法执行的最大并发数\",{\"1\":{\"143\":1}}],[\"允许那些ip\",{\"1\":{\"31\":1}}],[\"执行环绕增加\",{\"1\":{\"582\":1}}],[\"执行异常\",{\"1\":{\"512\":1}}],[\"执行sql\",{\"1\":{\"510\":1,\"511\":1}}],[\"执行service方法\",{\"1\":{\"254\":1}}],[\"执行代码\",{\"1\":{\"506\":1,\"507\":1}}],[\"执行完\",{\"1\":{\"450\":1}}],[\"执行构造方法\",{\"1\":{\"448\":1}}],[\"执行\",{\"1\":{\"393\":1,\"510\":1,\"511\":1,\"521\":1}}],[\"执行线程需要丢入\",{\"1\":{\"392\":1}}],[\"执行了\",{\"1\":{\"582\":1}}],[\"执行了delete方法\",{\"1\":{\"254\":1}}],[\"执行了add方法\",{\"1\":{\"254\":1}}],[\"执行了==>认证dogetauthenticationinfo\",{\"1\":{\"54\":1}}],[\"执行了==>授权dogetauthorizationinfo\",{\"1\":{\"54\":1}}],[\"执行destroy方法\",{\"1\":{\"254\":1}}],[\"执行init方法\",{\"1\":{\"254\":1}}],[\"执行命令\",{\"1\":{\"176\":1}}],[\"执行被取消的时候是否中断\",{\"1\":{\"143\":1}}],[\"执行超时的时候是否中断\",{\"1\":{\"143\":1}}],[\"过滤id是偶数的\",{\"1\":{\"417\":1}}],[\"过滤年龄大于等于10\",{\"1\":{\"417\":1}}],[\"过滤静态资源\",{\"1\":{\"235\":1}}],[\"过滤该请求\",{\"1\":{\"205\":1}}],[\"过滤器的执行顺序\",{\"1\":{\"205\":1}}],[\"过滤器类型\",{\"1\":{\"205\":1}}],[\"过滤器\",{\"0\":{\"138\":1,\"205\":1},\"1\":{\"205\":1}}],[\"过时了\",{\"1\":{\"140\":1}}],[\"作服务的提供者\",{\"1\":{\"282\":1}}],[\"作用域\",{\"1\":{\"619\":1}}],[\"作用与虚拟机栈类似\",{\"1\":{\"351\":1}}],[\"作用于接口\",{\"1\":{\"631\":1}}],[\"作用于方法\",{\"1\":{\"631\":1}}],[\"作用于类\",{\"1\":{\"631\":1}}],[\"作用于类型泛型\",{\"1\":{\"275\":1}}],[\"作用于工作内存中的变量\",{\"1\":{\"421\":2}}],[\"作用于工作内存的变量\",{\"1\":{\"421\":1}}],[\"作用于主内存中的变量\",{\"1\":{\"421\":2}}],[\"作用于主内存变量\",{\"1\":{\"421\":1}}],[\"作用于主内存的变量\",{\"1\":{\"421\":2}}],[\"作用于包\",{\"1\":{\"275\":1}}],[\"作用于注解\",{\"1\":{\"275\":1}}],[\"作用局部变量\",{\"1\":{\"275\":1}}],[\"作用构造函数\",{\"1\":{\"275\":1}}],[\"作用方法参数\",{\"1\":{\"275\":1}}],[\"作用方法\",{\"1\":{\"275\":1}}],[\"作用属性字段\",{\"1\":{\"275\":1}}],[\"作用接口\",{\"1\":{\"275\":1}}],[\"作为线程池数量\",{\"1\":{\"474\":1}}],[\"作为\",{\"1\":{\"140\":1}}],[\"作出相应配置\",{\"1\":{\"66\":1}}],[\"被代理的真实角色\",{\"1\":{\"618\":1}}],[\"被代理的角色\",{\"1\":{\"613\":1}}],[\"被执行了\",{\"1\":{\"582\":1}}],[\"被通知对象\",{\"1\":{\"581\":1}}],[\"被提交到任务队列中异步消费\",{\"1\":{\"562\":1}}],[\"被赋值\",{\"1\":{\"558\":1}}],[\"被视为一种代码\",{\"1\":{\"513\":1}}],[\"被翻译成先行发生原则\",{\"1\":{\"427\":1}}],[\"被回收时\",{\"1\":{\"370\":1}}],[\"被\",{\"1\":{\"345\":1,\"424\":1}}],[\"被监控配置\",{\"1\":{\"151\":1}}],[\"被移出了\",{\"1\":{\"140\":1}}],[\"被注释起来\",{\"1\":{\"67\":1}}],[\"第\",{\"1\":{\"567\":1}}],[\"第四次拷贝\",{\"1\":{\"539\":1}}],[\"第三次拷贝\",{\"1\":{\"539\":1}}],[\"第三个是微服务内部的前缀\",{\"1\":{\"203\":1}}],[\"第三个参数以\",{\"1\":{\"184\":2}}],[\"第二步\",{\"1\":{\"539\":1}}],[\"第二次读取到了\",{\"1\":{\"565\":2}}],[\"第二次拷贝\",{\"1\":{\"539\":1}}],[\"第二次连接本地消息队列\",{\"1\":{\"187\":1}}],[\"第二台机器很慢\",{\"1\":{\"308\":1}}],[\"第二个是为服务指定的前缀\",{\"1\":{\"203\":1}}],[\"第二个参数为\",{\"1\":{\"184\":1}}],[\"第二个参数为返回结果类型\",{\"1\":{\"184\":2}}],[\"第二个参数是比例\",{\"1\":{\"136\":1}}],[\"第一步\",{\"1\":{\"539\":1}}],[\"第一次读取到了\",{\"1\":{\"565\":1}}],[\"第一次读取到了完整的\",{\"1\":{\"565\":1}}],[\"第一次拷贝\",{\"1\":{\"539\":1}}],[\"第一次连接到远程服务器的消息队列\",{\"1\":{\"187\":1}}],[\"第一个成员变量表示\",{\"1\":{\"567\":1}}],[\"第一个调用\",{\"1\":{\"525\":1}}],[\"第一个线程将会不停循环\",{\"1\":{\"429\":1}}],[\"第一个dept是prifix\",{\"1\":{\"203\":1}}],[\"第一个参数为\",{\"1\":{\"184\":1}}],[\"第一个参数为url\",{\"1\":{\"184\":2}}],[\"第一个参数是char数组\",{\"1\":{\"338\":1}}],[\"第一个参数是一个字符串\",{\"1\":{\"136\":1}}],[\"第一个参数是name\",{\"1\":{\"129\":1}}],[\"代理类\",{\"1\":{\"618\":1}}],[\"代理真实角色的角色\",{\"1\":{\"613\":1}}],[\"代理角色\",{\"1\":{\"613\":1,\"614\":1}}],[\"代理模式优点\",{\"0\":{\"615\":1}}],[\"代理模式\",{\"0\":{\"611\":1}}],[\"代理的是接口\",{\"1\":{\"582\":1}}],[\"代理\",{\"1\":{\"581\":1}}],[\"代表将某个类注册到\",{\"1\":{\"579\":1}}],[\"代表组合关系\",{\"1\":{\"347\":1}}],[\"代表分组\",{\"1\":{\"136\":1}}],[\"代码量翻倍\",{\"1\":{\"616\":1}}],[\"代码过程\",{\"0\":{\"614\":1}}],[\"代码如下\",{\"1\":{\"587\":1}}],[\"代码没有问题但是运行\",{\"1\":{\"252\":1}}],[\"代码\",{\"1\":{\"207\":1,\"587\":1}}],[\"代码也不会报错\",{\"1\":{\"67\":1}}],[\"代码可以被注释起来\",{\"1\":{\"67\":1}}],[\"限制输出数量\",{\"1\":{\"417\":1}}],[\"限制请求方式\",{\"1\":{\"132\":1}}],[\"限制只有某个时间之后的请求才能通过\",{\"1\":{\"126\":1}}],[\"逗号后面是正则表达式\",{\"1\":{\"129\":1}}],[\"两种方式均不行则报错\",{\"1\":{\"589\":1}}],[\"两种类型的\",{\"1\":{\"549\":1}}],[\"两把锁\",{\"1\":{\"440\":1}}],[\"两边为byte\",{\"1\":{\"363\":1}}],[\"两次查询不同记录访问了两次数据库\",{\"1\":{\"483\":1}}],[\"两次查询的不是同一记录\",{\"1\":{\"483\":1}}],[\"两次查询同一记录只访问了一次数据库\",{\"1\":{\"483\":1}}],[\"两次查询同一记录\",{\"1\":{\"483\":1}}],[\"两次输出都是\",{\"1\":{\"377\":1}}],[\"两次读取结果不同\",{\"1\":{\"374\":1}}],[\"两次\",{\"1\":{\"244\":1}}],[\"两个静态同步方法\",{\"0\":{\"442\":1}}],[\"两个调用者\",{\"1\":{\"440\":1}}],[\"两个同步方法\",{\"0\":{\"440\":1}}],[\"两个对象\",{\"0\":{\"440\":1,\"442\":1,\"444\":1},\"1\":{\"440\":1}}],[\"两个方法是同一个锁\",{\"1\":{\"438\":1}}],[\"两个注册中心不能使用同一文件存储\",{\"1\":{\"287\":1}}],[\"两个请求之间相互独立\",{\"1\":{\"217\":1}}],[\"两个接口\",{\"1\":{\"148\":1}}],[\"两个时间之间发生的请求才能通过\",{\"1\":{\"128\":1}}],[\"两者的意思恰好相反\",{\"1\":{\"67\":1}}],[\"可在目标方法执行前后自定义通知行为\",{\"1\":{\"582\":1}}],[\"可为空注解\",{\"1\":{\"578\":1}}],[\"可写\",{\"1\":{\"547\":1}}],[\"可读可写\",{\"1\":{\"537\":1}}],[\"可变线程池\",{\"1\":{\"472\":1}}],[\"可重入\",{\"1\":{\"435\":1}}],[\"可重入锁\",{\"0\":{\"449\":1,\"450\":1},\"1\":{\"432\":1,\"435\":1}}],[\"可重复读\",{\"1\":{\"374\":1}}],[\"可见性\",{\"0\":{\"425\":1}}],[\"可能会抛出实体类的序列化异常\",{\"1\":{\"488\":1}}],[\"可能会读到其他事务未提交的数据\",{\"1\":{\"374\":1}}],[\"可能浪费空间\",{\"1\":{\"447\":1}}],[\"可能具有完全不同的属性\",{\"1\":{\"432\":1}}],[\"可能返回\",{\"1\":{\"368\":1}}],[\"可能出现直接在\",{\"1\":{\"235\":1}}],[\"可达\",{\"1\":{\"366\":1}}],[\"可通过\",{\"1\":{\"313\":2}}],[\"可自行修改\",{\"1\":{\"300\":1}}],[\"可视化面板\",{\"0\":{\"300\":1}}],[\"可将值设为n\",{\"1\":{\"289\":1,\"293\":1,\"294\":1}}],[\"可选参数\",{\"0\":{\"361\":1}}],[\"可选值\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"可选mina\",{\"1\":{\"287\":1}}],[\"可选\",{\"1\":{\"286\":2,\"288\":1,\"289\":31,\"290\":2,\"291\":28,\"292\":8,\"293\":47,\"294\":21,\"295\":3,\"296\":16,\"297\":1,\"582\":1}}],[\"可选断言配置\",{\"0\":{\"125\":1}}],[\"可用该结构来管理异常处理\",{\"1\":{\"624\":1}}],[\"可用的清除策略有\",{\"1\":{\"487\":1}}],[\"可用\",{\"1\":{\"207\":1}}],[\"可以很容易地使\",{\"1\":{\"623\":1}}],[\"可以编写如下的\",{\"1\":{\"608\":1}}],[\"可以被多个\",{\"1\":{\"608\":1}}],[\"可以被设置为\",{\"1\":{\"487\":1}}],[\"可以被设置为任意正整数\",{\"1\":{\"487\":1}}],[\"可以被设置为任意的正整数\",{\"1\":{\"487\":1}}],[\"可以指定某个确定的\",{\"1\":{\"587\":1}}],[\"可以省略\",{\"1\":{\"587\":1}}],[\"可以对应多个\",{\"1\":{\"573\":1}}],[\"可以直接调用方法\",{\"1\":{\"558\":1}}],[\"可以直接把内核缓冲区里的数据拷贝到\",{\"1\":{\"539\":1}}],[\"可以交给线程池运行\",{\"1\":{\"558\":1}}],[\"可以从组里面按照一定规则获取其中一个\",{\"1\":{\"552\":1}}],[\"可以从服务提供方反向调用消费方\",{\"1\":{\"297\":1}}],[\"可以继承它的子类\",{\"1\":{\"548\":1}}],[\"可以注册多个\",{\"1\":{\"537\":1}}],[\"可以返回底层操作系统的情况\",{\"1\":{\"537\":1}}],[\"可以安全地被调用者修改\",{\"1\":{\"482\":1}}],[\"可以由多个阅读器线程同时进行\",{\"1\":{\"445\":1}}],[\"可以判断锁\",{\"1\":{\"435\":1}}],[\"可以判断是否获取到了锁\",{\"1\":{\"435\":1}}],[\"可以插队\",{\"1\":{\"433\":1}}],[\"可以先来后到\",{\"1\":{\"433\":1}}],[\"可以先使用\",{\"1\":{\"184\":1}}],[\"可以保证程序的有序性\",{\"1\":{\"426\":1}}],[\"可以保证可见性\",{\"1\":{\"425\":1}}],[\"可以保证数据记录的唯一性\",{\"1\":{\"356\":1}}],[\"可以访问\",{\"1\":{\"376\":1}}],[\"可以在\",{\"1\":{\"498\":1}}],[\"可以在任何地方\",{\"1\":{\"465\":1}}],[\"可以在查询的过程中\",{\"1\":{\"356\":1}}],[\"可以在<dubbo\",{\"1\":{\"287\":1,\"288\":1,\"293\":1}}],[\"可以看做是当前线程所执行的字节码的行号指示器\",{\"1\":{\"349\":1}}],[\"可以看到\",{\"1\":{\"71\":1}}],[\"可以分拆为server和client配置\",{\"1\":{\"288\":1}}],[\"可以有多个线程\",{\"1\":{\"574\":1}}],[\"可以有多个\",{\"1\":{\"287\":1,\"288\":1}}],[\"可以用逗号或者空格或者分号进行分割起多个别名\",{\"1\":{\"619\":1}}],[\"可以用来实现\",{\"1\":{\"520\":1}}],[\"可以用分组区分\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"可以用于标注任意类型除了\",{\"1\":{\"275\":1}}],[\"可以用configuration\",{\"1\":{\"233\":1}}],[\"可以是类\",{\"1\":{\"275\":1}}],[\"可以自定义配置\",{\"1\":{\"204\":1}}],[\"可以理解为起别名\",{\"1\":{\"62\":1}}],[\"可以配合内部安全组件\",{\"1\":{\"54\":1}}],[\"可以通过构造器指定是公平锁还是非公平锁\",{\"1\":{\"433\":1}}],[\"可以通过配置文件的方式改变映射路径\",{\"1\":{\"69\":1}}],[\"可以通过\",{\"1\":{\"19\":2,\"172\":1,\"497\":1}}],[\"可以使用此插件将\",{\"1\":{\"521\":1}}],[\"可以使用的别名\",{\"1\":{\"67\":1}}],[\"可以使用\",{\"1\":{\"17\":1,\"64\":1,\"67\":1,\"410\":1,\"507\":1}}],[\"都绑定有一个自己的\",{\"1\":{\"574\":1}}],[\"都有一个\",{\"1\":{\"574\":1}}],[\"都不需要通过\",{\"1\":{\"539\":1}}],[\"都会卡在\",{\"1\":{\"536\":1}}],[\"都会阻塞\",{\"1\":{\"478\":1}}],[\"都调用\",{\"1\":{\"371\":1}}],[\"都要对应一个\",{\"1\":{\"214\":1}}],[\"都为真才能路由\",{\"1\":{\"123\":1}}],[\"都被认定为\",{\"1\":{\"67\":1}}],[\"路由目的地\",{\"1\":{\"123\":1}}],[\"否则事务管理器就无法工作了\",{\"1\":{\"629\":1}}],[\"否则字段将保持\",{\"1\":{\"587\":1}}],[\"否则不允许为空\",{\"1\":{\"587\":1}}],[\"否则不进行渲染\",{\"1\":{\"67\":1}}],[\"否则服务端无法获取发送的流何时结束导致一直等待\",{\"1\":{\"380\":1}}],[\"否则子类也必须定义为抽象类\",{\"1\":{\"345\":1}}],[\"否则异常\",{\"1\":{\"334\":1}}],[\"否则等到有人注入或引用该实例时再初始化\",{\"1\":{\"291\":1,\"294\":1}}],[\"否则直连监控中心\",{\"1\":{\"290\":1}}],[\"否则使用静态令牌\",{\"1\":{\"289\":1}}],[\"否则在mappingjackson2httpmessageconverter的setobjectmapper方法中会出现空引用\",{\"1\":{\"233\":1}}],[\"否则被拦截\",{\"1\":{\"229\":1}}],[\"否则\",{\"1\":{\"184\":1,\"204\":1,\"282\":1,\"409\":1,\"532\":1}}],[\"否则所有的\",{\"1\":{\"173\":1}}],[\"否则将使用linkedblocakingqueue实现队列\",{\"1\":{\"143\":1}}],[\"否则会出现程序无法继续执行\",{\"1\":{\"450\":1}}],[\"否则会抛异常\",{\"1\":{\"143\":1}}],[\"否则会导致服务之间的调用乱码\",{\"1\":{\"118\":1}}],[\"否则就设置为\",{\"1\":{\"143\":1}}],[\"才能解锁\",{\"1\":{\"422\":1}}],[\"才能获取到正常的\",{\"1\":{\"244\":1}}],[\"才会提交到二级缓存\",{\"1\":{\"488\":1}}],[\"才会将内存地址\",{\"1\":{\"398\":1}}],[\"才会生效\",{\"1\":{\"46\":1}}],[\"才可以正常显示\",{\"1\":{\"118\":1}}],[\"响应状态码及执行时间\",{\"1\":{\"167\":1}}],[\"响应\",{\"1\":{\"118\":1}}],[\"压缩之后\",{\"1\":{\"118\":1}}],[\"压缩\",{\"0\":{\"118\":1}}],[\"封装成\",{\"1\":{\"117\":1}}],[\"封装用户的登录数据\",{\"1\":{\"55\":1}}],[\"然后启动\",{\"1\":{\"558\":1}}],[\"然后判断\",{\"1\":{\"522\":1}}],[\"然后传入对应的实例对象调用\",{\"1\":{\"522\":1}}],[\"然后定义resultmap\",{\"1\":{\"518\":1}}],[\"然后配置resultmap\",{\"1\":{\"517\":1}}],[\"然后放置一个\",{\"1\":{\"496\":1}}],[\"然后才能使用它\",{\"1\":{\"478\":1}}],[\"然后线程等待\",{\"1\":{\"460\":1}}],[\"然后不断的判断锁是否能够被成功获取\",{\"1\":{\"451\":1}}],[\"然后检查其佘行是否可能匹配\",{\"1\":{\"343\":1}}],[\"然后生成\",{\"1\":{\"235\":1}}],[\"然后编写\",{\"1\":{\"187\":1}}],[\"然后再进行请求\",{\"1\":{\"172\":1}}],[\"然后再呈现\",{\"1\":{\"19\":1}}],[\"然后注入到\",{\"1\":{\"139\":1}}],[\"然后将接收到的\",{\"1\":{\"552\":1}}],[\"然后将\",{\"1\":{\"117\":1}}],[\"等号不是赋值\",{\"1\":{\"521\":1}}],[\"等过时的方法\",{\"1\":{\"464\":1}}],[\"等到满\",{\"1\":{\"405\":1}}],[\"等方法\",{\"1\":{\"396\":1}}],[\"等方法进行约束\",{\"1\":{\"64\":1}}],[\"等待计数器归零\",{\"1\":{\"476\":1}}],[\"等待队列满后的拒绝策略\",{\"1\":{\"473\":1}}],[\"等待另一个线程执行特定动作\",{\"1\":{\"468\":1}}],[\"等待另一个线程执行指定动作达到指定等待时间\",{\"1\":{\"468\":1}}],[\"等待此线程执行完毕后\",{\"1\":{\"467\":1}}],[\"等待总是应该出现在循环中\",{\"1\":{\"460\":1}}],[\"等待\",{\"1\":{\"395\":1,\"538\":1}}],[\"等协议\",{\"1\":{\"287\":1}}],[\"等等\",{\"1\":{\"282\":1}}],[\"等静态页面没有设置\",{\"1\":{\"218\":1}}],[\"等\",{\"1\":{\"117\":2,\"169\":1,\"427\":1,\"625\":1,\"627\":1}}],[\"原生注解\",{\"1\":{\"589\":1}}],[\"原型\",{\"1\":{\"578\":1}}],[\"原则进行分析\",{\"1\":{\"427\":1}}],[\"原子引用\",{\"0\":{\"387\":1}}],[\"原子性\",{\"0\":{\"424\":1},\"1\":{\"373\":1,\"375\":1}}],[\"原本发往该提供者的请求\",{\"1\":{\"310\":1}}],[\"原理简述\",{\"0\":{\"117\":1}}],[\"原因如下\",{\"1\":{\"46\":1}}],[\"确保被spring扫描到即可\",{\"1\":{\"116\":1}}],[\"确定区域\",{\"1\":{\"36\":1}}],[\"同理我们可以认为在\",{\"1\":{\"427\":1}}],[\"同步\",{\"1\":{\"558\":1}}],[\"同步非阻塞\",{\"1\":{\"537\":1}}],[\"同步并阻塞\",{\"1\":{\"535\":1}}],[\"同步信号量\",{\"1\":{\"461\":1}}],[\"同步锁\",{\"0\":{\"452\":1}}],[\"同步同一个锁的时候\",{\"1\":{\"427\":1}}],[\"同步队列没有任何内部容量\",{\"1\":{\"396\":1}}],[\"同步队列\",{\"0\":{\"396\":1}}],[\"同步文件内容和元数据的更新\",{\"1\":{\"336\":1}}],[\"同步文件内容的更新\",{\"1\":{\"336\":1}}],[\"同时存在\",{\"1\":{\"607\":1}}],[\"同时工作\",{\"1\":{\"552\":1}}],[\"同时\",{\"1\":{\"550\":1}}],[\"同时关联一个\",{\"1\":{\"550\":1}}],[\"同时把查询范围内的所有间隙控件锁住\",{\"1\":{\"359\":1}}],[\"同时使用了\",{\"1\":{\"317\":2}}],[\"同时该标签为\",{\"1\":{\"293\":1,\"294\":1,\"296\":1}}],[\"同时支持get和post\",{\"1\":{\"215\":1}}],[\"同一个类中方法调用\",{\"1\":{\"632\":1}}],[\"同一个分组内的所有消费者中只有一个能消费这条消息\",{\"1\":{\"189\":1}}],[\"同一集群内的多个地址用逗号分隔\",{\"1\":{\"287\":1}}],[\"同样允许使用指定的\",{\"1\":{\"588\":1}}],[\"同样可靠\",{\"1\":{\"587\":1}}],[\"同样先创建\",{\"1\":{\"522\":1}}],[\"同样也是通过枚举类\",{\"1\":{\"275\":1}}],[\"同样使用占位符及\",{\"1\":{\"164\":1}}],[\"同样以逗号分隔\",{\"1\":{\"110\":1}}],[\"同级\",{\"1\":{\"24\":1}}],[\"无连接\",{\"1\":{\"537\":1}}],[\"无参方法是阻塞的\",{\"1\":{\"537\":1}}],[\"无参构造器返回非公平锁\",{\"1\":{\"433\":1}}],[\"无法使用\",{\"1\":{\"601\":1}}],[\"无法跨语言\",{\"1\":{\"520\":1}}],[\"无法判断获取锁的状态\",{\"1\":{\"435\":1}}],[\"无返回值任务\",{\"1\":{\"408\":1}}],[\"无返回值\",{\"1\":{\"386\":1}}],[\"无论查询方法返回哪种\",{\"1\":{\"482\":1}}],[\"无论是生产者还是消费者配置都相同\",{\"1\":{\"178\":1}}],[\"无论什么情况\",{\"1\":{\"102\":1}}],[\"无需认证就可访问\",{\"1\":{\"54\":1}}],[\"该类需要透明的调用自己不存在的方法\",{\"1\":{\"557\":1}}],[\"该类需要监听消费者的请求\",{\"1\":{\"557\":1}}],[\"该系统调用\",{\"1\":{\"539\":1}}],[\"该线程释放此监视器的所有权\",{\"1\":{\"460\":1}}],[\"该标签为\",{\"1\":{\"297\":1}}],[\"该接口上的所有方法使用同一个provider\",{\"1\":{\"296\":1}}],[\"该mock类必须有一个无参构造函数\",{\"1\":{\"289\":1,\"291\":1}}],[\"该本地代理类的构造函数必须允许传入远程代理对象\",{\"1\":{\"289\":1,\"291\":1}}],[\"该协议的服务是否注册到注册中心\",{\"1\":{\"288\":1,\"289\":1}}],[\"该方法会被执行多次\",{\"1\":{\"254\":1}}],[\"该方法在整个生命周期中只执行一次\",{\"1\":{\"254\":1}}],[\"该处理方法返回一个\",{\"1\":{\"213\":1}}],[\"该过滤器是否生效\",{\"1\":{\"205\":1}}],[\"该参数用来为队列设置拒绝阀值\",{\"1\":{\"143\":1}}],[\"该参数用来设置线程她的最大队列大小\",{\"1\":{\"143\":1}}],[\"该参数用来设置执行命令线程他的核心线程数\",{\"1\":{\"143\":1}}],[\"该值\",{\"1\":{\"143\":1}}],[\"该时间用于断路器判断健康度时需要收集信息的持续时间\",{\"1\":{\"143\":1}}],[\"该属性用来设置采集影响断路器状态的健康快照\",{\"1\":{\"143\":1}}],[\"该属性用来设置百分位统计演动窗口中使用\",{\"1\":{\"143\":1}}],[\"该属性用来设置百分位统计的滚动窗口的持续时间\",{\"1\":{\"143\":1}}],[\"该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算\",{\"1\":{\"143\":1}}],[\"该属性用来设置滚动时间窗统计指标信息时划分\",{\"1\":{\"143\":1}}],[\"该属性用来设置当断路器打开之后的休眠时间窗\",{\"1\":{\"143\":1}}],[\"该属性用来设置在执行过程中每个\",{\"1\":{\"143\":1}}],[\"该属性用来设置在熔动时间窗中表示在滚动时间窗中\",{\"1\":{\"143\":1}}],[\"该属性用来设置在滚动时间窗中\",{\"1\":{\"143\":1}}],[\"该实例\",{\"1\":{\"102\":1}}],[\"该实例的ip地址\",{\"1\":{\"102\":1}}],[\"该注解先执行方法\",{\"1\":{\"64\":1}}],[\"该注解对用户的权限和角色进行判断\",{\"1\":{\"64\":1}}],[\"该注解对用户角色进行判断\",{\"1\":{\"64\":1}}],[\"服务的可重用业务和数据的访问的对象\",{\"1\":{\"627\":1}}],[\"服务模型\",{\"0\":{\"569\":1}}],[\"服务将\",{\"1\":{\"555\":1}}],[\"服务器当中\",{\"1\":{\"627\":1}}],[\"服务器端收到消息\",{\"1\":{\"576\":1}}],[\"服务器端编程中\",{\"1\":{\"552\":1}}],[\"服务器转发消息中\",{\"1\":{\"538\":1}}],[\"服务器等待了一秒\",{\"1\":{\"537\":1}}],[\"服务器代码示例\",{\"1\":{\"537\":1}}],[\"服务器实现模式为一个线程处理多个请求\",{\"1\":{\"537\":1}}],[\"服务器实现模式为一个连接一个线程\",{\"1\":{\"535\":1}}],[\"服务器示例\",{\"0\":{\"536\":1}}],[\"服务容错\",{\"0\":{\"312\":1}}],[\"服务方法是否过时\",{\"1\":{\"296\":1}}],[\"服务方法调用超时时间\",{\"1\":{\"291\":1}}],[\"服务主机名\",{\"1\":{\"293\":1}}],[\"服务调用者所在的分层\",{\"1\":{\"291\":1,\"294\":1}}],[\"服务消费方引用服务监听器名称\",{\"1\":{\"291\":1,\"294\":1}}],[\"服务消费方远程调用过程拦截器名称\",{\"1\":{\"291\":1,\"294\":1}}],[\"服务消费者和提供者\",{\"1\":{\"328\":1}}],[\"服务消费者在启动时\",{\"1\":{\"328\":1}}],[\"服务消费者应用将无法使用\",{\"1\":{\"305\":1}}],[\"服务消费者\",{\"0\":{\"303\":1,\"327\":1},\"1\":{\"328\":2}}],[\"服务消费者缺省值配置\",{\"1\":{\"294\":1}}],[\"服务消费者引用服务配置\",{\"1\":{\"291\":1}}],[\"服务消费者注册到\",{\"0\":{\"157\":1}}],[\"服务引用beanid\",{\"1\":{\"291\":1}}],[\"服务权重\",{\"1\":{\"289\":1,\"293\":1}}],[\"服务文档url\",{\"1\":{\"289\":1,\"293\":1}}],[\"服务负责人\",{\"1\":{\"289\":1,\"293\":1}}],[\"服务是否过时\",{\"1\":{\"289\":1,\"293\":1}}],[\"服务是否动态注册\",{\"1\":{\"287\":1,\"289\":1,\"293\":1}}],[\"服务接口调用失败mock实现类名\",{\"1\":{\"291\":1}}],[\"服务接口调用失败mock实现类\",{\"1\":{\"289\":1}}],[\"服务接口客户端本地代理类名\",{\"1\":{\"289\":1,\"291\":1}}],[\"服务接口名\",{\"1\":{\"289\":1,\"291\":1}}],[\"服务路径\",{\"1\":{\"289\":1}}],[\"服务分组\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"服务版本\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"服务对象实现引用\",{\"1\":{\"289\":1}}],[\"服务提供方将生成反向代理\",{\"1\":{\"297\":1}}],[\"服务提供方导出服务监听器名称\",{\"1\":{\"289\":1,\"293\":1}}],[\"服务提供方远程调用过程拦截器名称\",{\"1\":{\"289\":1,\"293\":1}}],[\"服务提供方最大可接受连接数\",{\"1\":{\"288\":1}}],[\"服务提供者在启动时\",{\"1\":{\"328\":1}}],[\"服务提供者全部宕掉后\",{\"1\":{\"305\":1}}],[\"服务提供者无状态\",{\"1\":{\"305\":1}}],[\"服务提供者和服务消费者仍能通过本地缓存通讯\",{\"1\":{\"305\":1}}],[\"服务提供者\",{\"0\":{\"302\":1,\"326\":1},\"1\":{\"328\":1}}],[\"服务提供者最大可接受连接数\",{\"1\":{\"293\":1}}],[\"服务提供者缺省值配置\",{\"1\":{\"293\":1}}],[\"服务提供者所在的分层\",{\"1\":{\"289\":1,\"293\":1}}],[\"服务提供者每服务每方法最大可并行执行请求数\",{\"1\":{\"289\":1,\"293\":1}}],[\"服务提供者暴露服务配置\",{\"1\":{\"289\":1}}],[\"服务提供者协议配置\",{\"1\":{\"288\":1}}],[\"服务提供者注册到\",{\"0\":{\"156\":1}}],[\"服务提供者或消费者开启服务降级\",{\"0\":{\"143\":1}}],[\"服务线程池大小\",{\"1\":{\"288\":1,\"293\":1}}],[\"服务注册分组\",{\"1\":{\"287\":1}}],[\"服务注册中心实例的主机名\",{\"1\":{\"102\":1}}],[\"服务\",{\"1\":{\"254\":1}}],[\"服务所有的请求\",{\"1\":{\"254\":1}}],[\"服务无法使用时\",{\"1\":{\"204\":1}}],[\"服务名\",{\"1\":{\"173\":1}}],[\"服务降级是否启用\",{\"1\":{\"143\":1}}],[\"服务降级\",{\"0\":{\"311\":1},\"1\":{\"140\":1}}],[\"服务端用一个线程多路复用实现了所有的处理任务\",{\"1\":{\"571\":1}}],[\"服务端收到的内容不同\",{\"1\":{\"566\":1}}],[\"服务端读取一次就回送一个随机字符串\",{\"1\":{\"566\":1}}],[\"服务端分两次读取到了数据包\",{\"1\":{\"565\":2}}],[\"服务端分两次读取到了两个独立的数据包\",{\"1\":{\"565\":1}}],[\"服务端一次接受到了两个数据包\",{\"1\":{\"565\":1}}],[\"服务端一次处理一个\",{\"1\":{\"551\":1}}],[\"服务端监听端口\",{\"1\":{\"538\":1}}],[\"服务端channel\",{\"1\":{\"538\":1}}],[\"服务端拥有selector\",{\"1\":{\"538\":1}}],[\"服务端代码\",{\"1\":{\"538\":1}}],[\"服务端在输出\",{\"1\":{\"536\":1}}],[\"服务端使用线程池为每个请求创建一个对应的处理线程\",{\"1\":{\"536\":1}}],[\"服务端初始化类\",{\"1\":{\"532\":1}}],[\"服务端接收到后回送一个\",{\"1\":{\"532\":1}}],[\"服务端处理器\",{\"0\":{\"525\":1},\"1\":{\"575\":1}}],[\"服务端启动成功\",{\"1\":{\"524\":1,\"558\":1}}],[\"服务端解码器配置\",{\"1\":{\"522\":1}}],[\"服务端自定义\",{\"1\":{\"521\":1,\"522\":1}}],[\"服务端设置解码器\",{\"1\":{\"521\":1}}],[\"服务端口\",{\"1\":{\"288\":1}}],[\"服务端都会保持一定数量的服务\",{\"1\":{\"102\":1}}],[\"服务端开启自我保护模式\",{\"1\":{\"102\":1}}],[\"服务端配置心跳检测处理器\",{\"1\":{\"528\":1}}],[\"服务端配置\",{\"0\":{\"83\":1,\"87\":1}}],[\"服务端\",{\"0\":{\"524\":1},\"1\":{\"81\":1,\"379\":1,\"380\":1,\"382\":1,\"383\":1,\"540\":1,\"541\":1,\"558\":2,\"567\":1,\"575\":1,\"576\":1}}],[\"安全\",{\"1\":{\"581\":1}}],[\"安全管理器\",{\"1\":{\"54\":1}}],[\"安装\",{\"0\":{\"95\":1}}],[\"刷新\",{\"0\":{\"93\":1}}],[\"测试代码只读取applicationcontext\",{\"1\":{\"619\":1}}],[\"测试代码\",{\"1\":{\"582\":1,\"597\":1,\"630\":1}}],[\"测试代码如下\",{\"1\":{\"582\":1}}],[\"测试类\",{\"1\":{\"508\":1,\"593\":1}}],[\"测试三\",{\"1\":{\"483\":1}}],[\"测试二\",{\"1\":{\"483\":1}}],[\"测试一\",{\"1\":{\"483\":1}}],[\"测试生产者消费者问题2\",{\"1\":{\"462\":1}}],[\"测试\",{\"1\":{\"85\":1,\"379\":1,\"488\":1}}],[\"编译程序下载地址\",{\"1\":{\"521\":1}}],[\"编译期\",{\"1\":{\"274\":1}}],[\"编译器会发出警告\",{\"1\":{\"268\":1}}],[\"编写sql\",{\"1\":{\"510\":1,\"511\":1}}],[\"编写工具类\",{\"1\":{\"508\":1}}],[\"编写实体类\",{\"1\":{\"508\":1}}],[\"编写实现\",{\"1\":{\"204\":1}}],[\"编写随机生成id的工具类\",{\"1\":{\"505\":1}}],[\"编写一个配置文件\",{\"1\":{\"497\":1}}],[\"编写controller\",{\"1\":{\"327\":1}}],[\"编写消费者\",{\"1\":{\"558\":1}}],[\"编写消费者接口实现类\",{\"1\":{\"327\":1}}],[\"编写消息消费类\",{\"1\":{\"188\":1}}],[\"编写接口实现类\",{\"1\":{\"326\":1}}],[\"编写业务实现类\",{\"1\":{\"187\":1}}],[\"编写启动类\",{\"1\":{\"182\":1,\"183\":1}}],[\"编写服务层接口实现类\",{\"1\":{\"182\":1}}],[\"编写服务层接口\",{\"1\":{\"182\":1}}],[\"编写服务接口\",{\"0\":{\"115\":1}}],[\"编写通用实体类\",{\"1\":{\"181\":1}}],[\"编写对应配置类\",{\"1\":{\"173\":1}}],[\"编写配置文件指定要打印日志的接口\",{\"0\":{\"169\":1}}],[\"编写配置文件\",{\"0\":{\"122\":1},\"1\":{\"188\":1,\"326\":1,\"327\":1}}],[\"编写\",{\"0\":{\"194\":1,\"196\":1},\"1\":{\"85\":1,\"97\":1,\"98\":1,\"182\":3,\"183\":3,\"508\":3,\"510\":1,\"511\":1,\"558\":4}}],[\"编码方法调用\",{\"1\":{\"567\":1}}],[\"编码器\",{\"0\":{\"531\":1},\"1\":{\"526\":1,\"567\":1}}],[\"编码传输多个类\",{\"0\":{\"522\":1}}],[\"编码传输单个类\",{\"0\":{\"521\":1}}],[\"编码解码器\",{\"1\":{\"558\":2}}],[\"编码解码\",{\"0\":{\"520\":1}}],[\"编码必须和jsp界面编码一致\",{\"1\":{\"222\":1}}],[\"编码配置\",{\"0\":{\"124\":1}}],[\"编码\",{\"1\":{\"20\":1}}],[\"97\",{\"1\":{\"336\":1}}],[\"9\",{\"1\":{\"251\":3,\"346\":2,\"604\":1}}],[\"9411\",{\"1\":{\"178\":1}}],[\"9527\",{\"1\":{\"122\":3,\"203\":2}}],[\"90000\",{\"1\":{\"464\":1}}],[\"9001\",{\"1\":{\"151\":1}}],[\"9090\",{\"1\":{\"287\":1}}],[\"90\",{\"1\":{\"85\":1}}],[\"9999\",{\"1\":{\"327\":1}}],[\"99\",{\"1\":{\"22\":1,\"537\":1}}],[\"9900\",{\"1\":{\"21\":1}}],[\"仓库为空\",{\"1\":{\"460\":1}}],[\"仓库已满\",{\"1\":{\"460\":1}}],[\"仓库中包含\",{\"1\":{\"317\":1}}],[\"仓库\",{\"1\":{\"85\":1}}],[\"低于则没事\",{\"1\":{\"405\":1}}],[\"低于\",{\"1\":{\"85\":1}}],[\"优先级低的不一定会比优先级高的执行的慢或晚\",{\"1\":{\"470\":1}}],[\"优先级低只代表获取调度的概率低\",{\"1\":{\"470\":1}}],[\"优先级低于\",{\"1\":{\"85\":1}}],[\"优先级最大值\",{\"1\":{\"470\":1}}],[\"优先级最小值\",{\"1\":{\"470\":1}}],[\"优先级默认值\",{\"1\":{\"470\":1}}],[\"优先级必须放在最后\",{\"1\":{\"213\":1}}],[\"优先级高于\",{\"1\":{\"85\":1}}],[\"优先使用\",{\"1\":{\"21\":1}}],[\"方便使用期间\",{\"1\":{\"548\":1}}],[\"方便我们使用注解实现想要的功能\",{\"1\":{\"273\":1}}],[\"方式方式配置\",{\"1\":{\"629\":1}}],[\"方式注入\",{\"0\":{\"592\":1}}],[\"方式实现\",{\"1\":{\"589\":1}}],[\"方式2\",{\"1\":{\"582\":1}}],[\"方式\",{\"1\":{\"395\":1,\"629\":1}}],[\"方式四\",{\"1\":{\"270\":1}}],[\"方式三\",{\"1\":{\"270\":1,\"582\":1}}],[\"方式配置\",{\"0\":{\"602\":1},\"1\":{\"256\":1}}],[\"方式发送\",{\"1\":{\"184\":1}}],[\"方式二\",{\"1\":{\"172\":1,\"270\":1,\"331\":1,\"517\":1,\"518\":1,\"582\":1}}],[\"方式一\",{\"1\":{\"172\":1,\"270\":1,\"331\":1,\"517\":1,\"518\":1,\"582\":1}}],[\"方式访问即可\",{\"1\":{\"78\":1}}],[\"方法有\",{\"1\":{\"632\":1}}],[\"方法也配置了\",{\"1\":{\"631\":1}}],[\"方法你会得到一个\",{\"1\":{\"608\":1}}],[\"方法注入\",{\"1\":{\"606\":1}}],[\"方法注解\",{\"1\":{\"64\":1}}],[\"方法注解详解\",{\"0\":{\"64\":1}}],[\"方法是在构造函数中公开所需的依赖项\",{\"1\":{\"587\":1}}],[\"方法获取最终结果\",{\"1\":{\"558\":1}}],[\"方法创建动态代理\",{\"1\":{\"558\":1}}],[\"方法后面的值对应的\",{\"1\":{\"584\":1}}],[\"方法后获取到的就是接口的动态代理对象\",{\"1\":{\"558\":1}}],[\"方法后释放锁去获得\",{\"1\":{\"450\":1}}],[\"方法接收一个\",{\"1\":{\"558\":1}}],[\"方法可见\",{\"1\":{\"558\":1}}],[\"方法要使用\",{\"1\":{\"558\":1}}],[\"方法在服务提供者传回消息后调用\",{\"1\":{\"558\":1}}],[\"方法中发出\",{\"1\":{\"558\":1}}],[\"方法中修改的是引用副本的指向\",{\"1\":{\"377\":1}}],[\"方法最大传输\",{\"1\":{\"541\":1}}],[\"方法得到\",{\"1\":{\"537\":1}}],[\"方法切换\",{\"1\":{\"537\":1}}],[\"方法传入一个\",{\"1\":{\"532\":1}}],[\"方法即可\",{\"1\":{\"528\":1}}],[\"方法的事务会覆盖类的事务配置信息\",{\"1\":{\"631\":1}}],[\"方法的用户代码如下\",{\"1\":{\"599\":1}}],[\"方法的调用而导致当前计数达到零\",{\"1\":{\"476\":1}}],[\"方法的返回值为\",{\"1\":{\"184\":1}}],[\"方法的返回值是一个\",{\"1\":{\"184\":1}}],[\"方法阻塞\",{\"1\":{\"476\":1}}],[\"方法或\",{\"1\":{\"460\":1}}],[\"方法或者字段\",{\"1\":{\"342\":2}}],[\"方法前\",{\"1\":{\"450\":1}}],[\"方法前要先判断是否上传了文件\",{\"1\":{\"227\":1}}],[\"方法延迟\",{\"0\":{\"438\":1}}],[\"方法和语句可以获得的更广泛的锁定操作\",{\"1\":{\"432\":1}}],[\"方法先行发生于此线程的没一个动作\",{\"1\":{\"427\":1}}],[\"方法安全的原因\",{\"1\":{\"402\":1}}],[\"方法开启线程\",{\"1\":{\"391\":1}}],[\"方法判断\",{\"1\":{\"389\":1}}],[\"方法区\",{\"0\":{\"353\":1},\"1\":{\"420\":1}}],[\"方法出口等信息\",{\"1\":{\"350\":1}}],[\"方法被隐式指定为\",{\"1\":{\"346\":1}}],[\"方法刷新缓冲区\",{\"1\":{\"330\":1}}],[\"方法参数配置\",{\"1\":{\"297\":1}}],[\"方法参数变量等\",{\"1\":{\"275\":1}}],[\"方法执行即可\",{\"1\":{\"560\":1,\"561\":1}}],[\"方法执行的线程内存模型\",{\"1\":{\"350\":1}}],[\"方法执行有异常拦截\",{\"1\":{\"296\":1}}],[\"方法执行返回后拦截\",{\"1\":{\"296\":1}}],[\"方法执行前拦截\",{\"1\":{\"296\":1}}],[\"方法调用将被编码并分派到其调用处理程序的\",{\"1\":{\"617\":1}}],[\"方法调用是否需要返回值\",{\"1\":{\"296\":1}}],[\"方法调用超时时间\",{\"1\":{\"296\":1}}],[\"方法名就是\",{\"1\":{\"602\":1}}],[\"方法名就是切点名\",{\"1\":{\"582\":1}}],[\"方法名\",{\"1\":{\"296\":1,\"582\":1}}],[\"方法级配置\",{\"1\":{\"296\":1}}],[\"方法级优先\",{\"1\":{\"283\":1}}],[\"方法第一个参数就用null代替\",{\"1\":{\"279\":1}}],[\"方法上使用\",{\"1\":{\"587\":1}}],[\"方法上有横线\",{\"1\":{\"268\":1}}],[\"方法上要添加相关\",{\"1\":{\"164\":1}}],[\"方法不可省略\",{\"1\":{\"233\":1}}],[\"方法二\",{\"1\":{\"223\":1}}],[\"方法一\",{\"1\":{\"223\":1}}],[\"方法实现定义\",{\"1\":{\"214\":1}}],[\"方法进行功能处理\",{\"1\":{\"213\":1}}],[\"方法返回有事件发生的通道个数\",{\"1\":{\"537\":1}}],[\"方法返回的\",{\"1\":{\"184\":1,\"244\":1}}],[\"方法返回一个\",{\"1\":{\"69\":1}}],[\"方法发出\",{\"1\":{\"164\":1}}],[\"方法还调用了\",{\"1\":{\"71\":1}}],[\"方法定义在\",{\"1\":{\"69\":1}}],[\"方法将会直接返回\",{\"1\":{\"69\":1}}],[\"方法\",{\"0\":{\"237\":1},\"1\":{\"47\":1,\"69\":1,\"71\":4,\"184\":2,\"223\":1,\"229\":1,\"275\":1,\"338\":2,\"341\":1,\"345\":1,\"346\":1,\"354\":1,\"391\":1,\"392\":2,\"393\":1,\"409\":1,\"427\":1,\"460\":2,\"533\":1,\"537\":1,\"558\":2,\"587\":1,\"599\":2,\"608\":1,\"617\":2,\"632\":1}}],[\"kv\",{\"1\":{\"184\":1}}],[\"keetalive\",{\"1\":{\"551\":1}}],[\"keepalive\",{\"1\":{\"524\":1,\"544\":1,\"575\":1}}],[\"keepalivetime\",{\"1\":{\"473\":6}}],[\"keepglobalprefix\",{\"1\":{\"181\":1}}],[\"key3\",{\"1\":{\"593\":1}}],[\"key=\",{\"1\":{\"593\":5,\"607\":4}}],[\"keyproperty=\",{\"1\":{\"507\":1}}],[\"key为dubbo\",{\"1\":{\"292\":2}}],[\"key2\",{\"1\":{\"287\":1,\"593\":1}}],[\"key1\",{\"1\":{\"287\":1,\"593\":1}}],[\"keys\",{\"1\":{\"241\":1,\"287\":1,\"538\":3}}],[\"key\",{\"1\":{\"173\":3,\"370\":5,\"445\":4,\"537\":7,\"538\":12}}],[\"kafka\",{\"1\":{\"73\":1,\"185\":1}}],[\"knowledge\",{\"0\":{\"7\":1}}],[\"图标定制\",{\"0\":{\"72\":1}}],[\"首页名称必须是\",{\"1\":{\"71\":1}}],[\"首页\",{\"0\":{\"71\":1}}],[\"首页和图标定制\",{\"0\":{\"70\":1}}],[\"首先构造\",{\"1\":{\"606\":1}}],[\"首先写出sql语句\",{\"1\":{\"517\":1,\"518\":1}}],[\"首先总体上此方法返回的是学生类的列表\",{\"1\":{\"517\":1}}],[\"首先绑定命名空间\",{\"1\":{\"517\":1}}],[\"首先需要获得这个表的意向排它锁\",{\"1\":{\"360\":1}}],[\"首先需要获得这个表的意向共享锁\",{\"1\":{\"360\":1}}],[\"首先在\",{\"1\":{\"69\":1}}],[\"首先依然根据\",{\"1\":{\"66\":1}}],[\"首先注册\",{\"1\":{\"36\":1}}],[\"首先自定义区域解析器\",{\"1\":{\"35\":1}}],[\"下线\",{\"1\":{\"525\":1}}],[\"下就不会出现重连两次的问题\",{\"1\":{\"188\":1}}],[\"下载完成后解压\",{\"1\":{\"299\":1}}],[\"下载地址\",{\"1\":{\"299\":1,\"300\":1}}],[\"下载依赖然后运行\",{\"1\":{\"300\":1}}],[\"下载依赖\",{\"1\":{\"251\":1}}],[\"下载\",{\"0\":{\"176\":1,\"224\":1},\"1\":{\"176\":1}}],[\"下的资源才会被映射\",{\"1\":{\"69\":1}}],[\"下面这些内容是为了让mybatis映射\",{\"1\":{\"19\":1}}],[\"根据配置文件或元数据创建与组织对象存入容器中\",{\"1\":{\"600\":1}}],[\"根据\",{\"1\":{\"376\":1}}],[\"根据请求的\",{\"1\":{\"213\":1}}],[\"根据对源代码的分析\",{\"1\":{\"69\":1}}],[\"根据if中的条件可知\",{\"1\":{\"69\":1}}],[\"资源一般会有多个\",{\"1\":{\"552\":1}}],[\"资源\",{\"1\":{\"69\":1,\"478\":1}}],[\"进一步得到各个\",{\"1\":{\"537\":1}}],[\"进程号\",{\"1\":{\"457\":1}}],[\"进程的环境变量\",{\"1\":{\"281\":1}}],[\"进入解压后的目录\",{\"1\":{\"300\":1}}],[\"进入默认熔断方法\",{\"1\":{\"144\":1}}],[\"进入备用方法\",{\"1\":{\"143\":1,\"144\":1}}],[\"进入自定义过滤器\",{\"1\":{\"139\":1}}],[\"进入\",{\"1\":{\"69\":1,\"136\":1,\"300\":3}}],[\"进行\",{\"1\":{\"589\":1}}],[\"进行装配\",{\"1\":{\"587\":1}}],[\"进行各种事件处理\",{\"1\":{\"573\":1}}],[\"进行处理\",{\"1\":{\"572\":1}}],[\"进行业务处理\",{\"1\":{\"537\":1}}],[\"进行监听\",{\"1\":{\"537\":1}}],[\"进行读写操作\",{\"1\":{\"537\":1}}],[\"进行增删改查的步骤\",{\"0\":{\"510\":1}}],[\"进行计算\",{\"0\":{\"409\":1}}],[\"进行判断\",{\"1\":{\"389\":1}}],[\"进行反序列化时\",{\"1\":{\"334\":1}}],[\"进行访问即可\",{\"1\":{\"187\":1}}],[\"进行登录\",{\"1\":{\"56\":1}}],[\"进行配置\",{\"1\":{\"31\":1}}],[\"进行配置时\",{\"1\":{\"22\":1}}],[\"关键是要解决服务器每次读取数据长度的问题\",{\"1\":{\"567\":1}}],[\"关键字\",{\"1\":{\"429\":1,\"435\":1}}],[\"关键字要求被修改之后的变量要求立即更新到主内存\",{\"1\":{\"425\":1}}],[\"关键字或其他锁包裹起来的操作也可以认为是原子的\",{\"1\":{\"424\":1}}],[\"关键字修饰一个方法\",{\"1\":{\"346\":1}}],[\"关键字修饰\",{\"1\":{\"346\":2}}],[\"关键字修饰的方法称为抽象方法\",{\"1\":{\"345\":1}}],[\"关键字修饰的类称为抽象类\",{\"1\":{\"345\":1}}],[\"关联\",{\"1\":{\"537\":1}}],[\"关于sqlsession\",{\"0\":{\"608\":1}}],[\"关于c3p0数据源的注意事项\",{\"1\":{\"258\":1}}],[\"关于语言版本不停回溯到默认值问题\",{\"1\":{\"252\":1}}],[\"关于\",{\"0\":{\"184\":1,\"389\":1,\"607\":1,\"631\":1},\"1\":{\"69\":1,\"235\":1}}],[\"关闭group\",{\"1\":{\"575\":1}}],[\"关闭成功\",{\"1\":{\"563\":1}}],[\"关闭channel\",{\"1\":{\"538\":1}}],[\"关闭csrf保护\",{\"1\":{\"59\":1}}],[\"关闭连接\",{\"1\":{\"510\":2,\"511\":2}}],[\"关闭线程池\",{\"1\":{\"472\":1}}],[\"关闭服务\",{\"1\":{\"393\":1}}],[\"关闭资源\",{\"1\":{\"384\":1}}],[\"关闭输出流\",{\"1\":{\"380\":1}}],[\"关闭socket\",{\"1\":{\"379\":1}}],[\"关闭流\",{\"1\":{\"330\":1,\"379\":1}}],[\"关闭\",{\"1\":{\"143\":2}}],[\"关闭默认图标\",{\"1\":{\"72\":1}}],[\"关闭跨站请求保护\",{\"1\":{\"62\":1}}],[\"所做的修改会永久的保存到数据库中\",{\"1\":{\"373\":1}}],[\"所支持的telnet命令\",{\"1\":{\"288\":1,\"293\":1}}],[\"所有这些都遵从\",{\"1\":{\"625\":1}}],[\"所有为了简化这里都用\",{\"1\":{\"558\":1}}],[\"所有的数据都是通过\",{\"1\":{\"539\":1}}],[\"所有的数据都会先放在以及惠存\",{\"1\":{\"488\":1}}],[\"所有的支付记录\",{\"1\":{\"164\":1}}],[\"所有请求返回为\",{\"1\":{\"311\":1}}],[\"所有请求都卡在调到第二台上\",{\"1\":{\"308\":1}}],[\"所有请求为异步\",{\"1\":{\"207\":1}}],[\"所有\",{\"1\":{\"207\":1}}],[\"所有默认静态资源路径都会失效\",{\"1\":{\"69\":1}}],[\"所以泛型都使用\",{\"1\":{\"576\":1}}],[\"所以要使用ref赋值\",{\"1\":{\"597\":1}}],[\"所以要调用接口才能运行\",{\"1\":{\"582\":1}}],[\"所以要判断调用的\",{\"1\":{\"558\":1}}],[\"所以要在\",{\"1\":{\"505\":1}}],[\"所以解码放在自定义\",{\"1\":{\"521\":1}}],[\"所以编码要放在自定义\",{\"1\":{\"521\":1}}],[\"所以使用collection标签进行配置\",{\"1\":{\"518\":1}}],[\"所以它的最佳的作用域是请求或方法作用域\",{\"1\":{\"513\":1}}],[\"所以实际生产一般自己通过\",{\"1\":{\"472\":1}}],[\"所以始终是\",{\"1\":{\"450\":1}}],[\"所以当某个线程修改完某个变量之后\",{\"1\":{\"425\":1}}],[\"所以每条线程拥有各自的工作内存\",{\"1\":{\"420\":1}}],[\"所以如果你心目中有明确的\",{\"1\":{\"405\":1}}],[\"所以加载因子默认为\",{\"1\":{\"405\":1}}],[\"所以只保持需要的索引有利于查询即可\",{\"1\":{\"343\":1}}],[\"所以不需要显式引入\",{\"1\":{\"317\":1}}],[\"所以不会出现中文乱码\",{\"1\":{\"22\":1}}],[\"所以可以不引入\",{\"1\":{\"317\":1}}],[\"所以可以在serviceimpl上添加\",{\"1\":{\"259\":1}}],[\"所以idea在自动装配时会警告\",{\"1\":{\"233\":1}}],[\"所以timeinmilliseconds\",{\"1\":{\"143\":1}}],[\"所以\",{\"1\":{\"140\":1,\"184\":1,\"213\":1,\"539\":1,\"623\":1,\"626\":1}}],[\"所以会使容器中出现了\",{\"1\":{\"46\":1}}],[\"所以静态变量注入的时候容器中没有实例化的bean可用\",{\"1\":{\"44\":1}}],[\"所以一个配置文件可以有多个环境\",{\"1\":{\"24\":1}}],[\"也会bytype\",{\"1\":{\"578\":1}}],[\"也绝不能将\",{\"1\":{\"513\":1}}],[\"也能保证指令不进行重排序\",{\"1\":{\"426\":1}}],[\"也能实现可见性\",{\"1\":{\"425\":1}}],[\"也不能\",{\"1\":{\"422\":1}}],[\"也不会自动取消册\",{\"1\":{\"289\":1,\"293\":1}}],[\"也不会自动取消注册\",{\"1\":{\"287\":1}}],[\"也叫脏读\",{\"1\":{\"374\":1}}],[\"也可填写访问日志文件路径\",{\"1\":{\"288\":1,\"289\":1,\"293\":1}}],[\"也可以不使用\",{\"1\":{\"606\":1}}],[\"也可以这样理解\",{\"1\":{\"549\":1}}],[\"也可以通过\",{\"1\":{\"602\":1}}],[\"也可以通过泛型指定消息类型\",{\"1\":{\"521\":1}}],[\"也可以通过实现你己的缓存\",{\"1\":{\"490\":1}}],[\"也可以在\",{\"1\":{\"497\":1,\"587\":1}}],[\"也可以直接访问web路径下的静态资源\",{\"1\":{\"217\":1}}],[\"也可以是\",{\"1\":{\"117\":1,\"346\":1}}],[\"也可以对\",{\"1\":{\"67\":1}}],[\"也无法相互调用\",{\"1\":{\"287\":1}}],[\"也就对应了前面说的为什么注解只有属性成员变量\",{\"1\":{\"264\":1}}],[\"也就是局部方法变量\",{\"1\":{\"513\":1}}],[\"也就是\",{\"1\":{\"495\":1,\"496\":1}}],[\"也就是没有刷新间隔\",{\"1\":{\"487\":1}}],[\"也就是说全程没有通过\",{\"1\":{\"539\":1}}],[\"也就是说teacher中有两个数据类型\",{\"1\":{\"522\":1}}],[\"也就是说\",{\"1\":{\"482\":1}}],[\"也就是说大小为\",{\"1\":{\"405\":1}}],[\"也就是说注解中其实是可以有属性和方法\",{\"1\":{\"264\":1}}],[\"也就是说它拦截了所有的逻辑视图\",{\"1\":{\"213\":1}}],[\"也就是说在浏览器输入的webjars等价于实际结构中的classpath\",{\"1\":{\"69\":1}}],[\"也就是忽略了两个prefix但微服务内部前缀依然保留\",{\"1\":{\"203\":1}}],[\"也就是命令执行的最大并发量\",{\"1\":{\"143\":1}}],[\"也是作用在服务接口上\",{\"1\":{\"164\":1}}],[\"也去除了与\",{\"1\":{\"140\":1}}],[\"格式\",{\"1\":{\"67\":1,\"207\":1,\"287\":1}}],[\"静态代理模式缺点\",{\"0\":{\"616\":1}}],[\"静态代理\",{\"0\":{\"612\":1}}],[\"静态代码块中初始化线程池与启动\",{\"1\":{\"558\":1}}],[\"静态内部类\",{\"1\":{\"448\":1}}],[\"静态方法在类加载时就被加载\",{\"1\":{\"441\":1}}],[\"静态方法名\",{\"1\":{\"346\":1}}],[\"静态方法\",{\"1\":{\"346\":1}}],[\"静态资源可用位置\",{\"0\":{\"69\":1}}],[\"静态环境下的默认值\",{\"1\":{\"67\":1}}],[\"静态变量\",{\"1\":{\"353\":1}}],[\"静态变量不需要实例化\",{\"1\":{\"44\":1}}],[\"静态变量如果直接\",{\"1\":{\"44\":1}}],[\"脚本\",{\"1\":{\"67\":1}}],[\"来实现事务管理\",{\"1\":{\"629\":1}}],[\"来构成\",{\"1\":{\"627\":1}}],[\"来产生和管理\",{\"1\":{\"621\":1}}],[\"来注册\",{\"1\":{\"606\":1}}],[\"来将这个\",{\"1\":{\"552\":1}}],[\"来进行\",{\"1\":{\"552\":1}}],[\"来进行传输的\",{\"1\":{\"539\":1}}],[\"来处理任务\",{\"1\":{\"552\":1}}],[\"来搬运\",{\"1\":{\"539\":1}}],[\"来搬运数据\",{\"1\":{\"539\":2}}],[\"来完全覆盖缓存行为\",{\"1\":{\"490\":1}}],[\"来判断一个标志位\",{\"1\":{\"462\":1}}],[\"来保证\",{\"1\":{\"375\":2}}],[\"来设置自动装配字段\",{\"1\":{\"587\":1}}],[\"来设置最大并行数\",{\"1\":{\"313\":1}}],[\"来设置重试次数\",{\"1\":{\"313\":1}}],[\"来自配置中心的配置项具有最高优先级\",{\"1\":{\"292\":1}}],[\"来配置使用的策略\",{\"1\":{\"172\":1}}],[\"来累计各度量值\",{\"1\":{\"143\":1}}],[\"来声明这是要特殊处理的\",{\"1\":{\"67\":1}}],[\"来获取\",{\"1\":{\"67\":1}}],[\"与依赖注入容器紧耦合\",{\"1\":{\"587\":1}}],[\"与对象的属性名不同\",{\"1\":{\"585\":1}}],[\"与切入点匹配的执行点\",{\"1\":{\"581\":1}}],[\"与之对应\",{\"1\":{\"546\":1}}],[\"与之通讯\",{\"1\":{\"536\":1}}],[\"与class类似\",{\"1\":{\"521\":1}}],[\"与本地实体类的序列化\",{\"1\":{\"334\":1}}],[\"与index二选一\",{\"1\":{\"297\":1}}],[\"与服务提供者的版本一致\",{\"1\":{\"291\":1}}],[\"与local的区别在于\",{\"1\":{\"289\":1,\"291\":1}}],[\"与低版本兼容\",{\"1\":{\"287\":1}}],[\"与前两个注释有所不同\",{\"1\":{\"269\":1}}],[\"与eureka注册服务中心的通信zone和url地址\",{\"1\":{\"102\":1}}],[\"与\",{\"0\":{\"204\":1,\"418\":1},\"1\":{\"67\":1,\"127\":1,\"130\":1,\"198\":1,\"213\":1,\"450\":1,\"537\":1,\"574\":1,\"587\":1,\"602\":1}}],[\"一起使用\",{\"1\":{\"605\":1}}],[\"一直保持连接活动状态\",{\"1\":{\"551\":1}}],[\"一下两句选择一句即可\",{\"1\":{\"537\":1}}],[\"一一对应\",{\"1\":{\"537\":1}}],[\"一一对应实现\",{\"1\":{\"216\":1}}],[\"一连接就调用\",{\"1\":{\"525\":1}}],[\"一对多\",{\"0\":{\"518\":1}}],[\"一级缓存中的数据被保存到二级缓存中\",{\"1\":{\"489\":1}}],[\"一级缓存会消失\",{\"1\":{\"489\":1}}],[\"一级缓存\",{\"0\":{\"483\":1},\"1\":{\"481\":1}}],[\"一边为byte另一边为char\",{\"1\":{\"363\":1}}],[\"一次锁定相邻的一组记录\",{\"1\":{\"359\":1}}],[\"一次创建\",{\"1\":{\"254\":1}}],[\"一旦被创建就应该在应用的运行期间一直存在\",{\"1\":{\"513\":1}}],[\"一旦创建了\",{\"1\":{\"513\":1}}],[\"一旦聚集索引改变\",{\"1\":{\"356\":1}}],[\"一旦有一个\",{\"1\":{\"67\":1}}],[\"一致性\",{\"0\":{\"310\":1},\"1\":{\"310\":1,\"373\":1,\"375\":1}}],[\"一些公共的bean\",{\"1\":{\"232\":1}}],[\"一个线程可以监听多个连接的\",{\"1\":{\"547\":1}}],[\"一个线程对应多个\",{\"1\":{\"537\":1}}],[\"一个参数的方法是阻塞指定毫秒数\",{\"1\":{\"537\":1}}],[\"一个会话查询一条记录\",{\"1\":{\"489\":1}}],[\"一个内容保存成文件的读写\",{\"1\":{\"488\":1}}],[\"一个计数信号量\",{\"1\":{\"478\":1}}],[\"一个用于写入\",{\"1\":{\"445\":1}}],[\"一个用于只读操作\",{\"1\":{\"445\":1}}],[\"一个对象\",{\"0\":{\"443\":1}}],[\"一个对象的初始化方法先于一个方法执行\",{\"1\":{\"427\":1}}],[\"一个普通同步方法\",{\"0\":{\"443\":1,\"444\":1}}],[\"一个静态同步方法\",{\"0\":{\"443\":1,\"444\":1}}],[\"一个变量同一时间只有一个线程能对其进行\",{\"1\":{\"422\":1}}],[\"一个新的变量必须在主内存中诞生\",{\"1\":{\"422\":1}}],[\"一个递归无结果的\",{\"1\":{\"408\":1}}],[\"一个递归有结果的\",{\"1\":{\"408\":1}}],[\"一个事务在最终提交前对其他事务不可见\",{\"1\":{\"373\":1}}],[\"一个子类继承一个抽象类\",{\"1\":{\"345\":1}}],[\"一个依赖即可\",{\"1\":{\"317\":1}}],[\"一个由消费者实现\",{\"1\":{\"315\":1}}],[\"一个由生产者实现\",{\"1\":{\"315\":1}}],[\"一个游戏注解\",{\"1\":{\"278\":1}}],[\"一个人喜欢玩游戏\",{\"1\":{\"278\":1}}],[\"一个被其他线程锁住的变量\",{\"1\":{\"422\":1}}],[\"一个被\",{\"1\":{\"277\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"346\":1}}],[\"一个类被加载后\",{\"1\":{\"270\":1}}],[\"一个类在内存中只有一个class对象\",{\"1\":{\"270\":1}}],[\"一个servlet只会有一个对象\",{\"1\":{\"254\":1}}],[\"一个窗口期中\",{\"1\":{\"147\":1}}],[\"一个\",{\"1\":{\"143\":1,\"427\":1,\"533\":1,\"537\":2,\"549\":1,\"574\":1,\"605\":1}}],[\"一个是正则表达式\",{\"1\":{\"134\":1}}],[\"一个是\",{\"1\":{\"134\":1}}],[\"一个唯一id\",{\"1\":{\"123\":1}}],[\"一定要将服务注入\",{\"1\":{\"114\":1}}],[\"一般有附属操作\",{\"1\":{\"613\":1}}],[\"一般用于团队开发\",{\"1\":{\"619\":1}}],[\"一般用抽象类或接口\",{\"1\":{\"613\":1}}],[\"一般用来缓存服务器中间计算结果以及不需要实时保存的用户行为等\",{\"1\":{\"367\":1}}],[\"一般不用来传输文件\",{\"1\":{\"383\":1}}],[\"一般不使用\",{\"1\":{\"374\":1}}],[\"一般需要自己实现\",{\"1\":{\"54\":1}}],[\"一般指用户\",{\"1\":{\"54\":1}}],[\"和不同数据库供应商所抛出的错误信息\",{\"1\":{\"624\":1}}],[\"和面向切面\",{\"1\":{\"620\":1}}],[\"和至少一个数据映射器类\",{\"1\":{\"605\":1}}],[\"和自己对象\",{\"1\":{\"584\":1}}],[\"和完整的\",{\"1\":{\"565\":1}}],[\"和一个\",{\"1\":{\"552\":1}}],[\"和指定的\",{\"1\":{\"537\":1}}],[\"和内存地址\",{\"1\":{\"398\":1}}],[\"和\",{\"0\":{\"204\":1,\"435\":1,\"549\":1,\"589\":1},\"1\":{\"67\":1,\"73\":1,\"111\":1,\"164\":1,\"184\":1,\"185\":1,\"204\":1,\"235\":2,\"273\":1,\"293\":1,\"334\":2,\"343\":1,\"361\":1,\"396\":1,\"422\":3,\"425\":1,\"426\":2,\"465\":1,\"472\":1,\"473\":1,\"482\":1,\"486\":1,\"520\":1,\"536\":1,\"539\":1,\"550\":1,\"552\":1,\"558\":1,\"565\":3,\"574\":1,\"587\":1,\"625\":1}}],[\"分发给\",{\"1\":{\"573\":1}}],[\"分发给后面的\",{\"1\":{\"572\":1}}],[\"分发给对应\",{\"1\":{\"572\":1}}],[\"分发\",{\"1\":{\"572\":1}}],[\"分割后第一个字符串是要调用的方法名\",{\"1\":{\"558\":1}}],[\"分割不同的环境\",{\"1\":{\"24\":1}}],[\"分布式缓存\",{\"1\":{\"490\":1}}],[\"分配内存空间\",{\"1\":{\"448\":1}}],[\"分别是\",{\"1\":{\"565\":1}}],[\"分别表示\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"分别对应相同即可\",{\"1\":{\"111\":1}}],[\"分组\",{\"1\":{\"189\":1}}],[\"分析\",{\"1\":{\"173\":1}}],[\"分支仍然是不分离版\",{\"1\":{\"300\":1}}],[\"分支\",{\"1\":{\"85\":1}}],[\"分支控制\",{\"1\":{\"67\":1}}],[\"但方法\",{\"1\":{\"632\":1}}],[\"但它隐藏了信号\",{\"1\":{\"587\":1}}],[\"但对那些数据库连接可用性要求不高的简单应用程序来说\",{\"1\":{\"496\":1}}],[\"但每个\",{\"1\":{\"494\":1}}],[\"但没有执行\",{\"1\":{\"487\":1}}],[\"但没挂\",{\"1\":{\"308\":1}}],[\"但有可能产生幻读\",{\"1\":{\"374\":1}}],[\"但\",{\"1\":{\"370\":1}}],[\"但只能被实现子类的对象调用\",{\"1\":{\"346\":1}}],[\"但必须使用\",{\"1\":{\"346\":1}}],[\"但要引入\",{\"1\":{\"317\":1}}],[\"但需要浪费更多服务资源\",{\"1\":{\"313\":1}}],[\"但重试会带来更长延迟\",{\"1\":{\"313\":1}}],[\"但调用量越大分布越均匀\",{\"1\":{\"307\":1}}],[\"但不会有任何报错\",{\"1\":{\"632\":1}}],[\"但不能注册新服务\",{\"1\":{\"305\":1}}],[\"但不是\",{\"1\":{\"67\":1}}],[\"但运行时无法获得\",{\"1\":{\"274\":1}}],[\"但还是配置一下\",{\"1\":{\"233\":1}}],[\"但是如果使用基于构造函数的依赖注入\",{\"1\":{\"587\":1}}],[\"但是如果直接把此引用指向了其他对象\",{\"1\":{\"377\":1}}],[\"但是任务添加到队列后是单线程运行的\",{\"1\":{\"560\":1}}],[\"但是就要一直receive\",{\"1\":{\"538\":1}}],[\"但是还要设置数据类型\",{\"1\":{\"522\":1}}],[\"但是文件很重要\",{\"1\":{\"488\":1}}],[\"但是更安全\",{\"1\":{\"487\":1}}],[\"但是这样就会出现一个问题\",{\"1\":{\"420\":1}}],[\"但是这个继承和我们平时理解的继承大同小异\",{\"1\":{\"277\":1}}],[\"但是换了个系统就出现各种问题\",{\"1\":{\"419\":1}}],[\"但是会降低插入\",{\"1\":{\"356\":1}}],[\"但是构造方法不能用于实例化\",{\"1\":{\"345\":1}}],[\"但是抽象类不一定含有抽象方法\",{\"1\":{\"345\":1}}],[\"但是每次作用注解又可以代表不同的含义\",{\"1\":{\"278\":1}}],[\"但是接口中的属性都是\",{\"1\":{\"264\":1}}],[\"但是当mapper接口较多的时候要多次注册bean\",{\"1\":{\"258\":1}}],[\"但是由于不是xml配置\",{\"1\":{\"233\":1}}],[\"但是尚不知晓如何指定url\",{\"1\":{\"232\":1}}],[\"但是微服务只有8001\",{\"1\":{\"173\":1}}],[\"但是已经达到过一个5次\",{\"1\":{\"173\":1}}],[\"但是第二种方法由于是拼接为\",{\"1\":{\"164\":1}}],[\"但是是通过\",{\"1\":{\"164\":1}}],[\"但是\",{\"1\":{\"67\":1,\"368\":1,\"396\":1,\"478\":1}}],[\"但是语法非常像\",{\"1\":{\"67\":1}}],[\"但是在\",{\"1\":{\"51\":1,\"140\":1}}],[\"但是不能使用\",{\"1\":{\"46\":1}}],[\"但是可以通过非静态set方法进行注入\",{\"1\":{\"44\":1}}],[\"但是默认语言并不会随着浏览器语言改变而改变\",{\"1\":{\"35\":1}}],[\"认定为true的情况\",{\"1\":{\"67\":1}}],[\"认证\",{\"1\":{\"54\":1}}],[\"则外部调用方法\",{\"1\":{\"632\":1}}],[\"则通过\",{\"1\":{\"589\":1}}],[\"则由\",{\"1\":{\"572\":1}}],[\"则可以从\",{\"1\":{\"508\":1}}],[\"则增删改需要提交事务才能实际修改数据\",{\"1\":{\"503\":1}}],[\"则没有必要配置事务管理器\",{\"1\":{\"495\":1}}],[\"则这些多出的线程在空闲时间超过\",{\"1\":{\"473\":1}}],[\"则这个请求的url被转换为localhost\",{\"1\":{\"203\":1}}],[\"则允许池适应任意数量的并发任务\",{\"1\":{\"473\":1}}],[\"则仅当队列满时才创建新线程\",{\"1\":{\"473\":1}}],[\"则创建了固定大小的线程池\",{\"1\":{\"473\":1}}],[\"则创建新线程来处理请求\",{\"1\":{\"473\":1}}],[\"则创建子类时\",{\"1\":{\"342\":1}}],[\"则操作\",{\"1\":{\"427\":1}}],[\"则在发生\",{\"1\":{\"427\":1}}],[\"则直接加入到它的工作队列中\",{\"1\":{\"409\":1}}],[\"则等待到指定时间后退出\",{\"1\":{\"395\":2}}],[\"则一直等待\",{\"1\":{\"395\":2}}],[\"则下次\",{\"1\":{\"368\":1}}],[\"则返回值类型为范围较大者\",{\"1\":{\"363\":1}}],[\"则返回future\",{\"1\":{\"296\":1}}],[\"则\",{\"1\":{\"363\":1}}],[\"则转换为\",{\"1\":{\"363\":1}}],[\"则按照正常的二进制数字来转换\",{\"1\":{\"363\":1}}],[\"则不需要\",{\"1\":{\"541\":1}}],[\"则不需要在\",{\"1\":{\"31\":1}}],[\"则不做转换\",{\"1\":{\"363\":1}}],[\"则子类必须重写默认方法\",{\"1\":{\"346\":1}}],[\"则子类必须实现父类抽象方法\",{\"1\":{\"345\":1}}],[\"则使用索引排除不匹配的行\",{\"1\":{\"343\":1}}],[\"则要在\",{\"1\":{\"338\":1}}],[\"则将后台打包后启动\",{\"1\":{\"300\":1}}],[\"则请求发送成功后直接返回null\",{\"1\":{\"296\":1}}],[\"则请求将会以\",{\"1\":{\"164\":1}}],[\"则address取值为zookeeper\",{\"1\":{\"292\":1}}],[\"则address可以简化为127\",{\"1\":{\"292\":1}}],[\"则会直接影响到原对象\",{\"1\":{\"377\":1}}],[\"则会分配一个没有被占用的端口\",{\"1\":{\"288\":1}}],[\"则会抛出异常\",{\"1\":{\"187\":1}}],[\"则自动采用默认端口\",{\"1\":{\"288\":1}}],[\"则消费方优先\",{\"1\":{\"283\":1}}],[\"则我们需要定义一个人的注解\",{\"1\":{\"278\":1}}],[\"则编译器会生成一条错误消息\",{\"1\":{\"267\":1}}],[\"则需要在\",{\"1\":{\"235\":1,\"256\":1,\"599\":1}}],[\"则访问时输入\",{\"1\":{\"203\":1}}],[\"则必须使用\",{\"1\":{\"184\":1}}],[\"则无法访问\",{\"1\":{\"71\":1}}],[\"则标签会渲染到页面\",{\"1\":{\"67\":1}}],[\"逻辑判断\",{\"1\":{\"67\":1}}],[\"值为全包名\",{\"1\":{\"602\":1}}],[\"值为dubbo\",{\"1\":{\"289\":3,\"291\":1,\"293\":1,\"294\":1}}],[\"值在\",{\"1\":{\"389\":1}}],[\"值\",{\"1\":{\"67\":1,\"279\":1}}],[\"返回给\",{\"1\":{\"573\":1}}],[\"返回结果为\",{\"1\":{\"582\":1}}],[\"返回结果\",{\"1\":{\"573\":1,\"618\":1}}],[\"返回执行结果\",{\"1\":{\"558\":1}}],[\"返回两个整数的和\",{\"1\":{\"558\":1}}],[\"返回逆序字符串\",{\"1\":{\"558\":1}}],[\"返回类型\",{\"1\":{\"502\":1}}],[\"返回集\",{\"1\":{\"502\":1}}],[\"返回缓存对象的拷贝\",{\"1\":{\"487\":1}}],[\"返回r类型\",{\"1\":{\"413\":1}}],[\"返回纯文本字符串\",{\"1\":{\"207\":1}}],[\"返回纯文本\",{\"1\":{\"207\":2}}],[\"返回\",{\"1\":{\"204\":2,\"207\":2,\"363\":1}}],[\"返回httpstatus\",{\"1\":{\"204\":1}}],[\"返回的托底信息\",{\"1\":{\"204\":1}}],[\"返回跳转到的地址\",{\"1\":{\"184\":1}}],[\"返回值\",{\"1\":{\"582\":1}}],[\"返回值为\",{\"1\":{\"363\":1}}],[\"返回值需要修改为\",{\"1\":{\"118\":1}}],[\"返回值默认就是上面提到的\",{\"1\":{\"71\":1}}],[\"返回一个响应后\",{\"1\":{\"513\":1}}],[\"返回一个布尔值\",{\"1\":{\"414\":1}}],[\"返回一个\",{\"1\":{\"69\":1,\"71\":1}}],[\"返回是否为第一或最后\",{\"1\":{\"67\":1}}],[\"返回是否为奇偶\",{\"1\":{\"67\":1}}],[\"返回user对象\",{\"1\":{\"63\":1}}],[\"总体来看\",{\"1\":{\"539\":1}}],[\"总是使用接口名\",{\"1\":{\"289\":1}}],[\"总共被调用的次数\",{\"1\":{\"173\":1}}],[\"总元素个数\",{\"1\":{\"67\":1}}],[\"总结\",{\"0\":{\"610\":1},\"1\":{\"17\":1}}],[\"开了会生成接口和类\",{\"1\":{\"521\":1}}],[\"开头\",{\"1\":{\"213\":1}}],[\"开始时就分配全部空间\",{\"1\":{\"447\":1}}],[\"开始事务时创建\",{\"1\":{\"376\":1}}],[\"开始支持\",{\"1\":{\"361\":1}}],[\"开始支持的一个\",{\"1\":{\"184\":1}}],[\"开始的角标\",{\"1\":{\"67\":1}}],[\"开发效率降低\",{\"1\":{\"616\":1}}],[\"开发\",{\"0\":{\"68\":1}}],[\"开启驼峰命名转换\",{\"1\":{\"607\":1}}],[\"开启多文件\",{\"1\":{\"521\":1}}],[\"开启事务\",{\"1\":{\"512\":1}}],[\"开启自动代理功能\",{\"1\":{\"582\":1}}],[\"开启自动提交\",{\"1\":{\"503\":1}}],[\"开启自动扫描mapper接口\",{\"1\":{\"258\":1}}],[\"开启自动扫描包\",{\"1\":{\"215\":1}}],[\"开启全局缓存\",{\"1\":{\"488\":1}}],[\"开启二级缓存\",{\"0\":{\"486\":1}}],[\"开启守护线程\",{\"1\":{\"469\":1}}],[\"开启线程\",{\"1\":{\"391\":1}}],[\"开启连接\",{\"1\":{\"384\":1}}],[\"开启controller层组件扫描\",{\"1\":{\"260\":1}}],[\"开启默认servlet防止无法获取静态资源\",{\"1\":{\"260\":1}}],[\"开启默认处理器\",{\"1\":{\"215\":1}}],[\"开启对jackson的乱码处理支持\",{\"1\":{\"260\":1}}],[\"开启组件自动扫描\",{\"1\":{\"259\":1}}],[\"开启mvc的注解驱动\",{\"1\":{\"260\":1}}],[\"开启mvc的注解支持\",{\"1\":{\"215\":1}}],[\"开启mapper层扫描\",{\"1\":{\"233\":1}}],[\"开启spring注解支持\",{\"1\":{\"215\":1,\"258\":1}}],[\"开启服务熔断\",{\"1\":{\"147\":1}}],[\"开启响应gzip压缩\",{\"1\":{\"118\":1}}],[\"开启支持压缩的mime\",{\"1\":{\"118\":1}}],[\"开启记住我功能\",{\"1\":{\"62\":1}}],[\"开启复杂邮件\",{\"1\":{\"44\":1}}],[\"开启定时任务\",{\"0\":{\"26\":1}}],[\"开启\",{\"0\":{\"103\":1,\"107\":1,\"118\":1,\"119\":1,\"152\":1,\"202\":1},\"1\":{\"19\":1,\"51\":1,\"118\":1}}],[\"开启模板缓存\",{\"1\":{\"19\":1}}],[\"开启异步支持\",{\"0\":{\"14\":1}}],[\"从而提供了\",{\"1\":{\"625\":1}}],[\"从而使类在\",{\"1\":{\"587\":1}}],[\"从而允许程序设计解耦\",{\"1\":{\"587\":1}}],[\"从而做到一个线程管理多个通道\",{\"1\":{\"537\":1}}],[\"从缓存中查询\",{\"1\":{\"480\":1}}],[\"从上往下执行\",{\"1\":{\"427\":1}}],[\"从上下文对象中获取请求对象\",{\"1\":{\"205\":1}}],[\"从一个线程观察另外一个线程的时候\",{\"1\":{\"424\":1}}],[\"从更底层的来说\",{\"1\":{\"420\":1}}],[\"从提供者地址列表中\",{\"1\":{\"328\":1}}],[\"从指定注册中心注册获取服务列表\",{\"1\":{\"291\":1}}],[\"从虚拟机参数到本地文件优先级依次降低\",{\"1\":{\"281\":1}}],[\"从配置中心读取\",{\"1\":{\"281\":1}}],[\"从servlet被创建到servlet被销毁的过程\",{\"1\":{\"254\":1}}],[\"从文件中读取内容并输出\",{\"1\":{\"537\":1}}],[\"从文件中读取\",{\"1\":{\"241\":1}}],[\"从字节流中读取\",{\"1\":{\"241\":1}}],[\"从字符串中读取\",{\"1\":{\"241\":1}}],[\"从json解析出object对象\",{\"1\":{\"237\":1}}],[\"从1开始\",{\"1\":{\"67\":1}}],[\"从\",{\"1\":{\"67\":1,\"176\":1,\"281\":3,\"539\":1}}],[\"遍历得到的是\",{\"1\":{\"67\":1}}],[\"遍历集合支持的类型\",{\"1\":{\"67\":1}}],[\"迭代器\",{\"1\":{\"67\":1}}],[\"枚举是内部枚举\",{\"1\":{\"522\":1}}],[\"枚举类可以禁止使用反射创建实例\",{\"1\":{\"448\":1}}],[\"枚举类型\",{\"1\":{\"263\":1}}],[\"枚举的常量\",{\"1\":{\"275\":1}}],[\"枚举\",{\"1\":{\"67\":1,\"275\":1}}],[\"循环执行的步骤\",{\"1\":{\"574\":1}}],[\"循环执行步骤有三步\",{\"1\":{\"574\":1}}],[\"循环阻塞在涉及固定大小的线程方的程序中很有用\",{\"1\":{\"477\":1}}],[\"循环\",{\"1\":{\"67\":1}}],[\"就像下面这样\",{\"1\":{\"608\":1}}],[\"就像是数据库主键一样\",{\"1\":{\"521\":1}}],[\"就调用\",{\"1\":{\"558\":1}}],[\"就创建一个线程\",{\"1\":{\"536\":1}}],[\"就关闭它\",{\"1\":{\"513\":1}}],[\"就不再需要它了\",{\"1\":{\"513\":1}}],[\"就不能对其进行\",{\"1\":{\"422\":1}}],[\"就可以将声明性事务管理集成到应用程序中\",{\"1\":{\"623\":1}}],[\"就可以完成文件的传输\",{\"1\":{\"539\":1}}],[\"就可以打开一个\",{\"1\":{\"513\":1}}],[\"就可以从二级缓存中获取内容\",{\"1\":{\"489\":1}}],[\"就可以使用\",{\"1\":{\"180\":1}}],[\"就让他去通知另外一个人\",{\"1\":{\"462\":1}}],[\"就让他等待\",{\"1\":{\"462\":1}}],[\"就必须阻塞等待生产\",{\"1\":{\"394\":1}}],[\"就必须阻塞等待\",{\"1\":{\"394\":1}}],[\"就会自动将内存中的内容进行移除\",{\"1\":{\"488\":1}}],[\"就会使用到这个指令\",{\"1\":{\"421\":1}}],[\"就会使用后面的默认值\",{\"1\":{\"67\":1}}],[\"就会扩容成\",{\"1\":{\"405\":1}}],[\"就会在回收前将这个虚引用加入到引用队列中\",{\"1\":{\"369\":1}}],[\"就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程\",{\"1\":{\"350\":1}}],[\"就要实现\",{\"1\":{\"229\":1}}],[\"就从最初的位置开始重写\",{\"1\":{\"143\":1}}],[\"就把断路器设置为\",{\"1\":{\"143\":1}}],[\"就是一个内存块\",{\"1\":{\"537\":1}}],[\"就是怼变量实施\",{\"1\":{\"422\":1}}],[\"就是为了屏蔽系统和硬件的差异\",{\"1\":{\"419\":1}}],[\"就是\",{\"1\":{\"347\":3,\"363\":1}}],[\"就是动态刷新的接口\",{\"1\":{\"78\":1}}],[\"就是上面提到的\",{\"1\":{\"19\":1}}],[\"当类配置了\",{\"1\":{\"631\":1}}],[\"当把\",{\"1\":{\"631\":1}}],[\"当中\",{\"1\":{\"627\":1}}],[\"当中的实际值相同时\",{\"1\":{\"398\":1}}],[\"当在代理实例上调用方法时\",{\"1\":{\"617\":1}}],[\"当在构造方法中设置\",{\"1\":{\"407\":1}}],[\"当新事件发生时\",{\"1\":{\"573\":1}}],[\"当新任务在方法\",{\"1\":{\"473\":1}}],[\"当向一个\",{\"1\":{\"547\":1}}],[\"当客户端连接时\",{\"1\":{\"537\":1}}],[\"当然自己写也是可以的\",{\"1\":{\"536\":1}}],[\"当实体类中只有基本类型时\",{\"1\":{\"519\":1}}],[\"当使用基于字段的依赖注入时\",{\"1\":{\"587\":1}}],[\"当使用\",{\"1\":{\"507\":1}}],[\"当使用可迭代对象或者数组时\",{\"1\":{\"507\":1}}],[\"当线程没有结束\",{\"1\":{\"370\":1}}],[\"当线程池满时应立即失败\",{\"1\":{\"288\":1,\"293\":1}}],[\"当线程池满时\",{\"1\":{\"288\":1,\"293\":1}}],[\"当\",{\"1\":{\"363\":2,\"487\":1}}],[\"当下一个事务访问该表的时候\",{\"1\":{\"359\":1}}],[\"当一个线程修改了自己工作内存中变量\",{\"1\":{\"420\":1}}],[\"当一个事务试图对整个表加排它锁之前\",{\"1\":{\"360\":1}}],[\"当一个事务试图对整个表进行加共享锁之前\",{\"1\":{\"360\":1}}],[\"当一个事务为数据加上写锁时\",{\"1\":{\"358\":1}}],[\"当一个事务为数据加上读锁以后\",{\"1\":{\"358\":1}}],[\"当一个接口有多个实现\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"当引用\",{\"1\":{\"317\":1}}],[\"当引用阿里巴巴的\",{\"1\":{\"317\":1}}],[\"当出现失败\",{\"1\":{\"313\":1}}],[\"当某一台提供者挂时\",{\"1\":{\"310\":1}}],[\"当请求调到第二台时就卡在那\",{\"1\":{\"308\":1}}],[\"当配置中心连接失败时\",{\"1\":{\"292\":1}}],[\"当物理层断开时\",{\"1\":{\"288\":1}}],[\"当协议支持多种序列化方式时使用\",{\"1\":{\"288\":1,\"293\":1}}],[\"当address没有带端口时使用此端口做为缺省值\",{\"1\":{\"287\":1}}],[\"当停止tomcat时也就销毁的servlet\",{\"1\":{\"254\":1}}],[\"当servlet被销毁时执行该方法\",{\"1\":{\"254\":1}}],[\"当servlet第一次被创建对象时执行该方法\",{\"1\":{\"254\":1}}],[\"当datatype为script时默认false\",{\"1\":{\"207\":1}}],[\"当你使用某些功能时就需要这些\",{\"1\":{\"180\":1}}],[\"当total==5以后\",{\"1\":{\"173\":1}}],[\"当设置为\",{\"1\":{\"143\":1}}],[\"当隔离策略选择信号他隔离的时候\",{\"1\":{\"143\":1}}],[\"当定义的\",{\"1\":{\"117\":1}}],[\"当前线程暂停但是不阻塞\",{\"1\":{\"466\":1}}],[\"当前代表的仅仅是新指向的对象\",{\"1\":{\"377\":1}}],[\"当前\",{\"1\":{\"317\":1}}],[\"当前模块的版本\",{\"1\":{\"295\":1}}],[\"当前模块名称\",{\"1\":{\"295\":1}}],[\"当前应用的版本\",{\"1\":{\"286\":1}}],[\"当前应用名称\",{\"1\":{\"286\":1}}],[\"当前进行服务降级的服务\",{\"1\":{\"204\":1}}],[\"当前服务不可用\",{\"1\":{\"204\":1}}],[\"当前提供服务的机器号\",{\"1\":{\"173\":1}}],[\"当前对外提供服务的服务器地址\",{\"1\":{\"173\":1}}],[\"当前遍历到的元素\",{\"1\":{\"67\":1}}],[\"当前面的表达式值为null时\",{\"1\":{\"67\":1}}],[\"当访问\",{\"1\":{\"47\":1}}],[\"外部化配置\",{\"1\":{\"281\":1}}],[\"外部的才是通过\",{\"1\":{\"67\":1}}],[\"外进行\",{\"1\":{\"67\":1}}],[\"因此最外层type为student\",{\"1\":{\"517\":1}}],[\"因此是不能被共享的\",{\"1\":{\"513\":1}}],[\"因此默认值是\",{\"1\":{\"487\":1}}],[\"因此这些对象不能被修改\",{\"1\":{\"487\":1}}],[\"因此\",{\"1\":{\"425\":1,\"513\":2,\"587\":2}}],[\"因此消费者与提供者是面向接口交互的\",{\"1\":{\"314\":1}}],[\"因此需要在配置文件中配置\",{\"1\":{\"165\":1}}],[\"因此即便是静态环境下\",{\"1\":{\"67\":1}}],[\"因此运算符尽量放在\",{\"1\":{\"67\":1}}],[\"因为一旦标注在\",{\"1\":{\"631\":1}}],[\"因为没有其他可能的方法\",{\"1\":{\"587\":1}}],[\"因为这些字段必须在类实例化时实例化\",{\"1\":{\"587\":1}}],[\"因为这个接口有许多的方法需要实现\",{\"1\":{\"548\":1}}],[\"因为我们没有在内存层面去拷贝数据\",{\"1\":{\"539\":1}}],[\"因为系统调用还是\",{\"1\":{\"539\":1}}],[\"因为错误的使用会导致非常严重的并发问题\",{\"1\":{\"513\":1}}],[\"因为它可以在等待的线程被释放之后重新使用\",{\"1\":{\"477\":1}}],[\"因为更多时候\",{\"1\":{\"427\":1}}],[\"因为jmm制定了一套标准来保证开发者在编写多线程程序的时候\",{\"1\":{\"420\":1}}],[\"因为在不同的硬件生产商和不同的操作系统下\",{\"1\":{\"419\":1}}],[\"因为linkedblockingqueue\",{\"1\":{\"143\":1}}],[\"因为\",{\"1\":{\"67\":2,\"377\":1,\"426\":1,\"495\":1,\"522\":1}}],[\"因为注入发生在实例化之后\",{\"1\":{\"44\":1}}],[\"内部需要使用\",{\"1\":{\"557\":1}}],[\"内部的机制就可以自动不断地查询\",{\"1\":{\"547\":1}}],[\"内部的是通过\",{\"1\":{\"67\":1}}],[\"内核\",{\"1\":{\"539\":1}}],[\"内运行的任务的抽象基类\",{\"1\":{\"408\":1}}],[\"内存饱满\",{\"1\":{\"488\":1}}],[\"内存划分\",{\"0\":{\"420\":1},\"1\":{\"420\":1}}],[\"内存的访问逻辑有一定的差异\",{\"1\":{\"419\":1}}],[\"内存模型\",{\"1\":{\"419\":2}}],[\"内存地址\",{\"1\":{\"398\":1}}],[\"内存泄漏问题\",{\"0\":{\"364\":1,\"370\":1}}],[\"内容就是xml的内容\",{\"1\":{\"319\":1}}],[\"内容等在内的完整信息\",{\"1\":{\"184\":1}}],[\"内置日志工厂将会把日志工作委托给下面的实现之一\",{\"1\":{\"515\":1}}],[\"内置了一个强大的事务性查询缓存机制\",{\"1\":{\"481\":1}}],[\"内置注解\",{\"0\":{\"266\":1}}],[\"内置对象\",{\"1\":{\"67\":1}}],[\"内仅收到了19个请求\",{\"1\":{\"143\":1}}],[\"|or\",{\"1\":{\"507\":1}}],[\"||\",{\"1\":{\"334\":1,\"405\":1,\"473\":5}}],[\"|\",{\"1\":{\"67\":1,\"208\":1}}],[\"|欢迎您\",{\"1\":{\"67\":1}}],[\"欢迎您\",{\"1\":{\"67\":1}}],[\"数量减一\",{\"1\":{\"476\":1}}],[\"数组注入\",{\"1\":{\"593\":1}}],[\"数组的长度\",{\"1\":{\"567\":1}}],[\"数组\",{\"1\":{\"69\":1,\"338\":1}}],[\"数组及其它一切符合数组结果的对象\",{\"1\":{\"67\":1}}],[\"数字\",{\"1\":{\"67\":1}}],[\"数字字面值\",{\"1\":{\"67\":1}}],[\"数值\",{\"1\":{\"67\":1}}],[\"数据读取和写入是从用户空间到内核空间来回复制\",{\"1\":{\"539\":1}}],[\"数据读取\",{\"1\":{\"537\":1}}],[\"数据读取到一个它稍后处理的缓冲区\",{\"1\":{\"537\":1}}],[\"数据的解码器\",{\"1\":{\"533\":1}}],[\"数据源对应的java\",{\"1\":{\"610\":1}}],[\"数据源\",{\"0\":{\"496\":1},\"1\":{\"492\":1}}],[\"数据源名称\",{\"1\":{\"19\":1}}],[\"数据从工作内存同步回主内存\",{\"1\":{\"422\":1}}],[\"数据流\",{\"0\":{\"333\":1}}],[\"数据\",{\"1\":{\"207\":1}}],[\"数据库引擎不支持事务\",{\"1\":{\"632\":1}}],[\"数据库未进行任何修改\",{\"1\":{\"630\":1}}],[\"数据库厂商标识\",{\"1\":{\"492\":1}}],[\"数据库总是从一个一致性状态转换到另外一个一致性的状态\",{\"1\":{\"373\":1}}],[\"数据库宕掉后\",{\"1\":{\"305\":1}}],[\"数据库用户名\",{\"1\":{\"19\":1}}],[\"数据库连接地址\",{\"1\":{\"19\":1}}],[\"数据库驱动\",{\"1\":{\"19\":1}}],[\"字节向\",{\"1\":{\"532\":1}}],[\"字节流\",{\"0\":{\"330\":1}}],[\"字节\",{\"1\":{\"288\":1,\"293\":1}}],[\"字节码\",{\"1\":{\"274\":1}}],[\"字段来实现的类的解耦\",{\"1\":{\"587\":1}}],[\"字段的值\",{\"1\":{\"425\":1}}],[\"字段\",{\"1\":{\"184\":2,\"354\":1}}],[\"字符流\",{\"0\":{\"331\":1}}],[\"字符中的任何一种\",{\"1\":{\"67\":1}}],[\"字符\",{\"1\":{\"67\":1}}],[\"字符串中包含转义反斜杠\",{\"1\":{\"244\":1}}],[\"字符串即可\",{\"1\":{\"209\":1}}],[\"字符串数组\",{\"1\":{\"71\":1}}],[\"字符串\",{\"1\":{\"67\":1,\"69\":1}}],[\"字符串拼接\",{\"1\":{\"67\":1}}],[\"字符串字面值\",{\"1\":{\"67\":1}}],[\"字面值\",{\"1\":{\"67\":1}}],[\"接着\",{\"1\":{\"539\":1}}],[\"接收服务端回传\",{\"1\":{\"566\":1}}],[\"接收的消息类型必须与待处理的消息类型一致\",{\"1\":{\"532\":1}}],[\"接收一个参数\",{\"1\":{\"415\":1}}],[\"接收数据报文\",{\"1\":{\"382\":1}}],[\"接收成功\",{\"1\":{\"380\":1}}],[\"接收文件\",{\"1\":{\"380\":1}}],[\"接收发送socket\",{\"1\":{\"379\":1}}],[\"接收网络读写中断\",{\"1\":{\"293\":1}}],[\"接收两个参数\",{\"1\":{\"134\":1,\"136\":1}}],[\"接受一个参数作为主机列表\",{\"1\":{\"131\":1}}],[\"接管\",{\"1\":{\"67\":1}}],[\"接口从磁盘读取或写入\",{\"1\":{\"539\":1}}],[\"接口可以自定义缓存\",{\"1\":{\"481\":1}}],[\"接口可以包含变量\",{\"1\":{\"346\":1}}],[\"接口等描述信息外\",{\"1\":{\"354\":1}}],[\"接口中的方法可以是\",{\"1\":{\"346\":2}}],[\"接口中的方法必须是\",{\"1\":{\"346\":1}}],[\"接口静态方法只能通过接口调用\",{\"1\":{\"346\":1}}],[\"接口支持多继承\",{\"1\":{\"346\":1}}],[\"接口与抽象类\",{\"0\":{\"344\":1}}],[\"接口实现类\",{\"1\":{\"319\":2,\"322\":1,\"392\":1}}],[\"接口模块及\",{\"0\":{\"317\":1}}],[\"接口名\",{\"1\":{\"289\":3,\"293\":2,\"346\":1,\"582\":1}}],[\"接口级次之\",{\"1\":{\"283\":1}}],[\"接口并至少重写\",{\"1\":{\"229\":1}}],[\"接口的实现类\",{\"1\":{\"606\":1}}],[\"接口的子接口\",{\"1\":{\"264\":1}}],[\"接口的\",{\"1\":{\"204\":1}}],[\"接口的响应头必须要有\",{\"1\":{\"184\":1}}],[\"接口的类\",{\"1\":{\"67\":1}}],[\"接口上要添加\",{\"1\":{\"164\":1}}],[\"接口上应该添加\",{\"1\":{\"51\":1}}],[\"接口上\",{\"1\":{\"51\":1}}],[\"接口及\",{\"0\":{\"51\":1}}],[\"接口\",{\"0\":{\"346\":1,\"392\":1,\"393\":1},\"1\":{\"46\":1,\"182\":1,\"214\":1,\"233\":1,\"261\":1,\"264\":1,\"347\":1,\"392\":1,\"393\":1,\"407\":1,\"411\":1,\"506\":1,\"508\":1,\"552\":1,\"558\":3,\"606\":2,\"614\":1}}],[\"接口即可\",{\"1\":{\"35\":1}}],[\"访问代理对象的人\",{\"1\":{\"613\":1}}],[\"访问数据\",{\"1\":{\"376\":1}}],[\"访问文件\",{\"0\":{\"338\":1}}],[\"访问对应端口即可\",{\"1\":{\"300\":1}}],[\"访问地址\",{\"1\":{\"153\":1}}],[\"访问\",{\"0\":{\"153\":1},\"1\":{\"66\":1,\"69\":1,\"78\":1,\"79\":1}}],[\"访问端口\",{\"1\":{\"19\":1}}],[\"且通过线程名并通过多个\",{\"1\":{\"536\":1}}],[\"且通过这种方式不需要在mapper接口上添加\",{\"1\":{\"258\":1}}],[\"且大小到达指定尺寸的时候产生一个新的文件\",{\"1\":{\"515\":1}}],[\"且大小要已知\",{\"1\":{\"383\":1}}],[\"且接口和配置文件必须在同一个包下\",{\"1\":{\"499\":1}}],[\"且睡眠过程中不会释放锁\",{\"1\":{\"465\":1}}],[\"且unlock要放到finally第一行\",{\"1\":{\"434\":1}}],[\"且实际容量必须是2的整数次幂\",{\"1\":{\"405\":1}}],[\"且其类型标示为\",{\"1\":{\"363\":1}}],[\"且创建过程要使用\",{\"1\":{\"338\":1}}],[\"且序列化\",{\"1\":{\"334\":1}}],[\"且若仅配置\",{\"1\":{\"244\":1}}],[\"且都要在\",{\"1\":{\"214\":1}}],[\"且都有\",{\"1\":{\"17\":1}}],[\"且如果要使用\",{\"1\":{\"317\":1}}],[\"且如果\",{\"1\":{\"187\":1}}],[\"且返回值必须是原方法的返回类型或其子类\",{\"1\":{\"144\":1}}],[\"且必须放在默认静态资源路径下\",{\"1\":{\"71\":1}}],[\"且优先级为\",{\"1\":{\"69\":1}}],[\"且这个访问路径会被映射到classpath\",{\"1\":{\"69\":1}}],[\"且\",{\"1\":{\"67\":1}}],[\"且默认路径是\",{\"1\":{\"66\":1}}],[\"我\",{\"1\":{\"525\":1}}],[\"我们一眼就可以察觉到哪里不对劲\",{\"1\":{\"587\":1}}],[\"我们一般都需要提供两个\",{\"1\":{\"552\":1}}],[\"我们用着很爽\",{\"1\":{\"587\":1}}],[\"我们会在类中逐渐添加越来越多的依赖项\",{\"1\":{\"587\":1}}],[\"我们不必调用\",{\"1\":{\"533\":1}}],[\"我们是分析一个并发程序是否安全\",{\"1\":{\"427\":1}}],[\"我们选择性的使用就好了\",{\"1\":{\"269\":1}}],[\"我们可以利用注解灵活配置转账的限额\",{\"1\":{\"265\":1}}],[\"我们可以在配置文件中使用\",{\"1\":{\"66\":1}}],[\"我们5次\",{\"1\":{\"173\":1}}],[\"我们的index\",{\"1\":{\"173\":1}}],[\"我们指针才能往下走\",{\"1\":{\"173\":1}}],[\"我们也可以获取迭代的状态对象\",{\"1\":{\"67\":1}}],[\"我们取一个值可能为空\",{\"1\":{\"67\":1}}],[\"我改成了log4j2\",{\"1\":{\"31\":1}}],[\"而视图是一个接口\",{\"1\":{\"627\":1}}],[\"而变成被动的接收对象\",{\"1\":{\"596\":1}}],[\"而内核空间的数据是通过操作系统层面的\",{\"1\":{\"539\":1}}],[\"而下面的是数据类型\",{\"1\":{\"522\":1}}],[\"而可读写的缓存会\",{\"1\":{\"487\":1}}],[\"而可重复读级别则在第一次读的时候生成一个\",{\"1\":{\"376\":1}}],[\"而少于\",{\"1\":{\"473\":1}}],[\"而没有很好的理解到\",{\"1\":{\"426\":1}}],[\"而且要求被装配的对象必须存在于\",{\"1\":{\"589\":1}}],[\"而且\",{\"1\":{\"426\":1,\"539\":1}}],[\"而且按概率使用权重后也比较均匀\",{\"1\":{\"307\":1}}],[\"而且为了在纯静态环境下可以运行\",{\"1\":{\"67\":1}}],[\"而mock只在出现非业务异常\",{\"1\":{\"289\":1,\"291\":1}}],[\"而不干扰其他调用者或线程所做的潜在修改\",{\"1\":{\"482\":1}}],[\"而不是访问某些\",{\"1\":{\"478\":1}}],[\"而不是排队\",{\"1\":{\"288\":1,\"293\":1}}],[\"而不能直接去操作主内存中的变量\",{\"1\":{\"420\":1}}],[\"而不能对数据加写锁\",{\"1\":{\"358\":1}}],[\"而不用每次都去修改我们的业务代码\",{\"1\":{\"265\":1}}],[\"而不配置\",{\"1\":{\"244\":1}}],[\"而我们定义接口的方法就相当于注解的属性\",{\"1\":{\"264\":1}}],[\"而使用\",{\"1\":{\"235\":1}}],[\"而非\",{\"1\":{\"164\":1}}],[\"而通过该属性就可以调整拒绝请求的队列大小了\",{\"1\":{\"143\":1}}],[\"而\",{\"1\":{\"140\":1,\"261\":1,\"508\":1,\"520\":1,\"549\":1,\"632\":1}}],[\"而出现大量的服务被清除\",{\"1\":{\"102\":1}}],[\"而是一个标记\",{\"1\":{\"521\":1}}],[\"而是采用表达式后面跟着的默认值\",{\"1\":{\"67\":1}}],[\"而是\",{\"1\":{\"67\":1}}],[\"而配置类中做出限制时则不需要\",{\"1\":{\"63\":1}}],[\"而这个类继承了\",{\"1\":{\"46\":1}}],[\"实质上是将这些依赖对外隐藏了\",{\"1\":{\"587\":1}}],[\"实际开发中往往存在很多接口\",{\"1\":{\"314\":1}}],[\"实际含义视具体配置中心而不同\",{\"1\":{\"292\":1}}],[\"实际上是指响应头的\",{\"1\":{\"184\":1}}],[\"实例的引用放在任何类型的托管作用域中\",{\"1\":{\"513\":1}}],[\"实例的引用放在一个类的静态域\",{\"1\":{\"513\":1}}],[\"实例的最佳作用域是方法作用域\",{\"1\":{\"513\":1}}],[\"实例\",{\"1\":{\"508\":1,\"513\":1,\"552\":2,\"607\":1}}],[\"实例来构建出\",{\"1\":{\"508\":1}}],[\"实例只能选择一种环境\",{\"1\":{\"494\":1}}],[\"实例化\",{\"1\":{\"254\":1}}],[\"实例是否在eureka服务器上注册自己的信息以供其他服务发现\",{\"1\":{\"102\":1}}],[\"实现增删改查\",{\"1\":{\"606\":1}}],[\"实现拷贝\",{\"0\":{\"540\":1,\"541\":1}}],[\"实现在线群聊系统\",{\"0\":{\"538\":1}}],[\"实现的\",{\"1\":{\"472\":1}}],[\"实现的队列\",{\"1\":{\"143\":1}}],[\"实现类中设置一个\",{\"1\":{\"606\":1}}],[\"实现类\",{\"1\":{\"432\":1,\"617\":1}}],[\"实现提供比使用\",{\"1\":{\"432\":1}}],[\"实现多线程的基本方法\",{\"0\":{\"390\":1}}],[\"实现接口\",{\"1\":{\"317\":1}}],[\"实现服务降级\",{\"1\":{\"204\":1}}],[\"实现调用\",{\"1\":{\"164\":1}}],[\"实现\",{\"0\":{\"214\":1,\"254\":1,\"392\":1,\"393\":1,\"460\":1,\"556\":1,\"582\":1},\"1\":{\"139\":1,\"392\":1,\"393\":1,\"515\":2,\"589\":1,\"627\":1}}],[\"实现了业务的分工\",{\"1\":{\"615\":1}}],[\"实现了控制反转\",{\"1\":{\"596\":1,\"599\":1}}],[\"实现了一种高级形式的拦截过滤器模式\",{\"1\":{\"549\":1}}],[\"实现了使用\",{\"1\":{\"69\":1}}],[\"实现了\",{\"1\":{\"67\":1,\"407\":1,\"558\":1}}],[\"实现userdetailsservice接口\",{\"1\":{\"63\":1}}],[\"实体类有两个成员变量\",{\"1\":{\"567\":1}}],[\"实体类\",{\"1\":{\"505\":1}}],[\"实体类实现\",{\"1\":{\"488\":1}}],[\"实体类全部放在一个工程中\",{\"1\":{\"314\":1}}],[\"实体类只需要加入\",{\"1\":{\"22\":1}}],[\"实体类代码\",{\"1\":{\"20\":1,\"483\":1}}],[\"向目标对象应用通知之后创建的对象\",{\"1\":{\"581\":1}}],[\"向字节转换编码器\",{\"1\":{\"532\":1}}],[\"向内接收是入站\",{\"1\":{\"529\":1}}],[\"向外发送是出站\",{\"1\":{\"529\":1}}],[\"向数据库发送sql的对象statement\",{\"1\":{\"510\":1}}],[\"向数据库发送\",{\"1\":{\"510\":1}}],[\"向注册中心订阅自己所需的服务\",{\"1\":{\"328\":1}}],[\"向注册中心注册自己提供的服务\",{\"1\":{\"328\":1}}],[\"向指定注册中心注册\",{\"1\":{\"289\":1,\"293\":1,\"294\":1}}],[\"向\",{\"1\":{\"93\":1,\"409\":1,\"622\":1}}],[\"向ioc中注入加密bean\",{\"1\":{\"62\":1}}],[\"向后端发起请求\",{\"1\":{\"36\":1}}],[\"全文索引\",{\"1\":{\"356\":1}}],[\"全局级配置文件所映射到的key\",{\"1\":{\"292\":1}}],[\"全局配置再次之\",{\"1\":{\"283\":1}}],[\"全部依赖\",{\"0\":{\"251\":1}}],[\"全部放开\",{\"1\":{\"62\":1}}],[\"全都可以炸完\",{\"1\":{\"44\":1}}],[\"由容器来注入\",{\"1\":{\"592\":1}}],[\"由school管理前面的两个类型\",{\"1\":{\"522\":1}}],[\"由springsecurity实现\",{\"1\":{\"62\":1}}],[\"由日志文件可以看出\",{\"1\":{\"483\":3}}],[\"由cpu重新调度\",{\"1\":{\"466\":1}}],[\"由内存+redo\",{\"1\":{\"375\":1}}],[\"由其他三大特性保证\",{\"1\":{\"375\":1}}],[\"由何保证\",{\"0\":{\"375\":1}}],[\"由\",{\"1\":{\"370\":1,\"375\":2,\"539\":1}}],[\"由原来的\",{\"1\":{\"140\":1}}],[\"由第二个if及其中的代码可知\",{\"1\":{\"69\":1}}],[\"由此\",{\"1\":{\"66\":1}}],[\"由于userserviceimpl中类成员是一个userdao对象\",{\"1\":{\"597\":1}}],[\"由于服务端一次读取到字节数是不确定的\",{\"1\":{\"565\":1}}],[\"由于只用了\",{\"1\":{\"558\":1}}],[\"由于只添加了\",{\"1\":{\"558\":1}}],[\"由于不可能知道远程节点是否会一次性发送一个完整的信息\",{\"1\":{\"530\":1}}],[\"由于teacher中包含一个学生列表\",{\"1\":{\"518\":1}}],[\"由于实体类中\",{\"1\":{\"505\":1}}],[\"由于引用已被赋值\",{\"1\":{\"448\":1}}],[\"由于指令重排\",{\"1\":{\"448\":1}}],[\"由于执行任务时遇到不可恢复的错误而终止的内部工作线程的处理程序\",{\"1\":{\"409\":1}}],[\"由于记录戳被修改\",{\"1\":{\"388\":1}}],[\"由于已经配置mapperscannerconfigurer扫描mapper接口\",{\"1\":{\"259\":1}}],[\"由于浏览器禁止ajax跨域\",{\"1\":{\"241\":1}}],[\"由于设置为true\",{\"1\":{\"203\":1}}],[\"由于早期版本\",{\"1\":{\"165\":1}}],[\"由于开启\",{\"1\":{\"118\":1}}],[\"由于\",{\"1\":{\"22\":1,\"140\":1,\"317\":1,\"508\":1,\"558\":1}}],[\"指明服务提供方对应路径的请求方式\",{\"1\":{\"164\":1}}],[\"指出自定义界面中的密码\",{\"1\":{\"62\":1}}],[\"指出自定义界面中的用户名\",{\"1\":{\"62\":1}}],[\"指定服务端channel类型\",{\"1\":{\"575\":1}}],[\"指定服务器主机和端口号\",{\"1\":{\"379\":1}}],[\"指定主机端口号\",{\"1\":{\"538\":1}}],[\"指定主机地址\",{\"1\":{\"538\":1}}],[\"指定范围\",{\"1\":{\"537\":1}}],[\"指定生成java文件的名字\",{\"1\":{\"521\":1}}],[\"指定生成的java文件在哪个包下\",{\"1\":{\"521\":1}}],[\"指定版本\",{\"1\":{\"521\":1}}],[\"指定清除策略\",{\"1\":{\"487\":1}}],[\"指定输入输出流\",{\"1\":{\"341\":1}}],[\"指定写入位置\",{\"1\":{\"336\":1}}],[\"指定字节流和字符集\",{\"1\":{\"332\":1}}],[\"指定protocol\",{\"1\":{\"292\":1}}],[\"指定provider\",{\"1\":{\"289\":1}}],[\"指定数据库配置文件\",{\"1\":{\"258\":1}}],[\"指定的是xml方式配置文件\",{\"1\":{\"256\":1}}],[\"指定的支付记录\",{\"1\":{\"164\":1}}],[\"指定spring\",{\"1\":{\"256\":1}}],[\"指定切点并在\",{\"1\":{\"235\":1}}],[\"指定\",{\"1\":{\"218\":1,\"305\":1}}],[\"指定需要托底处理的服务名\",{\"1\":{\"204\":1}}],[\"指定分组\",{\"1\":{\"189\":1}}],[\"指定打包方式为\",{\"1\":{\"181\":1}}],[\"指定打包方式\",{\"1\":{\"180\":1}}],[\"指定要使用的环境\",{\"1\":{\"24\":1}}],[\"指定mybatis的实体目录\",{\"1\":{\"19\":1}}],[\"指定mybatis的mapper文件\",{\"1\":{\"19\":1}}],[\"判断够不够8个字节\",{\"1\":{\"532\":1}}],[\"判断\",{\"1\":{\"205\":1}}],[\"判断当前用户是否拥有指定的权限\",{\"1\":{\"60\":1}}],[\"判断用户是否已经登陆认证\",{\"1\":{\"60\":1}}],[\"获得依赖对象的方式反转了\",{\"1\":{\"600\":1}}],[\"获得了资源b\",{\"1\":{\"456\":2}}],[\"获得了资源a\",{\"1\":{\"456\":2}}],[\"获得泛型的参数类型\",{\"1\":{\"279\":1}}],[\"获得\",{\"1\":{\"270\":1,\"508\":1}}],[\"获得当前用户的全部角色\",{\"1\":{\"60\":1}}],[\"获得当前用户的用户名\",{\"1\":{\"60\":1}}],[\"获取容器时要调用注解对应的上下文\",{\"1\":{\"602\":1}}],[\"获取数据\",{\"1\":{\"573\":1}}],[\"获取数据中的事务\",{\"1\":{\"376\":1}}],[\"获取系统处理器个数\",{\"1\":{\"474\":1}}],[\"获取系统类加载器可以加载的路径\",{\"1\":{\"271\":1}}],[\"获取系统类加载器的父类\",{\"1\":{\"271\":1}}],[\"获取系统类的加载器\",{\"1\":{\"271\":1}}],[\"获取资源\",{\"1\":{\"454\":1}}],[\"获取资源文件中的数据\",{\"1\":{\"67\":1}}],[\"获取了第\",{\"1\":{\"396\":1}}],[\"获取队首元素\",{\"1\":{\"395\":2}}],[\"获取结果\",{\"1\":{\"393\":1,\"409\":1,\"558\":1}}],[\"获取服务端返回的信息并输出\",{\"1\":{\"380\":1}}],[\"获取服务器端的路径\",{\"1\":{\"223\":1}}],[\"获取输入流\",{\"1\":{\"379\":1,\"384\":1}}],[\"获取输出流\",{\"1\":{\"379\":1}}],[\"获取的是事务id最大的记录\",{\"1\":{\"376\":1}}],[\"获取和设置线程的变量值\",{\"1\":{\"370\":1}}],[\"获取用户年龄\",{\"1\":{\"315\":1}}],[\"获取配置的超时时间\",{\"1\":{\"292\":1}}],[\"获取构造函数\",{\"1\":{\"279\":1}}],[\"获取接口信息\",{\"1\":{\"279\":1}}],[\"获取父类的class对象\",{\"1\":{\"279\":1}}],[\"获取包信息\",{\"1\":{\"279\":1}}],[\"获取类修饰符\",{\"1\":{\"279\":1}}],[\"获取所有注册的key\",{\"1\":{\"538\":1}}],[\"获取所有\",{\"1\":{\"272\":1}}],[\"获取所有支付记录\",{\"1\":{\"164\":1,\"182\":1}}],[\"获取注解属性\",{\"0\":{\"272\":1}}],[\"获取为null\",{\"1\":{\"271\":1}}],[\"获取扩展类加载器的父类\",{\"1\":{\"271\":1}}],[\"获取文件\",{\"1\":{\"226\":1}}],[\"获取上传的文件名\",{\"1\":{\"223\":1}}],[\"获取到数据后\",{\"1\":{\"208\":1}}],[\"获取token信息\",{\"1\":{\"205\":1}}],[\"获取zuul提供的上下文对象\",{\"1\":{\"205\":1}}],[\"获取\",{\"1\":{\"184\":1,\"272\":1}}],[\"获取动态刷新的接口\",{\"0\":{\"78\":1}}],[\"获取当前用户\",{\"1\":{\"55\":1}}],[\"引入异步通道概念\",{\"1\":{\"542\":1}}],[\"引入外部配置文件\",{\"1\":{\"497\":1}}],[\"引入的是org\",{\"1\":{\"319\":1}}],[\"引入apache\",{\"1\":{\"319\":1}}],[\"引入\",{\"0\":{\"317\":1},\"1\":{\"521\":2}}],[\"引入依赖\",{\"0\":{\"74\":1,\"163\":1,\"177\":1},\"1\":{\"182\":1,\"575\":1}}],[\"引号内的参数为权限的名称\",{\"1\":{\"60\":1}}],[\"引号内的参数必须是\",{\"1\":{\"60\":3}}],[\"引用已定义的切点\",{\"1\":{\"582\":1}}],[\"引用数目\",{\"1\":{\"487\":1}}],[\"引用传递与值传递\",{\"0\":{\"377\":1}}],[\"引用类型\",{\"0\":{\"365\":1}}],[\"引用阿里巴巴dubbo时\",{\"1\":{\"319\":1}}],[\"引用\",{\"1\":{\"19\":1}}],[\"常用注解\",{\"0\":{\"578\":1}}],[\"常用的\",{\"1\":{\"546\":1}}],[\"常用方法\",{\"1\":{\"544\":1}}],[\"常用\",{\"1\":{\"537\":1}}],[\"常用辅助类\",{\"0\":{\"475\":1}}],[\"常用标签\",{\"1\":{\"60\":1}}],[\"常量任君搞\",{\"1\":{\"363\":1}}],[\"常量\",{\"1\":{\"353\":1}}],[\"常见标签\",{\"1\":{\"56\":1}}],[\"4mb\",{\"0\":{\"540\":1,\"541\":1}}],[\"4r\",{\"1\":{\"515\":4}}],[\"41241252l\",{\"1\":{\"334\":1}}],[\"41<\",{\"1\":{\"67\":2}}],[\"40960\",{\"1\":{\"222\":1}}],[\"401\",{\"1\":{\"205\":2}}],[\"404\",{\"1\":{\"204\":1,\"252\":2,\"634\":1}}],[\"403\",{\"1\":{\"62\":1}}],[\"42\",{\"1\":{\"126\":1,\"127\":1,\"128\":2}}],[\"47<\",{\"1\":{\"243\":1,\"251\":1}}],[\"47\",{\"1\":{\"62\":1,\"126\":1,\"127\":1,\"128\":2}}],[\"4\",{\"0\":{\"438\":1},\"1\":{\"58\":1,\"62\":1,\"63\":1,\"109\":1,\"113\":1,\"176\":1,\"180\":2,\"212\":2,\"241\":1,\"254\":1,\"256\":2,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"443\":1,\"444\":1,\"537\":1,\"539\":4}}],[\"4<\",{\"1\":{\"49\":1,\"180\":1,\"251\":1,\"582\":1}}],[\"将多个配置文件导入合并为一个\",{\"1\":{\"619\":1}}],[\"将http协议升级为ws协议获得长连接\",{\"1\":{\"576\":1}}],[\"将连接加入到连接队列进行监听\",{\"1\":{\"573\":1}}],[\"将连接分配到\",{\"1\":{\"573\":1}}],[\"将连接事件分离出来\",{\"1\":{\"552\":1}}],[\"将结果返回\",{\"1\":{\"572\":1}}],[\"将结果赋给成员变量\",{\"1\":{\"558\":1}}],[\"将客户端\",{\"1\":{\"558\":1}}],[\"将磁盘上的数据拷贝到内核缓冲区里\",{\"1\":{\"539\":1}}],[\"将字符串写入文件\",{\"1\":{\"537\":1}}],[\"将包内的映射器接口实现全部注册为映射器\",{\"1\":{\"499\":1}}],[\"将查询结果保存到内存中\",{\"1\":{\"488\":1}}],[\"将用户经常查询的数据放在缓存中\",{\"1\":{\"480\":1}}],[\"将用于保存登录接口的实现类实例传入\",{\"1\":{\"62\":1}}],[\"将文件使用字节流输出\",{\"1\":{\"380\":1}}],[\"将内容写入字节数组输出流中\",{\"1\":{\"379\":1}}],[\"将会导致\",{\"1\":{\"631\":1}}],[\"将会抛出一个\",{\"1\":{\"533\":1}}],[\"将会回收\",{\"1\":{\"368\":1}}],[\"将会调用处理器的\",{\"1\":{\"213\":1}}],[\"将传进字节流的序列化\",{\"1\":{\"334\":1}}],[\"将共用的接口\",{\"1\":{\"314\":1}}],[\"将对象编码成字节\",{\"1\":{\"529\":1}}],[\"将对象转换为json表示\",{\"1\":{\"237\":1}}],[\"将对方法参数上的注解进行校验\",{\"1\":{\"291\":1,\"294\":1,\"296\":1}}],[\"将绕过注册中心\",{\"1\":{\"291\":1}}],[\"将返回genericservice\",{\"1\":{\"291\":1,\"294\":1}}],[\"将向logger中输出访问日志\",{\"1\":{\"288\":1,\"289\":1,\"293\":1}}],[\"将只注册\",{\"1\":{\"287\":1}}],[\"将只订阅\",{\"1\":{\"287\":1}}],[\"将动态的生成\",{\"1\":{\"235\":1}}],[\"将自动切换到另一台\",{\"1\":{\"305\":1}}],[\"将自动替换后一个\",{\"1\":{\"207\":1}}],[\"将自定义类注册到\",{\"1\":{\"35\":1}}],[\"将使用同步请求\",{\"1\":{\"207\":1}}],[\"将上面的\",{\"1\":{\"192\":1}}],[\"将消息队列连接配置移到\",{\"1\":{\"188\":1}}],[\"将此ip加入允许监控的列表\",{\"1\":{\"151\":1}}],[\"将该值设置为100\",{\"1\":{\"143\":1}}],[\"将\",{\"1\":{\"97\":1,\"488\":1,\"537\":1}}],[\"将刷新接口暴露\",{\"1\":{\"91\":1}}],[\"将被忽略\",{\"1\":{\"608\":1}}],[\"将被解析为\",{\"1\":{\"67\":1}}],[\"将被视作字符串并显示在页面上\",{\"1\":{\"67\":1}}],[\"将显示\",{\"1\":{\"56\":1}}],[\"有参\",{\"1\":{\"594\":1}}],[\"有参构造器创建对象\",{\"1\":{\"279\":1}}],[\"有一个有超过\",{\"1\":{\"587\":1}}],[\"有一个输入参数\",{\"1\":{\"414\":1}}],[\"有时回送多个字符串\",{\"1\":{\"566\":1}}],[\"有时在不同行\",{\"1\":{\"566\":1}}],[\"有时在同一行\",{\"1\":{\"566\":1}}],[\"有效的请求才启动线程\",{\"1\":{\"542\":1}}],[\"有\",{\"1\":{\"537\":1}}],[\"有可能出现粘包拆包的问题\",{\"1\":{\"530\":1}}],[\"有很多方法可以做到\",{\"1\":{\"513\":1}}],[\"有三种内建的数据源类型\",{\"1\":{\"496\":1}}],[\"有序性\",{\"0\":{\"426\":1}}],[\"有返回值\",{\"1\":{\"386\":1,\"395\":2,\"408\":1}}],[\"有利于动态调整提供者权重\",{\"1\":{\"307\":1}}],[\"有的时候\",{\"1\":{\"67\":1}}],[\"有权限将显示\",{\"1\":{\"56\":1}}],[\"有任意一个角色\",{\"1\":{\"56\":1}}],[\"有角色将显示\",{\"1\":{\"56\":1}}],[\"体内容\",{\"1\":{\"56\":5}}],[\"相关所有上下文信息\",{\"1\":{\"550\":1}}],[\"相关依赖\",{\"0\":{\"42\":1,\"49\":1,\"53\":1,\"58\":1,\"81\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":1,\"171\":1,\"200\":1,\"239\":1,\"243\":1,\"247\":1,\"604\":1}}],[\"相对自己\",{\"1\":{\"529\":2}}],[\"相对应\",{\"1\":{\"127\":1}}],[\"相信这会你应该会对上面的例子有一个更深的认识\",{\"1\":{\"261\":1}}],[\"相\",{\"1\":{\"143\":1}}],[\"相较于hostname是否优先使用ip\",{\"1\":{\"102\":1}}],[\"相同参数的请求总是发到同一提供者\",{\"1\":{\"310\":1}}],[\"相同\",{\"1\":{\"98\":1,\"194\":1,\"196\":1,\"198\":1,\"217\":1,\"473\":1}}],[\"相当于xml中的<aop\",{\"1\":{\"582\":1}}],[\"相当于在配置文件中注册bean\",{\"1\":{\"578\":1}}],[\"相当于一个事件循环组\",{\"1\":{\"574\":1}}],[\"相当于一个贯穿\",{\"1\":{\"549\":1}}],[\"相当于实例\",{\"1\":{\"522\":1}}],[\"相当于前置通知\",{\"1\":{\"229\":1}}],[\"相当于访问controller\",{\"1\":{\"217\":1}}],[\"相当于\",{\"1\":{\"56\":1,\"140\":1,\"363\":1,\"594\":1}}],[\"包名\",{\"1\":{\"582\":1}}],[\"包导入\",{\"1\":{\"577\":1}}],[\"包和\",{\"1\":{\"565\":1}}],[\"包中\",{\"1\":{\"508\":1}}],[\"包括修改了内存中的共享变量的值\",{\"1\":{\"427\":1}}],[\"包括记住我自动登录的也属于未进行身份验证\",{\"1\":{\"56\":1}}],[\"包含一个\",{\"1\":{\"574\":1}}],[\"包含了一个channelpipeline\",{\"1\":{\"549\":1}}],[\"包含抽象方法的一定是抽象类\",{\"1\":{\"345\":1}}],[\"包含的\",{\"1\":{\"207\":1}}],[\"包裹\",{\"1\":{\"338\":1}}],[\"包部署到服务器\",{\"1\":{\"180\":1}}],[\"包\",{\"1\":{\"180\":1,\"412\":1,\"565\":1}}],[\"包的剩余部分内容\",{\"1\":{\"565\":1}}],[\"包的剩余内容\",{\"1\":{\"565\":1}}],[\"包的部分内容\",{\"1\":{\"565\":2}}],[\"包的支持\",{\"1\":{\"180\":1}}],[\"包的版本控制\",{\"1\":{\"180\":1}}],[\"包便于存放管理\",{\"1\":{\"180\":1}}],[\"包即可\",{\"1\":{\"176\":1,\"300\":1}}],[\"包依赖引入\",{\"1\":{\"69\":1}}],[\"包下的\",{\"1\":{\"17\":1}}],[\"即通过管道可以获取\",{\"1\":{\"574\":1}}],[\"即客户端发送的连接请求都会注册到多路复用器上\",{\"1\":{\"537\":1}}],[\"即客户端有连接请求时服务器端就需要启动一个线程进行处理如果这个连接不做任何事就会造成不必要的开销\",{\"1\":{\"535\":1}}],[\"即不需要判断字节数是否满足转换要求\",{\"1\":{\"533\":1}}],[\"即工作变量的数据改变了之后\",{\"1\":{\"422\":1}}],[\"即为\",{\"1\":{\"419\":1}}],[\"即每个线程负责一个任务队列\",{\"1\":{\"406\":1}}],[\"即未提交的事务\",{\"1\":{\"376\":1}}],[\"即时编译器编译后的代码缓存等数据\",{\"1\":{\"353\":1}}],[\"即一个接口可以\",{\"1\":{\"346\":1}}],[\"即会覆盖本地配置项\",{\"1\":{\"292\":1}}],[\"即泛型方法\",{\"1\":{\"275\":1}}],[\"即请求的接口实际上是一个重定向的接口\",{\"1\":{\"184\":1}}],[\"即使再添加\",{\"1\":{\"497\":1}}],[\"即使其他辅助线程是空闲的\",{\"1\":{\"473\":1}}],[\"即使用了\",{\"1\":{\"422\":1}}],[\"即使内存即将溢出也不会回收这个对象\",{\"1\":{\"366\":1}}],[\"即使通过\",{\"1\":{\"258\":1}}],[\"即使使用\",{\"1\":{\"164\":1}}],[\"即使队列没有达到最大值也能拒绝请求\",{\"1\":{\"143\":1}}],[\"即使这19个请求都失败了\",{\"1\":{\"143\":1}}],[\"即可以有多个\",{\"1\":{\"574\":1}}],[\"即可绕过注册中心直接调用\",{\"1\":{\"305\":1}}],[\"即可开启\",{\"1\":{\"299\":1}}],[\"即可\",{\"1\":{\"110\":1,\"218\":1,\"300\":1,\"532\":1}}],[\"即可实现手动刷新\",{\"1\":{\"93\":1}}],[\"即重定向和转发\",{\"1\":{\"62\":1}}],[\"即没有调用\",{\"1\":{\"56\":1}}],[\"即\",{\"1\":{\"56\":1,\"282\":1,\"289\":3,\"293\":2,\"550\":1,\"574\":2}}],[\"即游客访问信息\",{\"1\":{\"56\":1}}],[\"用作\",{\"1\":{\"587\":1}}],[\"用另一个线程循环接收\",{\"1\":{\"538\":1}}],[\"用什么样的通道进行数据的发送和接收\",{\"1\":{\"534\":1}}],[\"用给定的计数初始化\",{\"1\":{\"476\":1}}],[\"用以接收字节数据\",{\"1\":{\"221\":1}}],[\"用来为你提供\",{\"1\":{\"608\":1}}],[\"用来将字符串\",{\"1\":{\"553\":1}}],[\"用来初始化服务器可连接队列大小\",{\"1\":{\"551\":1}}],[\"用来描述非必需对象\",{\"1\":{\"368\":1}}],[\"用来支持不同配置中心的定制化配置参数\",{\"1\":{\"292\":1}}],[\"用来抑制编译时的警告信息\",{\"1\":{\"269\":1}}],[\"用来做\",{\"1\":{\"180\":1}}],[\"用来设置信号地的大小\",{\"1\":{\"143\":1}}],[\"用在父级工程或聚合工程中\",{\"1\":{\"180\":1}}],[\"用法类似\",{\"1\":{\"164\":1}}],[\"用逗号分隔\",{\"1\":{\"128\":1}}],[\"用户自定义定时任务\",{\"0\":{\"561\":1}}],[\"用户程序自定义的普通任务\",{\"0\":{\"560\":1}}],[\"用户级配置\",{\"1\":{\"85\":1}}],[\"用户名为null\",{\"1\":{\"139\":1}}],[\"用户名\",{\"1\":{\"63\":1,\"292\":1}}],[\"用户名错误\",{\"1\":{\"55\":1}}],[\"用户已经身份验证通过\",{\"1\":{\"56\":2}}],[\"用户已经身份验证\",{\"1\":{\"56\":1}}],[\"用户没有身份验证时显示相应信息\",{\"1\":{\"56\":1}}],[\"用于开启组件注册扫描\",{\"1\":{\"602\":1}}],[\"用于监听绑定在其上的\",{\"1\":{\"574\":1}}],[\"用于消费者和提供者的约定\",{\"1\":{\"557\":1}}],[\"用于处理或拦截\",{\"1\":{\"549\":1}}],[\"用于处理入站和出站事件\",{\"1\":{\"548\":1}}],[\"用于客户端连接服务端\",{\"1\":{\"544\":1}}],[\"用于客户端设置一个eventloopgroup\",{\"1\":{\"544\":1}}],[\"用于存放编译期生成的各种字面量与符号引用\",{\"1\":{\"354\":1}}],[\"用于存储已被虚拟机加载的类型信息\",{\"1\":{\"353\":1}}],[\"用于方法参数的特征描述\",{\"1\":{\"297\":1}}],[\"用于控制到方法级\",{\"1\":{\"296\":1}}],[\"用于多协议\",{\"1\":{\"293\":1}}],[\"用于在客户端执行本地逻辑\",{\"1\":{\"289\":1,\"291\":1}}],[\"用于检测提供者非正常断线后的脏数据\",{\"1\":{\"287\":1}}],[\"用于动态类的生成\",{\"1\":{\"286\":1}}],[\"用于服务端\",{\"1\":{\"544\":1}}],[\"用于服务端指定服务端channel或客户端指定客户端channel类型\",{\"1\":{\"544\":1}}],[\"用于服务端指定两个eventloopgroup\",{\"1\":{\"544\":1}}],[\"用于服务分层对应的架构\",{\"1\":{\"286\":1}}],[\"用于服务治理\",{\"1\":{\"286\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"295\":1}}],[\"用于注册中心计算模块间依赖关系\",{\"1\":{\"295\":1}}],[\"用于注册中心计算应用间依赖关系\",{\"1\":{\"286\":1}}],[\"用于注册中心区分服务来源\",{\"1\":{\"286\":1,\"295\":1}}],[\"用于链路监控\",{\"1\":{\"175\":1}}],[\"用于指定线程模型\",{\"1\":{\"288\":1}}],[\"用于指定\",{\"1\":{\"67\":1}}],[\"用于指定要限制的值\",{\"1\":{\"23\":1}}],[\"用于暂存对象\",{\"1\":{\"67\":1}}],[\"用于记住我功能的实现\",{\"1\":{\"62\":1}}],[\"用于进行权限信息的验证\",{\"1\":{\"54\":1}}],[\"用于防火墙\",{\"1\":{\"31\":1}}],[\"用于替换默认的报错信息\",{\"1\":{\"23\":1}}],[\"用于根据注解中的条件是否成立决定是否生效\",{\"1\":{\"17\":1}}],[\"拥有某个角色权限才能访问\",{\"1\":{\"54\":1}}],[\"拥有某个资源的权限才能访问\",{\"1\":{\"54\":1}}],[\"令牌的作用是防止消费者绕过注册中心直接访问\",{\"1\":{\"289\":1}}],[\"令牌验证\",{\"1\":{\"289\":1,\"293\":1}}],[\"令牌\",{\"1\":{\"54\":1}}],[\"异步的\",{\"1\":{\"546\":1}}],[\"异步的服务端\",{\"1\":{\"546\":2}}],[\"异步的客户端\",{\"1\":{\"546\":2}}],[\"异步非阻塞\",{\"1\":{\"542\":1}}],[\"异步回调\",{\"0\":{\"385\":1}}],[\"异步调用时\",{\"1\":{\"296\":1}}],[\"异步任务\",{\"0\":{\"13\":1}}],[\"异常被你的\",{\"1\":{\"632\":1}}],[\"异常层次结构\",{\"1\":{\"625\":1}}],[\"异常层次结构简化了错误处理\",{\"1\":{\"624\":1}}],[\"异常分析\",{\"1\":{\"488\":1}}],[\"异常完成导致runtimeexception或error\",{\"1\":{\"409\":1}}],[\"异常\",{\"1\":{\"54\":1,\"525\":1,\"582\":1}}],[\"授权\",{\"1\":{\"54\":1}}],[\"自旋锁示例\",{\"1\":{\"451\":1}}],[\"自旋锁\",{\"0\":{\"449\":1,\"451\":1},\"1\":{\"451\":1}}],[\"自带过滤器参见\",{\"1\":{\"138\":1}}],[\"自动查找和对象属性类型相同的\",{\"1\":{\"585\":1}}],[\"自动查找本机ip\",{\"1\":{\"288\":1,\"293\":1}}],[\"自动在容器上下文中查找\",{\"1\":{\"584\":1}}],[\"自动装配的要求\",{\"1\":{\"587\":1}}],[\"自动装配\",{\"0\":{\"584\":1,\"585\":1}}],[\"自动装配是\",{\"1\":{\"583\":1}}],[\"自动装配注解\",{\"1\":{\"578\":2}}],[\"自动拼接\",{\"1\":{\"213\":1}}],[\"自动建表\",{\"1\":{\"62\":1}}],[\"自动配置失效\",{\"1\":{\"46\":1}}],[\"自动配置类使用了\",{\"1\":{\"17\":1}}],[\"自动配置基本原理\",{\"0\":{\"16\":1}}],[\"自定义类代码\",{\"1\":{\"582\":1}}],[\"自定义类实现aop\",{\"1\":{\"582\":1}}],[\"自定义切面\",{\"1\":{\"582\":1}}],[\"自定义的方法\",{\"1\":{\"618\":1}}],[\"自定义的处理器\",{\"1\":{\"576\":1}}],[\"自定义的策略类必须继承\",{\"1\":{\"173\":1}}],[\"自定义协议解决\",{\"0\":{\"567\":1}}],[\"自定义idleevent处理器\",{\"1\":{\"528\":1}}],[\"自定义缓存\",{\"0\":{\"490\":1}}],[\"自定义线程池\",{\"1\":{\"472\":1}}],[\"自定义公平性\",{\"1\":{\"445\":1}}],[\"自定义日期格式\",{\"1\":{\"241\":1}}],[\"自定义拦截器\",{\"0\":{\"234\":1}}],[\"自定义策略\",{\"0\":{\"173\":1}}],[\"自定义过滤器\",{\"0\":{\"139\":1}}],[\"自定义\",{\"0\":{\"174\":1},\"1\":{\"54\":1,\"521\":1,\"522\":1,\"528\":1,\"532\":1}}],[\"创建代理类对象\",{\"1\":{\"618\":1}}],[\"创建对象的方式\",{\"0\":{\"601\":1}}],[\"创建配置对象\",{\"1\":{\"575\":1}}],[\"创建bossgroup和workergroup\",{\"1\":{\"575\":1}}],[\"创建大量线程\",{\"1\":{\"569\":1}}],[\"创建连接channel\",{\"1\":{\"538\":1}}],[\"创建线程池\",{\"1\":{\"536\":1}}],[\"创建线程的工厂类\",{\"1\":{\"473\":1}}],[\"创建channelgroup管理所有连接的channel\",{\"1\":{\"525\":1}}],[\"创建枚举类\",{\"1\":{\"522\":1}}],[\"创建lock对象\",{\"1\":{\"434\":1}}],[\"创建可重入锁对象时\",{\"1\":{\"433\":1}}],[\"创建新线程的工厂\",{\"1\":{\"409\":1}}],[\"创建执行服务\",{\"1\":{\"393\":1}}],[\"创建数据报文\",{\"1\":{\"382\":1}}],[\"创建字节输出流\",{\"1\":{\"379\":1}}],[\"创建服务端socket对象\",{\"1\":{\"379\":1}}],[\"创建socket对象\",{\"1\":{\"379\":1}}],[\"创建shirofilterfactorybean\",{\"1\":{\"54\":1}}],[\"创建缓冲流\",{\"1\":{\"330\":1}}],[\"创建节点流\",{\"1\":{\"330\":1}}],[\"创建文件对象\",{\"1\":{\"330\":1}}],[\"创建项目后\",{\"1\":{\"256\":1}}],[\"创建拦截器\",{\"0\":{\"229\":1}}],[\"创建指定的文件夹\",{\"1\":{\"223\":1}}],[\"创建结果为\",{\"1\":{\"182\":1}}],[\"创建一个消费者\",{\"1\":{\"557\":1}}],[\"创建一个提供者\",{\"1\":{\"557\":1}}],[\"创建一个接口\",{\"1\":{\"557\":1}}],[\"创建一个执行任务的类\",{\"1\":{\"409\":1}}],[\"创建一个线程对象\",{\"1\":{\"391\":1}}],[\"创建一个子模块\",{\"1\":{\"181\":1}}],[\"创建一个\",{\"1\":{\"180\":1,\"558\":1}}],[\"创建一个类\",{\"1\":{\"139\":1}}],[\"创建支付记录失败\",{\"1\":{\"182\":1}}],[\"创建支付记录成功\",{\"1\":{\"182\":1}}],[\"创建支付记录\",{\"1\":{\"164\":1,\"182\":1}}],[\"创建用于保存登录信息的接口的实现\",{\"1\":{\"62\":1}}],[\"创建\",{\"0\":{\"472\":1},\"1\":{\"54\":1,\"409\":1,\"522\":1}}],[\"创建多个\",{\"1\":{\"24\":1}}],[\"75\",{\"1\":{\"405\":1}}],[\"75f\",{\"1\":{\"405\":1}}],[\"777\",{\"1\":{\"386\":1}}],[\"7777\",{\"1\":{\"24\":1}}],[\"789\",{\"1\":{\"126\":1,\"127\":1,\"128\":2}}],[\"7002\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"87\":1,\"88\":1,\"122\":1,\"187\":1,\"188\":1,\"203\":1}}],[\"7001\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"87\":1,\"88\":1,\"102\":3,\"106\":1,\"122\":1,\"187\":1,\"188\":1,\"203\":1}}],[\"7\",{\"1\":{\"53\":1,\"113\":1,\"287\":4,\"317\":2,\"325\":2,\"472\":1,\"542\":1}}],[\"扫描实体类的包\",{\"1\":{\"498\":1}}],[\"扫描到\",{\"1\":{\"173\":1}}],[\"扫描所有包下所有\",{\"1\":{\"117\":1}}],[\"扫描\",{\"1\":{\"51\":1,\"174\":1}}],[\"会在上下文中自动寻找\",{\"1\":{\"583\":1}}],[\"会阻塞在\",{\"1\":{\"569\":1}}],[\"会由\",{\"1\":{\"552\":1}}],[\"会把磁盘的数据拷贝到内核的缓冲区里\",{\"1\":{\"539\":1}}],[\"会通过\",{\"1\":{\"537\":1}}],[\"会根据不同的事件在各个通道上进行切换\",{\"1\":{\"537\":1}}],[\"会根据优先级访问\",{\"1\":{\"69\":1}}],[\"会释放锁\",{\"1\":{\"465\":1}}],[\"会让其他线程一直等待\",{\"1\":{\"435\":1}}],[\"会自动释放锁\",{\"1\":{\"435\":1}}],[\"会自动从spring\",{\"1\":{\"292\":1}}],[\"会对一些指令进行重新排序\",{\"1\":{\"426\":1}}],[\"会发现线程的所有操作都是无序的\",{\"1\":{\"426\":1}}],[\"会发现当前线程的一切操作都是有序的\",{\"1\":{\"426\":1}}],[\"会清空所有工作内存中此变量的值\",{\"1\":{\"422\":1}}],[\"会给每一行读取的数据加锁\",{\"1\":{\"374\":1}}],[\"会回收\",{\"1\":{\"370\":1}}],[\"会出现死锁\",{\"1\":{\"359\":1}}],[\"会报错但是没问题\",{\"1\":{\"322\":1}}],[\"会使用\",{\"1\":{\"282\":1,\"574\":1}}],[\"会导致线程不安全的问题\",{\"1\":{\"420\":1}}],[\"会导致\",{\"1\":{\"244\":1}}],[\"会直接出\",{\"1\":{\"204\":1}}],[\"会将断路器置为\",{\"1\":{\"143\":1}}],[\"会解析为标签\",{\"1\":{\"67\":1}}],[\"会被解析为\",{\"1\":{\"507\":1}}],[\"会被当做字符串\",{\"1\":{\"67\":1}}],[\"会被重定向到百度\",{\"1\":{\"47\":1}}],[\"会返回一个错误码\",{\"1\":{\"47\":1}}],[\"界面\",{\"1\":{\"47\":1}}],[\"示例代码\",{\"0\":{\"618\":1}}],[\"示例程序\",{\"0\":{\"575\":1}}],[\"示例\",{\"0\":{\"47\":1,\"411\":1},\"1\":{\"67\":1,\"241\":1,\"272\":1,\"507\":1,\"533\":1}}],[\"并遵循单一职责和依赖项倒置原则\",{\"1\":{\"587\":1}}],[\"并自动给\",{\"1\":{\"583\":1}}],[\"并创建\",{\"1\":{\"573\":1}}],[\"并发量很大时\",{\"1\":{\"569\":1}}],[\"并按照约定返回数据\",{\"1\":{\"557\":1}}],[\"并对其后续的\",{\"1\":{\"552\":1}}],[\"并不是所有的\",{\"1\":{\"533\":1}}],[\"并不会复用已有对象\",{\"1\":{\"389\":1}}],[\"并将此责任转移到类注入容器\",{\"1\":{\"587\":1}}],[\"并将其注册到某个\",{\"1\":{\"574\":1}}],[\"并将其转发到其\",{\"1\":{\"548\":1}}],[\"并将其绑定到当前的上下文\",{\"1\":{\"507\":1}}],[\"并将这些类注入到\",{\"1\":{\"117\":1}}],[\"并可以进行动态替换\",{\"1\":{\"497\":1}}],[\"并相应地执行\",{\"1\":{\"478\":1}}],[\"并等待另一个线程通知等待该对象监视器的线程通过调用\",{\"1\":{\"460\":1}}],[\"并行流\",{\"1\":{\"417\":1}}],[\"并行计算\",{\"1\":{\"417\":1}}],[\"并行级别\",{\"1\":{\"409\":1}}],[\"并行调用多个服务器\",{\"1\":{\"313\":1}}],[\"并继承\",{\"1\":{\"409\":1}}],[\"并提供实现\",{\"1\":{\"346\":1}}],[\"并降低写操作的性能\",{\"1\":{\"343\":1}}],[\"并调用\",{\"0\":{\"322\":1},\"1\":{\"558\":2}}],[\"并启动\",{\"0\":{\"318\":1}}],[\"并在\",{\"1\":{\"606\":1}}],[\"并在调用时利用\",{\"1\":{\"314\":1}}],[\"并在其中创建\",{\"1\":{\"33\":1}}],[\"并无限次重连等待服务提供者恢复\",{\"1\":{\"305\":1}}],[\"并且极大的降低了需要编写的代码数量\",{\"1\":{\"624\":1}}],[\"并且开启注解的支持\",{\"1\":{\"577\":1}}],[\"并且每个\",{\"1\":{\"549\":1}}],[\"并且每天都创建一个文件\",{\"1\":{\"515\":1}}],[\"并且任何后续的\",{\"1\":{\"476\":1}}],[\"并且可以支持多个相关联的对象\",{\"1\":{\"432\":1}}],[\"并且构造器没有\",{\"1\":{\"425\":1}}],[\"并且线程安全\",{\"1\":{\"419\":1}}],[\"并且这些接口包含一样的默认方法\",{\"1\":{\"346\":1}}],[\"并且服务提供者停止时\",{\"1\":{\"287\":1,\"289\":1,\"293\":1}}],[\"并且往往是不合理的\",{\"1\":{\"282\":1}}],[\"并且注解中是没有方法的\",{\"1\":{\"261\":1}}],[\"并且显示取到了值但是仍然报错\",{\"1\":{\"258\":1}}],[\"并且传入的参数就是上面的四个\",{\"1\":{\"71\":1}}],[\"并通过\",{\"1\":{\"164\":1,\"314\":1}}],[\"并增加排序百分位数所需的计算\",{\"1\":{\"143\":1}}],[\"并注册到\",{\"1\":{\"111\":1}}],[\"并允许外网访问\",{\"0\":{\"96\":1}}],[\"并修改配置文件\",{\"1\":{\"72\":1}}],[\"并只显示解析后的结果\",{\"1\":{\"67\":1}}],[\"并根据\",{\"1\":{\"66\":1}}],[\"并重写需要的方法即可\",{\"1\":{\"575\":1}}],[\"并重写其中的\",{\"1\":{\"214\":1}}],[\"并重写loaduserbyusername方法\",{\"1\":{\"63\":1}}],[\"并重写想要拓展的功能即可\",{\"1\":{\"46\":1}}],[\"拓展方式注入\",{\"0\":{\"594\":1}}],[\"拓展\",{\"0\":{\"45\":1},\"1\":{\"587\":3}}],[\"发出rpc请求\",{\"1\":{\"558\":1}}],[\"发生了\",{\"1\":{\"539\":2}}],[\"发生异常时调用\",{\"1\":{\"525\":1}}],[\"发生\",{\"1\":{\"370\":1}}],[\"发送心跳检测包\",{\"1\":{\"528\":3}}],[\"发送放在自定义\",{\"1\":{\"521\":1}}],[\"发送了消息\",{\"1\":{\"427\":1}}],[\"发送数据报文\",{\"1\":{\"382\":1}}],[\"发送回复信息\",{\"1\":{\"380\":1}}],[\"发送文件耗时\",{\"1\":{\"540\":1,\"541\":1}}],[\"发送文件时\",{\"1\":{\"383\":1}}],[\"发送文件\",{\"0\":{\"380\":1,\"383\":1}}],[\"发送请求获取结果\",{\"1\":{\"314\":1}}],[\"发送一条消息\",{\"1\":{\"189\":1}}],[\"发送\",{\"1\":{\"44\":1,\"93\":1,\"576\":1}}],[\"发件人\",{\"1\":{\"44\":1}}],[\"发件邮箱要开启smtp服务\",{\"1\":{\"43\":1}}],[\"主从\",{\"0\":{\"573\":1}}],[\"主线程接收命令行输入\",{\"1\":{\"538\":1}}],[\"主线程循环监听请求\",{\"1\":{\"536\":1}}],[\"主内存对应的是硬件的物理内存\",{\"1\":{\"420\":1}}],[\"主内存对应的是\",{\"1\":{\"420\":1}}],[\"主键\",{\"1\":{\"356\":1}}],[\"主要用途是被子类调用\",{\"1\":{\"345\":1}}],[\"主启动类与\",{\"1\":{\"196\":1}}],[\"主启动类上添加\",{\"1\":{\"143\":1,\"326\":1,\"327\":1}}],[\"主启动类添加注解\",{\"1\":{\"97\":1,\"98\":1}}],[\"主体\",{\"1\":{\"54\":1}}],[\"主题\",{\"1\":{\"44\":1}}],[\"主环境可以通过\",{\"1\":{\"24\":1}}],[\"q\",{\"1\":{\"537\":1}}],[\"qualifier\",{\"1\":{\"587\":2}}],[\"quotes\",{\"1\":{\"233\":1}}],[\"queues\",{\"1\":{\"288\":1,\"293\":1}}],[\"queuesizerejectionthreshold\",{\"1\":{\"143\":1}}],[\"queryblog3\",{\"1\":{\"507\":3}}],[\"queryblog2\",{\"1\":{\"507\":1}}],[\"queryblog\",{\"1\":{\"506\":3,\"507\":1}}],[\"querybyid\",{\"1\":{\"115\":1}}],[\"query=red\",{\"1\":{\"134\":1}}],[\"querydeptbyid\",{\"1\":{\"115\":1}}],[\"queryallinfo2\",{\"1\":{\"518\":2}}],[\"queryallinfo\",{\"1\":{\"518\":2}}],[\"queryallstudent2\",{\"1\":{\"517\":2}}],[\"queryallstudent\",{\"1\":{\"517\":2}}],[\"queryall才可以正常访问\",{\"1\":{\"203\":1}}],[\"queryalldept\",{\"1\":{\"115\":1}}],[\"queryall\",{\"1\":{\"115\":1,\"203\":1}}],[\"queryallmailaddress\",{\"1\":{\"44\":1}}],[\"querywrapper<payment>\",{\"1\":{\"144\":1,\"182\":1}}],[\"querywrapper<>\",{\"1\":{\"63\":1,\"144\":1,\"182\":1}}],[\"querywrapper<user>\",{\"1\":{\"63\":1}}],[\"querywrapper\",{\"1\":{\"63\":1,\"144\":3,\"182\":3}}],[\"query\",{\"0\":{\"134\":1},\"1\":{\"63\":1,\"134\":2,\"506\":1,\"507\":1}}],[\"queryusers\",{\"1\":{\"483\":1,\"606\":1}}],[\"queryuserbyname\",{\"1\":{\"54\":1}}],[\"queryuserbyid\",{\"1\":{\"51\":2,\"483\":1}}],[\"queryuserlist\",{\"1\":{\"51\":2}}],[\"queryforlist\",{\"1\":{\"40\":1}}],[\"qq\",{\"1\":{\"75\":1,\"83\":1,\"87\":1}}],[\"qq邮箱需要配置ssl\",{\"1\":{\"43\":1}}],[\"基数较小的表\",{\"1\":{\"343\":1}}],[\"基础环境搭建\",{\"0\":{\"179\":1}}],[\"基础配置\",{\"0\":{\"43\":1}}],[\"基于类的动态代理\",{\"1\":{\"617\":1}}],[\"基于接口的动态代理\",{\"1\":{\"617\":1}}],[\"基于字段的依赖注入在声明为\",{\"1\":{\"587\":1}}],[\"基于线程池复用线程\",{\"1\":{\"570\":1}}],[\"基于垃圾回收器状态和软引用规则移除对象\",{\"1\":{\"487\":1}}],[\"基于状态分类\",{\"0\":{\"360\":1}}],[\"基于粒度分类\",{\"0\":{\"359\":1}}],[\"基于属性分类\",{\"0\":{\"358\":1}}],[\"基于软负载均衡算法\",{\"1\":{\"328\":1}}],[\"基于虚拟节点\",{\"1\":{\"310\":1}}],[\"基于权重的轮询负载均衡机制\",{\"0\":{\"308\":1}}],[\"基于权重的随机负载均衡机制\",{\"0\":{\"307\":1}}],[\"基于\",{\"0\":{\"145\":1},\"1\":{\"481\":1,\"547\":1,\"570\":1}}],[\"基本原理与思想\",{\"0\":{\"599\":1}}],[\"基本介绍\",{\"0\":{\"565\":1}}],[\"基本方法\",{\"1\":{\"272\":1}}],[\"基本内置类型的包装类都有一个type属性\",{\"1\":{\"270\":1}}],[\"基本数据类型\",{\"1\":{\"263\":1}}],[\"基本属性\",{\"0\":{\"207\":1}}],[\"基本语法\",{\"0\":{\"67\":1}}],[\"基本配置\",{\"0\":{\"29\":1,\"38\":1,\"50\":1}}],[\"邮件任务\",{\"0\":{\"41\":1}}],[\"是用\",{\"1\":{\"632\":1}}],[\"是用来预警的\",{\"1\":{\"405\":1}}],[\"是由代理实例的调用处理程序实现的接口\",{\"1\":{\"617\":1}}],[\"是由事件\",{\"1\":{\"537\":1}}],[\"是线程安全的\",{\"1\":{\"608\":1}}],[\"是实现\",{\"1\":{\"600\":1}}],[\"是串行的\",{\"1\":{\"574\":1}}],[\"是保存\",{\"1\":{\"549\":1}}],[\"是服务端的启动引导类\",{\"1\":{\"544\":1}}],[\"是服务端读这个客户端可读\",{\"1\":{\"538\":1}}],[\"是客户端的启动引导类\",{\"1\":{\"544\":1}}],[\"是双向的\",{\"1\":{\"537\":1}}],[\"是面向缓冲区\",{\"1\":{\"537\":1}}],[\"是支持泛型的\",{\"1\":{\"521\":1}}],[\"是二进制编码的\",{\"1\":{\"520\":1}}],[\"是值\",{\"1\":{\"507\":1}}],[\"是键\",{\"1\":{\"507\":1}}],[\"是当前迭代的序号\",{\"1\":{\"507\":1}}],[\"是指当一个线程在获取锁的时候\",{\"1\":{\"451\":1}}],[\"是独家的\",{\"1\":{\"445\":1}}],[\"是在不同的层次上进行的\",{\"1\":{\"420\":1}}],[\"是16\",{\"1\":{\"405\":1}}],[\"是弱引用\",{\"1\":{\"370\":1}}],[\"是间隙锁和记录锁的组合\",{\"1\":{\"359\":1}}],[\"是行锁的一种\",{\"1\":{\"359\":1}}],[\"是目前搜索引擎使用的一种关键技术\",{\"1\":{\"356\":1}}],[\"是一组\",{\"1\":{\"552\":1}}],[\"是一种设计思想\",{\"1\":{\"600\":1}}],[\"是一种广泛使用的开源\",{\"1\":{\"490\":1}}],[\"是一种特殊的唯一索引\",{\"1\":{\"356\":1}}],[\"是一个抽象的支持类\",{\"1\":{\"608\":1}}],[\"是一个类\",{\"1\":{\"581\":1}}],[\"是一个\",{\"1\":{\"549\":1}}],[\"是一个很好的选择\",{\"1\":{\"496\":1}}],[\"是一个接口\",{\"1\":{\"435\":1,\"548\":1}}],[\"是一个线程实体\",{\"1\":{\"408\":1}}],[\"是一样的\",{\"1\":{\"67\":1}}],[\"是方法区的一部分\",{\"1\":{\"354\":1}}],[\"是直接面向用户编程的配置采集方式\",{\"1\":{\"281\":1}}],[\"是从\",{\"1\":{\"184\":1}}],[\"是做好一个\",{\"1\":{\"180\":1}}],[\"是否有已就绪的\",{\"1\":{\"547\":1}}],[\"是否为缺省协议\",{\"1\":{\"293\":1}}],[\"是否终止应用启动\",{\"1\":{\"292\":1}}],[\"是否在afterpropertiesset\",{\"1\":{\"291\":1,\"294\":1}}],[\"是否启用jsr303标准注解验证\",{\"1\":{\"291\":1,\"294\":1,\"296\":1}}],[\"是否启用超时时间\",{\"1\":{\"143\":1}}],[\"是否缺省泛化接口\",{\"1\":{\"291\":1,\"294\":1}}],[\"是否缺省异步执行\",{\"1\":{\"289\":1,\"293\":1,\"294\":1}}],[\"是否异步执行\",{\"1\":{\"291\":1,\"296\":1}}],[\"是否向此注册中心订阅服务\",{\"1\":{\"287\":1}}],[\"是否向此注册中心注册服务\",{\"1\":{\"287\":1}}],[\"是否报错\",{\"1\":{\"287\":1}}],[\"是否必填\",{\"1\":{\"286\":1,\"287\":1,\"288\":2,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1}}],[\"是否存在对应\",{\"1\":{\"272\":1}}],[\"是否创建成功\",{\"1\":{\"182\":1}}],[\"是否开启请求缓存\",{\"1\":{\"143\":1}}],[\"是否执行回调函数\",{\"1\":{\"143\":1}}],[\"是否可以重置\",{\"1\":{\"31\":1}}],[\"是\",{\"1\":{\"84\":2,\"228\":1,\"359\":1,\"428\":1,\"435\":1,\"589\":1,\"608\":2}}],[\"是javax\",{\"1\":{\"39\":1}}],[\"+returnvalue\",{\"1\":{\"582\":1}}],[\"+res\",{\"1\":{\"182\":2}}],[\"+resultset\",{\"1\":{\"39\":1,\"510\":3}}],[\"+channel\",{\"1\":{\"525\":1}}],[\"+ctx\",{\"1\":{\"521\":3,\"522\":3,\"525\":3,\"560\":2,\"561\":1,\"563\":1,\"575\":4}}],[\"+dateformat\",{\"1\":{\"525\":4}}],[\"+bytebuf\",{\"1\":{\"521\":1,\"522\":1,\"560\":1,\"575\":2}}],[\"+body\",{\"1\":{\"184\":1}}],[\"+阻塞队列大小\",{\"1\":{\"473\":1}}],[\"+list\",{\"1\":{\"461\":1}}],[\"++length\",{\"1\":{\"460\":1}}],[\"++num\",{\"1\":{\"430\":1}}],[\"+this\",{\"1\":{\"538\":1}}],[\"+thread\",{\"1\":{\"470\":1}}],[\"+ticketnum\",{\"1\":{\"453\":1}}],[\"+temp\",{\"1\":{\"245\":1}}],[\"+key\",{\"1\":{\"445\":2}}],[\"+new\",{\"1\":{\"536\":1,\"537\":1}}],[\"+num\",{\"1\":{\"434\":1,\"454\":1}}],[\"+name\",{\"1\":{\"393\":2}}],[\"+forkjoincalculate1\",{\"1\":{\"409\":1}}],[\"+file\",{\"1\":{\"223\":1}}],[\"+url+\",{\"1\":{\"393\":2}}],[\"+user1\",{\"1\":{\"245\":1}}],[\"+genericparametertype\",{\"1\":{\"279\":1}}],[\"+i++\",{\"1\":{\"464\":1}}],[\"+i+\",{\"1\":{\"396\":2,\"460\":1,\"567\":1}}],[\"+i\",{\"1\":{\"391\":2,\"392\":2,\"461\":1,\"467\":2,\"474\":1}}],[\"+invoke+invoke1\",{\"1\":{\"279\":1}}],[\"+id\",{\"1\":{\"182\":1}}],[\"+msg\",{\"1\":{\"528\":1,\"538\":2,\"563\":1,\"576\":2}}],[\"+msg+\",{\"1\":{\"525\":2}}],[\"+method\",{\"1\":{\"582\":2}}],[\"+methodannotation\",{\"1\":{\"272\":1}}],[\"+message\",{\"1\":{\"188\":1}}],[\"+mytestannotation\",{\"1\":{\"272\":2}}],[\"+money+\",{\"1\":{\"265\":1}}],[\"+jsonobject2\",{\"1\":{\"249\":1}}],[\"+jsonobject\",{\"1\":{\"245\":1,\"249\":1}}],[\"+json\",{\"1\":{\"245\":2}}],[\"+=\",{\"1\":{\"208\":1,\"363\":4}}],[\"+pool\",{\"1\":{\"460\":1}}],[\"+port\",{\"1\":{\"188\":1}}],[\"+ppg\",{\"1\":{\"279\":1}}],[\"+payments\",{\"1\":{\"182\":1}}],[\"+payment\",{\"1\":{\"182\":1}}],[\"+headers\",{\"1\":{\"184\":1}}],[\"+statuscodevalue\",{\"1\":{\"184\":1}}],[\"+statuscode\",{\"1\":{\"184\":1}}],[\"+s+\",{\"1\":{\"63\":1}}],[\"+arg\",{\"1\":{\"558\":1}}],[\"+age\",{\"1\":{\"272\":1}}],[\"+a\",{\"1\":{\"147\":2,\"411\":2}}],[\"+\",{\"1\":{\"39\":2,\"67\":4,\"71\":1,\"147\":2,\"183\":3,\"188\":1,\"208\":11,\"216\":1,\"226\":1,\"249\":2,\"289\":3,\"293\":3,\"330\":2,\"331\":2,\"332\":2,\"333\":2,\"334\":13,\"335\":1,\"336\":2,\"339\":2,\"340\":2,\"363\":7,\"396\":3,\"399\":1,\"402\":1,\"405\":2,\"445\":7,\"448\":2,\"450\":4,\"451\":1,\"453\":1,\"454\":1,\"456\":4,\"460\":1,\"462\":2,\"466\":2,\"470\":1,\"476\":1,\"477\":1,\"478\":2,\"495\":1,\"507\":2,\"525\":10,\"528\":1,\"536\":3,\"538\":3,\"539\":1,\"540\":2,\"541\":2,\"558\":1,\"566\":1,\"567\":5,\"576\":5,\"582\":3,\"593\":23}}],[\"到用户空间\",{\"1\":{\"539\":1}}],[\"到了第\",{\"1\":{\"405\":1}}],[\"到处服务\",{\"1\":{\"254\":1}}],[\"到\",{\"1\":{\"36\":1}}],[\"zerocopy\",{\"1\":{\"540\":1,\"541\":1}}],[\"zero\",{\"1\":{\"539\":1}}],[\"zuulexception\",{\"1\":{\"205\":2}}],[\"zuulfilter\",{\"1\":{\"205\":1}}],[\"zuulfallbackprovider\",{\"1\":{\"204\":2}}],[\"zuul<\",{\"1\":{\"200\":1}}],[\"zuul\",{\"0\":{\"199\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1},\"1\":{\"203\":4,\"204\":3}}],[\"zoo\",{\"1\":{\"299\":1}}],[\"zookeeper<\",{\"1\":{\"317\":1,\"325\":1}}],[\"zookeeper集群\",{\"1\":{\"194\":1}}],[\"zookeeper\",{\"0\":{\"191\":1,\"299\":1},\"1\":{\"192\":2,\"194\":1,\"196\":1,\"198\":1,\"287\":1,\"292\":5,\"299\":3,\"302\":1,\"303\":1,\"305\":1,\"317\":4,\"318\":1,\"322\":1,\"326\":1,\"327\":1}}],[\"zonepreferenceserverlistfilter\",{\"1\":{\"174\":4}}],[\"zoneddatetime\",{\"1\":{\"126\":2}}],[\"zipkin<\",{\"1\":{\"177\":1}}],[\"zipkin\",{\"0\":{\"176\":1},\"1\":{\"175\":1,\"176\":4,\"178\":1}}],[\"zy\",{\"1\":{\"173\":2}}],[\"zkserver\",{\"1\":{\"299\":1}}],[\"zk\",{\"1\":{\"98\":1,\"196\":1}}],[\"zch\",{\"1\":{\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1,\"503\":1,\"582\":1,\"606\":2,\"633\":4}}],[\"zhai\",{\"1\":{\"67\":1}}],[\"zh\",{\"1\":{\"35\":1,\"36\":2}}],[\"zzz\",{\"1\":{\"22\":1}}],[\"zzl\",{\"1\":{\"22\":1}}],[\"前提是要自动装配的属性在\",{\"1\":{\"587\":1}}],[\"前置通知\",{\"1\":{\"582\":2}}],[\"前置过滤器\",{\"1\":{\"205\":1}}],[\"前\",{\"1\":{\"521\":1}}],[\"前后端分离版\",{\"1\":{\"300\":1}}],[\"前后的\",{\"1\":{\"217\":1}}],[\"前端\",{\"1\":{\"576\":1}}],[\"前端代码\",{\"0\":{\"221\":1,\"225\":1},\"1\":{\"208\":1}}],[\"前端界面设置两个按钮并添加点击事件\",{\"1\":{\"36\":1}}],[\"前端界面\",{\"1\":{\"35\":1}}],[\"前缀\",{\"1\":{\"63\":1,\"213\":1,\"507\":1}}],[\"前缀的配置进行设置\",{\"1\":{\"69\":1}}],[\"前缀的\",{\"1\":{\"20\":1}}],[\"只负责响应事件\",{\"1\":{\"572\":1}}],[\"只使用\",{\"1\":{\"537\":1}}],[\"只读的缓存会给所有调用者返回缓存对象的相同实例\",{\"1\":{\"487\":1}}],[\"只读\",{\"1\":{\"487\":1}}],[\"只启用了本地的会话缓存\",{\"1\":{\"481\":1}}],[\"只保留可用数量的计数\",{\"1\":{\"478\":1}}],[\"只在读已提交和可重复读两个隔离级别下工作\",{\"1\":{\"376\":1}}],[\"只会绑定在唯一的\",{\"1\":{\"574\":1}}],[\"只会读取已经提交的事务\",{\"1\":{\"374\":1}}],[\"只会出现在重复读的事务级别中\",{\"1\":{\"359\":1}}],[\"只会过滤\",{\"1\":{\"228\":1}}],[\"只发起一次调用\",{\"1\":{\"313\":1}}],[\"只是丢失部分采样数据\",{\"1\":{\"305\":1}}],[\"只是忽略返回值\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"只是注解中的变量都是成员变量\",{\"1\":{\"261\":1}}],[\"只能实时\",{\"1\":{\"396\":1}}],[\"只能获取到public修饰的构造函数\",{\"1\":{\"279\":1}}],[\"只能通过设置浏览器的语言\",{\"1\":{\"33\":1}}],[\"只有当会话提交或者关闭时\",{\"1\":{\"488\":1}}],[\"只有当变量的预期值\",{\"1\":{\"398\":1}}],[\"只有一个对象\",{\"0\":{\"441\":1}}],[\"只有返回值\",{\"1\":{\"416\":1}}],[\"只有这些行才不能访问\",{\"1\":{\"359\":1}}],[\"只有这个请求路径才路由\",{\"1\":{\"123\":1}}],[\"只有成员变量\",{\"1\":{\"261\":1}}],[\"只有请求头中存在对应字段且字段值满足正则表达式才通过\",{\"1\":{\"130\":1}}],[\"只有某个时间之前的请求才能通过\",{\"1\":{\"127\":1}}],[\"只有拥有正确角色的用户可以正常访问\",{\"1\":{\"64\":1}}],[\"只要没有作者\",{\"1\":{\"445\":1}}],[\"只要对象有强引用指向且\",{\"1\":{\"366\":1}}],[\"只要一个成功即返回\",{\"1\":{\"313\":1}}],[\"只要在每一个的配置文件的\",{\"1\":{\"109\":1}}],[\"只要写一个类实现\",{\"1\":{\"46\":1}}],[\"只刷新某个\",{\"0\":{\"79\":1}}],[\"只需要\",{\"1\":{\"539\":1}}],[\"只需要在\",{\"1\":{\"204\":1}}],[\"只需要在浏览器输入\",{\"1\":{\"69\":1}}],[\"只需使用对应的\",{\"1\":{\"16\":1}}],[\"不论方法\",{\"1\":{\"632\":1}}],[\"不论编码器和解码器\",{\"1\":{\"532\":1}}],[\"不推荐这种使用方法\",{\"1\":{\"631\":1}}],[\"不用依赖\",{\"1\":{\"623\":1}}],[\"不用去关注一些公共的业务\",{\"1\":{\"615\":1}}],[\"不用也可以\",{\"1\":{\"538\":1}}],[\"不适用于复杂类型如\",{\"1\":{\"578\":1}}],[\"不唯一\",{\"1\":{\"576\":2}}],[\"不做具体业务处理\",{\"1\":{\"572\":1}}],[\"不转发给自己\",{\"1\":{\"538\":1}}],[\"不写下方循环不会输出\",{\"1\":{\"537\":1}}],[\"不断轮询\",{\"1\":{\"552\":1}}],[\"不断读取输入\",{\"1\":{\"526\":1}}],[\"不断获取内存中的值\",{\"1\":{\"399\":1}}],[\"不开就生成一个java文件\",{\"1\":{\"521\":1}}],[\"不建议使用\",{\"1\":{\"601\":1}}],[\"不建议死循环\",{\"1\":{\"464\":1}}],[\"不建议配置\",{\"1\":{\"293\":1}}],[\"不一定能礼让成功\",{\"1\":{\"466\":1}}],[\"不一定\",{\"1\":{\"435\":1}}],[\"不一定立即执行\",{\"1\":{\"391\":1}}],[\"不保证原子性\",{\"0\":{\"430\":1},\"1\":{\"428\":1}}],[\"不允许声明不可变域\",{\"1\":{\"587\":1}}],[\"不允许工作内存直接使用一个未被初始化的变量\",{\"1\":{\"422\":1}}],[\"不允许一个线程将没有\",{\"1\":{\"422\":1}}],[\"不允许线程丢弃他最近的\",{\"1\":{\"422\":1}}],[\"不允许\",{\"1\":{\"422\":1}}],[\"不安全\",{\"0\":{\"402\":1,\"403\":1,\"404\":1}}],[\"不抛异常\",{\"1\":{\"395\":1}}],[\"不抛出异常\",{\"1\":{\"395\":1}}],[\"不受锁的影响\",{\"1\":{\"439\":1}}],[\"不受\",{\"1\":{\"355\":1}}],[\"不要在片段中包含\",{\"1\":{\"507\":1}}],[\"不要使用\",{\"1\":{\"464\":1}}],[\"不要新建索引\",{\"1\":{\"343\":1}}],[\"不要过度索引\",{\"1\":{\"343\":1}}],[\"不指定就是java运行时环境自动生成\",{\"1\":{\"334\":1}}],[\"不指定protocol\",{\"1\":{\"292\":1}}],[\"不能与\",{\"1\":{\"607\":1}}],[\"不能立刻得知消息是否正确处理\",{\"1\":{\"545\":1}}],[\"不能重复\",{\"1\":{\"521\":1}}],[\"不能和下面定义的message重名\",{\"1\":{\"521\":1}}],[\"不能\",{\"1\":{\"488\":1}}],[\"不能是\",{\"1\":{\"361\":1}}],[\"不能序列化\",{\"1\":{\"334\":1}}],[\"不能直接使用\",{\"1\":{\"67\":1}}],[\"不含第一次\",{\"1\":{\"313\":1}}],[\"不含包名\",{\"1\":{\"279\":1}}],[\"不处理业务\",{\"1\":{\"293\":1}}],[\"不阻塞执行线程\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"不可中断\",{\"1\":{\"435\":1}}],[\"不可以访问\",{\"1\":{\"376\":1}}],[\"不可重复读解决了脏读的问题\",{\"1\":{\"374\":1}}],[\"不可靠异步\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"不可控的\",{\"1\":{\"282\":1}}],[\"不需要判断字节数是否够\",{\"1\":{\"567\":1}}],[\"不需要强制类型转换\",{\"1\":{\"521\":1}}],[\"不需要捕获异常\",{\"1\":{\"465\":1}}],[\"不需要再引入\",{\"1\":{\"317\":1}}],[\"不需要重试请设为0\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"不需要在\",{\"1\":{\"235\":1}}],[\"不需要在mapper接口上添加\",{\"1\":{\"233\":1}}],[\"不包含换行符\",{\"1\":{\"331\":1}}],[\"不包含父类实现的接口\",{\"1\":{\"279\":1}}],[\"不包括第一次调用\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"不订阅\",{\"1\":{\"287\":1}}],[\"不注册\",{\"1\":{\"287\":1}}],[\"不配置则会使用\",{\"1\":{\"282\":1}}],[\"不同协议\",{\"1\":{\"546\":1}}],[\"不同\",{\"1\":{\"505\":1}}],[\"不同的阻塞类型的连接都有不同的\",{\"1\":{\"546\":1}}],[\"不同的\",{\"1\":{\"489\":1}}],[\"不同的事务会话会看到自己特定版本的数据\",{\"1\":{\"376\":1}}],[\"不同的架构使用不同的分层\",{\"1\":{\"286\":1}}],[\"不同注册中心实现不一样\",{\"1\":{\"287\":1}}],[\"不同集群的注册中心\",{\"1\":{\"287\":1}}],[\"不同环境使用不同的缺省值\",{\"1\":{\"286\":1}}],[\"不同粒度配置的覆盖关系\",{\"0\":{\"283\":1}}],[\"不同于接口我们可以在注解的括号中给成员变量赋值\",{\"1\":{\"264\":1}}],[\"不同分组可以重复消费\",{\"1\":{\"189\":1}}],[\"不再拷贝到用户态\",{\"1\":{\"539\":1}}],[\"不再经过视图解析器\",{\"1\":{\"241\":1}}],[\"不再是原先的\",{\"1\":{\"217\":1}}],[\"不再集成\",{\"1\":{\"165\":1}}],[\"不管能不能解析它都不会返回\",{\"1\":{\"213\":1}}],[\"不在\",{\"1\":{\"338\":1}}],[\"不在同一个域下\",{\"1\":{\"207\":1}}],[\"不在本地\",{\"1\":{\"187\":1}}],[\"不会执行\",{\"1\":{\"532\":1}}],[\"不会\",{\"1\":{\"465\":1}}],[\"不会初始化子类的几种情况\",{\"1\":{\"342\":1}}],[\"不会引起剧烈变动\",{\"1\":{\"310\":1}}],[\"不会自动缓存结果\",{\"1\":{\"207\":1}}],[\"不会进行降级\",{\"1\":{\"204\":1}}],[\"不对其进行路由\",{\"1\":{\"205\":1}}],[\"不显示任何日志\",{\"1\":{\"167\":1}}],[\"不仅可以比较数值\",{\"1\":{\"67\":1}}],[\"不存在\",{\"1\":{\"63\":1}}],[\"不是实时的\",{\"1\":{\"233\":1}}],[\"不是记住我登录的\",{\"1\":{\"56\":1}}],[\"不是真实存在的\",{\"1\":{\"33\":1}}],[\"不影响使用\",{\"1\":{\"51\":1,\"305\":1}}],[\"不使用jdk提供的线程创建工厂\",{\"1\":{\"474\":1}}],[\"不使用\",{\"0\":{\"35\":1,\"82\":1}}],[\"不导入会存在警告\",{\"1\":{\"22\":1}}],[\"国际化\",{\"0\":{\"32\":1},\"1\":{\"622\":1}}],[\"启动成功\",{\"1\":{\"563\":1}}],[\"启动类\",{\"1\":{\"319\":1,\"322\":1,\"323\":1,\"558\":1}}],[\"启动类开启\",{\"0\":{\"116\":1}}],[\"启动前端\",{\"1\":{\"300\":1}}],[\"启动时检查提供者是否存在\",{\"1\":{\"291\":1,\"294\":1}}],[\"启动时\",{\"1\":{\"117\":1}}],[\"启动\",{\"0\":{\"96\":1},\"1\":{\"176\":1,\"218\":1}}],[\"启动器\",{\"1\":{\"16\":1}}],[\"启用\",{\"1\":{\"31\":1}}],[\"禁止指令重排\",{\"1\":{\"428\":1}}],[\"禁止那些ip\",{\"1\":{\"31\":1}}],[\"禁止访问的ip等信息\",{\"1\":{\"30\":1}}],[\"goals>\",{\"1\":{\"521\":1}}],[\"goal>\",{\"1\":{\"521\":1}}],[\"google\",{\"1\":{\"474\":1,\"520\":1,\"521\":1}}],[\"guava<\",{\"1\":{\"474\":1}}],[\"guest>\",{\"1\":{\"56\":2}}],[\"guest\",{\"1\":{\"56\":1}}],[\"gc\",{\"1\":{\"366\":1,\"368\":1,\"369\":1,\"370\":1}}],[\"gbk\",{\"1\":{\"332\":1,\"536\":1}}],[\"games=\",{\"1\":{\"593\":1}}],[\"games\",{\"1\":{\"593\":7}}],[\"game\",{\"1\":{\"278\":6}}],[\"gatewayfilterchain\",{\"1\":{\"139\":1}}],[\"gateway<\",{\"1\":{\"121\":1}}],[\"gateway\",{\"0\":{\"120\":1},\"1\":{\"47\":1,\"122\":4,\"123\":2,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"138\":1}}],[\"gzip\",{\"0\":{\"118\":1},\"1\":{\"118\":1}}],[\"globaleventexecutor\",{\"1\":{\"525\":1}}],[\"globalfilter\",{\"1\":{\"139\":2}}],[\"global\",{\"1\":{\"97\":1,\"182\":1,\"194\":1}}],[\"generic\",{\"1\":{\"291\":1,\"294\":1}}],[\"genericparametertype\",{\"1\":{\"279\":3}}],[\"genericparametertypes\",{\"1\":{\"279\":2}}],[\"genericdeclaration\",{\"1\":{\"272\":1}}],[\"genericservlet\",{\"1\":{\"254\":2}}],[\"gender\",{\"1\":{\"67\":1}}],[\"ge\",{\"1\":{\"67\":1}}],[\"getwife\",{\"1\":{\"593\":1}}],[\"getwelcomepage\",{\"1\":{\"71\":4}}],[\"getgames\",{\"1\":{\"593\":1}}],[\"getgenericparametertypes\",{\"1\":{\"279\":1}}],[\"getelementbyid\",{\"1\":{\"576\":4}}],[\"getter\",{\"1\":{\"587\":1}}],[\"getteacher\",{\"1\":{\"517\":2,\"522\":1}}],[\"gettitle\",{\"1\":{\"507\":1}}],[\"gettime\",{\"1\":{\"303\":1,\"322\":1,\"323\":2,\"327\":1}}],[\"get方法异常完成会导致executionexception\",{\"1\":{\"409\":1}}],[\"getlen\",{\"1\":{\"567\":2}}],[\"getlength\",{\"1\":{\"382\":1}}],[\"getlocaladdress\",{\"1\":{\"538\":1}}],[\"getlocalhost\",{\"1\":{\"379\":1,\"380\":1,\"382\":1,\"383\":1}}],[\"getloadbalancer\",{\"1\":{\"173\":1}}],[\"getlogger\",{\"1\":{\"146\":1}}],[\"getdatasource\",{\"1\":{\"609\":2,\"630\":3}}],[\"getdatatype\",{\"1\":{\"522\":1}}],[\"getdata\",{\"1\":{\"382\":1,\"383\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"272\":1,\"279\":1,\"448\":1}}],[\"getdeclaredfield\",{\"1\":{\"272\":1,\"279\":1}}],[\"getdeclaredmethod\",{\"1\":{\"265\":1,\"272\":1,\"279\":1}}],[\"getdefaultinstance\",{\"1\":{\"521\":1,\"522\":1}}],[\"getdefault\",{\"1\":{\"35\":1}}],[\"getusers\",{\"1\":{\"609\":2,\"630\":3}}],[\"getuserserviceimpl\",{\"1\":{\"582\":1}}],[\"getusermapperimpl\",{\"1\":{\"630\":1}}],[\"getusermapper\",{\"1\":{\"609\":1,\"630\":1}}],[\"getuser\",{\"1\":{\"597\":1,\"599\":5,\"602\":2,\"608\":2,\"609\":1,\"619\":1,\"630\":1}}],[\"getuserlist\",{\"1\":{\"502\":1,\"508\":4}}],[\"getuserdetail\",{\"1\":{\"327\":2}}],[\"getusername\",{\"1\":{\"54\":1,\"56\":1}}],[\"getvaluetest\",{\"1\":{\"272\":1}}],[\"getname\",{\"1\":{\"270\":1,\"279\":4,\"334\":1,\"386\":1,\"396\":2,\"417\":1,\"445\":4,\"448\":2,\"450\":4,\"451\":1,\"453\":1,\"454\":1,\"456\":4,\"466\":2,\"470\":1,\"472\":1,\"473\":1,\"474\":1,\"476\":1,\"477\":1,\"478\":2,\"521\":1,\"522\":2,\"536\":2,\"558\":1,\"582\":3,\"593\":1,\"618\":1}}],[\"getjsonobject\",{\"1\":{\"249\":1}}],[\"getbooks\",{\"1\":{\"593\":1}}],[\"getbody\",{\"1\":{\"184\":1,\"204\":1}}],[\"getbean\",{\"1\":{\"322\":1,\"323\":1,\"582\":2,\"593\":1,\"597\":1,\"602\":1,\"606\":1,\"609\":1,\"619\":1,\"630\":1}}],[\"getbirthday\",{\"1\":{\"302\":1,\"317\":1,\"319\":2,\"326\":1}}],[\"getbytes\",{\"1\":{\"204\":1,\"379\":1,\"380\":1,\"382\":2,\"537\":2,\"538\":2,\"567\":3}}],[\"getruntime\",{\"1\":{\"388\":1,\"400\":1,\"472\":2,\"474\":1,\"536\":2,\"558\":2}}],[\"getrootconfigclasses\",{\"1\":{\"232\":1}}],[\"getroute\",{\"1\":{\"204\":1}}],[\"getrawstatuscode\",{\"1\":{\"204\":1}}],[\"getreturntype\",{\"1\":{\"558\":1}}],[\"getremoteaddress\",{\"1\":{\"538\":3}}],[\"getreference\",{\"1\":{\"388\":1,\"451\":1}}],[\"getrealpath\",{\"1\":{\"223\":2,\"226\":1}}],[\"getreasonphrase\",{\"1\":{\"204\":1}}],[\"getreachableservers\",{\"1\":{\"173\":1}}],[\"getresponse\",{\"1\":{\"139\":2}}],[\"getresourceasstream\",{\"1\":{\"508\":1}}],[\"getresource\",{\"1\":{\"71\":1}}],[\"getresourcelocations\",{\"1\":{\"69\":1,\"71\":1}}],[\"getrequesturi\",{\"1\":{\"229\":1,\"234\":1}}],[\"getrequestdispatcher\",{\"1\":{\"217\":1,\"229\":1,\"234\":1,\"254\":1}}],[\"getrequest\",{\"1\":{\"139\":1,\"205\":1}}],[\"gethobbies\",{\"1\":{\"593\":1}}],[\"gethost\",{\"1\":{\"172\":1}}],[\"getheaders\",{\"1\":{\"184\":1,\"204\":1}}],[\"getaddress\",{\"1\":{\"593\":1}}],[\"getandaddint\",{\"1\":{\"399\":2}}],[\"getandincrement\",{\"1\":{\"399\":1,\"400\":1,\"430\":1}}],[\"getannotations\",{\"1\":{\"272\":1,\"277\":1}}],[\"getannotation\",{\"1\":{\"265\":1,\"272\":6}}],[\"getage\",{\"1\":{\"302\":1,\"303\":1,\"315\":1,\"317\":1,\"319\":2,\"322\":1,\"323\":2,\"326\":1,\"327\":1,\"334\":1,\"417\":2,\"522\":1}}],[\"getactualtypearguments\",{\"1\":{\"279\":1}}],[\"getactualtypearguments获得真实的参数类型信息\",{\"1\":{\"279\":1}}],[\"getaccount\",{\"1\":{\"63\":1}}],[\"getattribute\",{\"1\":{\"229\":1,\"234\":1}}],[\"getallservers\",{\"1\":{\"173\":1}}],[\"getforentity\",{\"1\":{\"184\":2}}],[\"getforobject\",{\"1\":{\"172\":1,\"183\":2,\"184\":2}}],[\"getfirst\",{\"1\":{\"139\":1}}],[\"getmapper\",{\"1\":{\"503\":1,\"506\":1,\"507\":1,\"508\":1,\"630\":4}}],[\"getmapping\",{\"1\":{\"164\":3,\"172\":1,\"182\":2,\"183\":3,\"215\":1}}],[\"getmethod\",{\"1\":{\"279\":2}}],[\"getmessage\",{\"1\":{\"146\":1,\"386\":2,\"576\":1}}],[\"getmodifiers\",{\"1\":{\"279\":2}}],[\"getmodifiers返回一个int\",{\"1\":{\"279\":1}}],[\"getmsg\",{\"1\":{\"172\":1}}],[\"getoutputstream\",{\"1\":{\"226\":1,\"379\":1,\"380\":2,\"540\":1}}],[\"getoriginalfilename\",{\"1\":{\"223\":2}}],[\"getorder\",{\"1\":{\"139\":1}}],[\"getone\",{\"1\":{\"144\":1,\"182\":1}}],[\"getobject\",{\"1\":{\"39\":3,\"233\":1,\"510\":3,\"609\":1,\"630\":1}}],[\"getqueryparams\",{\"1\":{\"139\":1}}],[\"getid\",{\"1\":{\"279\":3,\"417\":1,\"460\":1,\"461\":1,\"505\":1,\"521\":1,\"522\":1}}],[\"getinfo\",{\"1\":{\"593\":1}}],[\"getinstance\",{\"1\":{\"302\":2,\"303\":1,\"317\":2,\"319\":4,\"322\":1,\"323\":2,\"326\":2,\"327\":1,\"447\":1,\"448\":6,\"558\":5}}],[\"getintvolatile\",{\"1\":{\"399\":1}}],[\"getinterfaces\",{\"1\":{\"279\":1,\"618\":1}}],[\"getinterceptors\",{\"1\":{\"71\":1}}],[\"getint\",{\"1\":{\"249\":1}}],[\"getinputstream\",{\"1\":{\"223\":1,\"379\":1,\"380\":2,\"384\":1,\"536\":1,\"540\":1}}],[\"getindexhtml\",{\"1\":{\"71\":3}}],[\"getimageurl\",{\"1\":{\"44\":1}}],[\"getcard\",{\"1\":{\"593\":1}}],[\"getcachecontrol\",{\"1\":{\"69\":1}}],[\"getcache\",{\"1\":{\"69\":4}}],[\"getchannel\",{\"1\":{\"537\":7,\"541\":2}}],[\"getchild\",{\"1\":{\"522\":1}}],[\"getclassloader\",{\"1\":{\"271\":2,\"617\":2,\"618\":1}}],[\"getclass\",{\"1\":{\"270\":2,\"334\":2,\"563\":1,\"582\":1,\"618\":2}}],[\"getcurrentcontext\",{\"1\":{\"205\":1}}],[\"getconstructor\",{\"1\":{\"617\":1}}],[\"getconstructors\",{\"1\":{\"279\":1}}],[\"getcontent\",{\"1\":{\"567\":4}}],[\"getcontextclassloader\",{\"1\":{\"558\":1}}],[\"getconnection\",{\"1\":{\"39\":1,\"510\":1,\"511\":1}}],[\"getcombopooleddatasource\",{\"1\":{\"233\":3}}],[\"getcorsconfigurations\",{\"1\":{\"71\":1}}],[\"getsalary\",{\"1\":{\"521\":1}}],[\"getsqlsession\",{\"1\":{\"506\":1,\"507\":1,\"508\":2,\"608\":2,\"630\":4}}],[\"getsqlsessionfactory\",{\"1\":{\"503\":2,\"609\":2,\"630\":3}}],[\"getsqlsessionfactorybean\",{\"1\":{\"233\":1}}],[\"gets\",{\"1\":{\"416\":1}}],[\"getsuperclass\",{\"1\":{\"279\":1}}],[\"getsubject\",{\"1\":{\"55\":1}}],[\"getsimplename\",{\"1\":{\"279\":1}}],[\"getsystemclassloader\",{\"1\":{\"271\":1}}],[\"getstudent\",{\"1\":{\"518\":2}}],[\"getstring\",{\"1\":{\"249\":1}}],[\"getstate\",{\"1\":{\"468\":4}}],[\"getstatustext\",{\"1\":{\"204\":1}}],[\"getstatuscodevalue\",{\"1\":{\"184\":1}}],[\"getstatuscode\",{\"1\":{\"184\":1,\"204\":3}}],[\"getstaticlocations\",{\"1\":{\"69\":2,\"71\":2}}],[\"getstaticpathpattern\",{\"1\":{\"69\":2,\"71\":2}}],[\"getsex\",{\"1\":{\"334\":1}}],[\"getsession\",{\"1\":{\"229\":1,\"234\":1,\"254\":3}}],[\"getservletinfo\",{\"1\":{\"254\":1}}],[\"getservletfilters\",{\"1\":{\"232\":1}}],[\"getservletmappings\",{\"1\":{\"232\":1}}],[\"getservletconfig\",{\"1\":{\"254\":1}}],[\"getservletconfigclasses\",{\"1\":{\"232\":1}}],[\"getservletcontext\",{\"1\":{\"223\":2,\"226\":1}}],[\"getservletcontext方法需要servlet\",{\"1\":{\"223\":1}}],[\"getserverport\",{\"1\":{\"67\":1}}],[\"getseconds\",{\"1\":{\"69\":2}}],[\"getproxy\",{\"1\":{\"618\":2}}],[\"getproxyclass\",{\"1\":{\"617\":1}}],[\"getproperty\",{\"1\":{\"271\":1}}],[\"getpriority\",{\"1\":{\"470\":2}}],[\"getprincipals\",{\"1\":{\"56\":1}}],[\"getport\",{\"1\":{\"172\":1}}],[\"getperiod\",{\"1\":{\"69\":1}}],[\"getpath\",{\"1\":{\"563\":1}}],[\"getpackage\",{\"1\":{\"279\":1}}],[\"getparent\",{\"1\":{\"271\":2}}],[\"getparameters\",{\"1\":{\"272\":1}}],[\"getparameter\",{\"1\":{\"35\":1,\"55\":2,\"205\":1,\"215\":1,\"254\":1}}],[\"getpayload\",{\"1\":{\"188\":1}}],[\"getpaymentbyid\",{\"1\":{\"144\":1,\"164\":2,\"182\":5,\"183\":3}}],[\"getpayments\",{\"1\":{\"143\":1,\"144\":1,\"164\":2,\"182\":5,\"183\":3}}],[\"getpaymentsok\",{\"1\":{\"143\":2,\"144\":2}}],[\"getpassword\",{\"1\":{\"54\":1,\"63\":1}}],[\"get\",{\"1\":{\"51\":2,\"54\":1,\"137\":1,\"145\":1,\"146\":1,\"164\":1,\"172\":2,\"173\":1,\"184\":3,\"207\":2,\"241\":3,\"249\":2,\"272\":1,\"302\":2,\"317\":2,\"319\":4,\"326\":2,\"368\":1,\"386\":2,\"393\":2,\"409\":1,\"416\":2,\"430\":1,\"445\":1,\"460\":2,\"461\":1,\"473\":1,\"478\":1,\"537\":1,\"558\":3,\"609\":1,\"630\":1}}],[\"gt\",{\"1\":{\"67\":1}}],[\"given\",{\"1\":{\"413\":1,\"414\":1,\"415\":1}}],[\"git仓库中文件名\",{\"1\":{\"85\":1}}],[\"gitee\",{\"1\":{\"75\":1,\"83\":1,\"87\":1}}],[\"git\",{\"1\":{\"75\":2,\"83\":2,\"85\":1,\"87\":2,\"93\":1}}],[\"github\",{\"1\":{\"53\":1}}],[\"gif\",{\"1\":{\"31\":1}}],[\"groupchat\",{\"1\":{\"538\":2}}],[\"groupid为javax\",{\"1\":{\"251\":1}}],[\"groupid>\",{\"1\":{\"22\":1,\"23\":1,\"42\":1,\"49\":3,\"53\":3,\"58\":3,\"66\":1,\"69\":1,\"74\":1,\"81\":3,\"90\":1,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"177\":1,\"180\":8,\"181\":2,\"182\":9,\"183\":9,\"186\":1,\"192\":1,\"200\":3,\"239\":1,\"243\":1,\"247\":1,\"251\":16,\"252\":1,\"315\":1,\"317\":8,\"325\":6,\"474\":1,\"508\":2,\"521\":2,\"575\":1,\"582\":1,\"604\":4}}],[\"group\",{\"0\":{\"159\":1},\"1\":{\"189\":1,\"287\":1,\"289\":1,\"291\":1,\"292\":1,\"293\":1,\"521\":1,\"524\":1,\"526\":1,\"528\":1,\"544\":2,\"558\":2,\"563\":1,\"575\":2,\"576\":1}}],[\"groupkey\",{\"1\":{\"143\":1}}],[\"gree\",{\"1\":{\"134\":1}}],[\"grantedauthority\",{\"1\":{\"63\":1}}],[\"grade=\",{\"1\":{\"20\":1}}],[\"grade\",{\"1\":{\"20\":2,\"22\":1}}],[\"grille\",{\"1\":{\"33\":1}}],[\"grid\",{\"1\":{\"33\":1}}],[\"慢sql记录\",{\"1\":{\"31\":1}}],[\"ws\",{\"1\":{\"576\":1}}],[\"worker=new\",{\"1\":{\"558\":1}}],[\"workereventloopgroup\",{\"1\":{\"552\":3}}],[\"workergroup\",{\"1\":{\"544\":1,\"552\":1,\"563\":3,\"574\":2,\"575\":3}}],[\"worker\",{\"1\":{\"524\":3,\"528\":1,\"558\":3,\"572\":2,\"573\":2,\"574\":3,\"576\":3}}],[\"workqueue\",{\"1\":{\"473\":5}}],[\"wife=\",{\"1\":{\"593\":1}}],[\"wife\",{\"1\":{\"593\":7}}],[\"width\",{\"1\":{\"576\":2}}],[\"window\",{\"1\":{\"576\":1}}],[\"windows\",{\"1\":{\"299\":1,\"541\":1}}],[\"win64\",{\"1\":{\"521\":1}}],[\"withpayload\",{\"1\":{\"187\":1}}],[\"with\",{\"1\":{\"102\":1,\"122\":1}}],[\"withuser\",{\"1\":{\"59\":2}}],[\"wrap\",{\"1\":{\"537\":1,\"538\":2}}],[\"wrapper\",{\"1\":{\"63\":1}}],[\"writebytes\",{\"1\":{\"567\":1}}],[\"writeboolean\",{\"1\":{\"333\":1,\"336\":1}}],[\"writelong\",{\"1\":{\"532\":1,\"567\":1}}],[\"writelock\",{\"1\":{\"432\":1,\"445\":2}}],[\"writer\",{\"1\":{\"528\":1}}],[\"writeandflush\",{\"1\":{\"521\":2,\"522\":3,\"525\":5,\"526\":1,\"532\":1,\"558\":3,\"561\":2,\"563\":1,\"566\":2,\"567\":2,\"575\":2,\"576\":1}}],[\"writechar\",{\"1\":{\"336\":1}}],[\"writeobject\",{\"1\":{\"334\":1}}],[\"writedouble\",{\"1\":{\"333\":1}}],[\"writeutf\",{\"1\":{\"333\":1}}],[\"writevalueasbytes\",{\"1\":{\"241\":1}}],[\"writevalueasstring\",{\"1\":{\"241\":6,\"327\":1}}],[\"writevalue\",{\"1\":{\"241\":1}}],[\"write\",{\"1\":{\"223\":1,\"226\":1,\"241\":1,\"330\":1,\"331\":2,\"332\":1,\"339\":2,\"340\":1,\"379\":2,\"380\":4,\"383\":2,\"384\":1,\"421\":2,\"422\":2,\"445\":1,\"537\":7,\"538\":2,\"539\":2,\"540\":2,\"541\":1,\"562\":2,\"574\":1}}],[\"wuhu\",{\"1\":{\"215\":1}}],[\"w3\",{\"1\":{\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"weak\",{\"1\":{\"368\":1,\"487\":1}}],[\"weightlow\",{\"1\":{\"136\":2}}],[\"weight=group1\",{\"1\":{\"136\":2}}],[\"weighthigh\",{\"1\":{\"136\":2}}],[\"weight\",{\"0\":{\"136\":1},\"1\":{\"136\":2,\"289\":1,\"293\":1,\"302\":1,\"326\":1}}],[\"welcomepagehandlermapping\",{\"1\":{\"71\":10}}],[\"websocket\",{\"1\":{\"576\":3}}],[\"websocketserverprotocolhandler\",{\"1\":{\"576\":1}}],[\"websocket长连接\",{\"0\":{\"576\":1}}],[\"websecurity\",{\"1\":{\"59\":1,\"62\":2}}],[\"websecurityconfigureradapter\",{\"1\":{\"59\":1,\"62\":2}}],[\"web<\",{\"1\":{\"182\":1,\"183\":1}}],[\"webproperties\",{\"1\":{\"69\":2}}],[\"webmvc<\",{\"1\":{\"251\":1}}],[\"webmvcproperties\",{\"1\":{\"69\":1,\"71\":1}}],[\"webmvc\",{\"1\":{\"46\":1}}],[\"webmvcconfigurationsupport\",{\"1\":{\"46\":5}}],[\"webmvcconfigurer\",{\"1\":{\"46\":1,\"47\":1,\"233\":2}}],[\"webmvcautoconfiguration\",{\"1\":{\"46\":2,\"69\":1,\"71\":1}}],[\"webjars<\",{\"1\":{\"69\":1}}],[\"webjars\",{\"1\":{\"36\":1,\"69\":9}}],[\"web\",{\"0\":{\"68\":1,\"212\":1,\"256\":1,\"626\":1,\"627\":1},\"1\":{\"19\":1,\"31\":1,\"59\":3,\"62\":8,\"69\":4,\"75\":1,\"76\":1,\"77\":1,\"91\":1,\"151\":1,\"180\":1,\"212\":3,\"213\":4,\"215\":3,\"217\":2,\"218\":2,\"222\":1,\"229\":1,\"232\":1,\"233\":1,\"234\":1,\"252\":1,\"254\":1,\"256\":7,\"260\":2,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"496\":1,\"513\":1,\"626\":3,\"627\":1}}],[\"when>\",{\"1\":{\"507\":2}}],[\"when\",{\"1\":{\"504\":1,\"507\":1}}],[\"whencomplete\",{\"1\":{\"386\":1}}],[\"where>\",{\"1\":{\"507\":2}}],[\"where\",{\"1\":{\"51\":1,\"343\":1,\"483\":8,\"502\":1,\"504\":1,\"506\":1,\"507\":11,\"508\":1,\"517\":2,\"518\":3,\"630\":2}}],[\"while\",{\"1\":{\"39\":1,\"173\":1,\"223\":1,\"226\":1,\"330\":1,\"331\":2,\"332\":1,\"338\":2,\"340\":1,\"379\":1,\"380\":3,\"383\":1,\"384\":1,\"388\":1,\"399\":1,\"400\":1,\"429\":1,\"430\":2,\"451\":2,\"453\":1,\"454\":1,\"460\":3,\"461\":2,\"464\":1,\"465\":1,\"468\":1,\"469\":1,\"510\":1,\"526\":1,\"536\":2,\"537\":8,\"538\":5,\"540\":3,\"541\":2,\"558\":1}}],[\"www\",{\"1\":{\"36\":1,\"47\":1,\"56\":2,\"59\":1,\"60\":2,\"66\":1,\"67\":2,\"212\":1,\"213\":4,\"215\":10,\"217\":1,\"256\":1,\"318\":4,\"322\":7,\"582\":14,\"584\":5,\"585\":5,\"586\":7,\"587\":8,\"594\":11,\"596\":4,\"597\":4,\"630\":1,\"633\":13}}],[\"watch\",{\"1\":{\"462\":2}}],[\"watcher\",{\"1\":{\"462\":3}}],[\"waiting\",{\"1\":{\"451\":1,\"468\":2,\"536\":2}}],[\"wait\",{\"1\":{\"287\":1,\"460\":3,\"462\":2,\"465\":4,\"558\":2}}],[\"war\",{\"1\":{\"180\":2}}],[\"warning\",{\"1\":{\"33\":1}}],[\"was\",{\"1\":{\"146\":1}}],[\"wabjars\",{\"1\":{\"69\":1}}],[\"wall\",{\"1\":{\"31\":2}}],[\"检测是否连接\",{\"1\":{\"528\":3}}],[\"检测需要关闭的空闲连接\",{\"1\":{\"31\":1}}],[\"检查\",{\"1\":{\"252\":1}}],[\"检查模板位置是否正确\",{\"1\":{\"19\":1}}],[\"检查模板是否存在\",{\"1\":{\"19\":1}}],[\"时将会终止\",{\"1\":{\"473\":1}}],[\"时间\",{\"1\":{\"576\":1}}],[\"时间上具有不确定性\",{\"1\":{\"368\":1}}],[\"时间单位都是毫秒ms\",{\"1\":{\"31\":1}}],[\"时饥饿初始化引用\",{\"1\":{\"291\":1,\"294\":1}}],[\"时执行\",{\"1\":{\"207\":1,\"289\":1,\"291\":1}}],[\"时\",{\"1\":{\"47\":2,\"235\":1,\"258\":1,\"317\":1,\"346\":2,\"369\":1,\"507\":1}}],[\"时均会指向\",{\"1\":{\"47\":1}}],[\"时添加到视图名称后的后缀\",{\"1\":{\"19\":1}}],[\"时添加到视图名称前的前缀\",{\"1\":{\"19\":1}}],[\"若参数是基本类型则使用value\",{\"1\":{\"601\":1}}],[\"若有多个参数\",{\"1\":{\"601\":1}}],[\"若无法实现\",{\"1\":{\"589\":1}}],[\"若将\",{\"1\":{\"508\":1}}],[\"若不使用\",{\"1\":{\"599\":2}}],[\"若不使用视图解析器\",{\"1\":{\"217\":1}}],[\"若不开启自动提交\",{\"1\":{\"503\":1}}],[\"若没有开启自动提交\",{\"1\":{\"503\":1}}],[\"若引用了外部文件\",{\"1\":{\"497\":1}}],[\"若数字\",{\"1\":{\"363\":1}}],[\"若两个操作数都是直接量数字\",{\"1\":{\"363\":1}}],[\"若两个操作数中有一个是数字\",{\"1\":{\"363\":1}}],[\"若两个操作数是明确类型的表达式\",{\"1\":{\"363\":1}}],[\"若两个操作数不可转换\",{\"1\":{\"363\":1}}],[\"若是不能有效区分数据的列不适合做索引列\",{\"1\":{\"343\":1}}],[\"若类实例变量做出了修改\",{\"1\":{\"334\":1}}],[\"若仅\",{\"1\":{\"256\":1}}],[\"若设置false\",{\"1\":{\"207\":1}}],[\"若设置为true\",{\"1\":{\"203\":1}}],[\"若在10秒内一\",{\"1\":{\"143\":1}}],[\"若git中没有配置端口号\",{\"1\":{\"85\":1}}],[\"若修改了\",{\"1\":{\"71\":1}}],[\"若自定义了静态资源的路径\",{\"1\":{\"69\":1}}],[\"若使用有参创建\",{\"1\":{\"601\":1}}],[\"若使用老版本\",{\"1\":{\"72\":1}}],[\"若使用\",{\"1\":{\"67\":2,\"184\":1}}],[\"若名称正确\",{\"1\":{\"33\":1}}],[\"若为空就重定向\",{\"1\":{\"223\":1}}],[\"若为\",{\"1\":{\"31\":1}}],[\"若\",{\"1\":{\"31\":1,\"363\":1,\"488\":1}}],[\"293508253\",{\"1\":{\"483\":6}}],[\"25\",{\"1\":{\"241\":1}}],[\"28\",{\"1\":{\"194\":1,\"196\":1}}],[\"2<\",{\"1\":{\"180\":1,\"239\":1,\"251\":3}}],[\"26<\",{\"1\":{\"180\":1}}],[\"230\",{\"1\":{\"290\":1}}],[\"23\",{\"1\":{\"176\":1}}],[\"2==0\",{\"1\":{\"147\":1,\"417\":1}}],[\"24\",{\"1\":{\"67\":1,\"135\":1}}],[\"214748364\",{\"1\":{\"470\":1}}],[\"210\",{\"1\":{\"414\":1}}],[\"21<\",{\"1\":{\"251\":1,\"508\":1,\"604\":1}}],[\"216\",{\"1\":{\"194\":1,\"196\":1}}],[\"211\",{\"1\":{\"194\":1,\"196\":1}}],[\"21t17\",{\"1\":{\"128\":1}}],[\"2181\",{\"1\":{\"194\":3,\"196\":3,\"292\":2,\"299\":1,\"302\":1,\"303\":1,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"326\":1,\"327\":1}}],[\"218\",{\"1\":{\"102\":2,\"106\":2}}],[\"21\",{\"1\":{\"67\":1,\"272\":1,\"334\":1,\"414\":1,\"593\":3,\"594\":1}}],[\"2\",{\"0\":{\"319\":1},\"1\":{\"67\":2,\"109\":1,\"136\":1,\"176\":1,\"177\":1,\"180\":1,\"241\":1,\"243\":1,\"249\":1,\"251\":2,\"254\":1,\"287\":7,\"289\":1,\"292\":1,\"293\":3,\"294\":1,\"300\":1,\"302\":1,\"313\":3,\"317\":1,\"326\":1,\"327\":1,\"331\":1,\"332\":1,\"340\":1,\"363\":1,\"383\":1,\"388\":3,\"409\":2,\"411\":1,\"448\":3,\"451\":3,\"462\":1,\"473\":1,\"483\":3,\"511\":1,\"515\":1,\"522\":1,\"536\":1,\"537\":2,\"539\":8,\"555\":1,\"558\":3,\"604\":1}}],[\"27\",{\"1\":{\"62\":1,\"63\":1}}],[\"2222\",{\"1\":{\"393\":1}}],[\"227\",{\"1\":{\"194\":1,\"196\":1}}],[\"22\",{\"1\":{\"27\":1}}],[\"20880\",{\"1\":{\"302\":1}}],[\"2001\",{\"1\":{\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"2000\",{\"1\":{\"203\":1,\"303\":1,\"322\":1,\"323\":2,\"327\":1,\"538\":1}}],[\"20000\",{\"1\":{\"147\":1}}],[\"200\",{\"1\":{\"182\":5,\"288\":1,\"293\":1,\"474\":1}}],[\"20<\",{\"1\":{\"180\":1}}],[\"20t17\",{\"1\":{\"126\":1,\"127\":1,\"128\":1}}],[\"2048\",{\"1\":{\"118\":1}}],[\"2020版本springcloud读取bootstrap\",{\"1\":{\"81\":1}}],[\"2021\",{\"1\":{\"62\":1,\"63\":1,\"393\":1,\"536\":1,\"538\":2,\"593\":3}}],[\"2017\",{\"1\":{\"128\":1}}],[\"201716161\",{\"1\":{\"67\":1}}],[\"2018\",{\"1\":{\"67\":2}}],[\"20\",{\"1\":{\"22\":1,\"31\":2,\"67\":1,\"136\":1,\"143\":1,\"237\":1,\"290\":1,\"462\":2,\"538\":1,\"560\":1,\"593\":1,\"594\":1}}],[\"0调2\",{\"1\":{\"289\":1}}],[\"0不支持自定义路径\",{\"1\":{\"289\":1}}],[\"0版本以上\",{\"1\":{\"223\":1}}],[\"0l\",{\"1\":{\"145\":1,\"409\":1,\"417\":1,\"474\":1}}],[\"002444de22a148c099a5e1b36dcaf0c2\",{\"1\":{\"507\":1}}],[\"0000l\",{\"1\":{\"409\":1,\"417\":1}}],[\"0000\",{\"1\":{\"409\":1,\"417\":1}}],[\"00\",{\"1\":{\"126\":1,\"127\":1,\"128\":2}}],[\"07\",{\"1\":{\"126\":1,\"127\":1,\"128\":2}}],[\"01\",{\"1\":{\"126\":1,\"127\":1,\"128\":2}}],[\"06050704zxl\",{\"1\":{\"75\":1,\"83\":1,\"87\":1}}],[\"0<\",{\"1\":{\"53\":1,\"317\":2}}],[\"0\",{\"1\":{\"27\":2,\"31\":2,\"35\":1,\"51\":2,\"53\":1,\"54\":1,\"58\":1,\"67\":4,\"76\":2,\"77\":2,\"96\":4,\"122\":2,\"139\":1,\"143\":1,\"144\":1,\"151\":2,\"173\":7,\"178\":1,\"180\":2,\"182\":1,\"183\":3,\"184\":1,\"187\":2,\"188\":2,\"208\":1,\"212\":3,\"213\":1,\"215\":1,\"223\":1,\"226\":1,\"249\":1,\"251\":3,\"256\":3,\"287\":1,\"288\":3,\"289\":7,\"291\":1,\"292\":4,\"293\":10,\"294\":1,\"296\":2,\"300\":2,\"302\":2,\"303\":2,\"317\":2,\"318\":3,\"319\":2,\"322\":3,\"323\":2,\"325\":1,\"326\":4,\"327\":4,\"330\":1,\"331\":1,\"332\":1,\"335\":1,\"336\":2,\"338\":2,\"363\":1,\"379\":1,\"380\":3,\"382\":3,\"383\":4,\"384\":1,\"386\":1,\"388\":4,\"391\":2,\"392\":2,\"395\":8,\"396\":2,\"400\":3,\"405\":4,\"417\":1,\"430\":5,\"445\":2,\"448\":2,\"451\":2,\"460\":1,\"462\":3,\"464\":1,\"467\":2,\"468\":1,\"469\":1,\"470\":1,\"473\":3,\"474\":1,\"476\":1,\"477\":1,\"478\":1,\"506\":2,\"508\":6,\"517\":2,\"518\":2,\"536\":2,\"537\":7,\"538\":2,\"540\":2,\"558\":3,\"566\":1,\"567\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"601\":1,\"604\":2,\"606\":1,\"608\":1,\"633\":2}}],[\"表明类已经转变一个大而全的功能合集\",{\"1\":{\"587\":1}}],[\"表明类的不同版本间的兼容性\",{\"1\":{\"334\":1}}],[\"表演\",{\"1\":{\"462\":1}}],[\"表演的节目\",{\"1\":{\"462\":1}}],[\"表锁是指上锁时锁定的对象是整个表\",{\"1\":{\"359\":1}}],[\"表级锁\",{\"1\":{\"359\":1}}],[\"表单的\",{\"1\":{\"221\":1}}],[\"表示所有该类的public方法都配置相同的事务属性信息\",{\"1\":{\"631\":1}}],[\"表示注册一个\",{\"1\":{\"602\":1}}],[\"表示此\",{\"1\":{\"602\":1}}],[\"表示此类为controller类\",{\"1\":{\"215\":1}}],[\"表示一个不断循环执行处理任务的线程\",{\"1\":{\"574\":1}}],[\"表示一个方法声明打算重写超类中的另一个方法声明\",{\"1\":{\"267\":1}}],[\"表示网络已发出数据\",{\"1\":{\"296\":1}}],[\"表示从注册中心发现监控中心地址\",{\"1\":{\"290\":1}}],[\"表示随机生成动态令牌\",{\"1\":{\"289\":1,\"293\":1}}],[\"表示使用缺省mock类名\",{\"1\":{\"289\":1,\"293\":1}}],[\"表示使用缺省代理类名\",{\"1\":{\"289\":2,\"293\":1}}],[\"表示延迟到spring容器初始化完成时暴露服务\",{\"1\":{\"289\":1,\"293\":1}}],[\"表示不鼓励程序员使用这样的元素\",{\"1\":{\"268\":1}}],[\"表示方法已经过时\",{\"1\":{\"268\":1}}],[\"表示当前方法覆盖了父类的方法\",{\"1\":{\"267\":1}}],[\"表示拦截一个请求及其后面的所有url\",{\"1\":{\"230\":1}}],[\"表示还要过滤静态文件\",{\"1\":{\"218\":1}}],[\"表示线程她semaphore\",{\"1\":{\"143\":1}}],[\"表示默认\",{\"1\":{\"67\":1}}],[\"表示前缀\",{\"1\":{\"17\":1}}],[\"表达式以外创建一个变量\",{\"1\":{\"507\":1}}],[\"表达式不是布尔\",{\"1\":{\"67\":1}}],[\"表达式值为字符串\",{\"1\":{\"67\":1}}],[\"表达式值为非\",{\"1\":{\"67\":2}}],[\"表达式值为\",{\"1\":{\"67\":1}}],[\"表达式引擎解析的\",{\"1\":{\"67\":1}}],[\"表达式获取这些定义在资源文件中的数据\",{\"1\":{\"33\":1}}],[\"表达式\",{\"1\":{\"27\":1,\"67\":7,\"363\":1,\"410\":1}}],[\"69\",{\"1\":{\"537\":2}}],[\"6\",{\"0\":{\"319\":1},\"1\":{\"241\":1,\"281\":1,\"293\":1,\"317\":1,\"395\":6,\"478\":1,\"521\":1,\"528\":1}}],[\"6<\",{\"1\":{\"180\":1,\"251\":3}}],[\"61\",{\"1\":{\"30\":1,\"393\":4}}],[\"6666\",{\"1\":{\"24\":1}}],[\"60000\",{\"1\":{\"31\":2,\"143\":2,\"204\":2,\"287\":1,\"487\":1}}],[\"60\",{\"1\":{\"20\":1,\"62\":1}}],[\"57\",{\"1\":{\"538\":1}}],[\"5p\",{\"1\":{\"515\":5}}],[\"512\",{\"1\":{\"487\":1,\"488\":1}}],[\"5l\",{\"1\":{\"400\":1}}],[\"58920\",{\"1\":{\"383\":1}}],[\"5<\",{\"1\":{\"251\":1,\"508\":1,\"604\":2}}],[\"500\",{\"1\":{\"143\":1,\"430\":2,\"467\":1}}],[\"5009\",{\"1\":{\"143\":1}}],[\"5000\",{\"1\":{\"119\":2,\"207\":1,\"287\":1,\"400\":1,\"430\":2}}],[\"50\",{\"1\":{\"143\":1,\"147\":1,\"262\":1}}],[\"55\",{\"1\":{\"75\":2,\"76\":1,\"77\":1,\"78\":2,\"79\":1,\"97\":1,\"122\":2,\"178\":1,\"187\":1,\"188\":1,\"194\":1,\"317\":1,\"575\":1}}],[\"5555\",{\"1\":{\"24\":1}}],[\"5672\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"187\":1,\"188\":1,\"189\":1}}],[\"5\",{\"1\":{\"31\":2,\"36\":1,\"69\":2,\"143\":1,\"173\":1,\"241\":1,\"251\":2,\"293\":1,\"303\":1,\"327\":1,\"388\":2,\"395\":6,\"400\":1,\"460\":1,\"461\":2,\"470\":2,\"473\":1,\"474\":2,\"476\":2,\"477\":2,\"520\":1,\"521\":2,\"528\":1,\"537\":1,\"560\":1,\"561\":1,\"582\":1,\"604\":1}}],[\"5937\",{\"1\":{\"241\":7}}],[\"59\",{\"1\":{\"22\":2}}],[\"为事务管理器指定的\",{\"1\":{\"629\":1}}],[\"为基于\",{\"1\":{\"626\":1}}],[\"为基本数据类型时\",{\"1\":{\"363\":1}}],[\"为简单类型的成员赋值\",{\"1\":{\"578\":1}}],[\"为连接添加监听\",{\"1\":{\"558\":1}}],[\"为什么要实现序列化\",{\"1\":{\"488\":1}}],[\"为什么用缓存\",{\"1\":{\"480\":1}}],[\"为强引用\",{\"1\":{\"370\":1}}],[\"为一个对象设置虚引用的唯一目的就是希望能在这个对象被回收时收到一个系统通知\",{\"1\":{\"369\":1}}],[\"为包装类型时\",{\"1\":{\"363\":1}}],[\"为了更好的利用多核\",{\"1\":{\"552\":1}}],[\"为了确保每次都能执行关闭操作\",{\"1\":{\"513\":1}}],[\"为了实现\",{\"1\":{\"507\":1}}],[\"为了开发方便\",{\"1\":{\"314\":1}}],[\"为了防止访问超时\",{\"1\":{\"204\":1}}],[\"为空值而不会报错\",{\"1\":{\"587\":1}}],[\"为空则自动查找本机ip\",{\"1\":{\"293\":1}}],[\"为空表示不开启\",{\"1\":{\"289\":1,\"293\":1}}],[\"为true时\",{\"1\":{\"292\":1}}],[\"为服务端和客户端均添加编码\",{\"1\":{\"567\":1}}],[\"为服务path的前缀\",{\"1\":{\"288\":1,\"293\":1}}],[\"为服务指定url\",{\"1\":{\"203\":1}}],[\"为正确的函数名\",{\"1\":{\"207\":1}}],[\"为分支名\",{\"1\":{\"84\":1}}],[\"为其他路径\",{\"1\":{\"69\":1,\"71\":1}}],[\"为例\",{\"1\":{\"69\":1}}],[\"为\",{\"1\":{\"31\":1,\"36\":1,\"370\":1,\"606\":2}}],[\"为自己起名字\",{\"1\":{\"24\":1}}],[\"为属性赋值的\",{\"1\":{\"20\":1}}],[\"最简单的spring配置\",{\"0\":{\"596\":1}}],[\"最简单的就是使用单例模式或者静态单例模式\",{\"1\":{\"513\":1}}],[\"最终会因为再次与类注入容器\",{\"1\":{\"587\":1}}],[\"最终结果是0\",{\"1\":{\"388\":1}}],[\"最近最少使用\",{\"1\":{\"487\":1}}],[\"最左优先\",{\"1\":{\"356\":1}}],[\"最多也就三种\",{\"1\":{\"343\":1}}],[\"最少活跃数负载均衡机制\",{\"0\":{\"309\":1}}],[\"最少活跃调用\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"最开始在\",{\"1\":{\"258\":1}}],[\"最好基于单表定义\",{\"1\":{\"507\":1}}],[\"最好要与表单中的\",{\"1\":{\"227\":1}}],[\"最好与服务名一致\",{\"1\":{\"123\":1}}],[\"最好不使用\",{\"1\":{\"20\":1}}],[\"最后两种方法通过\",{\"1\":{\"499\":1}}],[\"最后结果都不会始终是\",{\"1\":{\"430\":1}}],[\"最后\",{\"1\":{\"117\":1,\"539\":1,\"587\":1}}],[\"最新版本\",{\"1\":{\"72\":1}}],[\"最大并发\",{\"1\":{\"473\":1}}],[\"最大并发数\",{\"1\":{\"143\":1}}],[\"最大容量等于默认加载因子和初始容量的乘积\",{\"1\":{\"405\":1}}],[\"最大容量\",{\"1\":{\"405\":2}}],[\"最大pscache连接\",{\"1\":{\"31\":1}}],[\"最大等待时间\",{\"1\":{\"31\":1}}],[\"最大值\",{\"1\":{\"31\":1}}],[\"最小值\",{\"1\":{\"31\":1}}],[\"最上面为主环境\",{\"1\":{\"24\":1}}],[\">mysql<\",{\"1\":{\"607\":1}}],[\">oracle<\",{\"1\":{\"607\":1}}],[\">onions<\",{\"1\":{\"67\":2}}],[\">db2<\",{\"1\":{\"607\":1}}],[\">download<\",{\"1\":{\"225\":1}}],[\">sqlserver<\",{\"1\":{\"607\":1}}],[\">男<\",{\"1\":{\"593\":1}}],[\">bio=\",{\"1\":{\"507\":1}}],[\">email=\",{\"1\":{\"507\":1}}],[\">english<\",{\"1\":{\"35\":1,\"36\":1}}],[\">password=\",{\"1\":{\"507\":1}}],[\">username=\",{\"1\":{\"507\":1}}],[\">设置一个标志位\",{\"1\":{\"464\":1}}],[\">利用次数\",{\"1\":{\"464\":1}}],[\">节目\",{\"1\":{\"462\":1}}],[\">观众\",{\"1\":{\"462\":1}}],[\">演员\",{\"1\":{\"462\":1}}],[\">100\",{\"1\":{\"414\":1}}],[\">1902<\",{\"1\":{\"67\":1}}],[\">1900<\",{\"1\":{\"67\":1}}],[\">中引用此id\",{\"1\":{\"287\":1,\"288\":1,\"293\":1}}],[\">中文<\",{\"1\":{\"35\":1,\"36\":1}}],[\">或<dubbo\",{\"1\":{\"287\":1}}],[\">根加载器\",{\"1\":{\"271\":1}}],[\">扩展类加载器\",{\"1\":{\"271\":1}}],[\">>\",{\"1\":{\"233\":1}}],[\">删除<\",{\"1\":{\"208\":1}}],[\">修改<\",{\"1\":{\"208\":1}}],[\">用户是别的玩意<\",{\"1\":{\"67\":1}}],[\">用户是经理<\",{\"1\":{\"67\":1}}],[\">用户是管理员<\",{\"1\":{\"67\":1}}],[\">老油条<\",{\"1\":{\"67\":1}}],[\">201801060431<\",{\"1\":{\"593\":1}}],[\">2\",{\"1\":{\"67\":2,\"430\":2,\"451\":1}}],[\">21<\",{\"1\":{\"67\":1}}],[\">=8\",{\"1\":{\"532\":1}}],[\">=\",{\"1\":{\"67\":2,\"173\":1,\"417\":1}}],[\">你填的是true<\",{\"1\":{\"67\":1}}],[\">template<\",{\"1\":{\"67\":1}}],[\">rose<\",{\"1\":{\"67\":1}}],[\">jack<\",{\"1\":{\"67\":1}}],[\">其他<\",{\"1\":{\"33\":1}}],[\">步骤<\",{\"1\":{\"33\":1}}],[\">排版<\",{\"1\":{\"33\":1}}],[\">标签页<\",{\"1\":{\"33\":1}}],[\">进度条<\",{\"1\":{\"33\":1}}],[\">分页<\",{\"1\":{\"33\":1}}],[\">警告框<\",{\"1\":{\"33\":1}}],[\">提示\",{\"1\":{\"33\":1}}],[\">模态框<\",{\"1\":{\"33\":1}}],[\">表格<\",{\"1\":{\"33\":1}}],[\">图标<\",{\"1\":{\"33\":1}}],[\">格栅<\",{\"1\":{\"33\":1}}],[\"><\",{\"1\":{\"33\":2,\"36\":2,\"56\":1,\"66\":1,\"67\":9,\"576\":2,\"593\":1}}],[\">\",{\"1\":{\"24\":3,\"33\":1,\"36\":3,\"51\":5,\"53\":3,\"56\":7,\"58\":3,\"60\":2,\"67\":17,\"69\":2,\"81\":3,\"118\":1,\"124\":1,\"137\":1,\"180\":2,\"188\":1,\"208\":4,\"212\":4,\"213\":12,\"215\":14,\"218\":1,\"221\":3,\"222\":7,\"230\":3,\"232\":3,\"240\":7,\"241\":1,\"244\":4,\"248\":3,\"251\":14,\"256\":4,\"258\":19,\"259\":8,\"260\":17,\"270\":1,\"271\":2,\"272\":2,\"279\":3,\"317\":1,\"318\":8,\"322\":11,\"386\":4,\"388\":1,\"396\":2,\"400\":1,\"405\":1,\"411\":1,\"413\":1,\"414\":1,\"416\":1,\"417\":3,\"429\":2,\"430\":2,\"437\":2,\"439\":2,\"440\":2,\"441\":2,\"442\":2,\"443\":2,\"444\":2,\"445\":2,\"448\":2,\"450\":4,\"451\":2,\"468\":1,\"476\":1,\"477\":2,\"478\":1,\"483\":3,\"486\":1,\"487\":1,\"488\":2,\"497\":1,\"498\":2,\"499\":14,\"502\":1,\"505\":2,\"506\":6,\"507\":21,\"508\":22,\"515\":2,\"517\":24,\"518\":20,\"519\":4,\"521\":4,\"522\":1,\"524\":1,\"525\":1,\"526\":1,\"536\":1,\"538\":1,\"558\":5,\"560\":2,\"561\":1,\"563\":1,\"576\":5,\"578\":1,\"582\":27,\"584\":5,\"585\":5,\"586\":4,\"587\":8,\"593\":21,\"594\":8,\"596\":5,\"597\":8,\"601\":6,\"606\":18,\"607\":17,\"608\":6,\"617\":2,\"619\":5,\"629\":2,\"633\":31}}],[\"此蚌埠住了\",{\"1\":{\"567\":1}}],[\"此过程不需要将数据从操作系统内核缓冲区拷贝到\",{\"1\":{\"539\":1}}],[\"此段\",{\"1\":{\"507\":1}}],[\"此段内容作用等同于在spring中配置<mvc\",{\"1\":{\"241\":1}}],[\"此值与\",{\"1\":{\"473\":1}}],[\"此模式可能比默认的基于本地堆栈的模式更合适\",{\"1\":{\"409\":1}}],[\"此引用不会劫持对象\",{\"1\":{\"368\":1}}],[\"此属性只在dubbo\",{\"1\":{\"296\":2}}],[\"此线程池和cpu相关\",{\"1\":{\"293\":1}}],[\"此时成员变量\",{\"1\":{\"558\":1}}],[\"此时就需要进行序列化\",{\"1\":{\"488\":1}}],[\"此时锁的是调用方法的对象\",{\"0\":{\"453\":1}}],[\"此时\",{\"1\":{\"450\":1}}],[\"此时有一个线程b\",{\"1\":{\"448\":1}}],[\"此时这个线程会从其他未完成的队列中偷走一个任务执行\",{\"1\":{\"406\":1}}],[\"此时需要心跳来帮助检查连接是否已断开\",{\"1\":{\"288\":1}}],[\"此时需要更换更高版本的\",{\"1\":{\"235\":1}}],[\"此时间就是心跳间隔\",{\"1\":{\"287\":1}}],[\"此配置项建议不要使用autoconfig\",{\"1\":{\"286\":1,\"295\":1}}],[\"此注释可用于修饰方法\",{\"1\":{\"268\":1}}],[\"此注释只适用于修饰方法\",{\"1\":{\"267\":1}}],[\"此注解集成了\",{\"1\":{\"143\":1}}],[\"此注解引用了\",{\"1\":{\"46\":1}}],[\"此注解就是\",{\"1\":{\"17\":1}}],[\"此处即为student\",{\"1\":{\"518\":1}}],[\"此处的主内存和工作内存跟\",{\"1\":{\"420\":1}}],[\"此处方便起见使用不分离版本\",{\"1\":{\"300\":1}}],[\"此处使用c3p0数据源\",{\"1\":{\"258\":1}}],[\"此处文件名应由前端传回指定\",{\"1\":{\"226\":1}}],[\"此项设置需要重启ide方可生效\",{\"1\":{\"218\":1}}],[\"此方法返回springconfig\",{\"1\":{\"232\":1}}],[\"此方法返回rootconfig\",{\"1\":{\"232\":1}}],[\"此方法获取返回内容\",{\"1\":{\"184\":1}}],[\"此方法获取响应头\",{\"1\":{\"184\":1}}],[\"此方法在\",{\"1\":{\"69\":1}}],[\"此类同样不能被\",{\"1\":{\"174\":1}}],[\"此客户端是否获取eureka服务器注册表上的注册信息\",{\"1\":{\"102\":1}}],[\"此url同样不存在于controller中\",{\"1\":{\"62\":1}}],[\"此url不存在于controller中\",{\"1\":{\"62\":1}}],[\"此外\",{\"1\":{\"46\":1,\"71\":1}}],[\"此\",{\"1\":{\"39\":1}}],[\"此位置就是\",{\"1\":{\"24\":1}}],[\"此位置就是在\",{\"1\":{\"24\":1}}],[\"此位置就是在根目录下直接创建配置文件\",{\"1\":{\"24\":1}}],[\"此位置就是在项目根目录下创建一个\",{\"1\":{\"24\":1}}],[\"found\",{\"1\":{\"634\":1}}],[\"foo\",{\"1\":{\"617\":8}}],[\"for=speed\",{\"1\":{\"522\":1}}],[\"fork\",{\"1\":{\"409\":2}}],[\"forkjoincalculate1\",{\"1\":{\"409\":2}}],[\"forkjoincalculate\",{\"1\":{\"409\":10}}],[\"forkjointask<long>\",{\"1\":{\"409\":1}}],[\"forkjointask\",{\"0\":{\"408\":1},\"1\":{\"407\":1,\"408\":3,\"409\":1}}],[\"forkjoinpool\",{\"0\":{\"407\":1},\"1\":{\"407\":2,\"408\":1,\"409\":10}}],[\"forkjoin特点\",{\"1\":{\"406\":1}}],[\"forkjoin\",{\"0\":{\"406\":1,\"409\":1}}],[\"forks=\",{\"1\":{\"313\":1}}],[\"forking\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"313\":1}}],[\"fork>\",{\"1\":{\"180\":1}}],[\"forward3\",{\"1\":{\"217\":1}}],[\"forward2\",{\"1\":{\"217\":1}}],[\"forward\",{\"1\":{\"217\":4,\"229\":1,\"234\":1,\"254\":1,\"538\":3}}],[\"forname\",{\"1\":{\"204\":1,\"270\":2,\"271\":2,\"272\":1,\"510\":1,\"511\":1}}],[\"forobject\",{\"1\":{\"184\":2}}],[\"forentity\",{\"1\":{\"184\":5}}],[\"foreach>\",{\"1\":{\"208\":1,\"507\":2}}],[\"foreach\",{\"1\":{\"40\":1,\"208\":1,\"245\":1,\"417\":1,\"504\":1,\"507\":1,\"525\":1,\"606\":1,\"609\":1}}],[\"forcefully\",{\"1\":{\"483\":12}}],[\"forceclosed\",{\"1\":{\"143\":1}}],[\"force0pen\",{\"1\":{\"143\":1}}],[\"form\",{\"1\":{\"221\":3,\"226\":1,\"576\":1}}],[\"format\",{\"1\":{\"172\":1,\"241\":3,\"525\":4}}],[\"formattingconversionservice\",{\"1\":{\"71\":1}}],[\"form>\",{\"1\":{\"67\":1,\"221\":1,\"576\":1}}],[\"formlogin\",{\"1\":{\"59\":2,\"62\":1}}],[\"for\",{\"1\":{\"44\":1,\"208\":1,\"241\":1,\"261\":1,\"272\":1,\"277\":1,\"279\":4,\"335\":1,\"338\":1,\"391\":2,\"392\":2,\"395\":8,\"396\":2,\"400\":2,\"409\":1,\"430\":4,\"434\":1,\"445\":2,\"448\":2,\"460\":1,\"461\":2,\"462\":2,\"464\":1,\"467\":2,\"468\":1,\"469\":1,\"470\":1,\"474\":1,\"476\":1,\"477\":1,\"478\":1,\"506\":1,\"507\":2,\"508\":1,\"536\":2,\"537\":1,\"538\":1,\"541\":1,\"558\":1,\"566\":1,\"567\":1}}],[\"f69869b0257f45c9907e3d7e0aeaa7d5\",{\"1\":{\"507\":1}}],[\"fxclass\",{\"1\":{\"279\":2}}],[\"fx\",{\"1\":{\"279\":5}}],[\"flip\",{\"1\":{\"537\":7,\"541\":1}}],[\"flag=false\",{\"1\":{\"429\":1,\"453\":1,\"454\":1,\"464\":1}}],[\"flag=true\",{\"1\":{\"429\":1,\"453\":1,\"454\":1,\"464\":1}}],[\"flag\",{\"1\":{\"429\":1,\"453\":1,\"454\":1,\"456\":5,\"462\":8,\"464\":1}}],[\"flashmapmanager\",{\"1\":{\"222\":1}}],[\"flash\",{\"1\":{\"222\":1}}],[\"float\",{\"1\":{\"361\":1,\"363\":1,\"405\":3}}],[\"flushcache=true\",{\"1\":{\"487\":1}}],[\"flushinterval\",{\"1\":{\"487\":1}}],[\"flushinterval=\",{\"1\":{\"487\":1,\"488\":1}}],[\"flush\",{\"1\":{\"223\":1,\"226\":1,\"330\":1,\"333\":3,\"334\":2}}],[\"f\",{\"1\":{\"176\":1,\"462\":1,\"617\":2}}],[\"future\",{\"0\":{\"545\":1},\"1\":{\"524\":2,\"526\":2,\"545\":1,\"558\":4,\"563\":4}}],[\"future<string>\",{\"1\":{\"393\":2}}],[\"futuretask<string>\",{\"1\":{\"393\":4}}],[\"futuretask\",{\"1\":{\"393\":2}}],[\"full\",{\"1\":{\"167\":1,\"168\":1,\"461\":3}}],[\"function=\",{\"1\":{\"413\":1}}],[\"function<string\",{\"1\":{\"413\":1}}],[\"function<t\",{\"1\":{\"413\":1}}],[\"functionalinterface\",{\"1\":{\"413\":1,\"414\":1,\"415\":1,\"416\":1}}],[\"function\",{\"0\":{\"413\":1},\"1\":{\"36\":3,\"207\":3,\"208\":1,\"412\":1,\"413\":4,\"576\":4}}],[\"feature\",{\"1\":{\"233\":2}}],[\"feignclient\",{\"1\":{\"115\":1,\"117\":1,\"145\":1,\"146\":1,\"164\":2}}],[\"feign<\",{\"1\":{\"113\":1}}],[\"feign\",{\"0\":{\"112\":1,\"114\":1,\"116\":1,\"117\":1,\"119\":1,\"145\":1},\"1\":{\"117\":1,\"118\":2,\"119\":1,\"140\":3,\"145\":1,\"164\":1,\"165\":1}}],[\"fetch\",{\"1\":{\"102\":1,\"122\":1}}],[\"frame\",{\"1\":{\"576\":1}}],[\"framework<\",{\"1\":{\"317\":1}}],[\"framework\",{\"1\":{\"256\":1,\"317\":4,\"515\":4}}],[\"froward\",{\"1\":{\"217\":1}}],[\"from=chenyl\",{\"1\":{\"515\":1}}],[\"from\",{\"1\":{\"31\":1,\"39\":1,\"40\":1,\"51\":2,\"352\":1,\"393\":2,\"483\":7,\"502\":2,\"506\":1,\"507\":8,\"508\":2,\"510\":1,\"517\":3,\"518\":3,\"609\":1,\"630\":2}}],[\"friend\",{\"1\":{\"67\":1,\"241\":12}}],[\"fifo\",{\"1\":{\"487\":2,\"488\":1}}],[\"fixedthreadpool\",{\"1\":{\"472\":1}}],[\"fixed\",{\"1\":{\"288\":2,\"293\":2}}],[\"field\",{\"1\":{\"272\":2,\"275\":1,\"279\":1,\"587\":1}}],[\"finishconnect\",{\"1\":{\"537\":1}}],[\"findbyid\",{\"1\":{\"145\":2,\"146\":2}}],[\"findfirst\",{\"1\":{\"71\":1}}],[\"finali\",{\"1\":{\"445\":5,\"477\":1}}],[\"finalizer\",{\"1\":{\"427\":2}}],[\"finally\",{\"1\":{\"338\":1,\"434\":1,\"445\":2,\"450\":2,\"461\":2,\"478\":1,\"513\":1,\"524\":1,\"526\":1,\"558\":2,\"563\":1,\"575\":2,\"576\":1}}],[\"final<\",{\"1\":{\"317\":1,\"575\":1}}],[\"final\",{\"1\":{\"66\":3,\"69\":1,\"71\":1,\"146\":1,\"183\":1,\"198\":1,\"222\":9,\"264\":1,\"315\":1,\"334\":1,\"342\":1,\"346\":1,\"388\":1,\"399\":2,\"405\":3,\"425\":3,\"434\":1,\"447\":1,\"450\":1,\"451\":1,\"456\":2,\"470\":3,\"524\":1,\"525\":2,\"526\":2,\"538\":4,\"587\":1}}],[\"first\",{\"1\":{\"67\":1}}],[\"filtering>\",{\"1\":{\"508\":2}}],[\"filter>\",{\"1\":{\"218\":1,\"256\":1}}],[\"filterorder\",{\"1\":{\"205\":1}}],[\"filtertype\",{\"1\":{\"205\":1}}],[\"filter\",{\"0\":{\"138\":1,\"232\":1},\"1\":{\"31\":1,\"71\":1,\"139\":2,\"174\":3,\"218\":5,\"232\":2,\"235\":1,\"256\":5,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"417\":2}}],[\"filters\",{\"1\":{\"31\":1}}],[\"filechannel\",{\"1\":{\"537\":9,\"541\":2}}],[\"fileclient\",{\"1\":{\"380\":1}}],[\"files\",{\"1\":{\"521\":1,\"522\":1}}],[\"fileserver\",{\"1\":{\"380\":1}}],[\"file=samplemessages\",{\"1\":{\"515\":1}}],[\"file=rolling\",{\"1\":{\"515\":1}}],[\"file=org\",{\"1\":{\"515\":1}}],[\"fileappender\",{\"1\":{\"515\":8}}],[\"fileutils\",{\"1\":{\"393\":2}}],[\"fileupload<\",{\"1\":{\"251\":2}}],[\"filewriter\",{\"1\":{\"331\":5,\"335\":1,\"339\":8}}],[\"filereader\",{\"0\":{\"338\":1},\"1\":{\"331\":5,\"338\":8}}],[\"fileinputstream\",{\"1\":{\"226\":4,\"330\":5,\"332\":5,\"333\":1,\"334\":1,\"340\":5,\"380\":3,\"383\":3,\"537\":15,\"540\":4,\"541\":5}}],[\"filename\",{\"1\":{\"226\":2}}],[\"filename=\",{\"1\":{\"226\":2}}],[\"fileoutputstreamchannel\",{\"1\":{\"537\":2}}],[\"fileoutputstream\",{\"1\":{\"223\":6,\"330\":5,\"332\":4,\"333\":1,\"334\":1,\"340\":5,\"380\":4,\"383\":4,\"384\":5,\"537\":15,\"540\":5,\"541\":4}}],[\"file1+\",{\"1\":{\"223\":1}}],[\"file1\",{\"1\":{\"223\":7}}],[\"file\",{\"1\":{\"24\":4,\"44\":1,\"221\":2,\"223\":13,\"226\":4,\"241\":2,\"287\":1,\"292\":1,\"330\":4,\"331\":4,\"332\":4,\"338\":8,\"339\":8,\"340\":4,\"393\":2,\"499\":3,\"515\":9}}],[\"father\",{\"1\":{\"262\":2,\"277\":2}}],[\"fastjson依赖\",{\"1\":{\"251\":1}}],[\"fastjsonhttpmessageconverter\",{\"1\":{\"244\":3}}],[\"fastjson\",{\"0\":{\"242\":1,\"245\":1},\"1\":{\"244\":1}}],[\"fasterxml\",{\"1\":{\"233\":4,\"239\":1,\"251\":1}}],[\"failback\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"313\":1}}],[\"failsafe\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"313\":1}}],[\"failfast\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"313\":1}}],[\"failover时有效\",{\"1\":{\"294\":1}}],[\"failover\",{\"1\":{\"289\":2,\"291\":2,\"293\":2,\"294\":2,\"313\":1}}],[\"failonemptybeans\",{\"1\":{\"240\":1,\"260\":1}}],[\"fail\",{\"1\":{\"233\":1}}],[\"failurehandler\",{\"1\":{\"59\":1}}],[\"fallbackresponse\",{\"1\":{\"204\":1}}],[\"fallbackfactory<userfeignclient>\",{\"1\":{\"146\":1}}],[\"fallbackfactory\",{\"0\":{\"146\":1},\"1\":{\"146\":1}}],[\"fallbackmethod\",{\"1\":{\"143\":2,\"144\":1,\"147\":1}}],[\"fallback\",{\"1\":{\"140\":1,\"143\":2,\"145\":1,\"146\":1,\"204\":3}}],[\"false是开启\",{\"1\":{\"512\":1}}],[\"false忽略\",{\"1\":{\"291\":1,\"294\":1}}],[\"false将不会从浏览器中加载请求信息\",{\"1\":{\"207\":1}}],[\"false表示这是eureka服务器\",{\"1\":{\"102\":1}}],[\"false\",{\"1\":{\"31\":2,\"67\":3,\"69\":1,\"72\":1,\"102\":3,\"143\":3,\"203\":2,\"205\":1,\"229\":1,\"233\":1,\"234\":1,\"240\":1,\"241\":1,\"260\":1,\"287\":1,\"289\":7,\"291\":1,\"292\":1,\"293\":7,\"294\":3,\"296\":2,\"302\":1,\"303\":2,\"326\":1,\"327\":2,\"334\":3,\"389\":1,\"414\":1,\"456\":1,\"462\":1,\"483\":4,\"487\":2,\"488\":2,\"503\":1,\"512\":1,\"537\":3,\"538\":3,\"576\":1,\"587\":2}}],[\"favicon\",{\"1\":{\"72\":2,\"563\":1}}],[\"factor\",{\"1\":{\"405\":2}}],[\"factory\",{\"1\":{\"62\":1,\"63\":1,\"409\":1}}],[\"factories\",{\"1\":{\"17\":1,\"66\":1}}],[\"yeqiangwei\",{\"1\":{\"515\":2}}],[\"year\",{\"1\":{\"302\":2,\"303\":1,\"317\":2,\"319\":4,\"322\":1,\"323\":2,\"326\":2,\"327\":1}}],[\"ybatis\",{\"0\":{\"501\":1}}],[\"ygc\",{\"1\":{\"368\":2}}],[\"yitian\",{\"1\":{\"241\":1}}],[\"yieldtest\",{\"1\":{\"466\":6}}],[\"yield\",{\"0\":{\"466\":1},\"1\":{\"173\":2,\"388\":1,\"430\":2,\"451\":1,\"466\":1}}],[\"yyyy\",{\"1\":{\"233\":1,\"241\":1,\"515\":2,\"525\":1}}],[\"y\",{\"1\":{\"95\":2}}],[\"yum\",{\"1\":{\"95\":4}}],[\"yml\",{\"0\":{\"91\":1},\"1\":{\"24\":1,\"69\":1,\"76\":1,\"81\":1,\"85\":4,\"88\":1}}],[\"yaml\",{\"0\":{\"21\":1,\"22\":1},\"1\":{\"21\":1,\"22\":4,\"24\":2,\"31\":2,\"84\":2,\"172\":1}}],[\"多路复用\",{\"1\":{\"547\":1}}],[\"多路复用器轮询连接\",{\"1\":{\"537\":1}}],[\"多长时间没有读写\",{\"1\":{\"528\":1}}],[\"多长时间没有读取\",{\"1\":{\"528\":1}}],[\"多长时间没有写操作\",{\"1\":{\"528\":1}}],[\"多表联查\",{\"1\":{\"518\":1}}],[\"多表查询\",{\"0\":{\"516\":1}}],[\"多对一\",{\"0\":{\"517\":1}}],[\"多数据库支持\",{\"1\":{\"607\":1}}],[\"多数据库\",{\"1\":{\"507\":1}}],[\"多余不处理\",{\"1\":{\"473\":1}}],[\"多次重建\",{\"1\":{\"513\":1}}],[\"多次\",{\"1\":{\"422\":1}}],[\"多版本并发控制\",{\"1\":{\"376\":1}}],[\"多网卡选择或指定vip及域名时使用\",{\"1\":{\"293\":1}}],[\"多个连接共用一个阻塞对象\",{\"1\":{\"570\":1}}],[\"多个请求到来时\",{\"1\":{\"551\":1}}],[\"多个接口\",{\"1\":{\"346\":1}}],[\"多个协议id用逗号分隔\",{\"1\":{\"289\":1}}],[\"多个名称用逗号分隔\",{\"1\":{\"289\":2,\"291\":2,\"293\":2,\"294\":2}}],[\"多个注册中心id用逗号分隔\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"多个命令用逗号分隔\",{\"1\":{\"288\":1,\"293\":1}}],[\"多个微服务保证\",{\"1\":{\"111\":1}}],[\"多环境的配置\",{\"1\":{\"24\":1}}],[\"多环境配置及配置文件位置\",{\"0\":{\"24\":1}}],[\"多线程共享比较复杂\",{\"1\":{\"572\":1}}],[\"多线程并发\",{\"1\":{\"394\":1}}],[\"多线程断点下载\",{\"1\":{\"336\":1}}],[\"多线程\",{\"0\":{\"9\":1,\"572\":1,\"573\":1}}],[\"其子标签中的result的property属性为老师类的属性\",{\"1\":{\"517\":1}}],[\"其实都依赖\",{\"1\":{\"427\":1}}],[\"其实他就是接口的方法\",{\"1\":{\"264\":1}}],[\"其重量比普通线程轻得多\",{\"1\":{\"408\":1}}],[\"其\",{\"1\":{\"67\":1}}],[\"其它情况结果为两边中范围大的\",{\"1\":{\"363\":2}}],[\"其它情况包括\",{\"1\":{\"67\":1}}],[\"其它请求不能再为数据加任何锁\",{\"1\":{\"358\":1}}],[\"其它协议忽略\",{\"1\":{\"291\":1}}],[\"其它的则不再判断\",{\"1\":{\"67\":1}}],[\"其他标签\",{\"0\":{\"507\":1}}],[\"其他\",{\"0\":{\"500\":1}}],[\"其他线程继续执行\",{\"1\":{\"467\":1}}],[\"其他所有类型都用的是引用传递\",{\"1\":{\"377\":1}}],[\"其他事务访问时\",{\"1\":{\"359\":1}}],[\"其他事务只能对该数据加读锁\",{\"1\":{\"358\":1}}],[\"其他操作必须等待ajax执行完毕\",{\"1\":{\"207\":1}}],[\"其他内容与\",{\"1\":{\"194\":1}}],[\"其他接口登录即可\",{\"1\":{\"59\":1}}],[\"其他环境通过\",{\"1\":{\"24\":1}}],[\"其余各限制类型如下\",{\"1\":{\"23\":1}}],[\"其中包括\",{\"1\":{\"627\":1}}],[\"其中包括了\",{\"1\":{\"625\":1}}],[\"其中logger后面的内容全部为jar包中所包含的包名\",{\"1\":{\"515\":1}}],[\"其中每个插入操作必须等待另一个线程相应的删除操作\",{\"1\":{\"396\":1}}],[\"其中保存着\",{\"1\":{\"299\":1}}],[\"其中调用了\",{\"1\":{\"71\":1}}],[\"其中\",{\"1\":{\"19\":1,\"233\":1,\"300\":1}}],[\"爪巴\",{\"1\":{\"23\":1}}],[\"校验和调度功能\",{\"1\":{\"622\":1}}],[\"校验通过\",{\"1\":{\"205\":1}}],[\"校验\",{\"0\":{\"23\":1}}],[\"o=context\",{\"1\":{\"597\":1,\"619\":1}}],[\"o=pjp\",{\"1\":{\"582\":2}}],[\"o=new\",{\"1\":{\"366\":1}}],[\"ountdownlatch\",{\"1\":{\"476\":1}}],[\"outbound\",{\"1\":{\"549\":1}}],[\"outer\",{\"1\":{\"521\":1,\"522\":1}}],[\"outputdirectory>\",{\"1\":{\"521\":1}}],[\"outputstreamwriter\",{\"1\":{\"332\":5}}],[\"outputstream\",{\"1\":{\"226\":4,\"379\":4,\"380\":4,\"540\":3}}],[\"output\",{\"1\":{\"187\":3}}],[\"out\",{\"1\":{\"15\":1,\"39\":3,\"40\":1,\"54\":2,\"55\":2,\"64\":1,\"126\":1,\"139\":2,\"184\":5,\"188\":1,\"215\":1,\"229\":2,\"241\":6,\"245\":8,\"249\":6,\"252\":1,\"254\":3,\"265\":1,\"270\":4,\"271\":6,\"272\":6,\"277\":1,\"279\":15,\"303\":1,\"322\":1,\"323\":2,\"330\":2,\"331\":2,\"332\":2,\"333\":3,\"334\":1,\"335\":1,\"336\":2,\"338\":3,\"339\":2,\"340\":2,\"341\":1,\"377\":2,\"379\":1,\"380\":1,\"382\":1,\"383\":2,\"386\":5,\"388\":4,\"389\":4,\"391\":2,\"392\":2,\"393\":4,\"395\":13,\"396\":3,\"400\":1,\"411\":2,\"413\":1,\"414\":2,\"415\":1,\"416\":1,\"417\":1,\"430\":2,\"434\":1,\"437\":2,\"438\":2,\"439\":3,\"440\":3,\"441\":3,\"443\":3,\"444\":3,\"445\":5,\"448\":3,\"450\":4,\"451\":2,\"453\":1,\"454\":1,\"456\":4,\"460\":4,\"461\":2,\"462\":2,\"464\":1,\"465\":1,\"466\":2,\"467\":2,\"468\":4,\"469\":3,\"470\":2,\"472\":1,\"473\":1,\"474\":1,\"476\":2,\"477\":2,\"478\":2,\"503\":1,\"506\":1,\"507\":1,\"508\":1,\"510\":4,\"515\":1,\"521\":7,\"522\":8,\"524\":1,\"525\":2,\"526\":1,\"527\":1,\"528\":1,\"532\":4,\"533\":2,\"536\":6,\"537\":10,\"538\":7,\"540\":2,\"541\":2,\"558\":7,\"560\":5,\"561\":1,\"563\":4,\"566\":2,\"567\":9,\"575\":8,\"576\":8,\"582\":12,\"593\":1,\"602\":1,\"606\":1,\"609\":1,\"618\":3}}],[\"oom\",{\"1\":{\"367\":1,\"472\":1}}],[\"o1\",{\"1\":{\"363\":1}}],[\"o\",{\"0\":{\"569\":1},\"1\":{\"334\":5,\"355\":1,\"537\":1,\"539\":1,\"545\":1,\"546\":1,\"547\":2,\"548\":5,\"552\":2,\"570\":1,\"574\":1,\"582\":2,\"597\":1,\"619\":1}}],[\"owner\",{\"1\":{\"286\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"295\":1,\"326\":1,\"327\":1}}],[\"obj\",{\"1\":{\"264\":1}}],[\"objectencoder\",{\"1\":{\"520\":1}}],[\"objectdecoder\",{\"1\":{\"520\":1}}],[\"objectfactory\",{\"1\":{\"492\":1}}],[\"objectinputstream\",{\"1\":{\"334\":5}}],[\"objectoutputstream\",{\"1\":{\"334\":9}}],[\"object>\",{\"1\":{\"327\":1}}],[\"object>>\",{\"1\":{\"40\":1}}],[\"objects\",{\"1\":{\"272\":1,\"395\":14,\"402\":1,\"403\":1,\"448\":1}}],[\"objectmapper\",{\"1\":{\"240\":1,\"241\":9,\"260\":1,\"327\":4}}],[\"object\",{\"1\":{\"172\":1,\"173\":2,\"205\":1,\"229\":3,\"233\":1,\"234\":3,\"237\":1,\"245\":5,\"264\":1,\"271\":1,\"279\":3,\"289\":1,\"334\":1,\"363\":2,\"366\":2,\"399\":1,\"521\":2,\"522\":2,\"528\":1,\"558\":5,\"560\":1,\"575\":2,\"582\":9,\"597\":1,\"618\":6,\"619\":1}}],[\"object=\",{\"1\":{\"67\":1}}],[\"ok\",{\"1\":{\"173\":1,\"204\":1,\"563\":1}}],[\"okhttp\",{\"0\":{\"119\":1},\"1\":{\"117\":1,\"119\":1}}],[\"op\",{\"1\":{\"537\":2,\"538\":3,\"552\":1}}],[\"optimize\",{\"1\":{\"522\":1}}],[\"option\",{\"1\":{\"521\":3,\"522\":4,\"524\":1,\"544\":1,\"575\":1}}],[\"optional<resource>\",{\"1\":{\"71\":1}}],[\"optional>\",{\"1\":{\"22\":1}}],[\"operationcomplete\",{\"1\":{\"563\":1}}],[\"operation\",{\"1\":{\"415\":1}}],[\"open\",{\"1\":{\"537\":4,\"538\":4,\"541\":2,\"576\":1}}],[\"open=\",{\"1\":{\"507\":2}}],[\"opensession\",{\"1\":{\"503\":2,\"508\":1}}],[\"opening\",{\"1\":{\"483\":3}}],[\"openconnection\",{\"1\":{\"384\":1}}],[\"openfeign<\",{\"1\":{\"163\":1}}],[\"openfeign\",{\"0\":{\"162\":1,\"165\":1,\"166\":1},\"1\":{\"140\":1,\"165\":2}}],[\"orm\",{\"0\":{\"625\":1},\"1\":{\"625\":2}}],[\"oracle\",{\"1\":{\"507\":1,\"607\":1}}],[\"or\",{\"1\":{\"507\":2}}],[\"originalfilename\",{\"1\":{\"223\":4}}],[\"order=\",{\"1\":{\"507\":1}}],[\"ordercontroller\",{\"1\":{\"183\":1}}],[\"orderstarter\",{\"1\":{\"183\":2}}],[\"ordered\",{\"1\":{\"139\":2}}],[\"order\",{\"1\":{\"98\":2,\"183\":2,\"196\":1,\"427\":1}}],[\"organization\",{\"1\":{\"286\":1,\"295\":1,\"326\":1,\"327\":1}}],[\"org\",{\"0\":{\"246\":1,\"249\":1},\"1\":{\"36\":1,\"50\":1,\"51\":2,\"56\":2,\"60\":2,\"62\":13,\"63\":9,\"66\":2,\"67\":2,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":3,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":4,\"174\":4,\"180\":2,\"212\":4,\"213\":7,\"215\":11,\"222\":1,\"233\":3,\"240\":3,\"244\":1,\"248\":1,\"256\":4,\"258\":2,\"259\":1,\"260\":4,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"317\":2,\"318\":7,\"322\":10,\"323\":1,\"483\":3,\"499\":7,\"506\":2,\"508\":4,\"515\":7,\"517\":2,\"518\":2,\"582\":14,\"584\":5,\"585\":5,\"586\":7,\"587\":8,\"593\":2,\"594\":11,\"596\":4,\"597\":4,\"606\":5,\"607\":5,\"608\":4,\"629\":1,\"633\":20}}],[\"oftype=\",{\"1\":{\"518\":2}}],[\"of\",{\"1\":{\"71\":1}}],[\"offer\",{\"1\":{\"395\":4,\"396\":2}}],[\"off\",{\"1\":{\"67\":1}}],[\"odd\",{\"1\":{\"67\":1}}],[\"ognl\",{\"1\":{\"67\":2,\"507\":1}}],[\"override\",{\"0\":{\"267\":1},\"1\":{\"35\":2,\"47\":1,\"54\":2,\"59\":6,\"62\":3,\"63\":1,\"69\":1,\"139\":2,\"144\":3,\"145\":1,\"146\":2,\"173\":2,\"182\":3,\"187\":1,\"204\":8,\"205\":4,\"214\":1,\"229\":3,\"232\":4,\"233\":3,\"234\":3,\"254\":3,\"302\":1,\"303\":1,\"317\":1,\"319\":2,\"322\":1,\"323\":2,\"326\":1,\"327\":1,\"334\":3,\"391\":1,\"392\":1,\"393\":2,\"409\":1,\"411\":1,\"434\":1,\"453\":1,\"454\":1,\"456\":1,\"460\":4,\"461\":2,\"462\":2,\"464\":1,\"466\":1,\"467\":1,\"469\":2,\"470\":1,\"472\":1,\"473\":1,\"474\":1,\"521\":7,\"522\":6,\"524\":1,\"525\":6,\"526\":1,\"527\":1,\"528\":2,\"532\":5,\"533\":1,\"558\":12,\"561\":1,\"563\":3,\"566\":3,\"567\":6,\"575\":7,\"576\":6,\"593\":2,\"630\":5}}],[\"otherwise>\",{\"1\":{\"507\":1}}],[\"otherwise\",{\"1\":{\"414\":1,\"504\":1,\"507\":1}}],[\"others\",{\"1\":{\"33\":1,\"36\":1}}],[\"other\",{\"1\":{\"33\":1}}],[\"onsubmit=\",{\"1\":{\"576\":1}}],[\"onclose\",{\"1\":{\"576\":1}}],[\"onclick=\",{\"1\":{\"36\":2,\"576\":2}}],[\"onopen\",{\"1\":{\"576\":1}}],[\"onmessage\",{\"1\":{\"576\":1}}],[\"onthrow\",{\"1\":{\"296\":1}}],[\"onreturn\",{\"1\":{\"296\":1}}],[\"oninvoke\",{\"1\":{\"296\":1}}],[\"oneof\",{\"1\":{\"522\":2}}],[\"oneof表示其中的类型只能是其中一个\",{\"1\":{\"522\":1}}],[\"one==null\",{\"1\":{\"144\":1}}],[\"one\",{\"1\":{\"144\":2}}],[\"onlogoutsuccess\",{\"1\":{\"59\":1}}],[\"onauthenticationfailure\",{\"1\":{\"59\":1}}],[\"onauthenticationsuccess\",{\"1\":{\"59\":1}}],[\"on\",{\"1\":{\"24\":3,\"75\":2,\"84\":1,\"212\":2,\"233\":1,\"256\":2,\"414\":1,\"415\":1,\"483\":6}}],[\"<null\",{\"1\":{\"593\":1}}],[\"<value><\",{\"1\":{\"593\":1}}],[\"<value>settest5<\",{\"1\":{\"593\":1}}],[\"<value>settest4<\",{\"1\":{\"593\":1}}],[\"<value>settest3<\",{\"1\":{\"593\":1}}],[\"<value>settest2<\",{\"1\":{\"593\":1}}],[\"<value>settest1<\",{\"1\":{\"593\":1}}],[\"<value>listtest5<\",{\"1\":{\"593\":1}}],[\"<value>listtest4<\",{\"1\":{\"593\":1}}],[\"<value>listtest3<\",{\"1\":{\"593\":1}}],[\"<value>listtest2<\",{\"1\":{\"593\":1}}],[\"<value>listtest1<\",{\"1\":{\"593\":1}}],[\"<value>test5<\",{\"1\":{\"593\":1}}],[\"<value>test4<\",{\"1\":{\"593\":1}}],[\"<value>test3<\",{\"1\":{\"593\":1}}],[\"<value>test2<\",{\"1\":{\"593\":1}}],[\"<value>test1<\",{\"1\":{\"593\":1}}],[\"<version>r09<\",{\"1\":{\"474\":1}}],[\"<version>0\",{\"1\":{\"251\":1,\"521\":1}}],[\"<version>8\",{\"1\":{\"251\":1,\"508\":1,\"604\":1}}],[\"<version>5\",{\"1\":{\"251\":2,\"317\":2,\"604\":1}}],[\"<version>4\",{\"1\":{\"251\":2,\"317\":1,\"575\":1}}],[\"<version>$\",{\"1\":{\"180\":4}}],[\"<version>3\",{\"1\":{\"58\":1,\"69\":1,\"251\":1,\"252\":1,\"521\":1,\"604\":1}}],[\"<version>1\",{\"1\":{\"53\":1,\"113\":1,\"182\":1,\"183\":1,\"243\":1,\"251\":6,\"315\":1,\"317\":2,\"325\":1,\"582\":1}}],[\"<version>20190722<\",{\"1\":{\"247\":1}}],[\"<version>2021\",{\"1\":{\"180\":1}}],[\"<version>2020\",{\"1\":{\"180\":1}}],[\"<version>2\",{\"1\":{\"49\":1,\"53\":1,\"177\":1,\"180\":1,\"239\":1,\"251\":3,\"317\":3,\"325\":2,\"508\":1,\"604\":1}}],[\"<goal>compile<\",{\"1\":{\"521\":1}}],[\"<goals>\",{\"1\":{\"521\":1}}],[\"<groupid>aspectj<\",{\"1\":{\"582\":1}}],[\"<groupid>io\",{\"1\":{\"317\":1,\"575\":1}}],[\"<groupid>javax\",{\"1\":{\"251\":4}}],[\"<groupid>junit<\",{\"1\":{\"251\":1}}],[\"<groupid>top\",{\"1\":{\"182\":1,\"183\":1}}],[\"<groupid>commons\",{\"1\":{\"251\":1}}],[\"<groupid>com\",{\"1\":{\"53\":1,\"180\":3,\"181\":1,\"182\":2,\"183\":2,\"239\":1,\"243\":1,\"251\":3,\"317\":1,\"474\":1,\"521\":1}}],[\"<groupid>mysql<\",{\"1\":{\"49\":1,\"180\":1,\"182\":1,\"183\":1,\"251\":1,\"508\":1,\"604\":1}}],[\"<groupid>org\",{\"1\":{\"22\":1,\"23\":1,\"42\":1,\"49\":2,\"53\":2,\"58\":3,\"66\":1,\"69\":1,\"74\":1,\"81\":3,\"90\":1,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"177\":1,\"180\":4,\"181\":1,\"182\":5,\"183\":5,\"186\":1,\"192\":1,\"200\":3,\"247\":1,\"251\":6,\"252\":1,\"315\":1,\"317\":6,\"325\":6,\"508\":1,\"521\":1,\"604\":3}}],[\"<resource>\",{\"1\":{\"508\":2}}],[\"<resources>\",{\"1\":{\"508\":1}}],[\"<result\",{\"1\":{\"508\":2,\"517\":4,\"518\":4,\"519\":2}}],[\"<resultmap\",{\"1\":{\"508\":1,\"517\":2,\"518\":2,\"519\":1}}],[\"<outputdirectory>$\",{\"1\":{\"521\":1}}],[\"<otherwise>\",{\"1\":{\"507\":1}}],[\"<optional>true<\",{\"1\":{\"22\":1}}],[\"<when\",{\"1\":{\"507\":2}}],[\"<where>\",{\"1\":{\"507\":2}}],[\"<web\",{\"1\":{\"212\":1,\"256\":1}}],[\"<import\",{\"1\":{\"619\":1}}],[\"<id\",{\"1\":{\"508\":1,\"517\":2,\"518\":1,\"519\":1}}],[\"<if\",{\"1\":{\"506\":2,\"507\":8}}],[\"<insert\",{\"1\":{\"507\":1}}],[\"<include>\",{\"1\":{\"508\":4}}],[\"<includes>\",{\"1\":{\"508\":2}}],[\"<include\",{\"1\":{\"507\":1}}],[\"<init\",{\"1\":{\"212\":1,\"218\":1,\"256\":4}}],[\"<input\",{\"1\":{\"67\":3,\"221\":2,\"576\":2}}],[\"<<\",{\"1\":{\"405\":1}}],[\"<entry\",{\"1\":{\"593\":3}}],[\"<environment\",{\"1\":{\"508\":1}}],[\"<environments\",{\"1\":{\"508\":1}}],[\"<execution>\",{\"1\":{\"521\":1}}],[\"<executions>\",{\"1\":{\"521\":1}}],[\"<exclusion>\",{\"1\":{\"325\":1}}],[\"<exclusions>\",{\"1\":{\"325\":1}}],[\"<em>containing\",{\"1\":{\"261\":1}}],[\"<java\",{\"1\":{\"252\":1}}],[\"<filtering>true<\",{\"1\":{\"508\":2}}],[\"<filter\",{\"1\":{\"218\":4,\"256\":4}}],[\"<filter>\",{\"1\":{\"218\":1,\"256\":1}}],[\"<foreach\",{\"1\":{\"507\":2}}],[\"<fork>true<\",{\"1\":{\"180\":1}}],[\"<form\",{\"1\":{\"67\":1,\"221\":1,\"576\":1}}],[\"<update\",{\"1\":{\"483\":1}}],[\"<url\",{\"1\":{\"212\":1,\"218\":1,\"256\":2}}],[\"<ul\",{\"1\":{\"33\":1}}],[\"<clearoutputdirectory>false<\",{\"1\":{\"521\":1}}],[\"<clientname>\",{\"1\":{\"172\":5}}],[\"<collection\",{\"1\":{\"518\":2}}],[\"<constructor\",{\"1\":{\"240\":1,\"244\":1,\"248\":1,\"260\":1,\"601\":3,\"606\":1,\"608\":1,\"619\":1,\"629\":1,\"633\":1}}],[\"<context\",{\"1\":{\"215\":2,\"258\":2,\"259\":1,\"260\":1,\"322\":2,\"578\":1,\"586\":2,\"587\":1,\"633\":1}}],[\"<configuration>\",{\"1\":{\"180\":1,\"252\":1,\"508\":1,\"521\":1}}],[\"<choose>\",{\"1\":{\"507\":1}}],[\"<cache\",{\"1\":{\"486\":1,\"487\":1,\"488\":1}}],[\"<c\",{\"1\":{\"208\":1}}],[\"<label>\",{\"1\":{\"576\":2}}],[\"<load\",{\"1\":{\"212\":1,\"256\":1}}],[\"<lombok\",{\"1\":{\"180\":1}}],[\"<list>\",{\"1\":{\"593\":1}}],[\"<link\",{\"1\":{\"67\":1}}],[\"<li><a\",{\"1\":{\"33\":14}}],[\"<tx\",{\"1\":{\"633\":3}}],[\"<textarea\",{\"1\":{\"576\":2}}],[\"<temp\",{\"1\":{\"409\":1}}],[\"<typealias\",{\"1\":{\"498\":1}}],[\"<typealiases>\",{\"1\":{\"498\":1}}],[\"<type>pom<\",{\"1\":{\"180\":3,\"317\":1,\"325\":1}}],[\"<target>1\",{\"1\":{\"252\":1}}],[\"<table\",{\"1\":{\"208\":1}}],[\"<tbody\",{\"1\":{\"208\":1}}],[\"<th>书籍详情<\",{\"1\":{\"208\":1}}],[\"<th>书籍数量<\",{\"1\":{\"208\":1}}],[\"<th>书籍名称<\",{\"1\":{\"208\":1}}],[\"<th>书籍编号<\",{\"1\":{\"208\":1}}],[\"<thead>\",{\"1\":{\"208\":1}}],[\"<transactionmanager\",{\"1\":{\"508\":1}}],[\"<trim\",{\"1\":{\"507\":2}}],[\"<tr><td>\",{\"1\":{\"208\":1}}],[\"<tr>\",{\"1\":{\"208\":2}}],[\"<tr\",{\"1\":{\"67\":2}}],[\"<td>\",{\"1\":{\"208\":4}}],[\"<td>$\",{\"1\":{\"208\":4}}],[\"<td\",{\"1\":{\"67\":5}}],[\"<title\",{\"1\":{\"67\":1}}],[\"<title>国际化<\",{\"1\":{\"67\":1}}],[\"<title>title<\",{\"1\":{\"36\":1,\"67\":1,\"576\":1}}],[\"<==\",{\"1\":{\"483\":16}}],[\"<=\",{\"1\":{\"67\":2,\"405\":1,\"461\":2,\"473\":1}}],[\"<directory>src\",{\"1\":{\"508\":2}}],[\"<div\",{\"1\":{\"67\":2}}],[\"<datasource\",{\"1\":{\"508\":1}}],[\"<dubbo\",{\"1\":{\"293\":2,\"294\":1,\"296\":2,\"297\":1,\"318\":5,\"322\":5}}],[\"<druid\",{\"1\":{\"180\":1}}],[\"<dependencymanagement>\",{\"1\":{\"180\":1}}],[\"<dependency>\",{\"1\":{\"22\":1,\"23\":1,\"42\":1,\"49\":3,\"53\":3,\"58\":3,\"66\":1,\"69\":1,\"74\":1,\"81\":3,\"90\":1,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"177\":1,\"180\":7,\"181\":2,\"182\":9,\"183\":9,\"186\":1,\"192\":1,\"200\":3,\"239\":1,\"243\":1,\"247\":1,\"251\":16,\"315\":1,\"317\":8,\"325\":5,\"474\":1,\"508\":2,\"521\":1,\"575\":1,\"582\":1,\"604\":4}}],[\"<dependencies>\",{\"1\":{\"101\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"251\":1}}],[\"<sql\",{\"1\":{\"507\":1}}],[\"<source>1\",{\"1\":{\"252\":1}}],[\"<set>\",{\"1\":{\"507\":1,\"593\":1}}],[\"<setting\",{\"1\":{\"488\":1,\"505\":2,\"515\":2}}],[\"<settings>\",{\"1\":{\"488\":1,\"505\":1,\"515\":2}}],[\"<session\",{\"1\":{\"256\":2}}],[\"<servlet\",{\"1\":{\"212\":4,\"256\":4}}],[\"<servlet>\",{\"1\":{\"212\":1,\"256\":1}}],[\"<selectkey\",{\"1\":{\"507\":1}}],[\"<select\",{\"1\":{\"51\":2,\"483\":2,\"502\":1,\"506\":1,\"507\":5,\"508\":1,\"517\":3,\"518\":3}}],[\"<span\",{\"1\":{\"67\":12}}],[\"<shiro\",{\"1\":{\"56\":11}}],[\"<scope>test<\",{\"1\":{\"251\":1,\"325\":1}}],[\"<scope>import<\",{\"1\":{\"180\":3}}],[\"<scope>runtime<\",{\"1\":{\"49\":1}}],[\"<script>\",{\"1\":{\"507\":1,\"576\":1}}],[\"<script\",{\"1\":{\"36\":2,\"67\":1}}],[\"<mvc\",{\"1\":{\"215\":2,\"230\":3,\"240\":2,\"244\":2,\"248\":2,\"260\":3}}],[\"<mybatisplus\",{\"1\":{\"180\":1}}],[\"<mysql\",{\"1\":{\"180\":1}}],[\"<map>\",{\"1\":{\"593\":1}}],[\"<mappers>\",{\"1\":{\"499\":4,\"508\":1}}],[\"<mapper\",{\"1\":{\"51\":1,\"499\":9,\"506\":1,\"508\":2,\"517\":1,\"518\":1}}],[\"<maven\",{\"1\":{\"180\":2}}],[\"<meta\",{\"1\":{\"36\":1,\"67\":2,\"576\":1}}],[\"<bind\",{\"1\":{\"507\":1}}],[\"<bean\",{\"1\":{\"213\":4,\"215\":1,\"222\":1,\"230\":1,\"240\":3,\"244\":2,\"248\":1,\"258\":3,\"259\":2,\"260\":4,\"318\":1,\"582\":7,\"584\":3,\"585\":3,\"587\":3,\"594\":2,\"596\":1,\"597\":4,\"601\":3,\"606\":5,\"607\":4,\"608\":3,\"619\":1,\"629\":1,\"633\":8}}],[\"<beans\",{\"1\":{\"213\":1,\"215\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"<build>\",{\"1\":{\"180\":1,\"252\":1,\"508\":1}}],[\"<button\",{\"1\":{\"36\":2}}],[\"<body>\",{\"1\":{\"36\":1,\"67\":2,\"576\":1}}],[\"<package\",{\"1\":{\"498\":1,\"499\":1}}],[\"<packaging>pom<\",{\"1\":{\"180\":1,\"181\":1}}],[\"<param\",{\"1\":{\"212\":2,\"218\":2,\"256\":8}}],[\"<pluginid>protoc\",{\"1\":{\"521\":1}}],[\"<plugin>\",{\"1\":{\"180\":1,\"252\":1,\"521\":1}}],[\"<plugins>\",{\"1\":{\"180\":1,\"252\":1}}],[\"<prop\",{\"1\":{\"593\":2,\"607\":4}}],[\"<props>\",{\"1\":{\"593\":1,\"607\":1}}],[\"<properties\",{\"1\":{\"497\":1}}],[\"<properties>\",{\"1\":{\"180\":1,\"252\":1}}],[\"<property\",{\"1\":{\"213\":2,\"215\":2,\"222\":3,\"240\":2,\"258\":8,\"259\":2,\"260\":4,\"508\":4,\"593\":8,\"596\":1,\"597\":1,\"606\":12,\"607\":10,\"608\":2,\"633\":14}}],[\"<protosourceroot>$\",{\"1\":{\"521\":1}}],[\"<protocexecutable>\",{\"1\":{\"521\":1}}],[\"<project\",{\"1\":{\"180\":1}}],[\"<p>两年后将会是\",{\"1\":{\"67\":1}}],[\"<p>今年是\",{\"1\":{\"67\":1}}],[\"<p>你正在观看\",{\"1\":{\"67\":1}}],[\"<p>friend\",{\"1\":{\"67\":1}}],[\"<p>age\",{\"1\":{\"67\":1}}],[\"<p>name\",{\"1\":{\"67\":1}}],[\"<p>\",{\"1\":{\"67\":2}}],[\"<p\",{\"1\":{\"36\":1,\"67\":3}}],[\"<h1>啦啦啦<\",{\"1\":{\"67\":1}}],[\"<h2\",{\"1\":{\"67\":1}}],[\"<h3>\",{\"1\":{\"67\":1}}],[\"<h3\",{\"1\":{\"67\":1}}],[\"<head>\",{\"1\":{\"36\":1,\"67\":2,\"576\":1}}],[\"<html\",{\"1\":{\"36\":1,\"56\":1,\"60\":1,\"66\":1,\"67\":2,\"576\":1}}],[\"<alias\",{\"1\":{\"619\":1}}],[\"<array>\",{\"1\":{\"593\":1}}],[\"<artifactid>protobuf\",{\"1\":{\"521\":2}}],[\"<artifactid>guava<\",{\"1\":{\"474\":1}}],[\"<artifactid>netty\",{\"1\":{\"317\":1,\"575\":1}}],[\"<artifactid>dubbo\",{\"1\":{\"317\":1,\"325\":2}}],[\"<artifactid>dubbo<\",{\"1\":{\"317\":2}}],[\"<artifactid>druid\",{\"1\":{\"180\":1,\"182\":1,\"183\":1}}],[\"<artifactid>userservice\",{\"1\":{\"317\":2,\"325\":1}}],[\"<artifactid>maven\",{\"1\":{\"252\":1}}],[\"<artifactid>mysql\",{\"1\":{\"49\":1,\"180\":1,\"182\":1,\"183\":1,\"251\":1,\"508\":1,\"604\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"251\":1,\"604\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"49\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"251\":1,\"508\":1,\"604\":1}}],[\"<artifactid>curator\",{\"1\":{\"317\":2}}],[\"<artifactid>commons\",{\"1\":{\"251\":1}}],[\"<artifactid>c3p0<\",{\"1\":{\"251\":1}}],[\"<artifactid>aspectjweaver<\",{\"1\":{\"251\":1,\"582\":1}}],[\"<artifactid>api\",{\"1\":{\"182\":1,\"183\":1}}],[\"<artifactid>fastjson<\",{\"1\":{\"243\":1,\"251\":1}}],[\"<artifactid>junit\",{\"1\":{\"325\":1}}],[\"<artifactid>junit<\",{\"1\":{\"251\":1}}],[\"<artifactid>jstl\",{\"1\":{\"251\":1}}],[\"<artifactid>jstl<\",{\"1\":{\"251\":1}}],[\"<artifactid>jsp\",{\"1\":{\"251\":1}}],[\"<artifactid>json<\",{\"1\":{\"247\":1}}],[\"<artifactid>javax\",{\"1\":{\"251\":1}}],[\"<artifactid>jackson\",{\"1\":{\"239\":1,\"251\":1}}],[\"<artifactid>jquery<\",{\"1\":{\"69\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"251\":1,\"315\":1}}],[\"<artifactid>thymeleaf\",{\"1\":{\"53\":1,\"58\":1}}],[\"<artifactid>shiro\",{\"1\":{\"53\":1}}],[\"<artifactid>spring\",{\"1\":{\"22\":1,\"23\":1,\"42\":1,\"49\":1,\"53\":1,\"58\":2,\"66\":1,\"74\":1,\"81\":3,\"90\":1,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"177\":1,\"180\":4,\"182\":4,\"183\":4,\"186\":1,\"192\":1,\"200\":3,\"251\":2,\"325\":2,\"604\":1}}],[\"<aop\",{\"1\":{\"582\":9,\"633\":3}}],[\"<association\",{\"1\":{\"517\":2}}],[\"<addresources>true<\",{\"1\":{\"180\":1}}],[\"<a\",{\"1\":{\"35\":2,\"208\":2,\"225\":1,\"272\":1}}],[\"<\",{\"1\":{\"22\":1,\"23\":1,\"33\":1,\"36\":5,\"42\":1,\"49\":3,\"51\":5,\"53\":6,\"56\":9,\"58\":6,\"60\":2,\"66\":1,\"67\":26,\"69\":1,\"74\":1,\"81\":6,\"90\":1,\"97\":1,\"101\":2,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"173\":1,\"177\":1,\"180\":20,\"181\":3,\"182\":10,\"183\":10,\"186\":1,\"192\":1,\"200\":3,\"208\":16,\"212\":8,\"213\":7,\"215\":8,\"218\":5,\"221\":1,\"222\":4,\"230\":3,\"239\":1,\"240\":6,\"243\":1,\"244\":5,\"247\":1,\"248\":3,\"251\":31,\"252\":5,\"256\":15,\"258\":9,\"259\":5,\"260\":12,\"315\":1,\"317\":9,\"318\":3,\"322\":4,\"325\":7,\"335\":1,\"338\":1,\"391\":2,\"392\":2,\"395\":8,\"396\":2,\"400\":2,\"405\":1,\"430\":4,\"445\":2,\"448\":2,\"460\":1,\"462\":2,\"464\":1,\"467\":2,\"468\":1,\"469\":1,\"470\":1,\"473\":3,\"474\":2,\"476\":1,\"477\":1,\"478\":1,\"483\":3,\"488\":1,\"497\":1,\"498\":1,\"499\":8,\"502\":1,\"505\":1,\"506\":6,\"507\":29,\"508\":23,\"515\":2,\"517\":17,\"518\":15,\"519\":1,\"521\":11,\"537\":1,\"541\":1,\"566\":1,\"567\":1,\"575\":1,\"576\":8,\"582\":16,\"584\":2,\"585\":2,\"586\":2,\"587\":4,\"593\":21,\"594\":6,\"596\":4,\"597\":4,\"601\":3,\"604\":4,\"606\":5,\"607\":10,\"608\":3,\"619\":2,\"629\":1,\"633\":14}}],[\"默认通过\",{\"1\":{\"589\":1}}],[\"默认名字是类名的小写\",{\"1\":{\"578\":1}}],[\"默认byname\",{\"1\":{\"578\":1}}],[\"默认只会导出\",{\"1\":{\"508\":1}}],[\"默认情况是不设置\",{\"1\":{\"487\":1}}],[\"默认情况下\",{\"1\":{\"78\":1,\"481\":1}}],[\"默认\",{\"1\":{\"405\":1,\"495\":1,\"496\":1}}],[\"默认初始容量\",{\"1\":{\"405\":1}}],[\"默认加载因子\",{\"1\":{\"405\":2}}],[\"默认级别\",{\"1\":{\"374\":1}}],[\"默认方法\",{\"1\":{\"346\":1}}],[\"默认均衡策略为随机请求\",{\"1\":{\"306\":1}}],[\"默认分支最新已经切换为\",{\"1\":{\"300\":1}}],[\"默认依次读取\",{\"1\":{\"292\":1}}],[\"默认路径\",{\"1\":{\"292\":1}}],[\"默认有\",{\"1\":{\"281\":1}}],[\"默认会解析为时间戳\",{\"1\":{\"241\":1}}],[\"默认使用无参构造\",{\"1\":{\"601\":1}}],[\"默认使用dubbo和application\",{\"1\":{\"292\":1}}],[\"默认使用\",{\"1\":{\"204\":1}}],[\"默认的清除策略是\",{\"1\":{\"487\":1}}],[\"默认的初始容量\",{\"1\":{\"405\":1}}],[\"默认的保留策略\",{\"1\":{\"274\":1}}],[\"默认的\",{\"1\":{\"167\":1}}],[\"默认10秒\",{\"1\":{\"143\":1}}],[\"默认该值为20的时候\",{\"1\":{\"143\":1}}],[\"默认是xmlwebapplicationcontext\",{\"1\":{\"256\":1}}],[\"默认是\",{\"1\":{\"117\":1}}],[\"默认为true\",{\"1\":{\"102\":2,\"203\":1,\"207\":2}}],[\"默认为false\",{\"1\":{\"31\":1,\"469\":1}}],[\"默认访问路径如\",{\"1\":{\"71\":1}}],[\"默认静态资源路径\",{\"1\":{\"69\":1}}],[\"默认静态资源配置将会失效\",{\"1\":{\"69\":1}}],[\"默认主配置文件\",{\"1\":{\"24\":1}}],[\"默认就是\",{\"1\":{\"22\":1}}],[\"默认值是\",{\"1\":{\"487\":1}}],[\"默认值为false\",{\"1\":{\"409\":1}}],[\"默认值为null\",{\"1\":{\"409\":1}}],[\"默认值为defaultforkjoinworkerthreadfactory\",{\"1\":{\"409\":1}}],[\"默认值dubbo\",{\"1\":{\"292\":1}}],[\"默认值简写\",{\"1\":{\"67\":1}}],[\"默认值\",{\"1\":{\"19\":7,\"67\":1,\"286\":1,\"287\":1,\"288\":2,\"289\":1,\"290\":1,\"292\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"女\",{\"1\":{\"22\":1,\"67\":1}}],[\"冒号后为默认值\",{\"1\":{\"22\":1}}],[\"rule\",{\"1\":{\"427\":7}}],[\"runalltasks\",{\"1\":{\"574\":2}}],[\"runasync\",{\"1\":{\"386\":1}}],[\"runn\",{\"1\":{\"477\":1}}],[\"running\",{\"1\":{\"464\":1}}],[\"runnable\",{\"0\":{\"392\":1},\"1\":{\"392\":3,\"434\":1,\"453\":1,\"454\":1,\"456\":1,\"464\":1,\"466\":1,\"467\":1,\"468\":1,\"469\":2,\"470\":1,\"472\":1,\"473\":2,\"474\":1}}],[\"runtimeexception\",{\"1\":{\"630\":3}}],[\"runtime\",{\"1\":{\"261\":1,\"262\":1,\"265\":1,\"272\":6,\"274\":1,\"277\":1,\"278\":2,\"388\":1,\"400\":1,\"472\":2,\"474\":1,\"536\":2,\"558\":2}}],[\"run\",{\"1\":{\"103\":1,\"182\":1,\"183\":1,\"194\":1,\"205\":1,\"300\":1,\"391\":4,\"392\":4,\"434\":1,\"448\":2,\"453\":1,\"454\":1,\"456\":1,\"460\":2,\"462\":2,\"464\":1,\"466\":1,\"467\":1,\"469\":2,\"470\":1,\"472\":1,\"473\":1,\"474\":1,\"476\":2,\"477\":1,\"524\":2,\"526\":2,\"558\":2}}],[\"r>\",{\"1\":{\"413\":1}}],[\"rws\",{\"1\":{\"336\":1}}],[\"rwd\",{\"1\":{\"336\":1}}],[\"rw\",{\"1\":{\"336\":7,\"537\":1}}],[\"r\",{\"1\":{\"336\":8,\"413\":1,\"515\":2,\"533\":1}}],[\"rmi\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"rmi协议缺省为java\",{\"1\":{\"288\":1,\"293\":1}}],[\"rmi协议缺省端口为1099\",{\"1\":{\"288\":1}}],[\"rpc\",{\"0\":{\"554\":1,\"555\":1,\"556\":1},\"1\":{\"164\":1,\"555\":1,\"558\":3}}],[\"rpm\",{\"1\":{\"95\":1}}],[\"ribbonping\",{\"1\":{\"174\":1}}],[\"ribbonclient\",{\"1\":{\"173\":1,\"174\":2}}],[\"ribbon<\",{\"1\":{\"171\":1}}],[\"ribbon\",{\"0\":{\"170\":1,\"172\":1,\"174\":1,\"204\":1},\"1\":{\"117\":1,\"165\":3,\"172\":7,\"173\":1,\"174\":3,\"204\":3}}],[\"rhel\",{\"1\":{\"95\":1}}],[\"rangeclosed\",{\"1\":{\"417\":1}}],[\"rand\",{\"1\":{\"336\":2}}],[\"randomaccessfile\",{\"1\":{\"336\":4,\"537\":5}}],[\"randomrule\",{\"1\":{\"172\":1,\"173\":2,\"204\":1}}],[\"randomuuid\",{\"1\":{\"147\":1,\"505\":1,\"566\":1}}],[\"random\",{\"0\":{\"307\":1},\"1\":{\"22\":1,\"289\":2,\"291\":1,\"293\":2,\"294\":2,\"296\":1,\"537\":4}}],[\"rabbit\",{\"1\":{\"187\":1,\"188\":1,\"189\":1}}],[\"rabbit<\",{\"1\":{\"186\":1}}],[\"rabbitmq\",{\"1\":{\"73\":1,\"75\":3,\"76\":3,\"77\":3,\"185\":1,\"187\":5,\"188\":3,\"189\":3}}],[\"row\",{\"1\":{\"483\":5}}],[\"roundrobin\",{\"0\":{\"308\":1},\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1,\"302\":1,\"303\":1,\"326\":1,\"327\":1}}],[\"roundrobinrule\",{\"1\":{\"172\":1}}],[\"route\",{\"1\":{\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"137\":1}}],[\"routelocatorbuilder\",{\"1\":{\"124\":2,\"137\":2}}],[\"routelocator\",{\"1\":{\"124\":1,\"137\":1}}],[\"routes\",{\"1\":{\"123\":1,\"124\":4,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":5,\"203\":2}}],[\"routh\",{\"1\":{\"123\":1,\"124\":1,\"137\":2}}],[\"rollbackfor\",{\"1\":{\"630\":1,\"632\":1}}],[\"rollback\",{\"1\":{\"503\":1,\"512\":1}}],[\"roll\",{\"1\":{\"376\":1}}],[\"rollingfileappender\",{\"1\":{\"515\":1}}],[\"rolling\",{\"1\":{\"483\":1,\"515\":8}}],[\"rollingpercentile\",{\"1\":{\"143\":4}}],[\"rollingstats\",{\"1\":{\"143\":2}}],[\"roles\",{\"1\":{\"59\":2}}],[\"role\",{\"1\":{\"54\":1,\"60\":1,\"63\":3,\"64\":1,\"67\":1}}],[\"rootlogger\",{\"1\":{\"515\":1}}],[\"roots\",{\"1\":{\"366\":1}}],[\"root\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"38\":1,\"62\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1,\"233\":1,\"508\":1,\"510\":1,\"511\":1,\"606\":1,\"609\":1,\"630\":1,\"633\":1}}],[\"rent\",{\"1\":{\"618\":7}}],[\"reverse\",{\"1\":{\"558\":8}}],[\"rejectedexecutionhandler\",{\"1\":{\"473\":5}}],[\"reentrantreadwritelock\",{\"1\":{\"432\":2,\"445\":1}}],[\"reentrantlock\",{\"1\":{\"432\":1,\"434\":2,\"450\":2,\"461\":2}}],[\"recently\",{\"1\":{\"482\":1}}],[\"received==>\",{\"1\":{\"521\":1,\"522\":1,\"575\":1}}],[\"receive\",{\"1\":{\"382\":1,\"383\":1,\"538\":2}}],[\"receiver\",{\"1\":{\"382\":1,\"383\":1}}],[\"receivecontroller\",{\"1\":{\"188\":1}}],[\"recursiveaction\",{\"1\":{\"408\":1}}],[\"recursivetask<long>\",{\"1\":{\"409\":1}}],[\"recursivetask\",{\"1\":{\"408\":1}}],[\"recipes<\",{\"1\":{\"317\":1}}],[\"recipes\",{\"1\":{\"317\":2}}],[\"retries=\",{\"1\":{\"313\":1}}],[\"retries\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1,\"303\":1,\"327\":1}}],[\"retention注解中就使用该属性\",{\"1\":{\"275\":1}}],[\"retentionpolicy来表示注解保留时期\",{\"1\":{\"274\":1}}],[\"retentionpolicy\",{\"1\":{\"261\":1,\"262\":1,\"265\":1,\"272\":6,\"274\":3,\"277\":1,\"278\":2}}],[\"retention\",{\"0\":{\"274\":1},\"1\":{\"261\":1,\"262\":1,\"265\":1,\"272\":6,\"273\":1,\"274\":5,\"277\":1,\"278\":2}}],[\"returning\",{\"1\":{\"582\":1}}],[\"returnvalue\",{\"1\":{\"582\":1}}],[\"returned\",{\"1\":{\"483\":3}}],[\"return\",{\"1\":{\"30\":2,\"35\":2,\"36\":1,\"51\":2,\"54\":9,\"55\":3,\"62\":2,\"63\":1,\"64\":3,\"67\":2,\"69\":1,\"71\":3,\"85\":1,\"124\":1,\"137\":2,\"139\":3,\"143\":2,\"144\":5,\"145\":1,\"146\":2,\"147\":2,\"164\":3,\"168\":1,\"172\":3,\"173\":7,\"174\":2,\"182\":9,\"183\":4,\"187\":1,\"197\":1,\"204\":8,\"205\":8,\"208\":1,\"214\":1,\"215\":2,\"216\":1,\"217\":5,\"223\":3,\"226\":1,\"229\":2,\"232\":4,\"233\":11,\"234\":2,\"241\":5,\"254\":2,\"261\":1,\"265\":3,\"272\":3,\"296\":1,\"302\":4,\"303\":2,\"315\":1,\"317\":1,\"319\":2,\"326\":1,\"327\":2,\"334\":10,\"386\":2,\"393\":2,\"399\":2,\"402\":1,\"403\":1,\"409\":2,\"413\":1,\"414\":1,\"416\":2,\"447\":1,\"448\":4,\"453\":1,\"460\":1,\"461\":1,\"505\":1,\"508\":2,\"558\":7,\"563\":1,\"567\":3,\"576\":1,\"582\":3,\"593\":10,\"602\":1,\"608\":1,\"609\":5,\"618\":2,\"629\":1,\"630\":8}}],[\"replayingdecoder<message>\",{\"1\":{\"567\":1}}],[\"replayingdecoder<long>\",{\"1\":{\"533\":1}}],[\"replayingdecoder\",{\"1\":{\"533\":3,\"567\":1}}],[\"replaceall\",{\"1\":{\"505\":1}}],[\"repeatable\",{\"0\":{\"278\":1},\"1\":{\"261\":3,\"273\":1,\"278\":2}}],[\"repo\",{\"1\":{\"95\":2}}],[\"repository注解\",{\"1\":{\"233\":1}}],[\"repository均在getrootconfigclasses返回的类中配置\",{\"1\":{\"232\":1}}],[\"repository\",{\"1\":{\"51\":2,\"182\":1,\"235\":2,\"258\":1,\"579\":1}}],[\"ref引用spring中创建的类\",{\"1\":{\"597\":1}}],[\"refid=\",{\"1\":{\"507\":1}}],[\"ref\",{\"1\":{\"289\":1,\"593\":1}}],[\"reference的async\",{\"1\":{\"296\":1}}],[\"reference的retries\",{\"1\":{\"296\":1}}],[\"reference>\",{\"1\":{\"294\":1,\"296\":1}}],[\"referenceconfig\",{\"1\":{\"291\":1}}],[\"reference\",{\"0\":{\"291\":1},\"1\":{\"287\":1,\"305\":1,\"322\":1,\"323\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"451\":4}}],[\"reflectively\",{\"1\":{\"448\":1}}],[\"reflection\",{\"1\":{\"270\":1,\"271\":1}}],[\"reflect\",{\"1\":{\"272\":1}}],[\"ref=\",{\"1\":{\"258\":1,\"259\":2,\"318\":1,\"582\":7,\"593\":1,\"597\":1,\"601\":3,\"606\":5,\"607\":3,\"608\":3,\"619\":1,\"629\":1,\"633\":8}}],[\"refresh\",{\"1\":{\"93\":1,\"207\":1,\"208\":1}}],[\"refreshscope\",{\"1\":{\"85\":1,\"92\":1}}],[\"required\",{\"1\":{\"587\":2,\"630\":1,\"633\":1}}],[\"requirenonnull\",{\"1\":{\"272\":1}}],[\"requestcontext\",{\"1\":{\"205\":2}}],[\"requestcache\",{\"1\":{\"143\":1}}],[\"requestbody\",{\"1\":{\"182\":1}}],[\"requestparam\",{\"1\":{\"164\":3,\"223\":2}}],[\"requestmethod\",{\"1\":{\"145\":1,\"146\":1}}],[\"requestmapping\",{\"1\":{\"55\":1,\"64\":3,\"67\":2,\"85\":1,\"115\":2,\"145\":1,\"146\":1,\"172\":1,\"182\":1,\"183\":1,\"215\":1,\"216\":2,\"217\":5,\"226\":1,\"227\":1,\"241\":3,\"327\":1}}],[\"requestlog\",{\"1\":{\"143\":1}}],[\"requestvolumethreshold\",{\"1\":{\"143\":2,\"147\":1}}],[\"requesttemplate\",{\"1\":{\"117\":3}}],[\"request\",{\"1\":{\"35\":2,\"36\":2,\"55\":3,\"67\":1,\"117\":2,\"118\":2,\"130\":1,\"139\":2,\"205\":3,\"208\":2,\"215\":2,\"217\":8,\"221\":1,\"222\":1,\"223\":4,\"225\":1,\"226\":2,\"229\":6,\"234\":6}}],[\"req\",{\"1\":{\"254\":8}}],[\"removed\",{\"1\":{\"483\":12}}],[\"remove\",{\"1\":{\"371\":1,\"395\":2,\"537\":1,\"538\":2}}],[\"remoteaddress\",{\"1\":{\"521\":1,\"522\":1,\"525\":6,\"528\":1,\"560\":1,\"563\":1,\"575\":2}}],[\"remoteaddr=192\",{\"1\":{\"135\":1}}],[\"remoteaddr\",{\"0\":{\"135\":1},\"1\":{\"135\":1}}],[\"rememberme\",{\"1\":{\"59\":1,\"62\":3}}],[\"reduce\",{\"1\":{\"417\":2}}],[\"redo\",{\"1\":{\"375\":2}}],[\"redis\",{\"1\":{\"287\":1}}],[\"redirect2\",{\"1\":{\"217\":1}}],[\"redirect\",{\"0\":{\"0\":1},\"1\":{\"217\":2,\"223\":3,\"226\":1}}],[\"red\",{\"1\":{\"133\":1}}],[\"reactor模型\",{\"0\":{\"570\":1}}],[\"reactor\",{\"0\":{\"562\":1,\"572\":1,\"573\":1},\"1\":{\"572\":3,\"573\":1}}],[\"readystate\",{\"1\":{\"576\":1}}],[\"ready\",{\"1\":{\"575\":2}}],[\"readbytes\",{\"1\":{\"566\":2,\"567\":1}}],[\"readboolean\",{\"1\":{\"333\":1,\"336\":1}}],[\"readchannels>0\",{\"1\":{\"538\":1}}],[\"readchannels\",{\"1\":{\"538\":1}}],[\"readchar\",{\"1\":{\"336\":1}}],[\"reading\",{\"1\":{\"536\":1}}],[\"readablebytes\",{\"1\":{\"532\":1,\"533\":1,\"563\":1,\"566\":2}}],[\"reader\",{\"1\":{\"528\":1}}],[\"readonly\",{\"1\":{\"487\":1,\"488\":2}}],[\"readonly=\",{\"1\":{\"487\":1,\"488\":1}}],[\"readobject\",{\"1\":{\"334\":3}}],[\"readwritelockdemo\",{\"1\":{\"445\":1}}],[\"readwritelock\",{\"1\":{\"445\":7}}],[\"readlong\",{\"1\":{\"532\":1,\"533\":1,\"567\":1}}],[\"readlock\",{\"1\":{\"432\":1,\"445\":2}}],[\"readline\",{\"1\":{\"331\":1}}],[\"readview\",{\"1\":{\"376\":9}}],[\"readvalue用于将json字符串解析为简单java对象\",{\"1\":{\"241\":1}}],[\"readvalue\",{\"1\":{\"241\":4}}],[\"readdouble\",{\"1\":{\"333\":1}}],[\"readutf\",{\"1\":{\"333\":1}}],[\"readtree\",{\"1\":{\"241\":1}}],[\"readtree用于解析json字符串为复杂集合list\",{\"1\":{\"241\":1}}],[\"readtimeout\",{\"1\":{\"119\":1,\"165\":1,\"204\":1}}],[\"read\",{\"1\":{\"223\":1,\"226\":1,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"330\":1,\"331\":1,\"332\":1,\"338\":4,\"340\":1,\"379\":1,\"380\":3,\"383\":1,\"384\":1,\"421\":2,\"422\":2,\"445\":3,\"536\":2,\"537\":9,\"538\":6,\"540\":2,\"541\":1,\"558\":2,\"569\":1,\"572\":1,\"573\":1,\"574\":1}}],[\"realpath\",{\"1\":{\"223\":4,\"226\":2}}],[\"realm\",{\"1\":{\"54\":2}}],[\"realms\",{\"1\":{\"54\":1}}],[\"reason\",{\"1\":{\"146\":1}}],[\"register\",{\"1\":{\"102\":1,\"122\":1,\"184\":1,\"240\":1,\"248\":1,\"260\":1,\"287\":1,\"288\":1,\"289\":1,\"537\":3,\"538\":3}}],[\"registercenter\",{\"1\":{\"102\":1}}],[\"registry的id属性\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"registry标签\",{\"1\":{\"287\":1}}],[\"registry=\",{\"1\":{\"287\":2}}],[\"registryconfig\",{\"1\":{\"287\":1,\"302\":12,\"303\":12}}],[\"registry\",{\"0\":{\"287\":1},\"1\":{\"47\":6,\"69\":5,\"102\":1,\"122\":1,\"233\":2,\"289\":1,\"290\":1,\"291\":1,\"293\":1,\"294\":1,\"302\":1,\"318\":2,\"319\":1,\"322\":2,\"323\":1,\"326\":3,\"327\":2,\"328\":1}}],[\"registrationbean\",{\"1\":{\"30\":1}}],[\"release\",{\"1\":{\"478\":2}}],[\"releases\",{\"1\":{\"95\":1}}],[\"release<\",{\"1\":{\"58\":1,\"113\":1,\"177\":1,\"251\":1,\"604\":1}}],[\"rel=\",{\"1\":{\"67\":1}}],[\"resp\",{\"1\":{\"254\":4}}],[\"responseentity<string>\",{\"1\":{\"184\":1}}],[\"responseentity<byte\",{\"1\":{\"118\":1}}],[\"response\",{\"1\":{\"118\":1,\"217\":4,\"226\":6,\"229\":4,\"234\":4,\"563\":4}}],[\"responsebody\",{\"1\":{\"64\":3,\"115\":3,\"209\":1,\"241\":1}}],[\"res==null\",{\"1\":{\"182\":1}}],[\"res\",{\"1\":{\"182\":4,\"576\":14}}],[\"resttemplate\",{\"0\":{\"184\":1,\"197\":1},\"1\":{\"172\":9,\"183\":12,\"184\":4,\"197\":3}}],[\"restful\",{\"0\":{\"216\":1},\"1\":{\"164\":1}}],[\"restcontroller=\",{\"1\":{\"241\":1}}],[\"restcontroller\",{\"1\":{\"85\":1,\"172\":1,\"182\":1,\"183\":1,\"209\":1,\"241\":1,\"327\":1}}],[\"result=msg\",{\"1\":{\"558\":1}}],[\"resulttype\",{\"1\":{\"502\":1}}],[\"resulttype=\",{\"1\":{\"51\":2,\"483\":2,\"506\":1,\"507\":6,\"517\":1,\"518\":1}}],[\"resultmap>\",{\"1\":{\"508\":1,\"517\":2,\"518\":2,\"519\":1}}],[\"resultmap=\",{\"1\":{\"502\":1,\"508\":1,\"517\":2,\"518\":2}}],[\"resultmap\",{\"0\":{\"519\":1},\"1\":{\"502\":1}}],[\"result2\",{\"1\":{\"393\":1}}],[\"result\",{\"1\":{\"334\":6,\"393\":1,\"413\":1,\"416\":2,\"558\":5}}],[\"resultset=dubug\",{\"1\":{\"515\":1}}],[\"resultset\",{\"1\":{\"39\":6,\"510\":4}}],[\"resolver\",{\"1\":{\"222\":5}}],[\"resolvelocale\",{\"1\":{\"35\":1}}],[\"resource>\",{\"1\":{\"508\":2}}],[\"resource=\",{\"1\":{\"497\":1,\"499\":3,\"508\":1,\"619\":1}}],[\"resourceloader\",{\"1\":{\"71\":1}}],[\"resourceurlprovider\",{\"1\":{\"71\":1}}],[\"resource\",{\"0\":{\"588\":1,\"589\":1},\"1\":{\"69\":3,\"71\":3,\"508\":2,\"578\":1,\"588\":2,\"589\":2}}],[\"resourceproperties\",{\"1\":{\"69\":7,\"71\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"69\":1}}],[\"resources>\",{\"1\":{\"508\":1}}],[\"resources<\",{\"1\":{\"508\":1}}],[\"resources\",{\"1\":{\"24\":2,\"33\":1,\"69\":9,\"71\":5,\"508\":2,\"537\":7,\"540\":1,\"541\":1}}],[\"resetting\",{\"1\":{\"483\":3}}],[\"reset\",{\"1\":{\"31\":1,\"226\":1}}],[\"男女未知\",{\"1\":{\"343\":1}}],[\"男\",{\"1\":{\"22\":1,\"67\":1}}],[\"19\",{\"1\":{\"538\":1,\"593\":3}}],[\"192\",{\"1\":{\"31\":1,\"75\":4,\"76\":3,\"77\":3,\"78\":2,\"79\":1,\"97\":3,\"98\":3,\"109\":3,\"122\":3,\"178\":1,\"182\":1,\"183\":1,\"187\":3,\"188\":3,\"189\":1,\"194\":2,\"196\":2}}],[\"17\",{\"1\":{\"521\":2}}],[\"172\",{\"1\":{\"194\":1,\"196\":1,\"538\":1}}],[\"1表示文件结束\",{\"1\":{\"338\":1}}],[\"1表示全部路径都监控\",{\"1\":{\"178\":1}}],[\"13573285937\",{\"1\":{\"483\":1}}],[\"13\",{\"1\":{\"405\":1,\"538\":1}}],[\"13<\",{\"1\":{\"317\":2}}],[\"130\",{\"1\":{\"30\":1,\"290\":1,\"393\":4}}],[\"1的float值\",{\"1\":{\"178\":1}}],[\"1l\",{\"1\":{\"146\":1,\"473\":1}}],[\"1时\",{\"1\":{\"143\":1,\"289\":1,\"293\":1}}],[\"10秒\",{\"1\":{\"560\":1}}],[\"10l\",{\"1\":{\"536\":1}}],[\"10<\",{\"1\":{\"317\":1}}],[\"10485760\",{\"1\":{\"222\":1,\"233\":1}}],[\"107\",{\"1\":{\"194\":1,\"196\":1,\"538\":1}}],[\"1000\",{\"1\":{\"165\":2,\"289\":1,\"293\":1,\"294\":1,\"303\":1,\"327\":1,\"338\":1,\"434\":1,\"456\":2,\"467\":1,\"537\":1}}],[\"10000\",{\"1\":{\"143\":1,\"203\":1,\"265\":2,\"302\":1,\"303\":1,\"326\":1,\"327\":1}}],[\"100\",{\"1\":{\"143\":1,\"289\":1,\"294\":1,\"335\":1,\"340\":1,\"391\":1,\"392\":1,\"409\":1,\"417\":1,\"453\":1,\"460\":1,\"468\":2,\"537\":3}}],[\"10\",{\"1\":{\"143\":5,\"147\":1,\"290\":1,\"388\":1,\"391\":1,\"392\":1,\"396\":2,\"400\":2,\"417\":1,\"430\":2,\"445\":2,\"448\":2,\"451\":1,\"468\":1,\"470\":2,\"522\":1,\"536\":1,\"537\":1,\"558\":2,\"560\":1,\"566\":2,\"567\":1,\"587\":1}}],[\"1024\",{\"1\":{\"223\":1,\"226\":1,\"330\":1,\"331\":1,\"332\":1,\"379\":1,\"380\":2,\"382\":1,\"383\":1,\"384\":1,\"447\":2,\"474\":1,\"482\":1,\"487\":1,\"536\":1,\"537\":2,\"538\":2,\"540\":2,\"541\":9}}],[\"102\",{\"1\":{\"31\":1}}],[\"153\",{\"1\":{\"194\":1,\"196\":1}}],[\"158\",{\"1\":{\"194\":1,\"196\":1}}],[\"150\",{\"1\":{\"194\":1,\"196\":1}}],[\"15000\",{\"1\":{\"265\":1}}],[\"1500\",{\"1\":{\"143\":1,\"144\":1}}],[\"15\",{\"1\":{\"102\":2,\"106\":2}}],[\"147\",{\"1\":{\"102\":2,\"106\":2}}],[\"14\",{\"1\":{\"75\":2,\"76\":2,\"77\":2,\"97\":2,\"98\":3,\"122\":1,\"182\":1,\"183\":1,\"187\":2,\"188\":2,\"189\":1,\"194\":1,\"196\":2}}],[\"1<\",{\"1\":{\"53\":1,\"69\":1,\"180\":2,\"251\":2,\"252\":1,\"521\":1}}],[\"16582\",{\"1\":{\"265\":2,\"272\":5,\"274\":3,\"278\":2}}],[\"1658272229\",{\"1\":{\"75\":1,\"83\":1,\"87\":1}}],[\"16\",{\"1\":{\"62\":1,\"251\":1,\"405\":5,\"536\":1,\"593\":2}}],[\"163\",{\"1\":{\"43\":2,\"44\":1}}],[\"168\",{\"1\":{\"31\":1,\"75\":4,\"76\":3,\"77\":3,\"78\":2,\"79\":1,\"97\":3,\"98\":3,\"109\":3,\"122\":3,\"135\":1,\"178\":1,\"182\":1,\"183\":1,\"187\":3,\"188\":3,\"189\":1,\"194\":2,\"196\":2}}],[\"18<\",{\"1\":{\"251\":1,\"315\":1}}],[\"18\",{\"1\":{\"27\":1,\"63\":1,\"180\":1,\"262\":1,\"315\":1}}],[\"128\",{\"1\":{\"524\":1,\"544\":1,\"575\":1}}],[\"1283\",{\"1\":{\"393\":2}}],[\"128~127\",{\"1\":{\"389\":1}}],[\"12080\",{\"1\":{\"290\":1}}],[\"12<\",{\"1\":{\"251\":1}}],[\"123\",{\"1\":{\"59\":2,\"279\":1,\"327\":1,\"377\":1,\"386\":1,\"511\":1}}],[\"123456zch\",{\"1\":{\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1}}],[\"123456\",{\"1\":{\"29\":1,\"30\":1,\"31\":2,\"38\":1,\"233\":1,\"508\":1,\"510\":1,\"511\":1,\"606\":1,\"609\":1,\"630\":1,\"633\":1}}],[\"127\",{\"1\":{\"31\":1,\"76\":1,\"77\":1,\"122\":1,\"151\":1,\"183\":1,\"187\":1,\"188\":1,\"292\":1,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"326\":1,\"327\":1}}],[\"126\",{\"1\":{\"30\":1,\"393\":4}}],[\"12\",{\"1\":{\"27\":1,\"537\":1,\"538\":2}}],[\"1\",{\"1\":{\"22\":2,\"23\":1,\"31\":3,\"35\":1,\"36\":1,\"49\":1,\"51\":1,\"69\":1,\"76\":1,\"77\":1,\"102\":2,\"106\":2,\"109\":3,\"122\":1,\"135\":2,\"143\":2,\"144\":1,\"151\":1,\"173\":1,\"178\":1,\"183\":1,\"187\":1,\"188\":1,\"205\":1,\"212\":1,\"213\":1,\"215\":1,\"223\":1,\"226\":1,\"241\":2,\"249\":1,\"254\":1,\"256\":1,\"279\":1,\"287\":1,\"288\":1,\"289\":2,\"292\":3,\"293\":2,\"302\":3,\"303\":2,\"317\":2,\"318\":2,\"319\":1,\"322\":2,\"323\":1,\"326\":4,\"327\":4,\"330\":2,\"331\":2,\"332\":2,\"333\":2,\"336\":1,\"338\":2,\"340\":2,\"345\":2,\"346\":5,\"363\":9,\"379\":1,\"380\":5,\"383\":1,\"384\":1,\"386\":1,\"388\":4,\"393\":4,\"399\":1,\"400\":1,\"402\":1,\"405\":1,\"411\":1,\"437\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"448\":2,\"451\":5,\"460\":2,\"461\":4,\"465\":1,\"470\":2,\"483\":14,\"506\":1,\"508\":2,\"511\":1,\"515\":1,\"517\":1,\"518\":1,\"522\":1,\"524\":1,\"536\":2,\"537\":11,\"538\":2,\"539\":1,\"540\":2,\"541\":1,\"558\":7,\"563\":2,\"575\":1,\"576\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"593\":3,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"110\",{\"1\":{\"483\":4}}],[\"117e949d\",{\"1\":{\"483\":10}}],[\"114514l\",{\"1\":{\"315\":1}}],[\"115\",{\"1\":{\"194\":1,\"196\":1}}],[\"112\",{\"1\":{\"30\":1,\"194\":1,\"196\":1,\"393\":4,\"538\":1}}],[\"11\",{\"1\":{\"20\":1,\"239\":1,\"251\":1,\"377\":2,\"536\":1,\"555\":1}}],[\"lru\",{\"1\":{\"291\":1,\"294\":1,\"296\":1,\"482\":1,\"487\":2}}],[\"l\",{\"1\":{\"265\":1,\"457\":1,\"515\":1,\"567\":3}}],[\"lb\",{\"1\":{\"137\":2,\"173\":4}}],[\"least\",{\"1\":{\"482\":1}}],[\"leastactive\",{\"0\":{\"309\":1},\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"leave\",{\"1\":{\"478\":1}}],[\"learn\",{\"1\":{\"75\":1,\"83\":1,\"87\":1,\"203\":1,\"540\":2,\"541\":2}}],[\"len\",{\"1\":{\"223\":1,\"330\":2,\"331\":2,\"332\":2,\"379\":2,\"380\":5,\"383\":2,\"384\":2,\"536\":2,\"540\":4,\"541\":1,\"567\":9}}],[\"len=\",{\"1\":{\"567\":1}}],[\"len=accept\",{\"1\":{\"541\":1}}],[\"len=acceptinputstream\",{\"1\":{\"380\":1}}],[\"len==\",{\"1\":{\"536\":1}}],[\"len=fileinputstream\",{\"1\":{\"380\":1,\"383\":1,\"540\":1}}],[\"len=bufferedreader\",{\"1\":{\"331\":1}}],[\"len=bufferedinputstream\",{\"1\":{\"330\":1}}],[\"len=inputstreamreader\",{\"1\":{\"332\":1}}],[\"len=inputstream\",{\"1\":{\"223\":1,\"379\":1,\"380\":1,\"384\":1,\"540\":1}}],[\"len=0\",{\"1\":{\"223\":1}}],[\"lengthfieldbasedframedecoder\",{\"1\":{\"533\":1}}],[\"length==\",{\"1\":{\"460\":1}}],[\"length==4\",{\"1\":{\"460\":1}}],[\"length=\",{\"1\":{\"460\":1}}],[\"length\",{\"1\":{\"208\":1,\"382\":2,\"383\":5,\"460\":3,\"563\":1,\"567\":2}}],[\"let\",{\"1\":{\"208\":3,\"237\":3,\"576\":4}}],[\"level\",{\"1\":{\"168\":3,\"169\":1}}],[\"le\",{\"1\":{\"67\":1}}],[\"lt\",{\"1\":{\"67\":1}}],[\"layout=org\",{\"1\":{\"515\":4}}],[\"layout\",{\"1\":{\"515\":9}}],[\"layer\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"lazyman=new\",{\"1\":{\"448\":2}}],[\"lazyman==null\",{\"1\":{\"448\":3}}],[\"lazyman\",{\"1\":{\"448\":19}}],[\"lambda表达式中不能直接访问i\",{\"1\":{\"477\":1}}],[\"lambda\",{\"1\":{\"410\":1,\"411\":1}}],[\"label>\",{\"1\":{\"576\":2}}],[\"label\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"84\":1,\"85\":1,\"88\":1}}],[\"last\",{\"1\":{\"67\":1}}],[\"lacksrole>\",{\"1\":{\"56\":1}}],[\"lacksrole\",{\"1\":{\"56\":2}}],[\"lackspermission>\",{\"1\":{\"56\":1}}],[\"lackspermission\",{\"1\":{\"56\":2}}],[\"lang\",{\"1\":{\"271\":1,\"272\":1,\"473\":1,\"508\":3,\"517\":2,\"518\":2,\"519\":3}}],[\"lang=\",{\"1\":{\"36\":1,\"56\":1,\"60\":1,\"66\":1,\"67\":2,\"576\":1}}],[\"language=\",{\"1\":{\"35\":2}}],[\"language\",{\"1\":{\"35\":4,\"36\":2}}],[\"linux\",{\"1\":{\"539\":1,\"541\":1}}],[\"linux2\",{\"1\":{\"539\":1}}],[\"linebasedframedecoder\",{\"1\":{\"533\":1}}],[\"linkedblockingqueue<runnable>\",{\"1\":{\"474\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"388\":1,\"400\":1,\"473\":1}}],[\"linkedblockingqueue\",{\"1\":{\"472\":1}}],[\"linkedlist<>\",{\"1\":{\"461\":1}}],[\"linkedlist<product>\",{\"1\":{\"461\":1}}],[\"linkedmultivaluemap\",{\"1\":{\"184\":1}}],[\"linkedmultivaluemap<>\",{\"1\":{\"184\":1}}],[\"linkedmultivaluemap<string\",{\"1\":{\"184\":1}}],[\"linkedhashmap<>\",{\"1\":{\"54\":1}}],[\"linkedhashmap<string\",{\"1\":{\"54\":1}}],[\"living\",{\"1\":{\"469\":1}}],[\"like\",{\"0\":{\"347\":1},\"1\":{\"347\":2,\"507\":1}}],[\"limit\",{\"1\":{\"293\":1,\"417\":1}}],[\"lib\",{\"1\":{\"252\":1}}],[\"list>\",{\"1\":{\"593\":1}}],[\"list集合注入\",{\"1\":{\"593\":1}}],[\"listen\",{\"1\":{\"538\":2,\"551\":1}}],[\"listener\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"list=new\",{\"1\":{\"461\":1,\"507\":1}}],[\"list\",{\"0\":{\"402\":1},\"1\":{\"44\":2,\"51\":2,\"63\":1,\"143\":2,\"144\":2,\"151\":1,\"182\":1,\"279\":1,\"461\":3,\"507\":4,\"518\":2,\"549\":1,\"578\":1}}],[\"list<blog>\",{\"1\":{\"506\":2,\"507\":2}}],[\"list<boolean>\",{\"1\":{\"279\":1}}],[\"list<httpmessageconverter<\",{\"1\":{\"233\":1}}],[\"list<student>\",{\"1\":{\"517\":2,\"518\":1}}],[\"list<string>\",{\"1\":{\"44\":1,\"507\":1,\"593\":3}}],[\"list<server>\",{\"1\":{\"173\":2}}],[\"list<payment>\",{\"1\":{\"143\":2,\"144\":2,\"182\":3}}],[\"list<dept>\",{\"1\":{\"115\":1}}],[\"list<grantedauthority>\",{\"1\":{\"63\":1}}],[\"list<user>\",{\"1\":{\"51\":1,\"54\":1,\"241\":1,\"245\":1,\"502\":1,\"508\":3,\"606\":1,\"609\":2,\"630\":2}}],[\"list<map<string\",{\"1\":{\"40\":1}}],[\"list<object>\",{\"1\":{\"20\":1,\"402\":1,\"532\":1,\"533\":1,\"567\":1}}],[\"li>\",{\"1\":{\"33\":14}}],[\"lyear\",{\"1\":{\"33\":14}}],[\"locksdemo\",{\"1\":{\"450\":2}}],[\"locks\",{\"1\":{\"445\":1}}],[\"lock=new\",{\"1\":{\"434\":1}}],[\"locktest\",{\"1\":{\"434\":1}}],[\"lock接口\",{\"0\":{\"432\":1}}],[\"lock锁\",{\"0\":{\"431\":1}}],[\"lock\",{\"0\":{\"435\":1},\"1\":{\"421\":1,\"422\":4,\"427\":2,\"432\":1,\"434\":5,\"435\":6,\"445\":4,\"450\":8,\"461\":9}}],[\"locator\",{\"1\":{\"123\":1,\"137\":1}}],[\"location=\",{\"1\":{\"258\":1}}],[\"location=true\",{\"1\":{\"19\":1}}],[\"location指定mybatis\",{\"1\":{\"233\":1}}],[\"location\",{\"1\":{\"69\":1,\"71\":4,\"184\":2}}],[\"locations\",{\"1\":{\"50\":1,\"69\":1,\"71\":5}}],[\"locations=classpath\",{\"1\":{\"19\":1}}],[\"localtime\",{\"1\":{\"576\":1}}],[\"local在远程调用之前执行\",{\"1\":{\"289\":1,\"291\":1}}],[\"local总是被执行\",{\"1\":{\"289\":1,\"291\":1}}],[\"local后缀\",{\"1\":{\"289\":1,\"293\":1}}],[\"local\",{\"1\":{\"275\":1,\"289\":1}}],[\"locale=new\",{\"1\":{\"35\":1}}],[\"locale\",{\"1\":{\"35\":8,\"222\":1}}],[\"localeresolver\",{\"1\":{\"35\":3,\"36\":1,\"222\":1}}],[\"localhost2\",{\"1\":{\"87\":1,\"88\":1,\"203\":1}}],[\"localhost\",{\"1\":{\"19\":1,\"29\":1,\"31\":1,\"38\":1,\"69\":4,\"71\":1,\"85\":1,\"87\":1,\"88\":1,\"123\":1,\"124\":1,\"203\":2,\"233\":1,\"302\":2,\"303\":1,\"322\":1,\"326\":1,\"384\":1,\"497\":1,\"508\":1,\"510\":1,\"511\":1,\"515\":1,\"526\":3,\"537\":1,\"538\":1,\"558\":1,\"575\":1,\"576\":1,\"606\":1,\"609\":1,\"630\":1,\"633\":1}}],[\"lol\",{\"1\":{\"278\":1}}],[\"lombok懒人依赖\",{\"1\":{\"251\":1}}],[\"lombok\",{\"1\":{\"180\":2}}],[\"low\",{\"1\":{\"136\":1}}],[\"loadfactor\",{\"1\":{\"405\":6}}],[\"load\",{\"1\":{\"212\":1,\"256\":1,\"405\":2,\"421\":2,\"422\":4}}],[\"loadbalance\",{\"0\":{\"307\":1,\"308\":1,\"309\":1,\"310\":1},\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1,\"302\":1,\"303\":1,\"326\":1,\"327\":1}}],[\"loadbalancer\",{\"1\":{\"172\":3,\"174\":2}}],[\"loadbalancerclient\",{\"1\":{\"172\":2}}],[\"loadbalanced\",{\"1\":{\"172\":1,\"197\":1}}],[\"loadbalanceclient\",{\"1\":{\"117\":1}}],[\"loaduserbyusername\",{\"1\":{\"63\":1}}],[\"longtobyteencoder\",{\"1\":{\"532\":4}}],[\"longstream\",{\"1\":{\"417\":1}}],[\"long以上不能越\",{\"1\":{\"363\":1}}],[\"long\",{\"1\":{\"115\":1,\"145\":2,\"146\":2,\"291\":1,\"315\":1,\"334\":1,\"361\":1,\"363\":3,\"395\":2,\"399\":1,\"409\":10,\"417\":2,\"473\":1,\"532\":5,\"537\":4,\"540\":4,\"541\":5,\"567\":5}}],[\"loglevel\",{\"1\":{\"528\":1}}],[\"logs\",{\"1\":{\"515\":2}}],[\"logimpl\",{\"1\":{\"505\":1,\"515\":2,\"607\":1,\"633\":1}}],[\"loginfilter\",{\"1\":{\"205\":1}}],[\"loginprocessingurl\",{\"1\":{\"59\":1,\"62\":1}}],[\"loginpage\",{\"1\":{\"59\":1,\"62\":1}}],[\"loginpassword\",{\"1\":{\"30\":1}}],[\"login\",{\"1\":{\"31\":2,\"55\":4,\"56\":2,\"59\":1,\"62\":2,\"67\":3,\"229\":2,\"234\":2}}],[\"loginusername\",{\"1\":{\"30\":1}}],[\"log4j\",{\"1\":{\"286\":1,\"515\":72}}],[\"log4j2\",{\"1\":{\"31\":1,\"286\":1}}],[\"logouturl\",{\"1\":{\"62\":1}}],[\"logoutsuccesshandler\",{\"1\":{\"59\":2}}],[\"logoutsuccessurl\",{\"1\":{\"59\":1,\"62\":1}}],[\"logout\",{\"1\":{\"59\":1,\"62\":2}}],[\"logginghandler\",{\"1\":{\"528\":1}}],[\"logging\",{\"1\":{\"50\":1,\"169\":1,\"483\":6,\"505\":1,\"515\":5,\"607\":1,\"633\":1}}],[\"loggerfactory\",{\"1\":{\"146\":1}}],[\"loggerlevel\",{\"1\":{\"119\":1}}],[\"logger\",{\"1\":{\"19\":1,\"24\":1,\"69\":1,\"146\":3,\"168\":2,\"286\":1,\"515\":5}}],[\"log\",{\"1\":{\"50\":1,\"67\":2,\"143\":1,\"144\":2,\"182\":8,\"207\":2,\"208\":1,\"375\":4,\"515\":5,\"582\":10}}],[\"$\",{\"1\":{\"20\":5,\"22\":4,\"36\":2,\"67\":24,\"75\":1,\"76\":1,\"77\":1,\"85\":1,\"187\":1,\"188\":2,\"189\":1,\"207\":2,\"208\":3,\"221\":1,\"225\":1,\"258\":5}}],[\"对关闭通道进行监听\",{\"1\":{\"575\":1}}],[\"对服务器资源要求较高\",{\"1\":{\"535\":1}}],[\"对客户端和服务端来说\",{\"1\":{\"529\":1}}],[\"对客户端响应的方法\",{\"1\":{\"254\":1}}],[\"对某些数据库来说\",{\"1\":{\"496\":1}}],[\"对线程的\",{\"1\":{\"427\":1}}],[\"对同一个\",{\"1\":{\"427\":1}}],[\"对后续同步该锁的线程来说是完全可见的\",{\"1\":{\"427\":1}}],[\"对一个变量进行\",{\"1\":{\"422\":1}}],[\"对八大内存操作的规则\",{\"0\":{\"422\":1}}],[\"对其他线程是不可见的\",{\"1\":{\"420\":1}}],[\"对性能影响比较大\",{\"1\":{\"420\":1}}],[\"对比\",{\"1\":{\"376\":1}}],[\"对每个提供者的最大连接数\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"对方收不到断开事件\",{\"1\":{\"288\":1}}],[\"对于支持网卡支持\",{\"1\":{\"539\":1}}],[\"对于默认值\",{\"1\":{\"409\":1}}],[\"对于定义为\",{\"1\":{\"343\":1}}],[\"对于那些查询中很少涉及的列\",{\"1\":{\"343\":1}}],[\"对于长连接\",{\"1\":{\"288\":1}}],[\"对于注解来说没什么意义\",{\"1\":{\"264\":1}}],[\"对角色进行限制\",{\"1\":{\"62\":1}}],[\"对权限进行限制\",{\"1\":{\"62\":1}}],[\"对部分url做出限制\",{\"1\":{\"62\":1}}],[\"对象是由spring来创建的\",{\"1\":{\"596\":1}}],[\"对象中的所有属性\",{\"1\":{\"592\":1}}],[\"对象中止规则\",{\"1\":{\"427\":1}}],[\"对象处理连接后的各种事件\",{\"1\":{\"572\":1}}],[\"对象提交给线程池并调用\",{\"1\":{\"558\":1}}],[\"对象使用动态代理创建一个此类对象\",{\"1\":{\"558\":1}}],[\"对象实现\",{\"1\":{\"547\":1}}],[\"对象或各种业务对象的编码和解码\",{\"1\":{\"520\":1}}],[\"对象工厂\",{\"1\":{\"492\":1}}],[\"对象的关系工具\",{\"1\":{\"625\":1}}],[\"对象的创建转移给第三方\",{\"1\":{\"600\":1}}],[\"对象的创建依赖于容器\",{\"1\":{\"592\":1}}],[\"对象的集合\",{\"1\":{\"507\":1}}],[\"对象的\",{\"1\":{\"427\":1}}],[\"对象可以直接通过\",{\"1\":{\"389\":1}}],[\"对象在\",{\"1\":{\"389\":1}}],[\"对象流\",{\"0\":{\"334\":1}}],[\"对象名\",{\"1\":{\"279\":1}}],[\"对象数组\",{\"1\":{\"272\":1}}],[\"对象会被直接处理为\",{\"1\":{\"67\":1}}],[\"对象包含以下属性\",{\"1\":{\"67\":1}}],[\"对象\",{\"0\":{\"270\":1},\"1\":{\"54\":1,\"184\":1,\"241\":1,\"244\":1,\"272\":2,\"315\":1,\"450\":1,\"507\":1,\"522\":1,\"550\":1,\"558\":1,\"606\":1}}],[\"对应\",{\"1\":{\"551\":1}}],[\"对应一个线程\",{\"1\":{\"537\":1}}],[\"对应一个\",{\"1\":{\"537\":1,\"552\":1}}],[\"对应关系参考官方文档\",{\"1\":{\"521\":1}}],[\"对应文件可以不存在\",{\"1\":{\"339\":1}}],[\"对应url参数\",{\"1\":{\"291\":1}}],[\"对应的java\",{\"1\":{\"610\":2}}],[\"对应的\",{\"1\":{\"606\":2}}],[\"对应的值修改为\",{\"1\":{\"398\":1}}],[\"对应的配置类\",{\"1\":{\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"295\":1,\"296\":1,\"297\":1}}],[\"对应的是\",{\"1\":{\"126\":1}}],[\"对应配置类org\",{\"1\":{\"286\":1}}],[\"对应实现\",{\"1\":{\"233\":1}}],[\"对应于\",{\"1\":{\"46\":1}}],[\"对应地址为\",{\"1\":{\"30\":1}}],[\"对list赋值以下两种写法都可以\",{\"1\":{\"20\":1}}],[\"对\",{\"1\":{\"20\":1}}],[\"注入sqlsessionfactory\",{\"1\":{\"610\":1}}],[\"注入会出现以下问题\",{\"1\":{\"587\":1}}],[\"注入\",{\"0\":{\"197\":1},\"1\":{\"592\":1}}],[\"注入数据源\",{\"1\":{\"62\":1}}],[\"注入一个用于认证的接口的实现类\",{\"1\":{\"62\":1}}],[\"注册bean\",{\"1\":{\"582\":2}}],[\"注册监听回调获取执行结果\",{\"1\":{\"545\":1}}],[\"注册后返回一个\",{\"1\":{\"537\":1}}],[\"注册后将显示后disable状态\",{\"1\":{\"289\":1,\"293\":1}}],[\"注册后将显示为disable状态\",{\"1\":{\"287\":1}}],[\"注册时\",{\"1\":{\"499\":1}}],[\"注册自定义的controller类\",{\"1\":{\"213\":1}}],[\"注册中心将基于长连接推送变更数据给消费者\",{\"1\":{\"328\":1}}],[\"注册中心返回服务提供者地址列表给消费者\",{\"1\":{\"328\":1}}],[\"注册中心全部宕掉后\",{\"1\":{\"305\":1}}],[\"注册中心对等集群\",{\"1\":{\"305\":1}}],[\"注册中心仍能通过缓存提供服务列表查询\",{\"1\":{\"305\":1}}],[\"注册中心宕机\",{\"0\":{\"305\":1},\"1\":{\"305\":1}}],[\"注册中心不存在时\",{\"1\":{\"287\":1}}],[\"注册中心会话超时时间\",{\"1\":{\"287\":1}}],[\"注册中心请求超时时间\",{\"1\":{\"287\":1}}],[\"注册中心缺省端口\",{\"1\":{\"287\":1}}],[\"注册中心地址协议\",{\"1\":{\"287\":1}}],[\"注册中心服务器地址\",{\"1\":{\"287\":1}}],[\"注册中心引用beanid\",{\"1\":{\"287\":1}}],[\"注册中心配置\",{\"1\":{\"287\":1}}],[\"注册中心\",{\"0\":{\"299\":1},\"1\":{\"109\":1,\"328\":1}}],[\"注册中心集群配置\",{\"0\":{\"108\":1}}],[\"注册到其维护的\",{\"1\":{\"552\":1}}],[\"注册到selector并监听读事件\",{\"1\":{\"538\":1}}],[\"注册到注册中心的url是否采用精简模式的\",{\"1\":{\"287\":1}}],[\"注册到\",{\"0\":{\"97\":1,\"98\":1,\"110\":1},\"1\":{\"537\":2}}],[\"注册defaultwebsecuritymanager\",{\"1\":{\"54\":1}}],[\"注册druiddatasource到ioc\",{\"1\":{\"30\":1}}],[\"注册realm\",{\"1\":{\"54\":1}}],[\"注意顺序\",{\"1\":{\"567\":1}}],[\"注意先后顺序\",{\"1\":{\"532\":1}}],[\"注意枚举类元素标记从0开始\",{\"1\":{\"522\":1}}],[\"注意添加\",{\"1\":{\"521\":1}}],[\"注意此例中的空格是必要的\",{\"1\":{\"507\":1}}],[\"注意遍历的终点是read方法的返回值\",{\"1\":{\"338\":1}}],[\"注意数据源的各项参数名\",{\"1\":{\"235\":1}}],[\"注意拼接的位置\",{\"1\":{\"208\":1}}],[\"注意在远程请求时\",{\"1\":{\"207\":1}}],[\"注意这不是\",{\"1\":{\"67\":1}}],[\"注意和successforwardurl的区别\",{\"1\":{\"62\":1}}],[\"注意事项\",{\"0\":{\"46\":1,\"227\":1},\"1\":{\"235\":1}}],[\"注意\",{\"1\":{\"20\":1,\"21\":1,\"24\":1,\"31\":1,\"39\":1,\"43\":1,\"63\":1,\"66\":1,\"67\":3,\"144\":1,\"164\":1,\"173\":1,\"174\":1,\"204\":1,\"218\":1,\"286\":1,\"287\":1,\"289\":1,\"338\":1,\"349\":1,\"383\":1,\"450\":1,\"486\":1,\"488\":1,\"503\":1,\"507\":1,\"522\":1,\"532\":1,\"541\":1,\"587\":1,\"607\":1,\"629\":1,\"632\":1}}],[\"注解属性\",{\"1\":{\"632\":2}}],[\"注解属性类型可以有以下列出的类型\",{\"1\":{\"263\":1}}],[\"注解属性类型\",{\"0\":{\"263\":1}}],[\"注解失效\",{\"1\":{\"631\":1}}],[\"注解放在类上时\",{\"1\":{\"631\":1}}],[\"注解进行配置\",{\"0\":{\"609\":1}}],[\"注解直接在属性上使用\",{\"1\":{\"587\":1}}],[\"注解驱动\",{\"1\":{\"587\":1}}],[\"注解实现自动装配\",{\"0\":{\"586\":1,\"587\":1,\"588\":1}}],[\"注解实现\",{\"1\":{\"582\":1}}],[\"注解指定缓存作用域\",{\"1\":{\"486\":1}}],[\"注解指定使用前缀为\",{\"1\":{\"22\":1}}],[\"注解配置\",{\"0\":{\"319\":1}}],[\"注解等编程接口采集的配置可以被理解成配置来源的一种\",{\"1\":{\"281\":1}}],[\"注解了的注解修饰了一个父类\",{\"1\":{\"277\":1}}],[\"注解只存在于源码中\",{\"1\":{\"274\":1}}],[\"注解会在class字节码文件中存在\",{\"1\":{\"274\":1}}],[\"注解在class字节码文件中存在\",{\"1\":{\"274\":1}}],[\"注解本身就是\",{\"1\":{\"264\":1}}],[\"注解类型\",{\"1\":{\"263\":1}}],[\"注解成员变量赋值\",{\"0\":{\"262\":1}}],[\"注解中使用枚举\",{\"1\":{\"274\":1}}],[\"注解中的变量则类型则是对应\",{\"1\":{\"261\":1}}],[\"注解中有这样一个注解\",{\"1\":{\"46\":1}}],[\"注解支持\",{\"0\":{\"258\":1}}],[\"注解与\",{\"1\":{\"216\":1}}],[\"注解返回一个\",{\"1\":{\"209\":1}}],[\"注解或\",{\"1\":{\"209\":1}}],[\"注解或者在主启动类上添加\",{\"1\":{\"51\":1}}],[\"注解完成映射\",{\"1\":{\"164\":1}}],[\"注解作键值映射\",{\"1\":{\"164\":1}}],[\"注解并配置\",{\"1\":{\"144\":1}}],[\"注解并进行配置\",{\"1\":{\"143\":1}}],[\"注解开启事务\",{\"1\":{\"630\":1}}],[\"注解开启服务\",{\"1\":{\"83\":1}}],[\"注解开启定时任务支持\",{\"1\":{\"26\":1}}],[\"注解找到\",{\"1\":{\"66\":1}}],[\"注解可以不加\",{\"1\":{\"51\":1}}],[\"注解的本质就是一个\",{\"1\":{\"264\":1}}],[\"注解的本质\",{\"0\":{\"264\":1}}],[\"注解的属性其实和类中定义的变量有异曲同工之处\",{\"1\":{\"261\":1}}],[\"注解的属性\",{\"0\":{\"261\":1}}],[\"注解的类\",{\"1\":{\"117\":1}}],[\"注解的\",{\"1\":{\"20\":1}}],[\"注解主要是为了扫描范围包下的所有\",{\"1\":{\"14\":1}}],[\"注解\",{\"1\":{\"14\":2,\"17\":2,\"23\":1,\"46\":2,\"69\":1,\"92\":1,\"103\":1,\"107\":1,\"143\":2,\"164\":3,\"194\":1,\"202\":1,\"235\":3,\"275\":1,\"579\":3,\"630\":1,\"632\":1}}],[\"注解和反射\",{\"0\":{\"4\":1}}],[\"voice\",{\"1\":{\"462\":6}}],[\"void\",{\"1\":{\"15\":1,\"35\":1,\"39\":1,\"40\":1,\"44\":3,\"47\":1,\"59\":6,\"62\":3,\"69\":1,\"103\":1,\"173\":1,\"182\":2,\"183\":2,\"188\":1,\"194\":1,\"204\":1,\"217\":2,\"229\":2,\"233\":3,\"234\":2,\"254\":6,\"265\":2,\"270\":1,\"271\":1,\"272\":2,\"277\":1,\"279\":1,\"303\":2,\"315\":1,\"318\":1,\"319\":1,\"322\":3,\"323\":5,\"327\":3,\"334\":3,\"377\":2,\"379\":2,\"380\":2,\"382\":2,\"383\":2,\"384\":1,\"388\":1,\"389\":1,\"391\":2,\"392\":2,\"393\":4,\"396\":1,\"400\":2,\"411\":3,\"415\":1,\"429\":1,\"430\":4,\"434\":2,\"437\":3,\"438\":2,\"439\":4,\"440\":4,\"441\":4,\"442\":1,\"443\":4,\"444\":4,\"445\":3,\"448\":3,\"450\":6,\"451\":1,\"453\":3,\"454\":3,\"456\":4,\"460\":3,\"461\":1,\"462\":5,\"464\":3,\"465\":2,\"466\":2,\"467\":2,\"468\":1,\"469\":3,\"470\":2,\"472\":2,\"473\":2,\"474\":2,\"476\":1,\"477\":1,\"478\":1,\"503\":1,\"506\":1,\"507\":2,\"508\":1,\"521\":7,\"522\":6,\"524\":3,\"525\":6,\"526\":3,\"527\":1,\"528\":2,\"532\":5,\"533\":1,\"536\":2,\"538\":7,\"540\":2,\"541\":2,\"558\":14,\"560\":1,\"561\":1,\"563\":4,\"566\":3,\"567\":7,\"575\":9,\"576\":7,\"582\":11,\"587\":1,\"593\":10,\"597\":1,\"599\":4,\"606\":1,\"609\":1,\"618\":5,\"619\":1,\"630\":8}}],[\"volatiledemo\",{\"1\":{\"429\":1,\"430\":2}}],[\"volatile\",{\"0\":{\"418\":1,\"428\":1},\"1\":{\"425\":3,\"426\":2,\"427\":3,\"428\":2,\"429\":2,\"430\":2,\"445\":1,\"448\":1,\"558\":2}}],[\"v>\",{\"1\":{\"405\":1}}],[\"v>implements\",{\"1\":{\"405\":1}}],[\"v>extends\",{\"1\":{\"405\":1}}],[\"vendordatabaseidprovider\",{\"1\":{\"607\":1}}],[\"vector<>\",{\"1\":{\"402\":1}}],[\"vector<string>\",{\"1\":{\"402\":1}}],[\"vector\",{\"1\":{\"402\":2}}],[\"version\",{\"1\":{\"180\":4,\"286\":1,\"289\":1,\"291\":1,\"293\":1,\"295\":1,\"302\":1,\"303\":1,\"326\":2,\"327\":2,\"536\":1,\"538\":2}}],[\"version=\",{\"1\":{\"51\":1,\"212\":2,\"213\":1,\"215\":1,\"256\":2,\"318\":1,\"322\":1,\"506\":1,\"508\":2,\"517\":1,\"518\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"version>3\",{\"1\":{\"180\":1}}],[\"version>8\",{\"1\":{\"180\":1}}],[\"version>1\",{\"1\":{\"180\":2,\"252\":1}}],[\"version>\",{\"1\":{\"49\":1,\"53\":2,\"58\":1,\"69\":1,\"113\":1,\"177\":1,\"180\":11,\"182\":1,\"183\":1,\"239\":1,\"243\":1,\"247\":1,\"251\":16,\"252\":2,\"315\":1,\"317\":8,\"325\":3,\"474\":1,\"508\":2,\"521\":2,\"575\":1,\"582\":1,\"604\":4}}],[\"v\",{\"1\":{\"398\":3}}],[\"vue\",{\"1\":{\"300\":1}}],[\"v2\",{\"1\":{\"258\":1}}],[\"var\",{\"1\":{\"499\":3}}],[\"var5\",{\"1\":{\"399\":5}}],[\"var4\",{\"1\":{\"399\":2}}],[\"var2\",{\"1\":{\"399\":3}}],[\"var1\",{\"1\":{\"399\":3}}],[\"variable\",{\"1\":{\"275\":1,\"427\":1}}],[\"var=\",{\"1\":{\"208\":1}}],[\"validation\",{\"1\":{\"75\":1,\"291\":1,\"294\":1,\"296\":1}}],[\"validationquery\",{\"1\":{\"31\":1}}],[\"validation<\",{\"1\":{\"23\":1}}],[\"validated\",{\"1\":{\"23\":1}}],[\"value为空赋空值\",{\"1\":{\"593\":1}}],[\"values\",{\"1\":{\"503\":1,\"507\":1,\"511\":1,\"515\":1,\"630\":1}}],[\"valueof\",{\"1\":{\"445\":2,\"476\":1,\"477\":1,\"478\":1,\"558\":1}}],[\"valueoffset\",{\"1\":{\"399\":1}}],[\"value>config\",{\"1\":{\"256\":1}}],[\"value>classpath\",{\"1\":{\"212\":1,\"256\":1}}],[\"value>org\",{\"1\":{\"256\":1}}],[\"value>utf\",{\"1\":{\"218\":1,\"256\":1}}],[\"value>\",{\"1\":{\"212\":1,\"218\":1,\"256\":4,\"593\":16}}],[\"value==>\",{\"1\":{\"272\":1}}],[\"value=\",{\"1\":{\"67\":1,\"213\":2,\"215\":2,\"221\":1,\"222\":3,\"240\":2,\"244\":1,\"248\":1,\"258\":7,\"260\":4,\"269\":1,\"488\":1,\"505\":2,\"507\":1,\"508\":4,\"515\":2,\"576\":3,\"593\":4,\"596\":1,\"606\":8,\"607\":5,\"633\":8}}],[\"value\",{\"1\":{\"20\":8,\"23\":2,\"85\":1,\"115\":1,\"143\":27,\"144\":1,\"145\":1,\"146\":1,\"147\":4,\"164\":2,\"181\":1,\"188\":1,\"204\":1,\"241\":2,\"261\":1,\"272\":4,\"278\":6,\"370\":2,\"445\":2,\"472\":1,\"473\":1,\"576\":6,\"578\":3,\"582\":5,\"587\":1,\"593\":1,\"602\":3}}],[\"v1\",{\"1\":{\"172\":2}}],[\"vintage\",{\"1\":{\"325\":1}}],[\"vintage<\",{\"1\":{\"325\":1}}],[\"vip来了\",{\"1\":{\"467\":1}}],[\"vipp\",{\"1\":{\"64\":2}}],[\"vip\",{\"1\":{\"62\":1,\"63\":1}}],[\"vip3\",{\"1\":{\"59\":3}}],[\"vip2\",{\"1\":{\"59\":3}}],[\"vip1\",{\"1\":{\"59\":5}}],[\"views\",{\"1\":{\"505\":1}}],[\"viewresolver\",{\"1\":{\"222\":1,\"232\":1}}],[\"viewnametranslator\",{\"1\":{\"222\":1}}],[\"viewcontrollerregistry\",{\"1\":{\"47\":1}}],[\"view\",{\"1\":{\"19\":1,\"31\":1,\"213\":1,\"215\":1,\"222\":2,\"260\":1}}],[\"⽤逗号分隔\",{\"1\":{\"19\":1}}],[\"8mb\",{\"1\":{\"541\":1}}],[\"8时\",{\"1\":{\"345\":1}}],[\"8以前\",{\"1\":{\"345\":1}}],[\"8192\",{\"1\":{\"288\":1,\"293\":1,\"576\":1}}],[\"8388608\",{\"1\":{\"288\":1,\"293\":1}}],[\"8加入\",{\"1\":{\"275\":2}}],[\"8888\",{\"1\":{\"322\":1}}],[\"8802\",{\"1\":{\"188\":2}}],[\"8801\",{\"1\":{\"187\":2}}],[\"8848\",{\"1\":{\"75\":1,\"83\":1,\"85\":1,\"87\":1,\"318\":1,\"326\":1,\"379\":2,\"380\":2,\"382\":2,\"383\":2,\"524\":1,\"526\":1,\"536\":1,\"537\":3,\"540\":2,\"541\":2,\"558\":2,\"563\":1,\"575\":2,\"576\":2}}],[\"8<\",{\"1\":{\"180\":1,\"218\":1,\"252\":3,\"256\":1,\"325\":2}}],[\"8500\",{\"1\":{\"97\":1,\"98\":1}}],[\"8004\",{\"1\":{\"194\":2}}],[\"8002\",{\"1\":{\"173\":1}}],[\"8001\",{\"1\":{\"106\":1,\"122\":1,\"123\":1,\"124\":1,\"182\":2,\"183\":1,\"203\":1}}],[\"8003\",{\"1\":{\"97\":1,\"173\":1}}],[\"80\",{\"1\":{\"98\":3,\"136\":1,\"183\":2,\"196\":3}}],[\"8080\",{\"1\":{\"69\":5,\"71\":1,\"384\":1}}],[\"8\",{\"1\":{\"19\":1,\"20\":2,\"22\":1,\"27\":1,\"36\":1,\"44\":2,\"51\":1,\"66\":1,\"67\":2,\"136\":1,\"177\":1,\"204\":1,\"212\":1,\"213\":1,\"215\":1,\"218\":5,\"222\":1,\"226\":2,\"232\":1,\"233\":2,\"240\":1,\"241\":1,\"244\":1,\"248\":1,\"252\":1,\"256\":1,\"260\":1,\"273\":1,\"288\":1,\"293\":1,\"318\":1,\"322\":1,\"332\":1,\"346\":6,\"377\":1,\"379\":1,\"506\":1,\"508\":2,\"517\":1,\"518\":1,\"521\":2,\"522\":2,\"536\":1,\"538\":2,\"541\":4,\"560\":1,\"561\":2,\"563\":2,\"566\":4,\"567\":5,\"575\":4,\"576\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"视图解析器\",{\"1\":{\"215\":1}}],[\"视图解析器的一种\",{\"1\":{\"213\":1}}],[\"视图解析\",{\"1\":{\"19\":1}}],[\"的事务是不会起作用的\",{\"1\":{\"632\":1}}],[\"的事件和操作\",{\"1\":{\"549\":1}}],[\"的是同一个数据源\",{\"1\":{\"629\":1}}],[\"的是方法调用者即\",{\"1\":{\"450\":1}}],[\"的核心要点就是支持不绑定到特定\",{\"1\":{\"627\":1}}],[\"的通用事务和\",{\"1\":{\"625\":1}}],[\"的应用程序提供了上下文\",{\"1\":{\"626\":1}}],[\"的应用程序中的对象提供了事务管理服务\",{\"1\":{\"623\":1}}],[\"的应用都是以一个\",{\"1\":{\"508\":1}}],[\"的子类\",{\"1\":{\"608\":1}}],[\"的子标签\",{\"1\":{\"296\":1,\"297\":1}}],[\"的一个实现\",{\"1\":{\"608\":1}}],[\"的一种方法\",{\"1\":{\"600\":1}}],[\"的名字\",{\"1\":{\"602\":2}}],[\"的样板代码或为类创建构造函数\",{\"1\":{\"587\":1}}],[\"的字段上不起作用\",{\"1\":{\"587\":1}}],[\"的字符串常量值\",{\"1\":{\"67\":1}}],[\"的自动装配\",{\"0\":{\"583\":1}}],[\"的相关注解\",{\"1\":{\"579\":1}}],[\"的selector上可以注册监听多个\",{\"1\":{\"574\":1}}],[\"的网络通讯\",{\"1\":{\"574\":1}}],[\"的粘包拆包现象\",{\"1\":{\"566\":1}}],[\"的各种方法\",{\"0\":{\"562\":1}}],[\"的返回值类型\",{\"1\":{\"558\":1}}],[\"的抽象层提供了有意义的异常层次结构\",{\"1\":{\"624\":1}}],[\"的抽象\",{\"1\":{\"552\":1}}],[\"的入站事件和出站操作\",{\"1\":{\"549\":1}}],[\"的入场点\",{\"1\":{\"407\":1}}],[\"的链\",{\"1\":{\"549\":1}}],[\"的集合\",{\"1\":{\"549\":1}}],[\"的集成依赖\",{\"1\":{\"317\":1}}],[\"的缓冲区里\",{\"1\":{\"539\":1}}],[\"的先后顺序\",{\"1\":{\"521\":1}}],[\"的最佳作用域是应用作用域\",{\"1\":{\"513\":1}}],[\"的最佳实践是在应用运行期间不要重复创建多次\",{\"1\":{\"513\":1}}],[\"的对象\",{\"1\":{\"510\":1}}],[\"的实现类中实现注入\",{\"1\":{\"608\":1}}],[\"的实例不是线程安全的\",{\"1\":{\"513\":1}}],[\"的实例可以通过\",{\"1\":{\"508\":1}}],[\"的实\",{\"1\":{\"508\":1}}],[\"的默认别名就是类名的小写\",{\"1\":{\"498\":1}}],[\"的概念将\",{\"1\":{\"496\":1}}],[\"的线程\",{\"1\":{\"473\":1}}],[\"的锁并执行\",{\"1\":{\"450\":1}}],[\"的锁\",{\"1\":{\"450\":1}}],[\"的区别\",{\"0\":{\"435\":1,\"589\":1}}],[\"的发生\",{\"1\":{\"427\":1}}],[\"的变量来为不同的数据库构建特定的语句\",{\"1\":{\"507\":1}}],[\"的变量\",{\"1\":{\"427\":1}}],[\"的操作\",{\"1\":{\"427\":1}}],[\"的操作肯定先于下一次\",{\"1\":{\"427\":1}}],[\"的工作内存和主内存之间存在延迟\",{\"1\":{\"426\":1}}],[\"的有序性跟线程相关\",{\"1\":{\"426\":1}}],[\"的时候这种处理更加高效\",{\"1\":{\"407\":1}}],[\"的扩容机制和加载因子\",{\"0\":{\"405\":1}}],[\"的键确保不会重复\",{\"1\":{\"403\":1}}],[\"的键值对\",{\"1\":{\"370\":1}}],[\"的内部类\",{\"1\":{\"370\":2}}],[\"的范围内\",{\"1\":{\"363\":1}}],[\"的行锁默认算法\",{\"1\":{\"359\":1}}],[\"的组成部分\",{\"1\":{\"347\":1}}],[\"的接口\",{\"1\":{\"347\":1}}],[\"的父类\",{\"1\":{\"347\":1}}],[\"的数据类型的列不要建立索引\",{\"1\":{\"343\":1}}],[\"的数量\",{\"1\":{\"143\":2}}],[\"的索引\",{\"1\":{\"343\":2}}],[\"的几个组成部分\",{\"0\":{\"328\":1}}],[\"的缺省值\",{\"1\":{\"282\":1}}],[\"的英文意思是可重复的\",{\"1\":{\"278\":1}}],[\"的英文意思是继承\",{\"1\":{\"277\":1}}],[\"的英文意思是目标\",{\"1\":{\"275\":1}}],[\"的泛型\",{\"1\":{\"261\":1}}],[\"的用户名属性为\",{\"1\":{\"258\":1}}],[\"的方式组织和管理\",{\"1\":{\"621\":1}}],[\"的方式指定它的值\",{\"1\":{\"17\":1}}],[\"的方法可以不被实现子类所实现\",{\"1\":{\"346\":1}}],[\"的方法\",{\"0\":{\"254\":1}}],[\"的属性值为\",{\"1\":{\"587\":1}}],[\"的属性\",{\"1\":{\"235\":1}}],[\"的原因\",{\"1\":{\"222\":1}}],[\"的启动参数中添加\",{\"1\":{\"218\":1}}],[\"的状态码\",{\"1\":{\"204\":3}}],[\"的策略\",{\"1\":{\"204\":1}}],[\"的所有可选\",{\"1\":{\"174\":1}}],[\"的地方直接注入调用即可\",{\"1\":{\"172\":1}}],[\"的超时时间\",{\"1\":{\"165\":1}}],[\"的降级\",{\"0\":{\"145\":1}}],[\"的间隔等待时间\",{\"1\":{\"143\":1}}],[\"的可选配置项有\",{\"1\":{\"143\":1}}],[\"的关系\",{\"1\":{\"140\":1}}],[\"的请求进入\",{\"1\":{\"136\":1}}],[\"的动态代理来生成\",{\"1\":{\"117\":1}}],[\"的资源会被转换为项目中的四个\",{\"1\":{\"69\":1}}],[\"的功能\",{\"1\":{\"67\":1,\"232\":1}}],[\"的引擎解析\",{\"1\":{\"67\":1}}],[\"的形式指定属性\",{\"1\":{\"67\":1}}],[\"的配置值\",{\"1\":{\"282\":1}}],[\"的配置文件\",{\"0\":{\"76\":1}}],[\"的配置类\",{\"1\":{\"66\":1}}],[\"的配置\",{\"1\":{\"46\":1,\"299\":1}}],[\"的\",{\"0\":{\"198\":1},\"1\":{\"22\":1,\"33\":1,\"69\":1,\"71\":1,\"117\":2,\"140\":1,\"180\":1,\"204\":3,\"213\":2,\"218\":1,\"223\":1,\"227\":1,\"252\":1,\"264\":1,\"305\":1,\"317\":2,\"346\":4,\"361\":1,\"370\":2,\"402\":1,\"405\":1,\"465\":1,\"472\":1,\"482\":1,\"487\":1,\"537\":1,\"549\":1,\"552\":1,\"582\":1}}],[\"的情况下\",{\"1\":{\"21\":1,\"143\":1}}],[\"的值是本次迭代获取到的元素\",{\"1\":{\"507\":1}}],[\"的值\",{\"1\":{\"19\":1,\"84\":1}}],[\"udp\",{\"0\":{\"381\":1},\"1\":{\"383\":1,\"546\":1}}],[\"uuid\",{\"1\":{\"147\":1,\"505\":1,\"566\":1}}],[\"uri\",{\"1\":{\"75\":1,\"83\":1,\"85\":1,\"87\":1,\"123\":1,\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":2,\"137\":2,\"172\":2,\"184\":3,\"563\":5}}],[\"urlencoder\",{\"1\":{\"226\":1}}],[\"url=\",{\"1\":{\"183\":1,\"198\":1,\"499\":3,\"510\":1,\"511\":1}}],[\"url=jdbc\",{\"1\":{\"19\":1,\"497\":1,\"515\":1}}],[\"url\",{\"0\":{\"198\":1,\"384\":1},\"1\":{\"19\":2,\"29\":1,\"31\":3,\"36\":1,\"38\":1,\"67\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"87\":1,\"88\":1,\"97\":1,\"98\":1,\"102\":1,\"106\":1,\"109\":1,\"110\":2,\"117\":1,\"122\":1,\"164\":2,\"167\":1,\"172\":2,\"178\":1,\"182\":1,\"183\":4,\"184\":4,\"187\":1,\"188\":1,\"194\":1,\"196\":1,\"203\":1,\"207\":1,\"212\":1,\"213\":1,\"214\":1,\"216\":1,\"218\":1,\"227\":1,\"256\":2,\"258\":1,\"291\":1,\"305\":2,\"384\":5,\"393\":16,\"499\":1,\"508\":1,\"510\":1,\"511\":1,\"606\":1,\"633\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"533\":1}}],[\"unsafe\",{\"1\":{\"399\":2}}],[\"unpooled\",{\"0\":{\"553\":1},\"1\":{\"496\":1,\"521\":1,\"522\":1,\"561\":2,\"566\":2,\"575\":2}}],[\"unpooled|pooled|jndi\",{\"1\":{\"496\":1}}],[\"unlock\",{\"1\":{\"421\":1,\"422\":4,\"425\":1,\"427\":1,\"434\":1,\"445\":2,\"450\":3,\"461\":2}}],[\"unless\",{\"1\":{\"67\":1}}],[\"unit\",{\"1\":{\"395\":2,\"473\":3}}],[\"undo\",{\"1\":{\"375\":1}}],[\"unchecked\",{\"1\":{\"269\":1}}],[\"unknown\",{\"1\":{\"233\":1}}],[\"unknownaccountexception\",{\"1\":{\"55\":1}}],[\"unauthorized\",{\"1\":{\"205\":1}}],[\"utext\",{\"1\":{\"67\":2}}],[\"utils\",{\"1\":{\"95\":1,\"476\":1,\"477\":1,\"478\":1}}],[\"util\",{\"1\":{\"63\":1,\"412\":1,\"430\":1,\"536\":3,\"538\":5,\"593\":1}}],[\"utf\",{\"1\":{\"20\":2,\"22\":1,\"36\":1,\"44\":2,\"51\":1,\"66\":1,\"67\":2,\"204\":1,\"212\":1,\"213\":1,\"215\":1,\"218\":4,\"222\":1,\"226\":2,\"232\":1,\"233\":2,\"240\":1,\"244\":1,\"248\":1,\"256\":1,\"260\":1,\"288\":1,\"293\":1,\"318\":1,\"322\":1,\"332\":1,\"379\":1,\"506\":1,\"508\":2,\"517\":1,\"518\":1,\"521\":2,\"522\":2,\"560\":1,\"561\":2,\"563\":1,\"566\":4,\"567\":5,\"575\":4,\"576\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"uplist\",{\"1\":{\"173\":3}}],[\"upload2\",{\"1\":{\"223\":2}}],[\"upload\",{\"1\":{\"62\":2,\"221\":1,\"223\":5,\"226\":1}}],[\"updateauthorvalues\",{\"1\":{\"507\":1}}],[\"updates\",{\"1\":{\"483\":1}}],[\"update>\",{\"1\":{\"483\":1}}],[\"updateuser\",{\"1\":{\"483\":1}}],[\"update\",{\"0\":{\"503\":1},\"1\":{\"54\":3,\"482\":1,\"483\":2,\"487\":1,\"507\":2,\"630\":6}}],[\"using\",{\"1\":{\"483\":3}}],[\"us\",{\"1\":{\"35\":1,\"36\":2}}],[\"used\",{\"1\":{\"482\":1}}],[\"use\",{\"1\":{\"275\":1,\"421\":1,\"422\":1}}],[\"userid\",{\"1\":{\"608\":2}}],[\"userdao=new\",{\"1\":{\"599\":1}}],[\"userdaooracle\",{\"1\":{\"597\":1,\"601\":1,\"619\":1}}],[\"userdaooracleimpl\",{\"1\":{\"597\":1}}],[\"userdaomysql\",{\"1\":{\"597\":2}}],[\"userdaomysqlimpl\",{\"1\":{\"597\":1,\"599\":2}}],[\"userdao\",{\"1\":{\"597\":2,\"599\":9,\"601\":4,\"608\":3}}],[\"userdaoimpl\",{\"1\":{\"597\":1,\"608\":3}}],[\"userdetail\",{\"1\":{\"327\":2}}],[\"userdetails\",{\"1\":{\"63\":6}}],[\"userdetailsservice\",{\"1\":{\"62\":2,\"63\":2}}],[\"usereventtriggered\",{\"1\":{\"528\":2}}],[\"usertable\",{\"1\":{\"483\":9,\"502\":2,\"503\":1,\"508\":2,\"510\":1,\"511\":1,\"609\":1,\"630\":4}}],[\"usercontroller\",{\"1\":{\"327\":1}}],[\"userclass\",{\"1\":{\"270\":2}}],[\"user1\",{\"1\":{\"245\":1,\"453\":1,\"454\":1}}],[\"user6\",{\"1\":{\"241\":1}}],[\"user6=new\",{\"1\":{\"241\":1}}],[\"user5\",{\"1\":{\"241\":1}}],[\"user5=new\",{\"1\":{\"241\":1}}],[\"user4\",{\"1\":{\"241\":1}}],[\"user4=new\",{\"1\":{\"241\":1}}],[\"user3\",{\"1\":{\"241\":1,\"245\":1,\"453\":1,\"454\":1}}],[\"user3=new\",{\"1\":{\"241\":1}}],[\"user2\",{\"1\":{\"241\":2,\"245\":1,\"453\":1,\"454\":1,\"594\":1}}],[\"user2=new\",{\"1\":{\"241\":1}}],[\"userlist\",{\"1\":{\"241\":8,\"245\":2,\"508\":1,\"609\":1,\"630\":1}}],[\"userlist=new\",{\"1\":{\"241\":1}}],[\"user=\",{\"1\":{\"602\":1}}],[\"user=root\",{\"1\":{\"515\":1}}],[\"user=new\",{\"1\":{\"241\":2}}],[\"user==null\",{\"1\":{\"63\":1}}],[\"userfeignclientwithfactory\",{\"1\":{\"146\":2}}],[\"userfeignclient\",{\"1\":{\"145\":2,\"146\":3}}],[\"userquerywrapper\",{\"1\":{\"63\":3}}],[\"userauthority\",{\"1\":{\"62\":3}}],[\"userauthorityimpl\",{\"1\":{\"62\":1,\"63\":1}}],[\"user>\",{\"1\":{\"56\":2,\"270\":1}}],[\"users=\",{\"1\":{\"508\":1}}],[\"userservice3\",{\"1\":{\"619\":2}}],[\"userservice2\",{\"1\":{\"619\":2}}],[\"userservice=new\",{\"1\":{\"599\":1}}],[\"userserviceconsumer\",{\"1\":{\"327\":8}}],[\"userserviceconsumerimpl\",{\"1\":{\"303\":1,\"322\":1,\"323\":2}}],[\"userservice\",{\"1\":{\"303\":5,\"318\":2,\"322\":6,\"323\":10,\"326\":1,\"327\":6,\"582\":13,\"597\":2,\"599\":4,\"601\":3,\"619\":2}}],[\"userserviceimpl\",{\"1\":{\"302\":1,\"317\":1,\"318\":1,\"319\":2,\"326\":1,\"582\":12,\"597\":2,\"599\":4,\"601\":3,\"619\":2}}],[\"users\",{\"1\":{\"54\":3,\"67\":2,\"245\":2,\"417\":1,\"507\":3,\"508\":1,\"606\":2,\"609\":3,\"630\":1}}],[\"userrealm\",{\"1\":{\"54\":5}}],[\"usermappermapperfactorybean\",{\"1\":{\"609\":3,\"630\":3}}],[\"usermapperimpl\",{\"1\":{\"608\":1,\"630\":7,\"633\":3}}],[\"usermapper\",{\"1\":{\"51\":2,\"54\":3,\"63\":4,\"502\":1,\"503\":2,\"508\":7,\"519\":1,\"606\":10,\"607\":1,\"608\":1,\"609\":8,\"630\":14,\"633\":3}}],[\"user\",{\"1\":{\"39\":1,\"40\":1,\"51\":9,\"54\":5,\"56\":4,\"63\":6,\"67\":20,\"145\":8,\"146\":8,\"237\":2,\"241\":17,\"245\":8,\"258\":4,\"270\":6,\"279\":4,\"302\":4,\"303\":6,\"315\":5,\"317\":3,\"318\":1,\"319\":6,\"322\":6,\"323\":10,\"326\":4,\"327\":8,\"417\":7,\"483\":9,\"498\":4,\"503\":3,\"508\":5,\"519\":1,\"578\":1,\"594\":3,\"602\":5,\"608\":1,\"609\":3,\"630\":12,\"633\":2}}],[\"usernamenotfoundexception\",{\"1\":{\"63\":3}}],[\"usernameparameter\",{\"1\":{\"59\":1,\"62\":1}}],[\"usernamepasswordtoken\",{\"1\":{\"54\":2,\"55\":2}}],[\"username\",{\"1\":{\"21\":1,\"29\":1,\"31\":2,\"38\":1,\"55\":4,\"56\":1,\"59\":1,\"67\":2,\"75\":3,\"76\":2,\"77\":2,\"83\":1,\"87\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"187\":2,\"188\":2,\"189\":2,\"194\":1,\"196\":1,\"215\":4,\"229\":1,\"234\":1,\"258\":2,\"287\":1,\"292\":1,\"315\":1,\"483\":6,\"498\":1,\"503\":2,\"507\":2,\"508\":4,\"510\":2,\"511\":3,\"519\":2,\"606\":1,\"630\":2,\"633\":1}}],[\"username=root\",{\"1\":{\"497\":1}}],[\"username=王海洋\",{\"1\":{\"483\":1}}],[\"username=丛维仪\",{\"1\":{\"483\":5}}],[\"username=demo\",{\"1\":{\"43\":1}}],[\"username=\",{\"1\":{\"19\":1,\"510\":2,\"511\":1}}],[\"useglobaldatasourcestat\",{\"1\":{\"31\":1}}],[\"ul>\",{\"1\":{\"33\":1}}],[\"ui\",{\"1\":{\"33\":14,\"96\":1}}],[\"密码必须使用加密类进行加密\",{\"1\":{\"63\":1}}],[\"密码要进行加密\",{\"1\":{\"59\":1}}],[\"密码错误\",{\"1\":{\"55\":1}}],[\"密码\",{\"1\":{\"19\":1,\"30\":1,\"292\":1}}],[\"blogs\",{\"1\":{\"506\":2,\"507\":2}}],[\"blog\",{\"1\":{\"505\":1,\"506\":5,\"507\":13}}],[\"blogmapper\",{\"1\":{\"499\":3,\"506\":3,\"507\":2}}],[\"blockingqueue<runnable>\",{\"1\":{\"473\":1}}],[\"blocked\",{\"1\":{\"468\":1}}],[\"blue\",{\"1\":{\"19\":1,\"133\":1}}],[\"b=100\",{\"1\":{\"389\":1}}],[\"brokenbarrierexception\",{\"1\":{\"477\":1}}],[\"broadcast\",{\"1\":{\"313\":1}}],[\"break\",{\"1\":{\"434\":1,\"528\":4,\"536\":1}}],[\"breaktest\",{\"1\":{\"147\":1}}],[\"breakfallbackmethod\",{\"1\":{\"147\":2}}],[\"bbzl\",{\"1\":{\"302\":1,\"303\":1,\"326\":1,\"327\":1}}],[\"bioclient\",{\"1\":{\"540\":1}}],[\"bioserver\",{\"1\":{\"536\":1,\"540\":1}}],[\"bio\",{\"0\":{\"535\":1,\"536\":1,\"540\":1},\"1\":{\"507\":2,\"536\":1,\"537\":1,\"540\":1}}],[\"bit\",{\"1\":{\"343\":1}}],[\"bir\",{\"1\":{\"303\":2,\"322\":2,\"323\":4}}],[\"birthday\",{\"1\":{\"302\":3,\"315\":1,\"317\":3,\"319\":6,\"326\":3}}],[\"bin\",{\"1\":{\"299\":1,\"300\":1,\"457\":1,\"521\":1}}],[\"bind\",{\"1\":{\"507\":2,\"524\":1,\"537\":2,\"538\":1,\"540\":1,\"541\":1,\"544\":1,\"558\":1,\"563\":1,\"575\":1,\"576\":1}}],[\"binder\",{\"1\":{\"187\":1,\"188\":1}}],[\"binders\",{\"1\":{\"187\":2,\"188\":1,\"189\":1}}],[\"bindings\",{\"1\":{\"187\":1,\"188\":1,\"189\":1}}],[\"biz\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"b\",{\"1\":{\"180\":2,\"216\":4,\"343\":1,\"347\":6,\"363\":16,\"389\":1,\"398\":2,\"427\":4,\"437\":3,\"438\":2,\"439\":2,\"440\":4,\"441\":4,\"442\":2,\"443\":4,\"444\":4,\"450\":4,\"451\":1,\"466\":1,\"558\":4,\"632\":4}}],[\"bcrypt\",{\"1\":{\"62\":1,\"63\":1}}],[\"bcryptpasswordencoder\",{\"1\":{\"59\":3,\"62\":4,\"63\":4}}],[\"bytype\",{\"0\":{\"585\":1},\"1\":{\"585\":1,\"587\":1,\"589\":2}}],[\"bytewrite\",{\"1\":{\"537\":1}}],[\"bytewrite+=write\",{\"1\":{\"537\":1}}],[\"bytewrite<8\",{\"1\":{\"537\":1}}],[\"bytewrite=0\",{\"1\":{\"537\":1}}],[\"byteread\",{\"1\":{\"537\":2}}],[\"byteread+=read\",{\"1\":{\"537\":1}}],[\"byteread<8\",{\"1\":{\"537\":1}}],[\"byteread=0\",{\"1\":{\"537\":1}}],[\"bytetolongdecoder2\",{\"1\":{\"533\":1}}],[\"bytetolongdecoder\",{\"1\":{\"532\":4}}],[\"bytetomessagedecoder\",{\"0\":{\"530\":1},\"1\":{\"532\":1,\"533\":2}}],[\"bytebuffers\",{\"1\":{\"537\":9}}],[\"bytebuffer\",{\"1\":{\"537\":26,\"538\":9,\"541\":2}}],[\"bytebuf\",{\"1\":{\"521\":3,\"522\":3,\"532\":2,\"533\":2,\"553\":1,\"560\":3,\"563\":1,\"566\":7,\"567\":2,\"575\":6}}],[\"bytearrayoutputstream\",{\"1\":{\"379\":5,\"380\":5,\"383\":5}}],[\"bytearrayinputstream\",{\"1\":{\"204\":1}}],[\"bytes\",{\"1\":{\"241\":2,\"447\":1,\"566\":6,\"567\":3}}],[\"byte\",{\"1\":{\"223\":2,\"226\":2,\"241\":1,\"330\":2,\"340\":2,\"363\":2,\"379\":2,\"380\":4,\"382\":2,\"383\":6,\"384\":2,\"447\":2,\"537\":3,\"540\":4,\"566\":4,\"567\":8}}],[\"byname\",{\"0\":{\"584\":1},\"1\":{\"584\":1,\"589\":1}}],[\"by\",{\"1\":{\"51\":1}}],[\"backlog\",{\"1\":{\"524\":1,\"544\":1,\"551\":2,\"575\":1}}],[\"back\",{\"1\":{\"483\":1}}],[\"bat\",{\"1\":{\"300\":1}}],[\"bankservice\",{\"1\":{\"265\":2}}],[\"banktransfermoney\",{\"1\":{\"265\":5}}],[\"basic\",{\"1\":{\"119\":1,\"167\":2,\"338\":2,\"380\":2,\"383\":2,\"384\":1}}],[\"basepackage\",{\"1\":{\"258\":1}}],[\"basepackages\",{\"1\":{\"51\":1,\"116\":1,\"303\":1,\"323\":2}}],[\"basemapper<payment>\",{\"1\":{\"182\":1}}],[\"base\",{\"1\":{\"178\":1,\"183\":4,\"198\":1,\"215\":1,\"259\":1,\"260\":1,\"322\":1,\"578\":1}}],[\"basedir\",{\"1\":{\"75\":1,\"521\":2}}],[\"baomidou<\",{\"1\":{\"180\":1,\"181\":1,\"182\":1,\"183\":1}}],[\"baomidou\",{\"1\":{\"63\":2}}],[\"bad\",{\"1\":{\"47\":3}}],[\"baidu\",{\"1\":{\"47\":1,\"59\":1,\"217\":1}}],[\"bar\",{\"1\":{\"33\":1}}],[\"beendaemon\",{\"1\":{\"469\":5}}],[\"between=2017\",{\"1\":{\"128\":1}}],[\"between\",{\"0\":{\"128\":1},\"1\":{\"128\":1}}],[\"before=2017\",{\"1\":{\"127\":1}}],[\"before\",{\"0\":{\"127\":1,\"427\":1},\"1\":{\"127\":1,\"235\":2,\"427\":2,\"507\":1,\"582\":9}}],[\"beforesend\",{\"1\":{\"36\":2}}],[\"beanfactory\",{\"1\":{\"621\":2}}],[\"bean标签相当于hello\",{\"1\":{\"596\":1}}],[\"bean注入\",{\"1\":{\"593\":1}}],[\"beanname是确定无法改变的\",{\"1\":{\"222\":1}}],[\"beannameurlhandlermapping\",{\"1\":{\"213\":2}}],[\"bean>\",{\"1\":{\"213\":1,\"215\":1,\"222\":1,\"240\":3,\"244\":2,\"248\":1,\"258\":3,\"259\":2,\"260\":4,\"318\":1,\"593\":1,\"596\":1,\"597\":1,\"601\":3,\"606\":5,\"607\":4,\"608\":3,\"619\":1,\"629\":1,\"633\":7}}],[\"beans>\",{\"1\":{\"213\":1,\"215\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"beans\",{\"1\":{\"62\":1,\"63\":1,\"213\":4,\"215\":4,\"256\":1,\"318\":5,\"322\":5,\"582\":9,\"584\":4,\"585\":4,\"586\":4,\"587\":4,\"593\":1,\"594\":8,\"596\":4,\"597\":6,\"606\":1,\"619\":1,\"633\":4}}],[\"bean\",{\"0\":{\"168\":1,\"583\":1},\"1\":{\"30\":2,\"35\":1,\"36\":1,\"54\":4,\"62\":2,\"71\":1,\"124\":1,\"137\":1,\"168\":1,\"172\":2,\"173\":1,\"174\":4,\"183\":1,\"197\":1,\"204\":1,\"213\":2,\"222\":9,\"233\":11,\"235\":2,\"302\":3,\"303\":2,\"322\":2,\"582\":1,\"583\":2,\"584\":1,\"585\":2,\"587\":1,\"588\":1,\"592\":2,\"601\":1,\"602\":5,\"609\":4,\"619\":1,\"621\":2,\"629\":1,\"630\":6}}],[\"boss=new\",{\"1\":{\"558\":1}}],[\"bosseventloop\",{\"1\":{\"552\":2}}],[\"bosseventloopgroup\",{\"1\":{\"552\":2}}],[\"bossgroup\",{\"1\":{\"544\":1,\"563\":3,\"574\":2,\"575\":3}}],[\"boss\",{\"1\":{\"524\":3,\"528\":1,\"558\":3,\"574\":1,\"576\":3}}],[\"bo\",{\"1\":{\"462\":1}}],[\"boy\",{\"1\":{\"237\":1}}],[\"bookmapper\",{\"1\":{\"259\":2}}],[\"bookcounts\",{\"1\":{\"208\":2}}],[\"bookid=$\",{\"1\":{\"208\":2}}],[\"bookid\",{\"1\":{\"208\":4}}],[\"booklist\",{\"1\":{\"208\":7}}],[\"booktable\",{\"1\":{\"207\":1,\"208\":1}}],[\"bookname\",{\"1\":{\"207\":2,\"208\":2}}],[\"books=\",{\"1\":{\"593\":1}}],[\"bookserviceimpl\",{\"1\":{\"259\":1}}],[\"books\",{\"1\":{\"207\":1,\"208\":2,\"593\":7}}],[\"book\",{\"1\":{\"204\":1,\"208\":7}}],[\"booleans\",{\"1\":{\"279\":1}}],[\"boolean类型\",{\"1\":{\"207\":1}}],[\"boolean值\",{\"1\":{\"67\":1}}],[\"boolean\",{\"1\":{\"67\":1,\"144\":1,\"182\":3,\"205\":1,\"229\":1,\"234\":1,\"264\":1,\"265\":1,\"272\":1,\"287\":5,\"288\":2,\"289\":9,\"291\":9,\"292\":3,\"293\":8,\"294\":6,\"296\":7,\"297\":1,\"334\":1,\"361\":1,\"402\":1,\"403\":1,\"414\":1,\"429\":1,\"453\":1,\"454\":1,\"456\":2,\"462\":1,\"464\":1}}],[\"bootstrap<\",{\"1\":{\"81\":1}}],[\"bootstrap\",{\"0\":{\"91\":1,\"544\":1},\"1\":{\"67\":1,\"76\":1,\"85\":2,\"88\":1,\"521\":1,\"526\":5,\"544\":2,\"558\":5,\"575\":5}}],[\"boot<\",{\"1\":{\"22\":1,\"23\":1,\"42\":1,\"49\":2,\"53\":1,\"58\":2,\"66\":1,\"90\":1,\"180\":2,\"182\":4,\"183\":4,\"200\":1,\"325\":2}}],[\"boot\",{\"1\":{\"17\":1,\"22\":1,\"23\":1,\"42\":1,\"49\":2,\"53\":2,\"58\":2,\"66\":3,\"90\":1,\"180\":6,\"181\":1,\"182\":6,\"183\":6,\"200\":1,\"325\":3,\"326\":1,\"327\":1}}],[\"body==>\",{\"1\":{\"184\":1}}],[\"body>\",{\"1\":{\"36\":1,\"67\":2,\"576\":1}}],[\"body\",{\"1\":{\"36\":1,\"56\":5,\"184\":1}}],[\"box\",{\"1\":{\"33\":1}}],[\"buy\",{\"1\":{\"453\":2,\"454\":2}}],[\"buyticket2\",{\"1\":{\"454\":3}}],[\"buyticket\",{\"1\":{\"453\":7,\"454\":4}}],[\"bu或部门\",{\"1\":{\"286\":1,\"295\":1}}],[\"buffersize=10\",{\"1\":{\"515\":1}}],[\"buffer=bufferedreader\",{\"1\":{\"331\":1}}],[\"buffer=new\",{\"1\":{\"223\":1,\"331\":1,\"332\":1,\"338\":1}}],[\"bufferedwriter\",{\"1\":{\"331\":7}}],[\"bufferedreader\",{\"1\":{\"331\":4}}],[\"bufferedoutputstream\",{\"1\":{\"330\":5}}],[\"bufferedinputstream\",{\"1\":{\"330\":4}}],[\"buffer\",{\"1\":{\"223\":2,\"226\":3,\"288\":1,\"293\":1,\"330\":3,\"331\":4,\"332\":2,\"338\":3,\"340\":3,\"379\":3,\"380\":8,\"382\":3,\"383\":6,\"384\":3,\"537\":12,\"538\":8,\"540\":6,\"541\":5}}],[\"bucketsize\",{\"1\":{\"143\":1}}],[\"build>\",{\"1\":{\"180\":1,\"252\":1,\"508\":1}}],[\"build\",{\"1\":{\"124\":1,\"137\":1,\"180\":2,\"187\":1,\"474\":1,\"508\":1,\"521\":1,\"522\":5}}],[\"builder\",{\"1\":{\"124\":3,\"137\":3,\"499\":7}}],[\"builders\",{\"1\":{\"62\":3}}],[\"busrefresh\",{\"1\":{\"78\":1,\"79\":1}}],[\"bus\",{\"1\":{\"73\":1,\"74\":1}}],[\"bus消息总线\",{\"0\":{\"73\":1}}],[\"button>\",{\"1\":{\"36\":2}}],[\"button\",{\"1\":{\"33\":1,\"576\":2}}],[\"buttons\",{\"1\":{\"33\":1}}],[\"bundle目录\",{\"1\":{\"33\":1}}],[\"bmp\",{\"1\":{\"31\":1}}],[\"35\",{\"0\":{\"540\":1,\"541\":1}}],[\"36600\",{\"1\":{\"469\":1}}],[\"3后进入\",{\"1\":{\"448\":1}}],[\"32\",{\"1\":{\"405\":1,\"503\":1}}],[\"31\",{\"1\":{\"334\":2,\"521\":1}}],[\"3以上\",{\"1\":{\"293\":1}}],[\"3<\",{\"1\":{\"251\":1,\"521\":1}}],[\"39\",{\"1\":{\"194\":1,\"196\":1,\"538\":1}}],[\"33bae299\",{\"1\":{\"384\":1}}],[\"3366\",{\"0\":{\"77\":1},\"1\":{\"77\":2,\"79\":1}}],[\"3355\",{\"0\":{\"76\":1},\"1\":{\"76\":2}}],[\"3344\",{\"1\":{\"75\":2,\"78\":2,\"79\":1}}],[\"3306\",{\"1\":{\"19\":1,\"29\":1,\"31\":1,\"38\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1,\"233\":1,\"497\":1,\"508\":1,\"510\":1,\"511\":1,\"515\":1,\"606\":1,\"609\":1,\"630\":1,\"633\":1}}],[\"340\",{\"1\":{\"540\":1,\"541\":1}}],[\"34\",{\"1\":{\"63\":1,\"536\":1}}],[\"3\",{\"0\":{\"319\":1},\"1\":{\"36\":1,\"51\":2,\"69\":1,\"75\":4,\"76\":3,\"77\":3,\"78\":2,\"79\":1,\"97\":3,\"98\":3,\"109\":1,\"122\":3,\"178\":1,\"180\":1,\"182\":1,\"183\":2,\"187\":3,\"188\":3,\"189\":1,\"194\":2,\"196\":2,\"241\":1,\"251\":1,\"254\":1,\"330\":1,\"333\":2,\"335\":2,\"383\":1,\"388\":2,\"393\":1,\"395\":2,\"396\":1,\"398\":1,\"417\":1,\"429\":1,\"448\":3,\"450\":2,\"451\":1,\"473\":1,\"478\":1,\"506\":2,\"508\":4,\"511\":1,\"517\":2,\"518\":2,\"521\":2,\"528\":1,\"537\":1,\"538\":1,\"539\":1}}],[\"300px\",{\"1\":{\"576\":4}}],[\"30000\",{\"1\":{\"488\":1}}],[\"300000\",{\"1\":{\"31\":1}}],[\"3000ms\",{\"1\":{\"292\":1}}],[\"3000\",{\"1\":{\"15\":1,\"204\":1,\"478\":1}}],[\"30秒\",{\"1\":{\"560\":1}}],[\"30\",{\"1\":{\"405\":1}}],[\"303\",{\"0\":{\"23\":1}}],[\"j2ee\",{\"1\":{\"627\":3}}],[\"jnlp\",{\"1\":{\"593\":1}}],[\"jndi\",{\"1\":{\"496\":2,\"622\":1}}],[\"jps\",{\"1\":{\"457\":2}}],[\"jpg\",{\"1\":{\"31\":1,\"44\":1,\"330\":2,\"340\":2,\"380\":2,\"393\":8,\"537\":2,\"540\":2,\"541\":2}}],[\"jmm\",{\"0\":{\"418\":1,\"419\":1,\"422\":1,\"423\":1},\"1\":{\"419\":1,\"420\":1,\"426\":1}}],[\"join\",{\"0\":{\"467\":1},\"1\":{\"409\":2,\"427\":1,\"467\":1}}],[\"j++\",{\"1\":{\"400\":1,\"430\":2}}],[\"j\",{\"1\":{\"400\":2,\"430\":4}}],[\"junit\",{\"1\":{\"325\":1}}],[\"junit单元测试依赖\",{\"1\":{\"251\":1}}],[\"jcache等\",{\"1\":{\"291\":1,\"294\":1,\"296\":1}}],[\"jcl\",{\"1\":{\"286\":1}}],[\"jcp\",{\"1\":{\"212\":3,\"256\":3}}],[\"jvm\",{\"0\":{\"348\":1},\"1\":{\"218\":1,\"274\":1,\"281\":3,\"334\":1,\"355\":1,\"420\":2}}],[\"jdo\",{\"1\":{\"625\":1}}],[\"jdk动态代理\",{\"1\":{\"617\":1}}],[\"jdk或javassist\",{\"1\":{\"286\":1}}],[\"jdk1\",{\"1\":{\"273\":1,\"275\":2,\"346\":3,\"537\":1,\"542\":1}}],[\"jdk\",{\"0\":{\"399\":1},\"1\":{\"117\":2,\"286\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"345\":2,\"346\":5,\"470\":1,\"473\":1,\"515\":1}}],[\"jdbcappender\",{\"1\":{\"515\":1}}],[\"jdbc|managed\",{\"1\":{\"495\":1}}],[\"jdbcurl\",{\"1\":{\"258\":1}}],[\"jdbctokenrepository\",{\"1\":{\"62\":4}}],[\"jdbctokenrepositoryimpl\",{\"1\":{\"62\":3}}],[\"jdbctemplate\",{\"0\":{\"40\":1},\"1\":{\"40\":3}}],[\"jdbc<\",{\"1\":{\"49\":1,\"251\":1,\"604\":1}}],[\"jdbc\",{\"0\":{\"37\":1,\"39\":1,\"509\":1,\"510\":1,\"511\":1,\"512\":1},\"1\":{\"19\":1,\"29\":2,\"31\":2,\"38\":2,\"97\":2,\"98\":2,\"182\":2,\"183\":2,\"194\":2,\"196\":2,\"233\":2,\"259\":1,\"483\":23,\"495\":1,\"496\":1,\"497\":1,\"508\":3,\"510\":2,\"511\":2,\"515\":2,\"606\":3,\"609\":2,\"624\":1,\"629\":1,\"630\":2,\"633\":4}}],[\"jackson依赖\",{\"1\":{\"251\":1}}],[\"jackson\",{\"0\":{\"238\":1,\"241\":1},\"1\":{\"233\":4,\"239\":1,\"241\":1,\"251\":1}}],[\"jackson2objectmapperfactorybean\",{\"1\":{\"233\":16,\"240\":1,\"260\":1}}],[\"jar\",{\"1\":{\"69\":1,\"176\":3,\"180\":5,\"300\":2}}],[\"java字节码实现\",{\"1\":{\"617\":1}}],[\"java字节码编译器\",{\"1\":{\"286\":1}}],[\"javatype=\",{\"1\":{\"508\":3,\"517\":4,\"518\":4,\"519\":3}}],[\"javabean\",{\"1\":{\"498\":2,\"627\":1}}],[\"java中处理\",{\"1\":{\"377\":1}}],[\"java7\",{\"1\":{\"361\":1}}],[\"javaweb\",{\"1\":{\"338\":2,\"380\":2,\"383\":2,\"384\":1,\"540\":2,\"541\":2}}],[\"javassist\",{\"1\":{\"286\":1,\"289\":2,\"291\":2,\"293\":2,\"294\":2,\"617\":1}}],[\"javascript\",{\"0\":{\"237\":1},\"1\":{\"36\":1,\"67\":2,\"207\":1,\"244\":1}}],[\"javadoc\",{\"1\":{\"276\":1}}],[\"java对象转json对象\",{\"1\":{\"245\":1}}],[\"java对象转json字符串\",{\"1\":{\"245\":1}}],[\"javaconfig\",{\"0\":{\"231\":1}}],[\"javaee\",{\"1\":{\"212\":3,\"256\":3}}],[\"java8\",{\"1\":{\"126\":1}}],[\"javax\",{\"1\":{\"62\":4}}],[\"java<\",{\"1\":{\"49\":1,\"180\":1,\"182\":1,\"183\":1,\"251\":1,\"508\":2,\"521\":3,\"604\":1}}],[\"javamailsender=javamailsender\",{\"1\":{\"44\":1}}],[\"javamailsender\",{\"1\":{\"44\":6}}],[\"java\",{\"0\":{\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"350\":1,\"352\":1,\"535\":1,\"537\":1,\"542\":1,\"602\":1,\"609\":1},\"1\":{\"62\":1,\"63\":1,\"67\":1,\"137\":1,\"176\":1,\"204\":1,\"245\":3,\"252\":1,\"271\":2,\"272\":1,\"288\":1,\"293\":1,\"300\":1,\"338\":2,\"345\":1,\"346\":2,\"350\":3,\"380\":2,\"383\":2,\"384\":1,\"412\":1,\"419\":3,\"420\":2,\"426\":2,\"428\":1,\"430\":1,\"435\":1,\"457\":1,\"473\":1,\"486\":1,\"490\":1,\"497\":1,\"508\":4,\"515\":4,\"517\":2,\"518\":2,\"519\":3,\"520\":2,\"521\":5,\"522\":3,\"536\":8,\"538\":15,\"540\":1,\"541\":1,\"583\":1,\"587\":1,\"589\":1,\"593\":1,\"602\":1,\"609\":1,\"621\":1,\"629\":2,\"630\":1}}],[\"jquery\",{\"1\":{\"36\":2,\"69\":5,\"207\":2}}],[\"jstack\",{\"1\":{\"457\":1}}],[\"jstl<\",{\"1\":{\"251\":1}}],[\"jstl\",{\"1\":{\"251\":1}}],[\"jsp<\",{\"1\":{\"251\":1}}],[\"jsp相关依赖\",{\"1\":{\"251\":1}}],[\"jsp\",{\"1\":{\"213\":2,\"215\":2,\"217\":8,\"218\":1,\"229\":2,\"233\":2,\"234\":2,\"251\":3,\"254\":2,\"260\":2,\"627\":1}}],[\"json<\",{\"1\":{\"247\":1}}],[\"jsonarray1\",{\"1\":{\"249\":2}}],[\"jsonarray\",{\"1\":{\"245\":9,\"249\":7}}],[\"json对象转java对象\",{\"1\":{\"245\":1}}],[\"json字符串转java对象\",{\"1\":{\"245\":1}}],[\"jsonobject2\",{\"1\":{\"249\":4}}],[\"jsonobject=\",{\"1\":{\"245\":1}}],[\"jsonobject\",{\"1\":{\"245\":4,\"249\":7}}],[\"jsonobject或string\",{\"1\":{\"207\":1}}],[\"jsonstring\",{\"1\":{\"245\":3}}],[\"json3\",{\"1\":{\"241\":2}}],[\"jsonnode\",{\"1\":{\"241\":4}}],[\"json2\",{\"1\":{\"241\":2}}],[\"json1\",{\"1\":{\"241\":2}}],[\"jsoncontroller\",{\"1\":{\"241\":1}}],[\"jsonprocessingexception\",{\"1\":{\"241\":3,\"327\":2}}],[\"jsonparser\",{\"1\":{\"233\":2}}],[\"jsonp\",{\"1\":{\"207\":3}}],[\"json\",{\"0\":{\"236\":1,\"237\":1,\"246\":2,\"249\":1},\"1\":{\"67\":1,\"118\":1,\"184\":1,\"187\":1,\"188\":1,\"189\":1,\"204\":1,\"207\":3,\"208\":1,\"209\":1,\"235\":1,\"237\":4,\"240\":2,\"241\":3,\"244\":4,\"245\":6,\"260\":2,\"338\":2}}],[\"js\",{\"1\":{\"31\":1,\"36\":1,\"67\":4,\"69\":6,\"226\":1,\"300\":1}}],[\"jsr\",{\"0\":{\"23\":1}}],[\"xolstice\",{\"1\":{\"521\":1}}],[\"x\",{\"1\":{\"358\":1,\"515\":4}}],[\"x以上\",{\"1\":{\"293\":1}}],[\"xsd\",{\"1\":{\"212\":1,\"213\":1,\"215\":3,\"256\":1,\"318\":2,\"322\":3,\"582\":4,\"584\":1,\"585\":1,\"586\":2,\"587\":2,\"594\":2,\"596\":1,\"597\":1,\"633\":4}}],[\"xsi\",{\"1\":{\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"xsi=\",{\"1\":{\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"xhr\",{\"1\":{\"36\":2}}],[\"xml中添加import标签\",{\"1\":{\"619\":1}}],[\"xml配置\",{\"1\":{\"518\":1,\"582\":1}}],[\"xml配置文件\",{\"1\":{\"256\":1}}],[\"xmllayout\",{\"1\":{\"515\":1}}],[\"xml等\",{\"1\":{\"293\":1}}],[\"xml<\",{\"1\":{\"212\":1,\"256\":1,\"508\":2}}],[\"xmlschema\",{\"1\":{\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"xmlns=\",{\"1\":{\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"xmlns\",{\"1\":{\"36\":1,\"56\":2,\"60\":2,\"66\":1,\"67\":2,\"212\":4,\"213\":1,\"215\":3,\"256\":4,\"318\":2,\"322\":3,\"582\":4,\"584\":2,\"585\":2,\"586\":2,\"587\":3,\"594\":5,\"596\":1,\"597\":1,\"633\":4}}],[\"xml\",{\"0\":{\"51\":1,\"212\":1,\"256\":1,\"318\":1,\"322\":1,\"606\":1,\"633\":1},\"1\":{\"19\":1,\"50\":1,\"51\":1,\"67\":1,\"118\":2,\"207\":2,\"212\":4,\"213\":1,\"215\":2,\"218\":1,\"232\":1,\"233\":1,\"235\":1,\"252\":1,\"256\":5,\"258\":1,\"281\":1,\"318\":2,\"322\":2,\"483\":1,\"484\":1,\"486\":2,\"488\":1,\"497\":1,\"499\":6,\"502\":1,\"505\":1,\"506\":2,\"508\":9,\"515\":1,\"517\":2,\"518\":1,\"582\":4,\"583\":1,\"584\":1,\"585\":1,\"586\":1,\"587\":2,\"593\":2,\"594\":2,\"596\":1,\"597\":3,\"602\":1,\"606\":3,\"607\":4,\"619\":3,\"629\":1,\"633\":4}}],[\"xxxservicelocal\",{\"1\":{\"291\":1}}],[\"xxxservice\",{\"1\":{\"289\":2,\"291\":2}}],[\"xxxservicestub\",{\"1\":{\"289\":1}}],[\"xxx\",{\"1\":{\"19\":3,\"24\":2,\"67\":1,\"143\":1}}],[\"xxxautoconfiguration\",{\"1\":{\"17\":1}}],[\"xxxproperties\",{\"1\":{\"17\":1}}],[\"n连接关闭了\",{\"1\":{\"576\":1}}],[\"niochannel\",{\"1\":{\"574\":3}}],[\"nioclient\",{\"1\":{\"541\":1}}],[\"nioeventloop\",{\"1\":{\"574\":12}}],[\"nioeventloopgroup\",{\"0\":{\"552\":1},\"1\":{\"524\":4,\"526\":2,\"558\":6,\"563\":4,\"574\":3,\"575\":6,\"576\":4}}],[\"niodatagramchannel\",{\"1\":{\"546\":1}}],[\"nio\",{\"0\":{\"537\":1,\"538\":1,\"541\":1},\"1\":{\"537\":2,\"538\":6,\"540\":2,\"541\":3,\"571\":1}}],[\"niosctpserverchannel\",{\"1\":{\"546\":1}}],[\"niosctpchannel\",{\"1\":{\"546\":1}}],[\"nioserver\",{\"1\":{\"541\":1}}],[\"nioserversocketchannel\",{\"1\":{\"524\":1,\"528\":1,\"544\":1,\"546\":1,\"558\":1,\"563\":1,\"575\":1,\"576\":1}}],[\"niosocketchannel\",{\"1\":{\"521\":1,\"526\":1,\"546\":1,\"558\":1,\"574\":2,\"575\":1}}],[\"niwsserverlistfilterclassname\",{\"1\":{\"172\":1}}],[\"niwsserverlistclassname\",{\"1\":{\"172\":1}}],[\"nthreads\",{\"1\":{\"474\":1}}],[\"nworld\",{\"1\":{\"339\":2}}],[\"npm\",{\"1\":{\"300\":2}}],[\"n\",{\"1\":{\"290\":1,\"515\":7,\"525\":7,\"533\":1,\"538\":1,\"576\":2}}],[\"nfs\",{\"1\":{\"278\":1}}],[\"nfloadbalancerpingclassname\",{\"1\":{\"172\":1}}],[\"nfloadbalancerclassname\",{\"1\":{\"172\":1}}],[\"nfloadbalancerruleclassname\",{\"1\":{\"172\":2}}],[\"ns\",{\"1\":{\"212\":3,\"256\":3}}],[\"nbsp\",{\"1\":{\"208\":2}}],[\"number==>\",{\"1\":{\"434\":1}}],[\"numbuckets\",{\"1\":{\"143\":2}}],[\"num>0\",{\"1\":{\"434\":1,\"454\":1}}],[\"num=10\",{\"1\":{\"434\":1,\"454\":1}}],[\"num=0\",{\"1\":{\"430\":1}}],[\"num\",{\"1\":{\"400\":3,\"430\":1,\"454\":1}}],[\"null标签赋null\",{\"1\":{\"593\":1}}],[\"nullable\",{\"1\":{\"578\":1,\"587\":2}}],[\"nullpointerexception\",{\"1\":{\"473\":1}}],[\"null\",{\"1\":{\"54\":3,\"67\":1,\"139\":1,\"144\":1,\"173\":8,\"182\":3,\"184\":1,\"187\":1,\"205\":1,\"213\":1,\"223\":1,\"232\":1,\"233\":1,\"254\":2,\"311\":1,\"334\":1,\"368\":1,\"370\":1,\"409\":1,\"461\":1,\"473\":3,\"507\":4,\"582\":1,\"587\":3}}],[\"norm\",{\"1\":{\"470\":1}}],[\"nosuchmethodexception\",{\"1\":{\"265\":1,\"448\":1}}],[\"node\",{\"1\":{\"241\":4,\"300\":1}}],[\"now=\",{\"1\":{\"302\":1,\"317\":1,\"319\":2,\"326\":1}}],[\"now\",{\"1\":{\"126\":1,\"302\":1,\"317\":1,\"319\":2,\"326\":1,\"576\":1}}],[\"none\",{\"1\":{\"167\":1}}],[\"non\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"102\":1,\"106\":1,\"122\":1,\"187\":1,\"188\":1}}],[\"no\",{\"1\":{\"67\":1,\"204\":1}}],[\"notify\",{\"1\":{\"460\":1,\"558\":2}}],[\"notifyall\",{\"1\":{\"460\":4,\"462\":2}}],[\"not\",{\"1\":{\"67\":1,\"139\":1,\"634\":1}}],[\"notauthenticated>\",{\"1\":{\"56\":2}}],[\"notauthenticated\",{\"1\":{\"56\":1}}],[\"noauth\",{\"1\":{\"54\":1}}],[\"noargsconstructor\",{\"1\":{\"20\":1,\"181\":2,\"315\":1,\"508\":1}}],[\"nacos等\",{\"1\":{\"292\":1}}],[\"nacos\",{\"0\":{\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1},\"1\":{\"287\":1,\"292\":1}}],[\"nav\",{\"1\":{\"33\":2}}],[\"name属性指定值即可\",{\"1\":{\"601\":1}}],[\"name+\",{\"1\":{\"538\":2}}],[\"namedthreadfactory\",{\"1\":{\"474\":2}}],[\"name>contextclass<\",{\"1\":{\"256\":1}}],[\"name>contextconfiglocation<\",{\"1\":{\"212\":1,\"256\":2}}],[\"name>filter<\",{\"1\":{\"256\":2}}],[\"name>encoding<\",{\"1\":{\"218\":1,\"256\":1}}],[\"name>spring<\",{\"1\":{\"218\":2}}],[\"name>springmvc<\",{\"1\":{\"212\":2,\"256\":2}}],[\"name>\",{\"1\":{\"212\":3,\"218\":3,\"256\":8}}],[\"name2\",{\"1\":{\"184\":1}}],[\"namespace中的dubbo\",{\"1\":{\"292\":1}}],[\"namespace\",{\"0\":{\"159\":1},\"1\":{\"235\":1,\"292\":1,\"481\":1}}],[\"namespace=\",{\"1\":{\"51\":1,\"506\":1,\"508\":1,\"517\":1,\"518\":1}}],[\"names=\",{\"1\":{\"19\":1}}],[\"name\",{\"1\":{\"20\":2,\"22\":4,\"23\":1,\"29\":1,\"31\":1,\"38\":1,\"39\":1,\"60\":2,\"67\":7,\"75\":1,\"76\":2,\"77\":2,\"83\":1,\"84\":1,\"85\":5,\"87\":2,\"88\":2,\"97\":3,\"98\":3,\"106\":1,\"111\":1,\"122\":2,\"123\":1,\"137\":1,\"139\":3,\"143\":27,\"144\":1,\"145\":1,\"146\":1,\"147\":4,\"174\":1,\"178\":1,\"182\":2,\"183\":2,\"184\":1,\"187\":1,\"188\":1,\"189\":1,\"194\":2,\"196\":2,\"198\":1,\"203\":2,\"222\":10,\"227\":1,\"237\":1,\"241\":1,\"249\":3,\"262\":2,\"272\":3,\"286\":1,\"288\":1,\"295\":1,\"296\":1,\"326\":3,\"327\":2,\"334\":9,\"393\":14,\"507\":1,\"517\":8,\"518\":6,\"538\":1,\"578\":1,\"582\":1,\"587\":5,\"593\":7,\"596\":1,\"602\":1,\"619\":1}}],[\"name=this\",{\"1\":{\"538\":1}}],[\"name=2\",{\"1\":{\"521\":1,\"522\":2}}],[\"name=dubbo\",{\"1\":{\"319\":1}}],[\"name=defaultdatasource\",{\"1\":{\"19\":1}}],[\"name=demo\",{\"1\":{\"19\":1,\"20\":1}}],[\"name=user\",{\"1\":{\"319\":1,\"323\":1}}],[\"name=\",{\"1\":{\"56\":5,\"67\":2,\"173\":1,\"213\":2,\"215\":2,\"221\":1,\"222\":3,\"240\":2,\"249\":2,\"258\":8,\"259\":2,\"260\":4,\"318\":2,\"322\":1,\"334\":1,\"488\":1,\"498\":1,\"499\":1,\"505\":2,\"507\":1,\"508\":4,\"515\":2,\"576\":2,\"584\":1,\"585\":1,\"588\":1,\"593\":9,\"594\":2,\"596\":1,\"597\":1,\"601\":1,\"606\":12,\"607\":10,\"608\":2,\"619\":2,\"633\":15}}],[\"name==>\",{\"1\":{\"39\":1,\"272\":2}}],[\"name=zzl\",{\"1\":{\"20\":1}}],[\"name=com\",{\"1\":{\"19\":1}}],[\"net\",{\"1\":{\"380\":1,\"383\":2,\"384\":1,\"515\":1,\"536\":2,\"538\":2}}],[\"netflix\",{\"1\":{\"101\":1,\"105\":1,\"140\":1,\"141\":2,\"150\":1,\"171\":1,\"172\":1,\"174\":4,\"200\":2}}],[\"nettyclient\",{\"1\":{\"558\":7}}],[\"nettyclienthandler\",{\"1\":{\"558\":3}}],[\"nettyserver\",{\"1\":{\"558\":5}}],[\"nettyserverhandler\",{\"1\":{\"558\":2}}],[\"netty核心模块\",{\"0\":{\"543\":1}}],[\"netty提供的空闲状态处理器\",{\"1\":{\"528\":1}}],[\"netty<\",{\"1\":{\"317\":1,\"575\":1}}],[\"netty等\",{\"1\":{\"288\":3,\"293\":2}}],[\"netty\",{\"0\":{\"11\":1,\"520\":1,\"523\":1,\"528\":1,\"529\":1,\"533\":1,\"556\":1,\"563\":1,\"574\":1,\"575\":1},\"1\":{\"287\":2,\"314\":1,\"317\":3,\"520\":1,\"521\":4,\"522\":3,\"540\":2,\"541\":2,\"545\":1,\"547\":1,\"549\":1,\"552\":2,\"553\":2,\"557\":1,\"558\":6,\"574\":1}}],[\"ne\",{\"1\":{\"67\":1}}],[\"neq\",{\"1\":{\"67\":1}}],[\"nextint\",{\"1\":{\"537\":1}}],[\"nextline\",{\"1\":{\"526\":1,\"538\":1}}],[\"nextval\",{\"1\":{\"507\":2}}],[\"next\",{\"1\":{\"39\":1,\"510\":1,\"537\":1,\"538\":2,\"552\":2}}],[\"newproxyinstance\",{\"1\":{\"558\":2,\"617\":1,\"618\":1}}],[\"newbuilder\",{\"1\":{\"521\":1,\"522\":5}}],[\"newcachedthreadpool\",{\"1\":{\"472\":1}}],[\"newcondition\",{\"1\":{\"461\":2}}],[\"newsinglethreadexecutor\",{\"1\":{\"472\":1}}],[\"newfixedthreadpool\",{\"1\":{\"393\":1,\"472\":2}}],[\"newfriend\",{\"1\":{\"241\":4}}],[\"newline\",{\"1\":{\"331\":1}}],[\"newinstance\",{\"1\":{\"279\":2,\"448\":1,\"617\":1}}],[\"new\",{\"1\":{\"30\":4,\"35\":1,\"36\":1,\"44\":2,\"54\":7,\"55\":1,\"59\":6,\"62\":2,\"63\":3,\"71\":2,\"144\":3,\"145\":1,\"146\":2,\"147\":1,\"172\":3,\"173\":1,\"174\":2,\"182\":6,\"183\":2,\"184\":2,\"197\":1,\"204\":5,\"215\":1,\"223\":5,\"226\":3,\"232\":4,\"233\":12,\"241\":7,\"245\":1,\"249\":6,\"270\":1,\"302\":3,\"303\":3,\"318\":1,\"319\":1,\"322\":2,\"323\":3,\"327\":3,\"330\":7,\"331\":6,\"332\":7,\"333\":4,\"334\":5,\"335\":3,\"336\":2,\"338\":5,\"339\":4,\"340\":5,\"363\":2,\"377\":1,\"379\":4,\"380\":7,\"382\":5,\"383\":8,\"384\":3,\"388\":3,\"391\":1,\"392\":2,\"393\":14,\"395\":4,\"396\":3,\"400\":4,\"402\":3,\"403\":2,\"405\":2,\"409\":5,\"411\":1,\"416\":1,\"429\":2,\"430\":2,\"434\":4,\"437\":3,\"439\":3,\"440\":4,\"441\":4,\"442\":4,\"443\":4,\"444\":4,\"445\":4,\"447\":1,\"448\":2,\"450\":7,\"451\":2,\"453\":4,\"454\":4,\"456\":4,\"460\":1,\"461\":2,\"462\":3,\"464\":2,\"465\":1,\"466\":3,\"467\":2,\"468\":1,\"469\":4,\"470\":4,\"472\":5,\"473\":5,\"474\":13,\"476\":2,\"477\":2,\"478\":2,\"503\":1,\"508\":1,\"521\":6,\"522\":3,\"524\":8,\"525\":6,\"526\":8,\"528\":4,\"532\":6,\"536\":6,\"537\":13,\"538\":8,\"540\":8,\"541\":4,\"558\":19,\"563\":9,\"566\":4,\"567\":6,\"575\":9,\"576\":11,\"582\":3,\"593\":1,\"599\":1,\"602\":1,\"606\":1,\"609\":5,\"617\":2,\"618\":1,\"629\":1,\"630\":8}}],[\"以后\",{\"1\":{\"577\":1}}],[\"以块方式写\",{\"1\":{\"576\":1}}],[\"以免误删项目文件\",{\"1\":{\"521\":1}}],[\"以文件的形式将内容从内存保存到硬盘上\",{\"1\":{\"488\":1}}],[\"以外\",{\"1\":{\"425\":1}}],[\"以便后续的\",{\"1\":{\"421\":1}}],[\"以便随后的\",{\"1\":{\"421\":1}}],[\"以前\",{\"1\":{\"346\":1}}],[\"以只读方式打开\",{\"1\":{\"336\":1}}],[\"以zookeeper为例\",{\"1\":{\"292\":1}}],[\"以调用参数为key\",{\"1\":{\"291\":1,\"294\":1,\"296\":1}}],[\"以web文件夹为根目录\",{\"1\":{\"217\":1}}],[\"以执行回调函数\",{\"1\":{\"207\":1}}],[\"以此处为例\",{\"1\":{\"203\":1}}],[\"以及管理和监控操作\",{\"1\":{\"407\":1}}],[\"以及序列化和反序列化\",{\"1\":{\"293\":1}}],[\"以及http协议的json\",{\"1\":{\"293\":1}}],[\"以及http协议的json等\",{\"1\":{\"288\":1}}],[\"以及作为只用于开发测试功能的限制条件\",{\"1\":{\"286\":1}}],[\"以及\",{\"1\":{\"184\":1,\"317\":1,\"549\":1}}],[\"以逗号分隔\",{\"1\":{\"109\":1}}],[\"以\",{\"1\":{\"69\":1,\"184\":1,\"218\":1,\"621\":1}}],[\"以下动态\",{\"1\":{\"507\":1}}],[\"以下代码结果始终是\",{\"1\":{\"430\":1}}],[\"以下代码不论是否在变量前使用\",{\"1\":{\"430\":1}}],[\"以下代码如果不使用\",{\"1\":{\"429\":1}}],[\"以下代码通过读取默认的路径设置获取静态资源路径\",{\"1\":{\"69\":1}}],[\"以下命令需要配置\",{\"1\":{\"300\":1}}],[\"以下为设置response响应头\",{\"1\":{\"226\":1}}],[\"以下是一个简单地登录验证\",{\"1\":{\"229\":1}}],[\"以下是\",{\"1\":{\"19\":1}}],[\"以上类型的一维数组类型\",{\"1\":{\"263\":1}}],[\"以上代码虽然可以实现语言转换\",{\"1\":{\"35\":1}}],[\"以上方式在界面中并没有可以修改语言的按钮或链接\",{\"1\":{\"33\":1}}],[\"以被引用的文件为主\",{\"1\":{\"19\":1}}],[\"提高了处理过程中的灵活性\",{\"1\":{\"537\":1}}],[\"提高系统效率\",{\"1\":{\"480\":1}}],[\"提高系统的性能\",{\"1\":{\"356\":1}}],[\"提高查询效率\",{\"1\":{\"480\":1}}],[\"提交任务\",{\"1\":{\"409\":1}}],[\"提交执行\",{\"1\":{\"393\":1}}],[\"提供声明式事务\",{\"1\":{\"581\":1}}],[\"提供的一个专门用来操作缓冲区的工具类\",{\"1\":{\"553\":1}}],[\"提供的模板\",{\"1\":{\"19\":1}}],[\"提供\",{\"1\":{\"552\":1}}],[\"提供了在数据库执行\",{\"1\":{\"508\":1}}],[\"提供了\",{\"1\":{\"481\":1}}],[\"提供非\",{\"1\":{\"407\":1}}],[\"提供者上下文路径\",{\"1\":{\"288\":1,\"293\":1}}],[\"提供方次之\",{\"1\":{\"283\":1}}],[\"提供效率\",{\"1\":{\"180\":1}}],[\"提示\",{\"1\":{\"14\":1,\"19\":1,\"22\":1,\"64\":3,\"67\":4,\"114\":1,\"184\":2,\"187\":1,\"188\":1,\"272\":1,\"342\":1,\"346\":1,\"356\":1,\"361\":1,\"377\":1,\"394\":1,\"396\":1,\"403\":1,\"410\":1,\"414\":1,\"415\":1,\"416\":1,\"428\":1,\"470\":1,\"472\":1,\"473\":1,\"481\":1,\"483\":3,\"487\":1,\"502\":1,\"507\":3,\"600\":1,\"606\":1,\"620\":1,\"632\":1}}],[\"d2\",{\"1\":{\"565\":6}}],[\"d12\",{\"1\":{\"565\":1}}],[\"d11\",{\"1\":{\"565\":1}}],[\"d1\",{\"1\":{\"565\":6}}],[\"dma\",{\"1\":{\"539\":9}}],[\"dcl\",{\"1\":{\"448\":1}}],[\"d=1000\",{\"1\":{\"389\":1}}],[\"dw\",{\"1\":{\"295\":1}}],[\"dynamic\",{\"1\":{\"287\":1,\"289\":1,\"293\":1}}],[\"dd\",{\"1\":{\"233\":1,\"241\":1,\"515\":2,\"525\":1}}],[\"dfile\",{\"1\":{\"218\":1}}],[\"dag\",{\"1\":{\"588\":1}}],[\"dailyrollingfileappender\",{\"1\":{\"515\":2}}],[\"dailyrollingfile\",{\"1\":{\"515\":6}}],[\"daemon\",{\"1\":{\"469\":6}}],[\"daemontest\",{\"1\":{\"469\":1}}],[\"dao\",{\"0\":{\"624\":1},\"1\":{\"182\":1,\"235\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"499\":1,\"508\":2,\"517\":1,\"518\":1,\"579\":1,\"597\":3,\"601\":1,\"608\":3,\"624\":1,\"625\":1}}],[\"dashboard\",{\"0\":{\"152\":1,\"153\":1},\"1\":{\"151\":1}}],[\"dashboard<\",{\"1\":{\"141\":1,\"150\":1}}],[\"dateformat\",{\"1\":{\"525\":1}}],[\"datepattern=yyyymmdd\",{\"1\":{\"515\":1}}],[\"date\",{\"1\":{\"62\":1,\"63\":1,\"241\":7,\"303\":1,\"315\":1,\"322\":1,\"323\":2,\"505\":2,\"525\":4,\"593\":3}}],[\"databody\",{\"1\":{\"522\":1}}],[\"database\",{\"1\":{\"515\":7}}],[\"database=org\",{\"1\":{\"515\":1}}],[\"databaseid\",{\"1\":{\"507\":3}}],[\"databaseidprovider\",{\"1\":{\"492\":1,\"507\":1,\"607\":4}}],[\"databind<\",{\"1\":{\"239\":1,\"251\":1}}],[\"databind\",{\"1\":{\"233\":2}}],[\"data1\",{\"1\":{\"440\":2,\"441\":1,\"442\":2,\"443\":1,\"444\":2}}],[\"datagramchannel\",{\"1\":{\"537\":1}}],[\"datagrampacket\",{\"1\":{\"382\":10,\"383\":9}}],[\"datagramsocket=new\",{\"1\":{\"382\":1,\"383\":1}}],[\"datagramsocket\",{\"1\":{\"382\":7,\"383\":7}}],[\"data=filereader\",{\"1\":{\"338\":1}}],[\"datainputstream\",{\"1\":{\"333\":7}}],[\"dataid\",{\"0\":{\"159\":1}}],[\"dataoutputstream\",{\"1\":{\"333\":10}}],[\"datatype==\",{\"1\":{\"522\":1}}],[\"datatype\",{\"1\":{\"207\":2,\"522\":8}}],[\"data\",{\"1\":{\"20\":1,\"36\":4,\"181\":3,\"207\":5,\"208\":2,\"221\":2,\"226\":1,\"315\":1,\"338\":6,\"383\":4,\"437\":6,\"438\":1,\"439\":6,\"440\":7,\"441\":8,\"442\":6,\"443\":8,\"444\":7,\"483\":1,\"505\":1,\"508\":1,\"517\":2,\"518\":2,\"522\":1,\"576\":1}}],[\"datasourceconfig\",{\"1\":{\"629\":1}}],[\"datasource>\",{\"1\":{\"508\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"233\":7,\"259\":1,\"629\":5,\"630\":2,\"633\":1}}],[\"datasource\",{\"1\":{\"19\":5,\"21\":1,\"29\":1,\"30\":1,\"31\":2,\"38\":1,\"39\":5,\"62\":4,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1,\"258\":3,\"259\":3,\"492\":1,\"606\":4,\"607\":4,\"609\":1,\"629\":4,\"630\":1,\"633\":7}}],[\"d+\",{\"1\":{\"130\":1}}],[\"dname\",{\"1\":{\"115\":1}}],[\"db2\",{\"1\":{\"507\":1,\"607\":1}}],[\"db\",{\"1\":{\"97\":1,\"182\":1,\"194\":1,\"258\":1,\"497\":2}}],[\"d\",{\"1\":{\"75\":1,\"281\":1,\"338\":2,\"380\":2,\"383\":2,\"384\":1,\"389\":1,\"474\":1,\"515\":7,\"521\":1,\"540\":2,\"541\":2}}],[\"di\",{\"0\":{\"590\":1},\"1\":{\"600\":1}}],[\"diy\",{\"1\":{\"582\":2}}],[\"directory>\",{\"1\":{\"508\":2}}],[\"direct\",{\"1\":{\"288\":1}}],[\"dirt4\",{\"1\":{\"278\":1}}],[\"div>\",{\"1\":{\"67\":2}}],[\"discardoldestpolicy\",{\"1\":{\"473\":1}}],[\"discardpolicy\",{\"1\":{\"388\":1,\"400\":1,\"473\":1,\"536\":1,\"558\":1}}],[\"disconnected\",{\"1\":{\"536\":1}}],[\"disconnect\",{\"1\":{\"384\":1}}],[\"discovery<\",{\"1\":{\"97\":1,\"192\":1}}],[\"discovery\",{\"1\":{\"76\":1,\"77\":1,\"88\":1,\"97\":1,\"98\":1,\"123\":1,\"137\":1,\"194\":1,\"196\":1}}],[\"dispatch\",{\"1\":{\"572\":1}}],[\"dispatcher\",{\"1\":{\"288\":1}}],[\"dispatcherservlet及characterencodingfilter\",{\"1\":{\"256\":1}}],[\"dispatcherservlet<\",{\"1\":{\"212\":1,\"256\":1}}],[\"dispatcherservlet\",{\"0\":{\"232\":1},\"1\":{\"54\":1,\"211\":1,\"213\":1,\"222\":1,\"235\":1}}],[\"disposition\",{\"1\":{\"226\":1}}],[\"disabled\",{\"1\":{\"69\":1}}],[\"disable\",{\"1\":{\"59\":1,\"62\":1}}],[\"dog1\",{\"1\":{\"585\":1}}],[\"dog\",{\"1\":{\"584\":2,\"585\":1,\"587\":4,\"588\":4}}],[\"doget\",{\"1\":{\"254\":2}}],[\"dogetauthenticationinfo\",{\"1\":{\"54\":1}}],[\"dogetauthorizationinfo\",{\"1\":{\"54\":1}}],[\"doorb\",{\"1\":{\"450\":7}}],[\"doora\",{\"1\":{\"450\":11}}],[\"do\",{\"1\":{\"399\":1}}],[\"doublestream\",{\"1\":{\"417\":1}}],[\"double\",{\"1\":{\"265\":5,\"361\":1,\"363\":2,\"521\":1,\"541\":2}}],[\"doupload\",{\"1\":{\"223\":1}}],[\"doupload2\",{\"1\":{\"221\":1,\"223\":1}}],[\"docs\",{\"0\":{\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"640\":1,\"641\":1,\"642\":1,\"643\":1,\"644\":1,\"645\":1,\"646\":1}}],[\"document的英文意思是文档\",{\"1\":{\"276\":1}}],[\"document\",{\"0\":{\"276\":1},\"1\":{\"273\":1,\"289\":1,\"293\":1,\"576\":4}}],[\"documented\",{\"1\":{\"261\":1,\"262\":1,\"265\":1,\"277\":1,\"278\":1}}],[\"doctype\",{\"1\":{\"36\":1,\"51\":1,\"67\":2,\"506\":1,\"508\":2,\"517\":1,\"518\":1,\"576\":1}}],[\"dopost\",{\"1\":{\"254\":1}}],[\"dodownload\",{\"1\":{\"225\":1,\"226\":2}}],[\"downloadimage1\",{\"1\":{\"393\":4}}],[\"downloadimage\",{\"1\":{\"393\":4}}],[\"downloader\",{\"1\":{\"393\":12}}],[\"download\",{\"1\":{\"225\":1,\"226\":1,\"393\":10}}],[\"domain\",{\"1\":{\"507\":1}}],[\"dom\",{\"1\":{\"207\":1}}],[\"dtd\",{\"1\":{\"51\":3,\"506\":3,\"508\":6,\"517\":3,\"518\":3}}],[\"duration\",{\"1\":{\"69\":1}}],[\"dual\",{\"1\":{\"31\":1,\"507\":1}}],[\"dubbo时\",{\"1\":{\"319\":1}}],[\"dubbo=\",{\"1\":{\"318\":1,\"322\":1}}],[\"dubbo<\",{\"1\":{\"317\":2,\"325\":2}}],[\"dubboreference\",{\"1\":{\"303\":1,\"323\":1,\"327\":1}}],[\"dubboservice\",{\"1\":{\"302\":1,\"319\":1,\"326\":1}}],[\"dubbo等长连接协表示建立的长连接个数\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"dubbo协议长连接不支持此配置\",{\"1\":{\"294\":1}}],[\"dubbo协议的all\",{\"1\":{\"288\":1}}],[\"dubbo协议的mina\",{\"1\":{\"288\":3,\"293\":2}}],[\"dubbo协议的dubbo\",{\"1\":{\"288\":1,\"293\":1}}],[\"dubbo协议缺省为all\",{\"1\":{\"288\":1}}],[\"dubbo协议缺省为netty\",{\"1\":{\"288\":3,\"293\":2}}],[\"dubbo协议缺省为hessian2\",{\"1\":{\"288\":1,\"293\":1}}],[\"dubbo协议缺省端口为20880\",{\"1\":{\"288\":1}}],[\"dubbo\",{\"0\":{\"5\":1,\"280\":1,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"300\":1,\"304\":1,\"314\":1,\"317\":1,\"328\":1},\"1\":{\"164\":1,\"281\":3,\"286\":1,\"287\":3,\"288\":4,\"289\":1,\"290\":2,\"291\":1,\"292\":8,\"293\":5,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"300\":3,\"301\":1,\"302\":1,\"305\":2,\"311\":1,\"314\":1,\"317\":10,\"318\":8,\"319\":9,\"322\":7,\"323\":7,\"326\":2,\"327\":1}}],[\"driven>\",{\"1\":{\"240\":2,\"244\":2,\"248\":2,\"260\":2}}],[\"driven\",{\"1\":{\"215\":1}}],[\"drivermanagerdatasource\",{\"1\":{\"606\":1,\"609\":9,\"610\":2,\"630\":9,\"633\":1}}],[\"drivermanager\",{\"1\":{\"510\":1,\"511\":1}}],[\"driver=com\",{\"1\":{\"497\":1,\"515\":1}}],[\"driverclassname\",{\"1\":{\"606\":1,\"633\":1}}],[\"driverclass\",{\"1\":{\"258\":1}}],[\"driver\",{\"1\":{\"19\":2,\"29\":2,\"31\":2,\"38\":2,\"97\":2,\"98\":2,\"180\":3,\"182\":2,\"183\":2,\"194\":2,\"196\":2,\"233\":1,\"258\":1,\"497\":1,\"508\":2,\"510\":1,\"511\":1,\"515\":1,\"606\":1,\"609\":1,\"630\":1,\"633\":1}}],[\"druid=\",{\"1\":{\"31\":1}}],[\"druidconfig\",{\"1\":{\"30\":1}}],[\"druiddatasource\",{\"1\":{\"29\":1,\"30\":3,\"62\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1}}],[\"druid\",{\"0\":{\"28\":1,\"30\":1,\"31\":1},\"1\":{\"29\":1,\"30\":3,\"31\":6,\"62\":1,\"97\":1,\"98\":1,\"180\":2,\"182\":1,\"183\":1,\"194\":1,\"196\":1}}],[\"decode\",{\"1\":{\"532\":1,\"533\":1,\"567\":1}}],[\"declaredconstructor\",{\"1\":{\"272\":2,\"279\":2,\"448\":3}}],[\"deadlock\",{\"1\":{\"456\":1}}],[\"delimiterbasedframedecoder\",{\"1\":{\"533\":1}}],[\"delay\",{\"1\":{\"289\":1,\"293\":1,\"302\":1,\"326\":1}}],[\"deleteuser\",{\"1\":{\"630\":3}}],[\"delete\",{\"0\":{\"503\":1},\"1\":{\"184\":1,\"207\":1,\"208\":1,\"254\":1,\"482\":1,\"487\":1,\"630\":3}}],[\"delegatingwebmvcconfiguration\",{\"1\":{\"46\":3}}],[\"dest\",{\"1\":{\"537\":3}}],[\"destroy\",{\"1\":{\"254\":2,\"464\":1}}],[\"destination\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"538\":2}}],[\"deserializationfeature\",{\"1\":{\"233\":2}}],[\"detail\",{\"1\":{\"208\":2}}],[\"denver\",{\"1\":{\"126\":1,\"127\":1,\"128\":2}}],[\"deny\",{\"1\":{\"31\":1}}],[\"deprecation\",{\"1\":{\"269\":1}}],[\"deprecated\",{\"0\":{\"268\":1},\"1\":{\"289\":1,\"293\":1,\"296\":1}}],[\"deptservice\",{\"1\":{\"115\":1}}],[\"dept\",{\"1\":{\"115\":5,\"203\":9}}],[\"dependencymanagement>\",{\"1\":{\"180\":1}}],[\"dependency>\",{\"1\":{\"22\":1,\"23\":1,\"42\":1,\"49\":3,\"53\":3,\"58\":3,\"66\":1,\"69\":1,\"74\":1,\"81\":3,\"90\":1,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"177\":1,\"180\":7,\"181\":2,\"182\":9,\"183\":9,\"186\":1,\"192\":1,\"200\":3,\"239\":1,\"243\":1,\"247\":1,\"251\":16,\"315\":1,\"317\":8,\"325\":5,\"474\":1,\"508\":2,\"521\":1,\"575\":1,\"582\":1,\"604\":4}}],[\"dependencies<\",{\"1\":{\"180\":3}}],[\"dependencies\",{\"1\":{\"180\":2,\"317\":2,\"325\":1}}],[\"dependencies>\",{\"1\":{\"101\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"251\":1}}],[\"debug\",{\"1\":{\"69\":1,\"169\":2,\"515\":3}}],[\"defaultchannelgroup\",{\"1\":{\"525\":1}}],[\"default=\",{\"1\":{\"508\":1}}],[\"defaultfullhttpresponse\",{\"1\":{\"563\":2}}],[\"defaultforkjoinworkerthreadfactory\",{\"1\":{\"409\":1}}],[\"defaultfallback\",{\"0\":{\"144\":1},\"1\":{\"144\":2}}],[\"defaultthreadfactory\",{\"1\":{\"388\":1,\"400\":1,\"473\":1}}],[\"defaultencoding\",{\"1\":{\"222\":1}}],[\"defaultrabbit\",{\"1\":{\"187\":3,\"188\":2,\"189\":1}}],[\"defaultmethod\",{\"1\":{\"144\":2}}],[\"defaultproperties\",{\"1\":{\"144\":2}}],[\"defaultzone\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"87\":1,\"88\":1,\"102\":1,\"106\":1,\"122\":1,\"187\":1,\"188\":1,\"203\":1}}],[\"defaults=\",{\"1\":{\"240\":1,\"248\":1,\"260\":1}}],[\"defaultservlethandlerconfigurer\",{\"1\":{\"233\":1}}],[\"defaults\",{\"1\":{\"71\":1}}],[\"defaultsuccessurl\",{\"1\":{\"62\":1}}],[\"default\",{\"1\":{\"66\":3,\"69\":1,\"119\":1,\"165\":1,\"204\":1,\"215\":1,\"252\":1,\"260\":1,\"262\":2,\"265\":1,\"278\":1,\"289\":2,\"291\":2,\"293\":1,\"345\":1,\"346\":4,\"405\":2,\"528\":1}}],[\"defaultwebsecuritymanager\",{\"1\":{\"54\":9}}],[\"demointerfaceimpl\",{\"1\":{\"558\":3}}],[\"demointerface\",{\"1\":{\"558\":5}}],[\"demo\",{\"0\":{\"434\":1},\"1\":{\"19\":1,\"51\":4,\"303\":1,\"315\":1,\"322\":2,\"323\":3,\"327\":1,\"474\":1,\"540\":2,\"541\":2,\"582\":16}}],[\"development\",{\"1\":{\"508\":2}}],[\"develop\",{\"1\":{\"286\":1}}],[\"devtools<\",{\"1\":{\"182\":1,\"183\":1}}],[\"dev\",{\"1\":{\"19\":1,\"24\":2,\"75\":1,\"77\":1,\"85\":1,\"96\":1,\"300\":1}}],[\"配置实现事务\",{\"0\":{\"633\":1}}],[\"配置对应的\",{\"1\":{\"629\":1}}],[\"配置来执行设置\",{\"1\":{\"608\":1}}],[\"配置标准日志\",{\"1\":{\"607\":1}}],[\"配置整合\",{\"0\":{\"606\":1}}],[\"配置注解的支持\",{\"1\":{\"586\":1}}],[\"配置输出到数据库\",{\"1\":{\"515\":1}}],[\"配置输出到邮件\",{\"1\":{\"515\":1}}],[\"配置输出到文件\",{\"1\":{\"515\":3}}],[\"配置输出到控制台\",{\"1\":{\"515\":1}}],[\"配置根\",{\"1\":{\"515\":1}}],[\"配置解析\",{\"0\":{\"491\":1}}],[\"配置类\",{\"1\":{\"294\":1,\"319\":2,\"323\":2}}],[\"配置类必须不能被\",{\"1\":{\"173\":1}}],[\"配置服务路径可能不兼容\",{\"1\":{\"289\":1}}],[\"配置服务熔断\",{\"0\":{\"147\":1}}],[\"配置加载流程\",{\"0\":{\"284\":1}}],[\"配置可以作为\",{\"1\":{\"282\":1}}],[\"配置原则\",{\"0\":{\"282\":1}}],[\"配置覆盖优先级\",{\"0\":{\"281\":1}}],[\"配置规则\",{\"0\":{\"280\":1}}],[\"配置了\",{\"1\":{\"252\":1}}],[\"配置拦截器\",{\"1\":{\"235\":1}}],[\"配置默认\",{\"1\":{\"235\":1}}],[\"配置数据源\",{\"0\":{\"258\":1},\"1\":{\"235\":1,\"606\":1,\"610\":1}}],[\"配置总结\",{\"0\":{\"235\":1}}],[\"配置jackson的objectmapperfactory\",{\"1\":{\"233\":1}}],[\"配置jackson消息转换器\",{\"1\":{\"233\":1}}],[\"配置编码\",{\"1\":{\"233\":1}}],[\"配置消息转换器\",{\"1\":{\"233\":1,\"235\":1}}],[\"配置mvc默认servlet\",{\"1\":{\"233\":1}}],[\"配置mybatis\",{\"1\":{\"233\":1}}],[\"配置视图解析器\",{\"1\":{\"233\":1,\"235\":1,\"260\":1}}],[\"配置事务管理器\",{\"1\":{\"233\":1,\"235\":1,\"630\":1}}],[\"配置c3p0数据源\",{\"1\":{\"233\":1}}],[\"配置spring事务管理器\",{\"1\":{\"259\":1}}],[\"配置springconfig\",{\"0\":{\"233\":1}}],[\"配置sqlsessionfactory\",{\"1\":{\"233\":1,\"258\":1,\"610\":1}}],[\"配置statviewservlet\",{\"1\":{\"31\":1}}],[\"配置statfilter\",{\"1\":{\"31\":1}}],[\"配置过滤器\",{\"1\":{\"232\":1}}],[\"配置dispatcherservlet的mappingurl\",{\"1\":{\"232\":1}}],[\"配置无变化\",{\"1\":{\"215\":1}}],[\"配置日志\",{\"0\":{\"168\":1}}],[\"配置命令执行的超时时间\",{\"1\":{\"143\":1}}],[\"配置中使用\",{\"1\":{\"606\":1}}],[\"配置中设置扫描地址\",{\"1\":{\"235\":1}}],[\"配置中心地址\",{\"1\":{\"292\":1}}],[\"配置中心\",{\"0\":{\"158\":1},\"1\":{\"292\":1}}],[\"配置中\",{\"1\":{\"140\":1}}],[\"配置路由\",{\"0\":{\"123\":1,\"124\":1}}],[\"配置压缩数据大小的下限\",{\"1\":{\"118\":1}}],[\"配置rabbitmq\",{\"1\":{\"76\":1}}],[\"配置rabbitmq消息队列\",{\"1\":{\"75\":1}}],[\"配置后\",{\"1\":{\"69\":1,\"282\":1}}],[\"配置步骤\",{\"1\":{\"54\":1}}],[\"配置监控统计拦截的filters\",{\"1\":{\"31\":1}}],[\"配置一个连接在池中最小生存的时间\",{\"1\":{\"31\":1}}],[\"配置间隔多久才进行一次检测\",{\"1\":{\"31\":1}}],[\"配置获取连接等待超时\",{\"1\":{\"31\":1}}],[\"配置时\",{\"1\":{\"31\":1}}],[\"配置即可\",{\"1\":{\"22\":1}}],[\"配置如下\",{\"1\":{\"22\":1,\"215\":1}}],[\"配置文件的情况下\",{\"1\":{\"607\":1}}],[\"配置文件的可选位置\",{\"1\":{\"24\":1}}],[\"配置文件加载时\",{\"1\":{\"601\":1}}],[\"配置文件上传和下载\",{\"1\":{\"235\":1}}],[\"配置文件上传下载\",{\"1\":{\"233\":1}}],[\"配置文件配置\",{\"0\":{\"123\":1}}],[\"配置文件详解\",{\"0\":{\"62\":1}}],[\"配置文件与\",{\"1\":{\"24\":1}}],[\"配置文件命名仍然要为\",{\"1\":{\"24\":1}}],[\"配置文件\",{\"0\":{\"75\":1,\"77\":1,\"194\":1,\"196\":1,\"492\":1},\"1\":{\"21\":1,\"97\":1,\"98\":1,\"137\":1,\"182\":1,\"183\":1,\"508\":2}}],[\"配置文件名必须是\",{\"1\":{\"19\":1}}],[\"配置文件中的属性都有\",{\"1\":{\"17\":1}}],[\"配置文件中的配置名从何而来\",{\"0\":{\"17\":1}}],[\"配置\",{\"0\":{\"18\":1,\"19\":1,\"21\":1,\"30\":1,\"45\":1,\"100\":1,\"102\":1,\"104\":1,\"106\":1,\"109\":1,\"110\":1,\"111\":1,\"203\":1,\"212\":1,\"213\":1,\"222\":1,\"230\":1,\"231\":1,\"232\":1,\"240\":1,\"244\":1,\"248\":1,\"256\":1,\"257\":1,\"259\":1,\"260\":1,\"318\":1,\"322\":1,\"619\":1},\"1\":{\"31\":1,\"54\":2,\"172\":1,\"233\":1,\"235\":1,\"256\":1,\"492\":1,\"502\":1,\"508\":1,\"510\":2,\"511\":2,\"517\":1,\"606\":2,\"633\":1}}],[\"类是一个配置文件\",{\"1\":{\"602\":1}}],[\"类名\",{\"1\":{\"582\":1}}],[\"类图\",{\"1\":{\"530\":1}}],[\"类还是使用\",{\"1\":{\"522\":1}}],[\"类加载\",{\"1\":{\"274\":1}}],[\"类加载器\",{\"0\":{\"271\":1}}],[\"类加载了\",{\"1\":{\"17\":1}}],[\"类的整个结构都会封装在class对象中\",{\"1\":{\"270\":1}}],[\"类型都是\",{\"1\":{\"574\":1}}],[\"类型数据\",{\"1\":{\"532\":1}}],[\"类型的数据\",{\"1\":{\"532\":1}}],[\"类型的范围\",{\"1\":{\"363\":1}}],[\"类型处理器\",{\"1\":{\"492\":1}}],[\"类型别名\",{\"0\":{\"498\":1},\"1\":{\"492\":1}}],[\"类型等\",{\"1\":{\"363\":1}}],[\"类型转换为\",{\"1\":{\"363\":2}}],[\"类型是\",{\"1\":{\"361\":1}}],[\"类型\",{\"1\":{\"263\":1,\"286\":1,\"287\":1,\"288\":2,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"361\":1,\"363\":5,\"546\":1}}],[\"类前添加\",{\"1\":{\"235\":2}}],[\"类并重写其中方法对应实现\",{\"1\":{\"232\":1}}],[\"类即可\",{\"1\":{\"204\":1}}],[\"类\",{\"0\":{\"391\":1,\"553\":1},\"1\":{\"126\":1,\"143\":1,\"235\":1,\"268\":1,\"275\":1,\"334\":1,\"391\":1,\"399\":1,\"533\":1,\"537\":1}}],[\"类似多表联查\",{\"1\":{\"517\":1}}],[\"类似子查询\",{\"1\":{\"517\":1}}],[\"类似\",{\"1\":{\"130\":1}}],[\"类似hystrix\",{\"1\":{\"91\":1}}],[\"类似于\",{\"1\":{\"54\":1,\"67\":1}}],[\"类中的一个方法\",{\"1\":{\"581\":1}}],[\"类中使用\",{\"1\":{\"561\":1}}],[\"类中通过\",{\"1\":{\"560\":1}}],[\"类中自增方法\",{\"1\":{\"399\":1}}],[\"类中\",{\"1\":{\"69\":1}}],[\"类中存在\",{\"1\":{\"69\":1,\"71\":1}}],[\"类上有这样一个注解\",{\"1\":{\"46\":1}}],[\"类与其对应\",{\"1\":{\"17\":1}}],[\"这也是经常犯错误的一个地方\",{\"1\":{\"632\":1}}],[\"这也很容易理解\",{\"1\":{\"275\":1}}],[\"这是我们很容犯错的一点\",{\"1\":{\"632\":1}}],[\"这是一个使用信号量来控制对一个项目池的访问的类\",{\"1\":{\"478\":1}}],[\"这是一个一次性的现象\",{\"1\":{\"476\":1}}],[\"这称之为\",{\"1\":{\"565\":1}}],[\"这一切都发生在内核态\",{\"1\":{\"539\":1}}],[\"这意味着设置这些字段的唯一方法是通过\",{\"1\":{\"587\":1}}],[\"这意味着\",{\"1\":{\"487\":1,\"587\":1}}],[\"这意味着获取到的对象并不是共享的\",{\"1\":{\"482\":1}}],[\"这就是所谓的零拷贝\",{\"1\":{\"539\":1}}],[\"这就是\",{\"1\":{\"536\":1,\"566\":1}}],[\"这就是为什么成员变量会有括号\",{\"1\":{\"264\":1}}],[\"这就提供了可观的性能提升\",{\"1\":{\"487\":1}}],[\"这条语句会返回false\",{\"1\":{\"388\":1}}],[\"这部分内容将在类加载后存放到方法区的运行时常量池中\",{\"1\":{\"354\":1}}],[\"这样消费者在调用\",{\"1\":{\"558\":1}}],[\"这样程序就可以很简单地使用一个线程高效地管理多个\",{\"1\":{\"547\":1}}],[\"这样网卡的\",{\"1\":{\"539\":1}}],[\"这样就减少了一次数据拷贝\",{\"1\":{\"539\":1}}],[\"这样就只有\",{\"1\":{\"539\":1}}],[\"这样就可以自动的处理黏包和半包消息\",{\"1\":{\"533\":1}}],[\"这样\",{\"1\":{\"539\":1}}],[\"这样读锁和写锁就不冲突了\",{\"1\":{\"376\":1}}],[\"这样能够节省大量索引空间\",{\"1\":{\"343\":1}}],[\"这样引入\",{\"1\":{\"317\":1}}],[\"这种处理方式很流行\",{\"1\":{\"496\":1}}],[\"这种数据源的实现利用\",{\"1\":{\"496\":1}}],[\"这种写法不需要在finally中关闭filereader\",{\"1\":{\"338\":1}}],[\"这种方法意味着每一个\",{\"1\":{\"214\":1}}],[\"这种方式中\",{\"1\":{\"213\":1}}],[\"这对于\",{\"1\":{\"282\":1}}],[\"这些注册的\",{\"1\":{\"547\":1}}],[\"这些属性可以在外部进行配置\",{\"1\":{\"497\":1}}],[\"这些线程必须偶尔等待彼此\",{\"1\":{\"477\":1}}],[\"这些参数值都是已经定义好了的\",{\"1\":{\"269\":1}}],[\"这些自动配置类都有多个\",{\"1\":{\"17\":1}}],[\"这两个接口\",{\"1\":{\"139\":1}}],[\"这里继承了\",{\"1\":{\"567\":1}}],[\"这里简化为使用井号分隔\",{\"1\":{\"558\":1}}],[\"这里就变成了传入\",{\"1\":{\"522\":1}}],[\"这里必须是同一个锁\",{\"1\":{\"427\":1}}],[\"这里将修改成功\",{\"1\":{\"388\":1}}],[\"这里都使用\",{\"1\":{\"301\":1}}],[\"这里使用默认即可\",{\"1\":{\"300\":1}}],[\"这里我们使用默认配置\",{\"1\":{\"299\":1}}],[\"这里是全局配置\",{\"1\":{\"203\":1}}],[\"这里才会生效\",{\"1\":{\"85\":1}}],[\"这里要使用两个指令\",{\"1\":{\"67\":1}}],[\"这里只介绍三种\",{\"1\":{\"64\":1}}],[\"这个处理器将多个段聚合\",{\"1\":{\"576\":1}}],[\"这个组中有多个事件循环\",{\"1\":{\"574\":1}}],[\"这个缓冲区\",{\"1\":{\"539\":1}}],[\"这个过程是由\",{\"1\":{\"539\":1}}],[\"这个过程又是由\",{\"1\":{\"539\":1}}],[\"这个过程依然还是由\",{\"1\":{\"539\":1}}],[\"这个拷贝到过程是由\",{\"1\":{\"539\":1}}],[\"这个拷贝的过程是通过\",{\"1\":{\"539\":1}}],[\"这个最好设置为false\",{\"1\":{\"521\":1}}],[\"这个关闭操作很重要\",{\"1\":{\"513\":1}}],[\"这个数据源实现是为了能在如\",{\"1\":{\"496\":1}}],[\"这个数据源的实现会每次请求时打开和关闭连接\",{\"1\":{\"496\":1}}],[\"这个配置就很适合这种情形\",{\"1\":{\"496\":1}}],[\"这个配置存在于webmvcproperties中\",{\"1\":{\"69\":1}}],[\"这个记录就会被放在当前会话的一级缓存中\",{\"1\":{\"489\":1}}],[\"这个参数就没什么效果\",{\"1\":{\"473\":1}}],[\"这个队列最大长度为\",{\"1\":{\"472\":1}}],[\"这个锁不会释放\",{\"1\":{\"450\":1}}],[\"这个线程对主存中flag的值的变化不知道\",{\"1\":{\"429\":1}}],[\"这个区间以外的所有数据都会在堆上产生\",{\"1\":{\"389\":1}}],[\"这个区间中的\",{\"1\":{\"389\":1}}],[\"这个引用从此以后\",{\"1\":{\"377\":1}}],[\"这个时间就会越长\",{\"1\":{\"343\":1}}],[\"这个时候需要做非空判断\",{\"1\":{\"67\":1}}],[\"这个值可能会变\",{\"1\":{\"334\":1}}],[\"这个值就是上面提到的四个静态资源路径\",{\"1\":{\"71\":1}}],[\"这个实现类将\",{\"1\":{\"213\":1}}],[\"这个\",{\"1\":{\"117\":1}}],[\"这个方法又调用了\",{\"1\":{\"71\":1}}],[\"这个类会对入站数据进行缓冲\",{\"1\":{\"530\":1}}],[\"这个类上有一个\",{\"1\":{\"69\":1}}],[\"这个类进而导致\",{\"1\":{\"46\":1}}],[\"这个类\",{\"1\":{\"46\":1}}],[\"这个类时\",{\"1\":{\"46\":1}}],[\"这个类要使用\",{\"1\":{\"46\":1}}],[\"这个类可以通过\",{\"1\":{\"36\":1}}],[\"这个接口就是\",{\"1\":{\"46\":1}}],[\"这个前缀命名\",{\"1\":{\"20\":1}}],[\"这个注解的值指向的类就是我们在配置文件中的可选择的属性\",{\"1\":{\"17\":1}}],[\"要开启事务\",{\"1\":{\"630\":1}}],[\"要代理的真实角色\",{\"1\":{\"618\":1}}],[\"要代理的接口\",{\"1\":{\"618\":1}}],[\"要被代理的真实角色\",{\"1\":{\"618\":1}}],[\"要被排除在解析之外的视图名称列表\",{\"1\":{\"19\":1}}],[\"要注意返回的类型是\",{\"1\":{\"610\":1}}],[\"要注意欲缓存对象的大小和运行环境中可用的内存资源\",{\"1\":{\"487\":1}}],[\"要和\",{\"1\":{\"605\":1}}],[\"要执行的目标对象的方法\",{\"1\":{\"582\":1}}],[\"要有规定传输格式\",{\"1\":{\"558\":1}}],[\"要么是teacher要么是child\",{\"1\":{\"522\":1}}],[\"要在带注解的映射器接口类中使用动态\",{\"1\":{\"507\":1}}],[\"要在配置文件中配置时\",{\"1\":{\"17\":1}}],[\"要去掉的内容\",{\"1\":{\"507\":1}}],[\"要修改的新值\",{\"1\":{\"398\":1}}],[\"要再引入\",{\"1\":{\"317\":2}}],[\"要是用\",{\"1\":{\"241\":1}}],[\"要实现被代理的接口\",{\"1\":{\"618\":1}}],[\"要实现\",{\"1\":{\"235\":1}}],[\"要创建自定义拦截器\",{\"1\":{\"229\":1}}],[\"要创建的支付记录信息为\",{\"1\":{\"182\":1}}],[\"要解决这个问题请参考消息消费者的配置方法\",{\"1\":{\"187\":1}}],[\"要查询的支付记录的id为\",{\"1\":{\"182\":1}}],[\"要更改为\",{\"1\":{\"69\":1}}],[\"要想使用注解\",{\"1\":{\"577\":1}}],[\"要想访问\",{\"1\":{\"69\":1}}],[\"要想扩展\",{\"1\":{\"46\":1}}],[\"要使用别名\",{\"1\":{\"67\":1}}],[\"要使用\",{\"1\":{\"67\":1,\"235\":1,\"389\":1,\"558\":1}}],[\"要使用共计四种\",{\"1\":{\"64\":1}}],[\"要使用什么依赖\",{\"1\":{\"16\":1}}],[\"要导入依赖\",{\"1\":{\"22\":1}}],[\"要运⽤于模板之上的模板模式\",{\"1\":{\"19\":1}}],[\"=channel\",{\"1\":{\"538\":1}}],[\"=channel1\",{\"1\":{\"525\":1}}],[\"=bytebuffer\",{\"1\":{\"537\":2}}],[\"=5\",{\"1\":{\"461\":1}}],[\"=0\",{\"1\":{\"461\":1}}],[\"=product\",{\"1\":{\"460\":1}}],[\"=new\",{\"1\":{\"447\":1,\"451\":1}}],[\"=null\",{\"1\":{\"331\":1,\"506\":2,\"507\":4}}],[\"=null||request\",{\"1\":{\"229\":1,\"234\":1}}],[\"=8m\",{\"1\":{\"288\":1,\"293\":1}}],[\"==integer\",{\"1\":{\"558\":1}}],[\"=====环绕后=====\",{\"1\":{\"582\":2}}],[\"=====环绕前=====\",{\"1\":{\"582\":2}}],[\"=====方法执行后=====\",{\"1\":{\"582\":3}}],[\"=====方法执行前=====\",{\"1\":{\"582\":3}}],[\"==============================\",{\"1\":{\"483\":3}}],[\"=========================\",{\"1\":{\"395\":4}}],[\"=======init=========\",{\"1\":{\"254\":1}}],[\"===\",{\"1\":{\"576\":1}}],[\"===>\",{\"1\":{\"470\":1,\"536\":2}}],[\"==>\",{\"1\":{\"411\":1,\"464\":1,\"483\":12}}],[\"==null\",{\"1\":{\"403\":1}}],[\"==0\",{\"1\":{\"67\":1,\"537\":1}}],[\"==\",{\"1\":{\"67\":3,\"139\":1,\"173\":4,\"334\":2,\"389\":1,\"462\":1,\"473\":3,\"507\":2}}],[\"=\",{\"1\":{\"17\":2,\"20\":2,\"22\":1,\"23\":2,\"27\":1,\"30\":3,\"35\":3,\"39\":3,\"40\":1,\"44\":4,\"51\":1,\"54\":5,\"55\":4,\"62\":1,\"63\":3,\"64\":2,\"66\":4,\"67\":6,\"69\":5,\"71\":4,\"115\":1,\"116\":1,\"124\":1,\"137\":1,\"139\":2,\"143\":62,\"144\":7,\"145\":5,\"146\":6,\"147\":10,\"164\":1,\"172\":4,\"173\":13,\"174\":3,\"181\":5,\"182\":5,\"183\":2,\"184\":8,\"204\":2,\"205\":3,\"208\":3,\"215\":2,\"216\":1,\"222\":9,\"223\":9,\"226\":6,\"229\":1,\"232\":1,\"233\":10,\"237\":3,\"241\":16,\"245\":3,\"249\":6,\"262\":2,\"265\":5,\"270\":5,\"271\":8,\"272\":14,\"277\":2,\"278\":4,\"279\":12,\"302\":11,\"303\":13,\"315\":2,\"317\":1,\"318\":1,\"319\":5,\"322\":6,\"323\":14,\"326\":7,\"327\":12,\"330\":8,\"331\":7,\"332\":7,\"333\":2,\"334\":13,\"335\":2,\"336\":2,\"338\":8,\"339\":4,\"340\":6,\"363\":15,\"377\":1,\"379\":8,\"380\":14,\"382\":4,\"383\":11,\"384\":6,\"388\":1,\"391\":3,\"392\":4,\"393\":17,\"395\":12,\"396\":3,\"399\":1,\"400\":4,\"402\":4,\"403\":2,\"405\":6,\"409\":8,\"411\":1,\"416\":1,\"417\":1,\"430\":4,\"434\":1,\"437\":1,\"439\":1,\"440\":2,\"441\":2,\"442\":2,\"443\":2,\"444\":2,\"445\":6,\"447\":1,\"448\":6,\"450\":3,\"453\":1,\"454\":1,\"456\":3,\"460\":4,\"461\":5,\"462\":9,\"464\":2,\"466\":1,\"467\":4,\"468\":2,\"469\":4,\"470\":8,\"472\":4,\"473\":6,\"474\":4,\"476\":2,\"477\":3,\"478\":2,\"503\":3,\"506\":2,\"507\":6,\"508\":5,\"510\":1,\"515\":17,\"521\":5,\"522\":11,\"524\":7,\"525\":3,\"526\":9,\"528\":2,\"532\":2,\"536\":7,\"537\":39,\"538\":20,\"540\":15,\"541\":16,\"558\":16,\"560\":1,\"563\":8,\"566\":5,\"567\":11,\"575\":10,\"576\":15,\"578\":1,\"582\":11,\"587\":3,\"593\":10,\"599\":1,\"602\":2,\"606\":3,\"609\":6,\"617\":4,\"618\":2,\"630\":8}}],[\"中介租房\",{\"0\":{\"618\":1}}],[\"中不停修改代码\",{\"1\":{\"599\":1}}],[\"中显式的配置\",{\"1\":{\"583\":2}}],[\"中三种装配方式\",{\"1\":{\"583\":1}}],[\"中也绑定了对应的\",{\"1\":{\"550\":1}}],[\"中又关联着一个\",{\"1\":{\"549\":1}}],[\"中又维护了一个由\",{\"1\":{\"549\":1}}],[\"中各个的\",{\"1\":{\"549\":1}}],[\"中注册\",{\"1\":{\"547\":1}}],[\"中阻塞的体现\",{\"1\":{\"536\":1}}],[\"中其他常用编解码器\",{\"0\":{\"533\":1}}],[\"中开启二级缓存\",{\"1\":{\"488\":1}}],[\"中提交时\",{\"1\":{\"473\":1}}],[\"中提取\",{\"1\":{\"281\":1}}],[\"中创建线程池源码\",{\"1\":{\"473\":1}}],[\"中产生\",{\"1\":{\"389\":1}}],[\"中间\",{\"1\":{\"376\":1}}],[\"中允许使用\",{\"1\":{\"346\":1}}],[\"中对接口增加了新的特性\",{\"1\":{\"346\":1}}],[\"中类的单继承问题\",{\"1\":{\"346\":1}}],[\"中接口使用\",{\"1\":{\"346\":1}}],[\"中被\",{\"1\":{\"345\":1}}],[\"中关闭流\",{\"1\":{\"338\":1}}],[\"中包含了一个具体的事件处理器\",{\"1\":{\"550\":1}}],[\"中包含了\",{\"1\":{\"317\":2}}],[\"中包含请求的所有信息\",{\"1\":{\"117\":1}}],[\"中去\",{\"1\":{\"276\":1}}],[\"中运行\",{\"1\":{\"274\":1}}],[\"中右击项目模块\",{\"1\":{\"256\":1}}],[\"中指定\",{\"1\":{\"252\":1}}],[\"中指定切点有效\",{\"1\":{\"235\":1}}],[\"中做出如下配置\",{\"1\":{\"240\":1}}],[\"中引用无效\",{\"1\":{\"235\":1}}],[\"中部分\",{\"1\":{\"222\":1}}],[\"中配置为\",{\"1\":{\"258\":1}}],[\"中配置扫描包地址\",{\"1\":{\"235\":1}}],[\"中配置\",{\"1\":{\"218\":1,\"606\":1}}],[\"中服务对应的节点名称\",{\"1\":{\"198\":1}}],[\"中只保留最后的100次执行的统计\",{\"1\":{\"143\":1}}],[\"中发生7500次执行\",{\"1\":{\"143\":1}}],[\"中保留的最大执行次数\",{\"1\":{\"143\":1}}],[\"中携带了指定名字的键且值符合这个正则表达式才能通过\",{\"1\":{\"129\":1}}],[\"中已经移除了图标的设置\",{\"1\":{\"72\":1}}],[\"中定义的信息之外\",{\"1\":{\"167\":2}}],[\"中定义的\",{\"1\":{\"84\":2}}],[\"中定义\",{\"1\":{\"69\":1}}],[\"中输入如下内容\",{\"1\":{\"69\":1}}],[\"中使用注解指定别名\",{\"1\":{\"498\":1}}],[\"中使用\",{\"1\":{\"67\":1}}],[\"中\",{\"1\":{\"67\":1,\"111\":1,\"114\":1,\"139\":1,\"184\":1,\"216\":1,\"227\":1,\"235\":2,\"252\":1,\"470\":1,\"489\":1,\"521\":1,\"537\":1,\"545\":1,\"579\":1,\"602\":1}}],[\"中会在自动装配的时候报错\",{\"1\":{\"51\":1}}],[\"中设置开启驼峰命名转换\",{\"1\":{\"505\":1}}],[\"中设置\",{\"1\":{\"36\":1}}],[\"中添加工程\",{\"1\":{\"180\":1}}],[\"中添加依赖\",{\"1\":{\"69\":1}}],[\"中添加\",{\"1\":{\"24\":1,\"31\":1,\"486\":1,\"508\":1}}],[\"中的作用\",{\"0\":{\"581\":1}}],[\"中的实现类\",{\"1\":{\"558\":1}}],[\"中的实例\",{\"0\":{\"399\":1}}],[\"中的下一个处理程序\",{\"1\":{\"548\":1}}],[\"中的容量超过这个阀值了\",{\"1\":{\"405\":1}}],[\"中的类\",{\"1\":{\"180\":1}}],[\"中的负载均衡策略获取一个可用的服务地址\",{\"1\":{\"172\":1}}],[\"中的要调用的服务名\",{\"1\":{\"164\":1}}],[\"中的接口被调用时\",{\"1\":{\"117\":1}}],[\"中的配置文件后\",{\"1\":{\"93\":1}}],[\"中的内部静态类\",{\"1\":{\"69\":1}}],[\"中的代码中有\",{\"1\":{\"69\":1}}],[\"中的进行预处理\",{\"1\":{\"67\":1}}],[\"中的变量\",{\"1\":{\"67\":1}}],[\"中的\",{\"0\":{\"237\":1},\"1\":{\"19\":1,\"31\":1,\"36\":1,\"54\":1,\"67\":1,\"69\":1,\"126\":1,\"553\":1,\"629\":1}}],[\"中的属性\",{\"1\":{\"17\":1}}],[\"中的所有类都具有\",{\"1\":{\"17\":1}}],[\"中有两种类型的事务管理器\",{\"1\":{\"495\":1}}],[\"中有一个\",{\"1\":{\"17\":1}}],[\"中有唯一一个注解\",{\"1\":{\"17\":1}}],[\"hibernate\",{\"1\":{\"625\":1}}],[\"highest\",{\"1\":{\"292\":1}}],[\"high\",{\"1\":{\"136\":1}}],[\"hungry\",{\"1\":{\"447\":7}}],[\"hh\",{\"1\":{\"241\":1,\"515\":3,\"525\":1}}],[\"hystrixdashboard\",{\"0\":{\"149\":1}}],[\"hystrixclientfactory\",{\"1\":{\"146\":4}}],[\"hystrixclientfallback\",{\"1\":{\"145\":2}}],[\"hystrixcommandproperties\",{\"1\":{\"143\":1}}],[\"hystrixcommand的执行和时间是否打印日志到hystrixrequestlog中\",{\"1\":{\"143\":1}}],[\"hystrixcommand\",{\"1\":{\"143\":3,\"144\":3,\"147\":1}}],[\"hystrixproperty\",{\"1\":{\"143\":28,\"144\":1,\"147\":4}}],[\"hystrix<\",{\"1\":{\"141\":1}}],[\"hystrix\",{\"0\":{\"140\":1,\"148\":1,\"204\":1},\"1\":{\"119\":1,\"140\":5,\"141\":1,\"148\":1,\"150\":1,\"151\":1,\"153\":3,\"204\":2}}],[\"happen\",{\"0\":{\"427\":1},\"1\":{\"427\":2}}],[\"handlerremoved\",{\"1\":{\"525\":1,\"576\":1}}],[\"handleradded\",{\"1\":{\"525\":1,\"558\":1,\"576\":1}}],[\"handleradapter\",{\"1\":{\"222\":1}}],[\"handlerinterceptor\",{\"1\":{\"229\":2,\"234\":1}}],[\"handlerexceptionresolver\",{\"1\":{\"222\":1}}],[\"handlerequest\",{\"1\":{\"213\":1,\"214\":2}}],[\"handlermapping等\",{\"1\":{\"232\":1}}],[\"handlermapping\",{\"1\":{\"222\":1}}],[\"handler\",{\"0\":{\"532\":1},\"1\":{\"213\":1,\"215\":1,\"222\":3,\"229\":3,\"234\":3,\"252\":1,\"260\":1,\"409\":1,\"473\":5,\"521\":9,\"522\":2,\"526\":1,\"528\":1,\"532\":2,\"536\":2,\"549\":4,\"558\":6,\"560\":1,\"561\":1,\"563\":1,\"567\":2,\"572\":5,\"573\":4,\"575\":1,\"617\":3}}],[\"handling\",{\"1\":{\"69\":1}}],[\"hasnext\",{\"1\":{\"537\":1,\"538\":2}}],[\"hasnextline\",{\"1\":{\"526\":1,\"538\":1}}],[\"hasremaining\",{\"1\":{\"537\":1}}],[\"hasrole>\",{\"1\":{\"56\":1}}],[\"hasrole\",{\"1\":{\"56\":2,\"59\":3,\"60\":1,\"62\":1,\"64\":1}}],[\"has\",{\"0\":{\"347\":1},\"1\":{\"347\":2,\"536\":3}}],[\"hashset\",{\"1\":{\"403\":1}}],[\"hashset<>\",{\"1\":{\"403\":1}}],[\"hashmap=new\",{\"1\":{\"445\":1}}],[\"hashmap\",{\"0\":{\"405\":1},\"1\":{\"327\":4,\"403\":1,\"405\":4,\"445\":2,\"507\":1}}],[\"hashmap<k\",{\"1\":{\"405\":1}}],[\"hashmap<>\",{\"1\":{\"30\":1,\"183\":1,\"184\":1,\"327\":1,\"445\":1}}],[\"hashmap<string\",{\"1\":{\"30\":1,\"183\":1,\"184\":1,\"327\":1,\"445\":1,\"506\":1}}],[\"hash\",{\"0\":{\"310\":1},\"1\":{\"310\":1}}],[\"hashcode\",{\"1\":{\"264\":1,\"270\":3,\"334\":4,\"361\":1,\"448\":1}}],[\"hashicorp\",{\"1\":{\"95\":2}}],[\"hasmappingforpattern\",{\"1\":{\"69\":2}}],[\"hasauthority\",{\"1\":{\"62\":1,\"64\":3}}],[\"hasanyroles>\",{\"1\":{\"56\":1}}],[\"hasanyroles\",{\"1\":{\"56\":2}}],[\"haspermission>\",{\"1\":{\"56\":1}}],[\"haspermission\",{\"1\":{\"56\":2}}],[\"h1>\",{\"1\":{\"67\":1}}],[\"h2>\",{\"1\":{\"67\":1}}],[\"h3>\",{\"1\":{\"67\":2}}],[\"hollycrm\",{\"1\":{\"515\":1}}],[\"holder=new\",{\"1\":{\"448\":1}}],[\"holder\",{\"1\":{\"448\":6}}],[\"home\",{\"1\":{\"450\":13}}],[\"hover\",{\"1\":{\"208\":1}}],[\"host=new\",{\"1\":{\"618\":1}}],[\"host=\",{\"1\":{\"131\":1,\"538\":2}}],[\"host=smtp\",{\"1\":{\"43\":1}}],[\"hostname\",{\"1\":{\"97\":1,\"98\":1,\"102\":1}}],[\"host\",{\"0\":{\"131\":1},\"1\":{\"75\":1,\"76\":1,\"77\":1,\"97\":1,\"98\":1,\"131\":2,\"187\":1,\"188\":1,\"189\":1,\"194\":1,\"196\":1,\"203\":1,\"288\":1,\"293\":1,\"326\":1,\"526\":5,\"538\":1,\"618\":4}}],[\"hobbies=\",{\"1\":{\"593\":1}}],[\"hobbies=code\",{\"1\":{\"20\":1}}],[\"hobbies\",{\"1\":{\"20\":3,\"22\":1,\"593\":7}}],[\"height\",{\"1\":{\"576\":2}}],[\"hessian等短连接协议支持此配置\",{\"1\":{\"294\":1}}],[\"hessian等短连接协议表示限制连接数\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"hessian2\",{\"1\":{\"288\":1,\"293\":1}}],[\"hehe\",{\"1\":{\"254\":1}}],[\"heartbeathandler\",{\"1\":{\"528\":2}}],[\"heartbeat\",{\"1\":{\"288\":1}}],[\"health\",{\"1\":{\"148\":1}}],[\"healthsnapshot\",{\"1\":{\"143\":1}}],[\"head\",{\"1\":{\"549\":1}}],[\"head>\",{\"1\":{\"36\":1,\"67\":2,\"576\":1}}],[\"headers==>\",{\"1\":{\"184\":1}}],[\"headers\",{\"1\":{\"167\":2,\"184\":1,\"563\":2}}],[\"header=x\",{\"1\":{\"130\":1}}],[\"header\",{\"0\":{\"130\":1},\"1\":{\"36\":2,\"130\":1}}],[\"hello=new\",{\"1\":{\"596\":1}}],[\"hellospring\",{\"0\":{\"595\":1}}],[\"helloservlet\",{\"1\":{\"254\":1}}],[\"hello2\",{\"1\":{\"215\":1}}],[\"hello1\",{\"1\":{\"215\":1}}],[\"hellocontroller\",{\"1\":{\"213\":1,\"214\":1,\"215\":1}}],[\"hello\",{\"0\":{\"508\":1},\"1\":{\"15\":1,\"67\":1,\"69\":3,\"213\":1,\"214\":2,\"215\":4,\"216\":1,\"217\":3,\"339\":2,\"596\":3}}],[\"href=\",{\"1\":{\"33\":14,\"35\":2,\"67\":1,\"208\":2,\"225\":1}}],[\"http数据分段\",{\"1\":{\"576\":1}}],[\"httpheadernames\",{\"1\":{\"563\":2}}],[\"httpheaders=\",{\"1\":{\"204\":1}}],[\"httpheaders\",{\"1\":{\"184\":1,\"204\":5}}],[\"httpresponsestatus\",{\"1\":{\"563\":1}}],[\"httprequest\",{\"1\":{\"563\":5}}],[\"httpversion\",{\"1\":{\"563\":1}}],[\"httpobjectaggregator\",{\"1\":{\"576\":1}}],[\"httpobject\",{\"1\":{\"563\":1}}],[\"httpobjectdecoder\",{\"1\":{\"533\":1}}],[\"http服务器\",{\"0\":{\"563\":1}}],[\"http协议缺省为servlet\",{\"1\":{\"288\":1,\"293\":1}}],[\"http协议缺省为json\",{\"1\":{\"288\":1,\"293\":1}}],[\"http协议的jetty\",{\"1\":{\"288\":1,\"293\":1}}],[\"http和hessian协议缺省端口为80\",{\"1\":{\"288\":1}}],[\"httpurlconnection\",{\"1\":{\"117\":1,\"384\":2}}],[\"http通信端口\",{\"1\":{\"102\":1}}],[\"https为secure\",{\"1\":{\"102\":1}}],[\"httpserver\",{\"1\":{\"563\":1}}],[\"httpservercodec\",{\"1\":{\"563\":1,\"576\":1}}],[\"httpserverinitialize\",{\"1\":{\"563\":2}}],[\"httpserverhandler\",{\"1\":{\"563\":4}}],[\"httpservlet\",{\"1\":{\"254\":2}}],[\"httpservletresponse\",{\"1\":{\"35\":2,\"59\":6,\"62\":1,\"214\":2,\"217\":2,\"226\":1,\"229\":3,\"234\":3,\"254\":2}}],[\"httpservletrequest\",{\"1\":{\"35\":3,\"55\":1,\"59\":6,\"62\":1,\"205\":1,\"214\":2,\"215\":1,\"217\":2,\"223\":2,\"226\":1,\"229\":3,\"234\":3,\"254\":2}}],[\"httpsession\",{\"1\":{\"229\":1,\"513\":1}}],[\"httpsecurity\",{\"1\":{\"59\":1,\"62\":2}}],[\"httpstatus\",{\"1\":{\"47\":1,\"139\":1,\"184\":1,\"204\":2,\"205\":1}}],[\"https\",{\"1\":{\"47\":1,\"59\":1,\"75\":1,\"83\":1,\"87\":1,\"95\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":4,\"180\":2,\"215\":2,\"217\":1,\"317\":1,\"322\":1,\"633\":3}}],[\"http\",{\"1\":{\"36\":1,\"51\":1,\"56\":2,\"59\":6,\"60\":2,\"62\":8,\"66\":1,\"67\":2,\"75\":2,\"76\":2,\"77\":2,\"78\":2,\"79\":1,\"85\":1,\"87\":2,\"88\":2,\"102\":1,\"106\":1,\"122\":2,\"123\":1,\"124\":1,\"164\":1,\"172\":1,\"178\":1,\"183\":1,\"184\":1,\"187\":2,\"188\":2,\"198\":1,\"203\":2,\"212\":4,\"213\":5,\"215\":8,\"240\":3,\"244\":1,\"248\":1,\"256\":4,\"260\":3,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"318\":7,\"322\":9,\"384\":1,\"393\":4,\"506\":1,\"508\":2,\"513\":2,\"517\":1,\"518\":1,\"533\":1,\"563\":1,\"576\":1,\"582\":14,\"584\":5,\"585\":5,\"586\":7,\"587\":8,\"594\":11,\"596\":4,\"597\":4,\"633\":10}}],[\"httpencodingautoconfiguration\",{\"1\":{\"17\":1}}],[\"html>\",{\"1\":{\"36\":2,\"56\":1,\"60\":1,\"66\":1,\"67\":4,\"576\":2}}],[\"html5\",{\"1\":{\"19\":1}}],[\"html\",{\"1\":{\"19\":4,\"33\":14,\"36\":1,\"47\":2,\"66\":3,\"67\":3,\"71\":2,\"207\":3,\"208\":4,\"218\":1,\"576\":1}}],[\"如日志\",{\"1\":{\"581\":1}}],[\"如何相互交互\",{\"1\":{\"549\":1}}],[\"如聊天服务器\",{\"1\":{\"537\":1}}],[\"如下\",{\"1\":{\"522\":1}}],[\"如下代码中\",{\"1\":{\"450\":1}}],[\"如下的\",{\"1\":{\"67\":1}}],[\"如性别\",{\"1\":{\"343\":1}}],[\"如apollo中用来区分不同的配置集群\",{\"1\":{\"292\":1}}],[\"如dubbo协议的netty或mina\",{\"1\":{\"291\":1}}],[\"如本地缓存等\",{\"1\":{\"289\":1,\"291\":1}}],[\"如调用的超时时间\",{\"1\":{\"282\":1}}],[\"如services\",{\"1\":{\"232\":1}}],[\"如请求参数\",{\"1\":{\"117\":1}}],[\"如果两个属性都被设置了\",{\"1\":{\"608\":1}}],[\"如果您想在应用程序容器之外使用您的类\",{\"1\":{\"587\":1}}],[\"如果显式定义了\",{\"1\":{\"587\":1}}],[\"如果线程没有数据可读\",{\"1\":{\"569\":1}}],[\"如果可读就读取指定key对应的channel\",{\"1\":{\"538\":1}}],[\"如果可以连接\",{\"1\":{\"538\":1}}],[\"如果继承的父类\",{\"1\":{\"521\":1}}],[\"如果你现在正在使用一种\",{\"1\":{\"513\":1}}],[\"如果你正在使用\",{\"1\":{\"495\":1}}],[\"如果你混合使用\",{\"1\":{\"486\":1}}],[\"如果你想知道什么是快乐星球的话\",{\"1\":{\"462\":1}}],[\"如果需要重置计数的版本\",{\"1\":{\"476\":1}}],[\"如果需要更复杂的规则\",{\"1\":{\"296\":1}}],[\"如果池中当前有多于\",{\"1\":{\"473\":1}}],[\"如果将\",{\"1\":{\"473\":1}}],[\"如果运行的线程多于\",{\"1\":{\"473\":1}}],[\"如果运行的线程少于\",{\"1\":{\"473\":1}}],[\"如果锁已经被其它线程获取\",{\"1\":{\"451\":1}}],[\"如果操作\",{\"1\":{\"427\":1}}],[\"如果我们通过上述规则来分析一个并发程序是否安全\",{\"1\":{\"427\":1}}],[\"如果一个变量没有被\",{\"1\":{\"422\":1}}],[\"如果非要对应起来\",{\"1\":{\"420\":1}}],[\"如果非聚集索引很多\",{\"1\":{\"356\":1}}],[\"如果只包含唯一一个抽象方法\",{\"1\":{\"410\":1}}],[\"如果初始桶为\",{\"1\":{\"405\":1}}],[\"如果队列为空\",{\"1\":{\"394\":1}}],[\"如果队列满了\",{\"1\":{\"394\":1}}],[\"如果对一个变量进行\",{\"1\":{\"422\":1}}],[\"如果对引用的内部成员进行操作\",{\"1\":{\"377\":1}}],[\"如果对长字符串列进行索引\",{\"1\":{\"343\":1}}],[\"如果在线程的外部来观察的话\",{\"1\":{\"426\":1}}],[\"如果在线程内部观察\",{\"1\":{\"426\":1}}],[\"如果在\",{\"1\":{\"376\":2}}],[\"如果在滚动时间窗内发生超过该设定值的执行次数\",{\"1\":{\"143\":1}}],[\"如果发现存在虚引用\",{\"1\":{\"369\":1}}],[\"如果指向的对象只有弱引用\",{\"1\":{\"368\":1}}],[\"如果指定了分组\",{\"1\":{\"190\":1}}],[\"如果要建立聚簇索引\",{\"1\":{\"356\":1}}],[\"如果要使用前后端分离\",{\"1\":{\"300\":1}}],[\"如果子类实现了多个接口\",{\"1\":{\"346\":1}}],[\"如果子类重写了父类中的某些方法\",{\"1\":{\"342\":1}}],[\"如果搜索词超过索引前缀长度\",{\"1\":{\"343\":1}}],[\"如果最后一次读取的字符内容无法填充满缓冲数组\",{\"1\":{\"338\":1}}],[\"如果创建\",{\"1\":{\"338\":1}}],[\"如果有事件发生就获取事件进行处理\",{\"1\":{\"537\":1}}],[\"如果有客户端连接\",{\"1\":{\"536\":1}}],[\"如果有必要\",{\"1\":{\"478\":1}}],[\"如果有变更\",{\"1\":{\"328\":1}}],[\"如果有1\",{\"1\":{\"289\":1}}],[\"如果调用了一个不被支持的方法\",{\"1\":{\"533\":1}}],[\"如果调用失败\",{\"1\":{\"328\":1}}],[\"如果调用的是static方法\",{\"1\":{\"279\":1}}],[\"如果配置了\",{\"1\":{\"507\":1}}],[\"如果配置中心需要做校验\",{\"1\":{\"292\":2}}],[\"如果配置为\",{\"1\":{\"288\":1}}],[\"如果启用\",{\"1\":{\"291\":1,\"294\":1,\"296\":1}}],[\"如果为\",{\"1\":{\"462\":2}}],[\"如果为callback\",{\"1\":{\"297\":1}}],[\"如果为泛化接口\",{\"1\":{\"291\":1,\"294\":1}}],[\"如果为protocol=\",{\"1\":{\"290\":1}}],[\"如果为true\",{\"1\":{\"289\":1,\"293\":1,\"409\":1}}],[\"如果使用了无界的任务队列\",{\"1\":{\"473\":1}}],[\"如果使用了\",{\"1\":{\"317\":1}}],[\"如果使用了阿里巴巴\",{\"1\":{\"317\":1}}],[\"如果使用点对点调用\",{\"1\":{\"289\":1}}],[\"如果使用下面的配置方式配置\",{\"1\":{\"187\":1}}],[\"如果没有配置port\",{\"1\":{\"288\":1}}],[\"如果id不填\",{\"1\":{\"288\":1}}],[\"如果设置的\",{\"1\":{\"473\":1}}],[\"如果设置为true\",{\"1\":{\"296\":1}}],[\"如果设置为false\",{\"1\":{\"143\":1,\"296\":1}}],[\"如果设为true\",{\"1\":{\"289\":1,\"293\":1}}],[\"如果设为false\",{\"1\":{\"287\":3,\"289\":1,\"293\":1}}],[\"如果注册中心不需要验证可不填\",{\"1\":{\"287\":2}}],[\"如果地址没有端口缺省为9090\",{\"1\":{\"287\":1}}],[\"如果级别一样\",{\"1\":{\"283\":1}}],[\"如果方法利用此注释类型进行注解但没有重写超类方法\",{\"1\":{\"267\":1}}],[\"如果方法中有参数且不使用\",{\"1\":{\"164\":1}}],[\"如果不是连接事件则由\",{\"1\":{\"572\":1}}],[\"如果不是名字为application需要指定\",{\"1\":{\"76\":1}}],[\"如果不使用原子引用\",{\"1\":{\"388\":1}}],[\"如果不想将该服务注册到任何registry\",{\"1\":{\"289\":1,\"293\":1,\"294\":1}}],[\"如果不显示指定分组\",{\"1\":{\"190\":1}}],[\"如果本地没有消息队列\",{\"1\":{\"187\":1}}],[\"如果是建立连接请求\",{\"1\":{\"572\":1}}],[\"如果是forkjoinworkerthread运行过程中fork\",{\"1\":{\"409\":1}}],[\"如果是\",{\"1\":{\"164\":1,\"558\":1}}],[\"如果成功就设置为\",{\"1\":{\"143\":1}}],[\"如果低然失败就将断路器继续设置为\",{\"1\":{\"143\":1}}],[\"如果错误请求数的百分比超过50\",{\"1\":{\"143\":1}}],[\"如果滚动时间窗\",{\"1\":{\"143\":1}}],[\"如果请求头中含有\",{\"1\":{\"131\":1}}],[\"如果\",{\"1\":{\"129\":1,\"347\":3,\"389\":1,\"405\":1,\"420\":1,\"507\":1,\"587\":1}}],[\"如果表达式的值为\",{\"1\":{\"67\":1}}],[\"如果当前会话关闭了\",{\"1\":{\"489\":1}}],[\"如果当前\",{\"1\":{\"56\":5}}],[\"如果引用的文件和被引用的文件有相同的部分\",{\"1\":{\"19\":1}}],[\"如果同一个项目有多个\",{\"1\":{\"19\":1}}],[\"如\",{\"1\":{\"17\":1,\"286\":2,\"287\":1,\"289\":2,\"291\":1,\"292\":1,\"293\":2,\"294\":1,\"427\":1,\"473\":1,\"521\":1,\"622\":1}}],[\"或映射器所共享使用\",{\"1\":{\"608\":1}}],[\"或一个预先配置的\",{\"1\":{\"508\":1}}],[\"或应用服务器这类容器中使用\",{\"1\":{\"496\":1}}],[\"或为其他第三方缓存方案创建适配器\",{\"1\":{\"490\":1}}],[\"或是完成并回滚\",{\"1\":{\"487\":1}}],[\"或其子类并重写\",{\"1\":{\"409\":1}}],[\"或回调onreturn等方法\",{\"1\":{\"296\":1}}],[\"或在configuration中注入bean\",{\"1\":{\"233\":1}}],[\"或的关系\",{\"1\":{\"56\":1}}],[\"或\",{\"1\":{\"36\":1,\"296\":1,\"422\":1,\"487\":1,\"499\":1,\"608\":1,\"617\":1}}],[\"或者在mapper接口的实现类中进行sqlsession的配置\",{\"1\":{\"610\":1}}],[\"或者使用方法\",{\"1\":{\"587\":1}}],[\"或者使用占位符和\",{\"1\":{\"164\":1}}],[\"或者面向块编程的\",{\"1\":{\"537\":1}}],[\"或者连接子句中指定的列\",{\"1\":{\"343\":1}}],[\"或者运行期\",{\"1\":{\"274\":1}}],[\"或者其他问题\",{\"1\":{\"252\":1}}],[\"或者文件格式不是\",{\"1\":{\"218\":1}}],[\"或者对象实例\",{\"1\":{\"184\":1}}],[\"或者参考\",{\"1\":{\"143\":1}}],[\"或者\",{\"1\":{\"67\":1,\"464\":1,\"507\":1,\"549\":1}}],[\"或者注解在内部类上\",{\"1\":{\"17\":1}}],[\"或者直接指向了配置文件而没有配置类\",{\"1\":{\"17\":1}}],[\"或主启动类上\",{\"1\":{\"14\":1}}],[\"cglib\",{\"1\":{\"617\":1,\"631\":1}}],[\"c命名空间注入\",{\"1\":{\"594\":1}}],[\"ctx==>\",{\"1\":{\"521\":1,\"522\":1,\"560\":1,\"575\":1}}],[\"ctx\",{\"1\":{\"521\":8,\"522\":10,\"525\":17,\"527\":1,\"528\":3,\"532\":4,\"533\":1,\"558\":11,\"560\":4,\"561\":5,\"563\":2,\"566\":5,\"567\":7,\"575\":8,\"576\":12}}],[\"cyclicbarrier\",{\"0\":{\"477\":1},\"1\":{\"476\":1,\"477\":4}}],[\"c++实现\",{\"1\":{\"399\":1}}],[\"c++编写\",{\"1\":{\"271\":1}}],[\"c=\",{\"1\":{\"594\":1}}],[\"c==d\",{\"1\":{\"389\":1}}],[\"c=1000\",{\"1\":{\"389\":1}}],[\"cmd\",{\"1\":{\"299\":1}}],[\"cfg\",{\"1\":{\"299\":1}}],[\"cpu\",{\"1\":{\"293\":1,\"473\":1,\"539\":5,\"552\":1,\"572\":1}}],[\"cpu个数+1\",{\"1\":{\"288\":1}}],[\"c3p0\",{\"1\":{\"258\":2}}],[\"c3p0数据源依赖\",{\"1\":{\"251\":1}}],[\"c\",{\"1\":{\"208\":1,\"363\":4,\"389\":1,\"427\":2,\"439\":4,\"440\":2,\"441\":2,\"443\":2,\"444\":2,\"515\":9,\"537\":2,\"594\":4}}],[\"center\",{\"0\":{\"292\":1},\"1\":{\"172\":1}}],[\"circuitbreaker=true\",{\"1\":{\"140\":1}}],[\"circuitbreaker\",{\"1\":{\"140\":1,\"143\":7,\"145\":1,\"147\":4}}],[\"curator<\",{\"1\":{\"317\":2}}],[\"curator\",{\"1\":{\"317\":6}}],[\"currenttimemillis\",{\"1\":{\"540\":4,\"541\":4}}],[\"currentthread\",{\"1\":{\"386\":1,\"396\":2,\"445\":4,\"448\":2,\"450\":4,\"451\":1,\"453\":1,\"454\":1,\"456\":4,\"466\":2,\"470\":3,\"472\":1,\"473\":1,\"474\":1,\"476\":1,\"477\":1,\"478\":2,\"536\":2,\"558\":1}}],[\"currentindex++\",{\"1\":{\"173\":1}}],[\"currentindex\",{\"1\":{\"173\":4}}],[\"current\",{\"1\":{\"67\":1}}],[\"customizeresourcehandlerregistration\",{\"1\":{\"69\":2}}],[\"csrf\",{\"1\":{\"59\":1,\"62\":1}}],[\"css\",{\"1\":{\"31\":1,\"67\":2,\"233\":1}}],[\"clear\",{\"1\":{\"537\":3,\"541\":1}}],[\"clearoutputdirectory>\",{\"1\":{\"521\":1}}],[\"clearcache\",{\"1\":{\"484\":1}}],[\"clean\",{\"1\":{\"181\":1,\"229\":1}}],[\"cluster\",{\"1\":{\"289\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"313\":7}}],[\"clientend\",{\"1\":{\"540\":2,\"541\":2}}],[\"clientstart\",{\"1\":{\"540\":2,\"541\":2}}],[\"clientinitialize\",{\"1\":{\"532\":1}}],[\"clienthandler=new\",{\"1\":{\"558\":1}}],[\"clienthandler\",{\"1\":{\"521\":2,\"522\":1,\"526\":1,\"527\":1,\"532\":1,\"558\":5,\"566\":1,\"567\":1,\"575\":2}}],[\"clienthttpresponse\",{\"1\":{\"204\":5}}],[\"clientconfig\",{\"1\":{\"173\":1}}],[\"client<\",{\"1\":{\"105\":1,\"200\":1}}],[\"client\",{\"0\":{\"76\":1,\"77\":1,\"79\":1,\"104\":1,\"106\":1,\"110\":1,\"111\":1},\"1\":{\"75\":1,\"76\":2,\"77\":2,\"79\":1,\"85\":1,\"87\":1,\"88\":3,\"96\":1,\"102\":1,\"106\":1,\"117\":3,\"119\":1,\"122\":1,\"165\":1,\"187\":1,\"188\":1,\"203\":1,\"288\":1,\"291\":1,\"293\":1,\"379\":1,\"521\":2,\"522\":2,\"526\":4,\"536\":1,\"538\":7,\"558\":1,\"560\":2,\"561\":1,\"563\":1,\"572\":1,\"573\":1,\"574\":1,\"575\":6,\"618\":1}}],[\"closing\",{\"1\":{\"483\":3}}],[\"closefuture\",{\"1\":{\"524\":1,\"526\":1,\"558\":3,\"563\":1,\"575\":2,\"576\":1}}],[\"close=\",{\"1\":{\"507\":2}}],[\"closed\",{\"1\":{\"483\":12}}],[\"close\",{\"1\":{\"39\":3,\"204\":1,\"223\":2,\"226\":2,\"330\":4,\"331\":4,\"332\":3,\"333\":2,\"334\":2,\"335\":1,\"336\":2,\"340\":2,\"379\":2,\"384\":2,\"503\":1,\"506\":1,\"507\":1,\"508\":1,\"510\":3,\"511\":2,\"521\":1,\"522\":1,\"525\":1,\"528\":1,\"532\":1,\"537\":9,\"538\":2,\"540\":3,\"541\":3,\"558\":1,\"575\":1,\"576\":1}}],[\"cloneable\",{\"1\":{\"405\":1}}],[\"cloud<\",{\"1\":{\"74\":1,\"81\":3,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"177\":1,\"180\":2,\"186\":1,\"192\":1,\"200\":2}}],[\"cloud\",{\"1\":{\"73\":1,\"74\":1,\"75\":2,\"76\":1,\"77\":1,\"81\":3,\"83\":2,\"85\":1,\"87\":2,\"88\":1,\"97\":3,\"98\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"123\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"140\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"174\":2,\"177\":1,\"180\":4,\"182\":1,\"186\":1,\"187\":2,\"188\":1,\"189\":1,\"192\":1,\"194\":2,\"196\":1,\"200\":2}}],[\"class为\",{\"1\":{\"610\":3,\"629\":1}}],[\"classname=\",{\"1\":{\"521\":1,\"522\":1}}],[\"classnotfoundexception\",{\"1\":{\"270\":1,\"271\":1}}],[\"classnotfound\",{\"1\":{\"252\":1}}],[\"class对象全局唯一\",{\"1\":{\"441\":1}}],[\"class字节码文件中不包含\",{\"1\":{\"274\":1}}],[\"classloader1\",{\"1\":{\"271\":2}}],[\"classloader\",{\"1\":{\"271\":8}}],[\"classloadertest\",{\"1\":{\"271\":2}}],[\"class<enumdemo>\",{\"1\":{\"448\":1}}],[\"class<fx>\",{\"1\":{\"279\":1}}],[\"class<son>\",{\"1\":{\"277\":1}}],[\"class<a>\",{\"1\":{\"272\":1}}],[\"class<integer>\",{\"1\":{\"270\":1}}],[\"class<user>\",{\"1\":{\"270\":1}}],[\"class<\",{\"1\":{\"232\":3,\"261\":1,\"264\":1,\"270\":2,\"271\":2,\"272\":2,\"279\":1,\"558\":2,\"617\":2}}],[\"class>\",{\"1\":{\"212\":1,\"218\":1,\"256\":2}}],[\"class>org\",{\"1\":{\"212\":1,\"218\":1,\"256\":2}}],[\"class=\",{\"1\":{\"33\":1,\"208\":1,\"213\":4,\"215\":1,\"222\":1,\"230\":1,\"240\":3,\"244\":2,\"248\":1,\"258\":3,\"259\":2,\"260\":4,\"318\":1,\"499\":3,\"582\":7,\"584\":3,\"585\":3,\"587\":3,\"594\":2,\"596\":1,\"597\":4,\"601\":3,\"606\":5,\"607\":4,\"608\":3,\"619\":1,\"629\":1,\"633\":8}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"318\":4,\"322\":5,\"582\":1,\"593\":2,\"597\":1,\"606\":2,\"619\":1}}],[\"classpath\",{\"1\":{\"19\":1,\"20\":1,\"24\":4,\"50\":1,\"66\":2,\"69\":7,\"71\":7,\"258\":2,\"281\":1,\"319\":2,\"323\":2,\"606\":1,\"607\":2,\"633\":1}}],[\"class\",{\"0\":{\"270\":1},\"1\":{\"17\":1,\"19\":1,\"20\":1,\"29\":1,\"30\":1,\"31\":1,\"35\":1,\"38\":1,\"44\":1,\"46\":3,\"47\":1,\"54\":2,\"59\":1,\"62\":1,\"63\":1,\"66\":2,\"67\":1,\"85\":1,\"97\":1,\"98\":1,\"103\":2,\"139\":1,\"144\":1,\"145\":2,\"146\":3,\"172\":3,\"173\":3,\"174\":3,\"181\":2,\"182\":5,\"183\":7,\"184\":3,\"187\":2,\"188\":2,\"194\":3,\"196\":1,\"204\":1,\"205\":1,\"214\":1,\"215\":1,\"229\":1,\"232\":2,\"233\":2,\"234\":1,\"241\":5,\"245\":3,\"254\":4,\"256\":1,\"261\":1,\"262\":1,\"263\":1,\"265\":5,\"270\":4,\"271\":4,\"272\":9,\"274\":1,\"275\":1,\"277\":4,\"278\":2,\"279\":5,\"289\":4,\"291\":3,\"302\":2,\"303\":2,\"315\":1,\"317\":1,\"318\":1,\"319\":6,\"322\":3,\"323\":7,\"326\":1,\"327\":2,\"334\":1,\"354\":1,\"385\":1,\"388\":1,\"389\":1,\"391\":1,\"392\":1,\"393\":4,\"396\":1,\"400\":1,\"405\":1,\"409\":1,\"429\":1,\"430\":2,\"434\":2,\"437\":2,\"438\":1,\"439\":2,\"440\":2,\"441\":2,\"442\":1,\"443\":2,\"444\":2,\"445\":2,\"447\":1,\"448\":9,\"450\":4,\"451\":1,\"453\":1,\"454\":1,\"456\":4,\"460\":3,\"461\":1,\"462\":4,\"464\":1,\"465\":1,\"466\":2,\"467\":1,\"468\":1,\"469\":3,\"470\":2,\"472\":2,\"473\":6,\"474\":2,\"476\":1,\"477\":1,\"478\":1,\"483\":4,\"498\":1,\"499\":1,\"503\":1,\"505\":2,\"506\":1,\"507\":1,\"508\":3,\"510\":1,\"511\":1,\"517\":2,\"518\":2,\"521\":3,\"522\":2,\"524\":2,\"525\":1,\"526\":2,\"527\":1,\"528\":2,\"532\":4,\"533\":1,\"536\":1,\"538\":2,\"540\":2,\"541\":2,\"544\":1,\"558\":12,\"563\":4,\"566\":2,\"567\":5,\"575\":6,\"576\":3,\"578\":1,\"582\":8,\"587\":1,\"593\":3,\"597\":1,\"599\":1,\"602\":8,\"606\":3,\"608\":1,\"609\":4,\"617\":5,\"618\":3,\"619\":1,\"629\":1,\"630\":10}}],[\"crm\",{\"1\":{\"295\":1}}],[\"crossorigin\",{\"1\":{\"241\":1}}],[\"cron\",{\"1\":{\"27\":2}}],[\"crud服务提供者\",{\"1\":{\"106\":1}}],[\"crud\",{\"0\":{\"501\":1},\"1\":{\"106\":1}}],[\"crypto\",{\"1\":{\"62\":2,\"63\":1}}],[\"createtime\",{\"1\":{\"505\":1}}],[\"createdate\",{\"1\":{\"505\":1}}],[\"created\",{\"1\":{\"483\":3}}],[\"createpayment\",{\"1\":{\"144\":1,\"164\":2,\"182\":5,\"183\":3}}],[\"create\",{\"1\":{\"56\":2,\"146\":1,\"172\":1,\"448\":1,\"505\":1}}],[\"createmimemessage\",{\"1\":{\"44\":1}}],[\"createstatement\",{\"1\":{\"39\":1,\"510\":1}}],[\"chunkedwritehandler\",{\"1\":{\"576\":1}}],[\"childoption\",{\"1\":{\"524\":1,\"544\":1,\"575\":1}}],[\"childtype\",{\"1\":{\"522\":2}}],[\"childtype=1\",{\"1\":{\"522\":1}}],[\"child=3\",{\"1\":{\"522\":1}}],[\"child\",{\"1\":{\"522\":10}}],[\"childhandler\",{\"1\":{\"521\":1,\"522\":1,\"524\":1,\"528\":1,\"544\":1,\"558\":1,\"563\":1,\"575\":1,\"576\":1}}],[\"china\",{\"1\":{\"286\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"choose>\",{\"1\":{\"507\":1}}],[\"choose\",{\"1\":{\"172\":1,\"173\":3,\"504\":1,\"507\":1}}],[\"channelduplexhandler\",{\"1\":{\"548\":1}}],[\"channeloutboundhandleradapter\",{\"1\":{\"548\":1}}],[\"channeloutboundhandler\",{\"1\":{\"548\":1}}],[\"channeloption\",{\"0\":{\"551\":1},\"1\":{\"524\":2,\"544\":2,\"575\":2}}],[\"channelhandler\",{\"0\":{\"548\":1},\"1\":{\"548\":2,\"549\":3,\"550\":2}}],[\"channelhandlercontext\",{\"0\":{\"550\":1},\"1\":{\"521\":5,\"522\":5,\"525\":6,\"527\":1,\"528\":1,\"532\":3,\"533\":1,\"549\":2,\"550\":2,\"558\":8,\"560\":1,\"561\":1,\"563\":1,\"566\":3,\"567\":5,\"575\":5,\"576\":5}}],[\"channel=\",{\"1\":{\"538\":1}}],[\"channel=null\",{\"1\":{\"538\":1}}],[\"channel1\",{\"1\":{\"525\":3}}],[\"channel失活时调用\",{\"1\":{\"525\":1}}],[\"channel被激活时调用\",{\"1\":{\"525\":1}}],[\"channels\",{\"1\":{\"525\":6,\"538\":4}}],[\"channelgroup\",{\"1\":{\"525\":1}}],[\"channelfuturelistener\",{\"1\":{\"524\":1,\"526\":1,\"558\":2,\"563\":2}}],[\"channelfuture\",{\"0\":{\"545\":1},\"1\":{\"524\":4,\"526\":5,\"545\":1,\"558\":8,\"563\":5,\"575\":6,\"576\":3}}],[\"channelpipeline\",{\"0\":{\"549\":1},\"1\":{\"521\":1,\"522\":1,\"524\":1,\"526\":1,\"528\":1,\"532\":2,\"548\":1,\"549\":4,\"558\":2,\"563\":1,\"574\":1,\"575\":1,\"576\":1}}],[\"channelactive\",{\"1\":{\"521\":1,\"522\":1,\"525\":1,\"558\":2,\"561\":1,\"566\":1,\"567\":1,\"575\":1,\"576\":2}}],[\"channelread0\",{\"1\":{\"525\":1,\"527\":1,\"563\":1,\"566\":2,\"567\":2,\"576\":1}}],[\"channelreadcomplete\",{\"1\":{\"521\":1,\"522\":1,\"575\":1}}],[\"channelread\",{\"1\":{\"521\":2,\"522\":2,\"558\":2,\"560\":1,\"575\":2}}],[\"channelinboundhandler\",{\"1\":{\"548\":1}}],[\"channelinboundhandleradapter\",{\"1\":{\"521\":2,\"522\":2,\"528\":1,\"548\":1,\"558\":2,\"575\":2}}],[\"channelinactive\",{\"1\":{\"525\":1}}],[\"channelinitializer<socketchannel>\",{\"1\":{\"521\":2,\"522\":1,\"524\":1,\"526\":1,\"528\":1,\"532\":2,\"558\":2,\"563\":1,\"575\":2,\"576\":1}}],[\"channel\",{\"0\":{\"546\":1,\"562\":1},\"1\":{\"521\":3,\"522\":3,\"524\":2,\"525\":10,\"526\":3,\"528\":3,\"532\":1,\"537\":30,\"538\":13,\"541\":7,\"544\":1,\"546\":2,\"547\":4,\"549\":3,\"550\":2,\"558\":6,\"560\":4,\"561\":2,\"562\":1,\"563\":3,\"574\":2,\"575\":7,\"576\":8}}],[\"change\",{\"1\":{\"377\":3}}],[\"chars\",{\"1\":{\"536\":3}}],[\"charset\",{\"1\":{\"66\":1,\"204\":1,\"288\":1,\"293\":1}}],[\"charset=utf\",{\"1\":{\"241\":1,\"563\":1}}],[\"charset=\",{\"1\":{\"36\":1,\"67\":2,\"576\":1}}],[\"char\",{\"1\":{\"331\":2,\"332\":2,\"338\":4,\"361\":1,\"363\":3,\"536\":2}}],[\"characterencodingfilter<\",{\"1\":{\"218\":1,\"256\":1}}],[\"characterencodingfilter\",{\"1\":{\"218\":1,\"232\":6}}],[\"chain\",{\"1\":{\"139\":2,\"181\":2,\"315\":1}}],[\"ch\",{\"1\":{\"129\":1,\"521\":5,\"522\":2,\"524\":2,\"526\":2,\"528\":2,\"532\":4,\"558\":4,\"563\":2,\"575\":4,\"576\":2}}],[\"check\",{\"1\":{\"19\":2,\"55\":1,\"287\":1,\"291\":1,\"292\":1,\"294\":1,\"303\":1,\"326\":1,\"327\":2}}],[\"cn\",{\"1\":{\"35\":1,\"36\":2}}],[\"cat\",{\"1\":{\"584\":2,\"585\":2,\"587\":5}}],[\"catch\",{\"1\":{\"15\":1,\"44\":1,\"55\":2,\"265\":1,\"338\":3,\"339\":2,\"379\":1,\"380\":2,\"382\":2,\"383\":2,\"386\":1,\"393\":2,\"396\":3,\"429\":1,\"434\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":2,\"450\":6,\"451\":2,\"453\":1,\"454\":1,\"456\":1,\"460\":2,\"461\":2,\"462\":2,\"468\":1,\"477\":2,\"478\":1,\"503\":1,\"508\":1,\"524\":1,\"526\":1,\"536\":1,\"538\":7,\"558\":2,\"560\":3,\"563\":1,\"575\":2,\"576\":1,\"632\":1}}],[\"cancel\",{\"1\":{\"538\":1}}],[\"cannot\",{\"1\":{\"448\":1}}],[\"capacity\",{\"1\":{\"405\":5,\"537\":1}}],[\"cas\",{\"0\":{\"397\":1,\"398\":1},\"1\":{\"398\":1}}],[\"case=\",{\"1\":{\"67\":4}}],[\"case\",{\"1\":{\"67\":2,\"528\":3}}],[\"callerrunspolicy\",{\"1\":{\"473\":1}}],[\"call\",{\"1\":{\"393\":3,\"558\":4}}],[\"callable<string>\",{\"1\":{\"393\":2}}],[\"callabledownload\",{\"1\":{\"393\":12}}],[\"callable\",{\"0\":{\"393\":1},\"1\":{\"393\":1,\"558\":3}}],[\"callback\",{\"1\":{\"297\":1}}],[\"callback=\",{\"1\":{\"207\":1}}],[\"calendar\",{\"1\":{\"302\":6,\"303\":3,\"317\":6,\"319\":12,\"322\":3,\"323\":6,\"326\":6,\"327\":3}}],[\"cause\",{\"1\":{\"146\":2,\"521\":1,\"522\":1,\"525\":2,\"532\":1,\"558\":2,\"575\":1,\"576\":2}}],[\"cacheenabled\",{\"1\":{\"488\":1}}],[\"cachenamespaceref\",{\"1\":{\"486\":1}}],[\"cached\",{\"1\":{\"288\":1,\"293\":1}}],[\"cache\",{\"0\":{\"487\":1},\"1\":{\"207\":2,\"291\":1,\"294\":1,\"296\":1,\"389\":1,\"445\":6,\"481\":1,\"486\":1,\"488\":1}}],[\"cachecontrol\",{\"1\":{\"69\":4}}],[\"cacheperiod\",{\"1\":{\"69\":3}}],[\"cache=true\",{\"1\":{\"19\":1}}],[\"card=\",{\"1\":{\"593\":1}}],[\"card\",{\"1\":{\"33\":1,\"593\":7}}],[\"cards\",{\"1\":{\"33\":1}}],[\"cj\",{\"1\":{\"19\":1,\"29\":1,\"31\":1,\"38\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1,\"233\":1,\"483\":10,\"497\":1,\"508\":1,\"510\":1,\"511\":1,\"606\":1,\"609\":1,\"630\":1,\"633\":1}}],[\"copiedbuffer\",{\"1\":{\"521\":1,\"522\":1,\"561\":2,\"563\":1,\"566\":2,\"575\":2}}],[\"copyend\",{\"1\":{\"540\":2,\"541\":2}}],[\"copystart\",{\"1\":{\"540\":2,\"541\":2}}],[\"copy\",{\"1\":{\"539\":1}}],[\"copyonwritearrayset<>\",{\"1\":{\"403\":1}}],[\"copyonwritearrayset<string>\",{\"1\":{\"403\":1}}],[\"copyonwritearrayset\",{\"1\":{\"403\":1}}],[\"copyonwritearraylist<>\",{\"1\":{\"402\":1}}],[\"copyonwritearraylist<string>\",{\"1\":{\"402\":1}}],[\"copyonwritearraylist写入时复制\",{\"1\":{\"402\":1}}],[\"copyurltofile\",{\"1\":{\"393\":2}}],[\"column为sql语句中重命名的属性名\",{\"1\":{\"517\":1}}],[\"column=\",{\"1\":{\"508\":3,\"517\":7,\"518\":6,\"519\":3}}],[\"columns\",{\"1\":{\"483\":5}}],[\"collection>\",{\"1\":{\"518\":2}}],[\"collection标签中的oftype属性为list中的数据类型\",{\"1\":{\"518\":1}}],[\"collection子标签的column属性仍然对应sql语句中的值\",{\"1\":{\"518\":1}}],[\"collection=\",{\"1\":{\"507\":2}}],[\"collections\",{\"1\":{\"402\":2,\"403\":2}}],[\"cookie=chocolate\",{\"1\":{\"129\":1}}],[\"cookie\",{\"0\":{\"129\":1},\"1\":{\"129\":2,\"130\":1}}],[\"count>0\",{\"1\":{\"538\":2}}],[\"countdown\",{\"1\":{\"476\":2}}],[\"countdownlatch\",{\"0\":{\"476\":1},\"1\":{\"476\":5}}],[\"countedcompleter\",{\"1\":{\"408\":1}}],[\"count\",{\"1\":{\"67\":1,\"538\":2}}],[\"corepoolsize\",{\"1\":{\"473\":10}}],[\"core<\",{\"1\":{\"239\":1,\"251\":1}}],[\"coresize\",{\"1\":{\"143\":1}}],[\"core\",{\"0\":{\"621\":1},\"1\":{\"62\":1,\"63\":8,\"233\":2}}],[\"codec\",{\"1\":{\"288\":1,\"293\":1}}],[\"code\",{\"1\":{\"22\":1,\"181\":1,\"414\":2}}],[\"combopooleddatasource\",{\"1\":{\"233\":9,\"258\":1}}],[\"commit\",{\"1\":{\"503\":1,\"512\":1}}],[\"comments\",{\"1\":{\"233\":1}}],[\"common\",{\"1\":{\"474\":1}}],[\"commonsmultipartfile\",{\"1\":{\"223\":3}}],[\"commonsmultipartresolver\",{\"1\":{\"222\":1,\"233\":7}}],[\"commons\",{\"1\":{\"222\":1,\"515\":1}}],[\"commons<\",{\"1\":{\"182\":1,\"183\":1}}],[\"commonresult\",{\"1\":{\"183\":6}}],[\"commonresult<>\",{\"1\":{\"182\":5}}],[\"commonresult<t>\",{\"1\":{\"181\":1}}],[\"commonresult<string>\",{\"1\":{\"164\":1,\"182\":1}}],[\"commonresult<list<payment>>\",{\"1\":{\"164\":1,\"182\":1}}],[\"commonresult<payment>\",{\"1\":{\"164\":1,\"182\":1}}],[\"command\",{\"1\":{\"204\":1}}],[\"commandkey\",{\"1\":{\"143\":1}}],[\"commandproperties\",{\"1\":{\"143\":2,\"144\":1,\"147\":1}}],[\"commaseparatedstringtoauthoritylist\",{\"1\":{\"63\":1}}],[\"compile\",{\"1\":{\"521\":1}}],[\"compiler\",{\"1\":{\"180\":4,\"252\":1,\"286\":1}}],[\"compute\",{\"1\":{\"409\":2}}],[\"comparingint\",{\"1\":{\"417\":1}}],[\"comparator\",{\"1\":{\"417\":1}}],[\"compareandswapint\",{\"1\":{\"399\":1}}],[\"compareandset\",{\"1\":{\"388\":3,\"451\":2}}],[\"compare\",{\"1\":{\"398\":1}}],[\"compactedjava\",{\"1\":{\"288\":1,\"293\":1}}],[\"completablefuture\",{\"1\":{\"386\":2}}],[\"completablefuture=completablefuture\",{\"1\":{\"386\":2}}],[\"completablefuture<integer>\",{\"1\":{\"386\":1}}],[\"completablefuture<void>\",{\"1\":{\"386\":1}}],[\"completablefuture<t>\",{\"1\":{\"385\":1}}],[\"complete\",{\"1\":{\"207\":2}}],[\"compression\",{\"1\":{\"118\":1}}],[\"componentscan\",{\"1\":{\"233\":3,\"303\":1,\"323\":2,\"582\":1,\"602\":3}}],[\"component\",{\"1\":{\"20\":1,\"44\":1,\"63\":2,\"115\":1,\"139\":1,\"145\":1,\"146\":1,\"188\":1,\"204\":1,\"205\":1,\"215\":1,\"259\":1,\"260\":1,\"322\":1,\"578\":3,\"579\":1,\"582\":1}}],[\"com\",{\"1\":{\"19\":1,\"29\":2,\"31\":1,\"38\":1,\"43\":2,\"44\":1,\"47\":1,\"51\":4,\"59\":1,\"62\":1,\"63\":2,\"75\":2,\"83\":2,\"87\":2,\"95\":1,\"97\":2,\"98\":2,\"172\":1,\"174\":3,\"180\":2,\"182\":2,\"183\":2,\"194\":2,\"196\":2,\"217\":1,\"233\":5,\"244\":1,\"258\":1,\"317\":2,\"319\":2,\"462\":1,\"483\":10,\"508\":1,\"510\":1,\"511\":1,\"515\":3,\"593\":1,\"606\":1,\"609\":1,\"630\":1,\"633\":1}}],[\"conversionpattern=\",{\"1\":{\"515\":3}}],[\"conversionpattern\",{\"1\":{\"515\":3}}],[\"converter\",{\"1\":{\"240\":3,\"244\":1,\"248\":1,\"260\":3}}],[\"converters>\",{\"1\":{\"240\":1,\"241\":1,\"244\":2,\"248\":1,\"260\":1}}],[\"converters\",{\"1\":{\"233\":2,\"240\":1,\"248\":1,\"260\":1}}],[\"concurrent\",{\"1\":{\"430\":1,\"536\":3,\"538\":1}}],[\"conf\",{\"1\":{\"299\":1}}],[\"config配置实现事务\",{\"0\":{\"630\":1}}],[\"config文件\",{\"1\":{\"609\":1}}],[\"config2\",{\"1\":{\"602\":2}}],[\"configcenterconfig\",{\"1\":{\"292\":1}}],[\"configlocation\",{\"1\":{\"258\":1,\"606\":1,\"607\":2,\"633\":1}}],[\"config>\",{\"1\":{\"256\":2,\"582\":4,\"633\":2}}],[\"config中的setting属性\",{\"1\":{\"233\":1}}],[\"config服务地址\",{\"1\":{\"85\":1}}],[\"config<\",{\"1\":{\"81\":1,\"256\":1}}],[\"config\",{\"0\":{\"75\":1,\"76\":1,\"77\":1,\"80\":1,\"292\":1},\"1\":{\"24\":12,\"62\":5,\"63\":1,\"75\":7,\"76\":4,\"77\":4,\"79\":1,\"81\":1,\"83\":3,\"84\":1,\"85\":2,\"87\":5,\"88\":4,\"95\":1,\"97\":2,\"119\":1,\"137\":1,\"165\":1,\"172\":1,\"182\":2,\"194\":2,\"215\":1,\"232\":1,\"233\":2,\"256\":1,\"258\":2,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":3,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"300\":1,\"319\":3,\"322\":1,\"323\":1,\"497\":1,\"505\":1,\"508\":3,\"582\":2,\"586\":2,\"587\":1,\"602\":5,\"606\":1,\"607\":2,\"609\":2,\"630\":2,\"633\":2}}],[\"configuration>\",{\"1\":{\"180\":1,\"252\":1,\"508\":1,\"521\":1}}],[\"configuration=myselfrule\",{\"1\":{\"173\":1}}],[\"configuration\",{\"1\":{\"22\":1,\"30\":1,\"46\":1,\"47\":1,\"50\":1,\"54\":1,\"59\":1,\"62\":3,\"172\":1,\"173\":1,\"174\":4,\"233\":9,\"281\":2,\"302\":1,\"303\":1,\"319\":2,\"323\":2,\"492\":1,\"508\":2,\"582\":1,\"602\":4,\"607\":5,\"609\":1,\"629\":1,\"630\":1,\"633\":2}}],[\"configurationproperties\",{\"1\":{\"17\":1,\"22\":1,\"30\":1,\"31\":1,\"66\":1,\"69\":1}}],[\"configureblocking\",{\"1\":{\"537\":3,\"538\":3}}],[\"configuremessageconverters\",{\"1\":{\"233\":1}}],[\"configurer\",{\"1\":{\"233\":2}}],[\"configuredefaultservlethandling\",{\"1\":{\"233\":1}}],[\"configure\",{\"1\":{\"17\":1,\"59\":4,\"62\":4,\"241\":1}}],[\"consistenthash\",{\"0\":{\"310\":1}}],[\"consumer2\",{\"1\":{\"456\":4}}],[\"consumer1\",{\"1\":{\"456\":4}}],[\"consumer<string>\",{\"1\":{\"415\":1}}],[\"consumer<t>\",{\"1\":{\"415\":1}}],[\"consumerconfiguration\",{\"1\":{\"303\":1,\"323\":3}}],[\"consumerconfig\",{\"1\":{\"294\":1}}],[\"consumer的check\",{\"1\":{\"291\":1}}],[\"consumer的connections\",{\"1\":{\"291\":1}}],[\"consumer的generic\",{\"1\":{\"291\":1}}],[\"consumer的async\",{\"1\":{\"291\":1}}],[\"consumer的loadbalance\",{\"1\":{\"291\":1}}],[\"consumer的retries\",{\"1\":{\"291\":1}}],[\"consumer的timeout\",{\"1\":{\"291\":1}}],[\"consumer\",{\"0\":{\"98\":1,\"195\":1,\"294\":1,\"415\":1},\"1\":{\"188\":1,\"189\":1,\"282\":4,\"303\":1,\"322\":1,\"323\":3,\"327\":2,\"328\":1,\"456\":5,\"460\":2}}],[\"consul的端口\",{\"1\":{\"97\":1}}],[\"consul的ip\",{\"1\":{\"97\":1}}],[\"consul\",{\"0\":{\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1},\"1\":{\"95\":1,\"96\":1,\"97\":2,\"98\":2,\"287\":1}}],[\"consoleappender\",{\"1\":{\"515\":1}}],[\"console\",{\"1\":{\"67\":2,\"207\":2,\"208\":1,\"515\":5}}],[\"constructor\",{\"1\":{\"272\":10,\"275\":1,\"279\":2}}],[\"constructor<enumdemo>\",{\"1\":{\"448\":1}}],[\"constructor<\",{\"1\":{\"272\":1,\"279\":2}}],[\"const\",{\"1\":{\"67\":3}}],[\"containing\",{\"1\":{\"261\":1}}],[\"contains\",{\"1\":{\"229\":1,\"234\":1}}],[\"continue\",{\"1\":{\"173\":1,\"537\":1}}],[\"controller+\",{\"1\":{\"241\":1}}],[\"controller包\",{\"1\":{\"215\":1}}],[\"controller\",{\"0\":{\"198\":1,\"210\":1,\"214\":1,\"215\":2},\"1\":{\"66\":1,\"67\":1,\"85\":1,\"164\":1,\"182\":1,\"183\":1,\"187\":1,\"213\":1,\"214\":6,\"215\":3,\"227\":1,\"228\":1,\"233\":1,\"260\":1,\"579\":2}}],[\"context=new\",{\"1\":{\"597\":1,\"602\":1,\"619\":1}}],[\"context=ctx\",{\"1\":{\"558\":1}}],[\"context=\",{\"1\":{\"215\":1,\"322\":1,\"586\":1,\"587\":1,\"633\":1}}],[\"contextpath\",{\"1\":{\"208\":2,\"221\":1,\"225\":1,\"288\":1}}],[\"context\",{\"0\":{\"622\":1},\"1\":{\"62\":2,\"174\":2,\"205\":6,\"215\":4,\"256\":1,\"319\":2,\"322\":4,\"323\":1,\"558\":3,\"577\":1,\"582\":4,\"586\":5,\"587\":4,\"593\":2,\"602\":1,\"606\":2,\"633\":4}}],[\"contextloads\",{\"1\":{\"39\":1,\"40\":1}}],[\"content=\",{\"1\":{\"567\":2}}],[\"content=unpooled\",{\"1\":{\"563\":1}}],[\"content\",{\"1\":{\"19\":2,\"187\":1,\"188\":1,\"189\":1,\"226\":1,\"563\":4,\"567\":14}}],[\"condition\",{\"1\":{\"432\":1,\"461\":2}}],[\"conditions\",{\"1\":{\"63\":2}}],[\"conditionalonmissingbean\",{\"1\":{\"46\":1}}],[\"conditionalonxxx\",{\"1\":{\"17\":1}}],[\"connected\",{\"1\":{\"536\":1}}],[\"connect\",{\"1\":{\"194\":1,\"196\":1,\"203\":1,\"384\":1,\"526\":1,\"537\":1,\"540\":1,\"541\":1,\"544\":1,\"558\":1,\"575\":1}}],[\"connecttimeout\",{\"1\":{\"119\":1,\"165\":1,\"204\":1}}],[\"connector\",{\"1\":{\"49\":1,\"180\":1,\"182\":1,\"183\":1,\"251\":1,\"508\":1,\"604\":1}}],[\"connection=dubug\",{\"1\":{\"515\":1}}],[\"connection=\",{\"1\":{\"510\":1,\"511\":1}}],[\"connectionimpl\",{\"1\":{\"483\":10}}],[\"connections\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"483\":12}}],[\"connection等\",{\"1\":{\"288\":1}}],[\"connection\",{\"1\":{\"39\":4,\"384\":4,\"483\":19,\"510\":2,\"511\":2,\"512\":3,\"536\":2}}],[\"connectionproperties\",{\"1\":{\"31\":1}}],[\"i>=1\",{\"1\":{\"511\":1}}],[\"i=0\",{\"1\":{\"541\":1}}],[\"i=preparedstatement\",{\"1\":{\"511\":1}}],[\"i==200\",{\"1\":{\"467\":1}}],[\"i=1\",{\"1\":{\"464\":1}}],[\"i=start\",{\"1\":{\"409\":1}}],[\"i<end\",{\"1\":{\"409\":1}}],[\"illegalaccessexception\",{\"1\":{\"448\":1}}],[\"illegalargumentexception\",{\"1\":{\"405\":2,\"473\":1}}],[\"illegal\",{\"1\":{\"405\":2}}],[\"iloadbalancer\",{\"1\":{\"172\":1,\"173\":1}}],[\"iuserserviceconsumer\",{\"1\":{\"303\":1,\"315\":1,\"322\":3,\"323\":4,\"327\":1}}],[\"iuserservice\",{\"1\":{\"302\":1,\"303\":2,\"315\":1,\"317\":1,\"318\":1,\"319\":2,\"322\":3,\"323\":4,\"326\":1,\"327\":2}}],[\"itu\",{\"1\":{\"295\":1}}],[\"iterator\",{\"1\":{\"537\":5,\"538\":12}}],[\"iterator<selectionkey>\",{\"1\":{\"537\":1,\"538\":2}}],[\"iterable\",{\"1\":{\"67\":2}}],[\"item=\",{\"1\":{\"507\":2}}],[\"item\",{\"1\":{\"507\":4}}],[\"items=\",{\"1\":{\"208\":1}}],[\"i++\",{\"1\":{\"208\":1,\"335\":1,\"338\":1,\"391\":2,\"392\":2,\"395\":8,\"396\":2,\"400\":1,\"409\":1,\"430\":2,\"445\":2,\"448\":2,\"460\":1,\"461\":2,\"462\":2,\"464\":1,\"467\":2,\"468\":1,\"469\":1,\"470\":1,\"474\":1,\"476\":1,\"477\":1,\"478\":1,\"537\":1,\"541\":1,\"566\":1,\"567\":1}}],[\"i\",{\"0\":{\"569\":1},\"1\":{\"208\":6,\"335\":3,\"338\":3,\"355\":1,\"363\":7,\"391\":4,\"392\":4,\"395\":20,\"396\":5,\"400\":2,\"430\":4,\"445\":8,\"448\":4,\"460\":3,\"461\":5,\"462\":5,\"464\":2,\"467\":4,\"468\":2,\"469\":2,\"470\":2,\"474\":2,\"476\":3,\"477\":4,\"478\":3,\"537\":3,\"539\":1,\"541\":3,\"545\":1,\"546\":1,\"547\":2,\"548\":6,\"552\":2,\"566\":3,\"567\":2,\"570\":1,\"574\":1}}],[\"iclientconfig\",{\"1\":{\"173\":1}}],[\"icon\",{\"1\":{\"33\":1}}],[\"icons\",{\"1\":{\"33\":1}}],[\"ico\",{\"1\":{\"31\":1,\"72\":1,\"563\":1}}],[\"irule\",{\"1\":{\"172\":3,\"173\":1,\"204\":2}}],[\"iping\",{\"1\":{\"172\":1,\"174\":2}}],[\"ipaymentfeignservice\",{\"1\":{\"164\":1,\"169\":1}}],[\"ipaymentservice\",{\"1\":{\"144\":1,\"182\":4}}],[\"ipaddress\",{\"1\":{\"148\":2,\"153\":2}}],[\"ip\",{\"1\":{\"75\":2,\"76\":2,\"77\":2,\"87\":1,\"88\":1,\"93\":1,\"102\":2,\"106\":2,\"122\":2,\"187\":2,\"188\":2,\"203\":1,\"287\":2,\"551\":1}}],[\"ignored\",{\"1\":{\"203\":1}}],[\"ignore\",{\"1\":{\"59\":1}}],[\"ignoreunknownfields\",{\"1\":{\"17\":1}}],[\"ignoring\",{\"1\":{\"59\":1}}],[\"ibatis\",{\"1\":{\"50\":1,\"233\":3,\"483\":3,\"607\":3,\"625\":1,\"633\":2}}],[\"immutable\",{\"1\":{\"587\":1}}],[\"image\",{\"1\":{\"343\":1}}],[\"imageurl\",{\"1\":{\"44\":1}}],[\"imessageprovider\",{\"1\":{\"187\":1}}],[\"impl\",{\"1\":{\"50\":1,\"259\":1,\"302\":1,\"318\":1,\"319\":2}}],[\"implements\",{\"1\":{\"35\":1,\"47\":1,\"63\":1,\"139\":1,\"144\":1,\"145\":1,\"146\":1,\"181\":1,\"182\":1,\"187\":1,\"204\":1,\"214\":1,\"229\":1,\"233\":1,\"234\":1,\"254\":2,\"302\":1,\"303\":1,\"315\":1,\"317\":1,\"319\":2,\"322\":1,\"323\":2,\"326\":1,\"327\":1,\"334\":1,\"392\":1,\"393\":2,\"434\":1,\"453\":1,\"454\":1,\"456\":1,\"464\":1,\"466\":1,\"467\":1,\"469\":2,\"470\":1,\"472\":1,\"473\":5,\"474\":1,\"558\":2,\"582\":2,\"599\":1,\"608\":1,\"618\":2,\"630\":1}}],[\"import\",{\"1\":{\"46\":1,\"62\":19,\"63\":13,\"174\":7,\"536\":8,\"538\":15,\"593\":5,\"602\":4,\"619\":1}}],[\"issuccess\",{\"1\":{\"524\":1,\"526\":1,\"558\":2,\"563\":2}}],[\"islocked\",{\"1\":{\"435\":1}}],[\"isnan\",{\"1\":{\"405\":1}}],[\"isterminating\",{\"1\":{\"388\":1,\"400\":1}}],[\"is\",{\"0\":{\"347\":1},\"1\":{\"347\":2,\"411\":1,\"451\":1,\"464\":1,\"575\":2}}],[\"ispublic\",{\"1\":{\"279\":1}}],[\"isblank\",{\"1\":{\"205\":1}}],[\"iservice<payment>\",{\"1\":{\"182\":1}}],[\"isempty\",{\"1\":{\"35\":1,\"54\":1}}],[\"isreadable\",{\"1\":{\"71\":1,\"537\":1,\"538\":2}}],[\"isuselastmodified\",{\"1\":{\"69\":2}}],[\"isacceptable\",{\"1\":{\"537\":1,\"538\":1}}],[\"isannotationpresent\",{\"1\":{\"265\":1,\"272\":2}}],[\"isalive\",{\"1\":{\"173\":1,\"427\":1}}],[\"isaddmappings\",{\"1\":{\"69\":2}}],[\"isauthenticated\",{\"1\":{\"60\":2}}],[\"isolation\",{\"1\":{\"143\":7,\"144\":1,\"204\":1}}],[\"iso\",{\"1\":{\"20\":1}}],[\"if>\",{\"1\":{\"506\":2,\"507\":8}}],[\"if=\",{\"1\":{\"67\":2}}],[\"if\",{\"0\":{\"506\":1},\"1\":{\"35\":1,\"54\":1,\"63\":1,\"67\":1,\"69\":4,\"139\":1,\"144\":1,\"147\":1,\"173\":7,\"205\":1,\"223\":3,\"229\":1,\"234\":1,\"254\":2,\"265\":2,\"279\":1,\"334\":4,\"405\":3,\"409\":1,\"414\":1,\"434\":1,\"448\":3,\"453\":1,\"454\":1,\"456\":1,\"462\":3,\"467\":1,\"473\":2,\"504\":1,\"511\":1,\"522\":1,\"524\":1,\"525\":1,\"526\":1,\"528\":1,\"532\":1,\"536\":1,\"537\":4,\"538\":7,\"541\":1,\"558\":4,\"563\":4,\"576\":2}}],[\"i18n\",{\"1\":{\"33\":1}}],[\"inbound\",{\"1\":{\"549\":1}}],[\"inetsocketaddress\",{\"1\":{\"537\":9,\"538\":4,\"540\":2,\"541\":2}}],[\"inetaddress\",{\"1\":{\"379\":1,\"380\":1,\"382\":1,\"383\":1}}],[\"insert>\",{\"1\":{\"507\":1}}],[\"insert\",{\"0\":{\"503\":1},\"1\":{\"482\":1,\"487\":1,\"503\":2,\"507\":2,\"511\":1,\"630\":2}}],[\"instantiationexception\",{\"1\":{\"448\":1}}],[\"instanceof\",{\"1\":{\"279\":1,\"528\":1,\"538\":1,\"563\":1}}],[\"instance\",{\"1\":{\"75\":2,\"76\":1,\"77\":1,\"87\":2,\"88\":2,\"102\":1,\"106\":2,\"111\":1,\"122\":2,\"172\":3,\"187\":1,\"188\":1,\"194\":2,\"196\":2,\"203\":2,\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"303\":3,\"318\":1,\"322\":4,\"323\":6,\"327\":3,\"448\":5,\"525\":1,\"558\":3,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"install\",{\"1\":{\"95\":2,\"181\":1,\"300\":1}}],[\"invocationhandler\",{\"1\":{\"617\":4,\"618\":1}}],[\"invocationtargetexception\",{\"1\":{\"448\":1}}],[\"invoke1\",{\"1\":{\"279\":1}}],[\"invoke\",{\"1\":{\"279\":4,\"617\":1,\"618\":2}}],[\"innerclass\",{\"1\":{\"448\":2}}],[\"innodb\",{\"1\":{\"359\":1}}],[\"in\",{\"1\":{\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"330\":2,\"331\":2,\"332\":2,\"340\":2,\"341\":1,\"507\":1,\"526\":1,\"532\":3,\"533\":2,\"537\":1,\"538\":1,\"567\":3}}],[\"inheritedtest\",{\"1\":{\"277\":2}}],[\"inherited\",{\"0\":{\"277\":1},\"1\":{\"262\":1,\"273\":1,\"277\":3}}],[\"indicates\",{\"1\":{\"261\":1}}],[\"index=\",{\"1\":{\"507\":1,\"601\":1,\"606\":1,\"608\":1,\"633\":1}}],[\"index=fileinputstream\",{\"1\":{\"226\":1}}],[\"index=0\",{\"1\":{\"226\":1}}],[\"index\",{\"1\":{\"33\":14,\"36\":1,\"47\":8,\"55\":1,\"59\":2,\"67\":2,\"71\":3,\"173\":1,\"217\":4,\"226\":1,\"297\":1,\"507\":3}}],[\"inputstream=socket\",{\"1\":{\"380\":1}}],[\"inputstreamreader\",{\"1\":{\"332\":4,\"536\":5}}],[\"inputstream\",{\"1\":{\"204\":1,\"223\":3,\"341\":1,\"379\":2,\"380\":2,\"384\":3,\"508\":3,\"536\":4,\"540\":2}}],[\"input\",{\"1\":{\"188\":3,\"189\":1,\"414\":2,\"415\":1}}],[\"initchannel\",{\"1\":{\"521\":2,\"522\":1,\"524\":1,\"526\":1,\"528\":1,\"532\":2,\"558\":2,\"563\":1,\"575\":2,\"576\":1}}],[\"initialize\",{\"1\":{\"563\":1}}],[\"initialized\",{\"1\":{\"483\":3}}],[\"initialcapacity\",{\"1\":{\"405\":6}}],[\"initial\",{\"1\":{\"405\":2}}],[\"initialsize\",{\"1\":{\"31\":1}}],[\"init\",{\"1\":{\"212\":1,\"218\":1,\"254\":1,\"256\":4,\"291\":1,\"294\":1,\"558\":2}}],[\"initwithniwsconfig\",{\"1\":{\"173\":1}}],[\"incr\",{\"1\":{\"400\":2,\"430\":4}}],[\"includes>\",{\"1\":{\"508\":2}}],[\"include>\",{\"1\":{\"508\":4}}],[\"include\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"91\":1,\"151\":1,\"292\":1,\"507\":1}}],[\"incorrectcredentialsexception\",{\"1\":{\"55\":1}}],[\"inmemoryauthentication\",{\"1\":{\"59\":1}}],[\"inline=\",{\"1\":{\"36\":1,\"67\":2}}],[\"intbuffer\",{\"1\":{\"537\":10}}],[\"int32\",{\"1\":{\"521\":1,\"522\":2}}],[\"into\",{\"1\":{\"503\":1,\"507\":1,\"511\":1,\"515\":1,\"630\":1}}],[\"intstream\",{\"1\":{\"417\":1}}],[\"intvalue\",{\"1\":{\"377\":2,\"388\":1,\"451\":1}}],[\"intl\",{\"1\":{\"286\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"295\":1}}],[\"integerpredicate\",{\"1\":{\"414\":2}}],[\"integerpredicate=integer\",{\"1\":{\"414\":1}}],[\"integerdemo\",{\"1\":{\"389\":1}}],[\"integercache\",{\"0\":{\"389\":1},\"1\":{\"389\":1}}],[\"integer=new\",{\"1\":{\"377\":1,\"430\":1}}],[\"integer\",{\"1\":{\"181\":2,\"216\":3,\"270\":1,\"292\":1,\"302\":1,\"315\":2,\"317\":1,\"319\":2,\"326\":1,\"327\":1,\"334\":3,\"363\":1,\"377\":9,\"386\":2,\"389\":7,\"414\":1,\"430\":2,\"453\":1,\"454\":1,\"472\":1,\"473\":1,\"483\":6,\"508\":1,\"517\":1,\"518\":1,\"519\":1,\"558\":6}}],[\"integer>\",{\"1\":{\"20\":1,\"183\":1}}],[\"interceptorregistry\",{\"1\":{\"233\":1}}],[\"interceptor>\",{\"1\":{\"230\":2}}],[\"interceptors>\",{\"1\":{\"230\":2}}],[\"interceptor\",{\"1\":{\"229\":1,\"230\":2,\"233\":4,\"234\":1}}],[\"internalresourceviewresolver\",{\"1\":{\"213\":4,\"215\":2,\"233\":8,\"260\":1}}],[\"interruption\",{\"1\":{\"427\":2}}],[\"interruptedexception\",{\"1\":{\"386\":1,\"393\":2,\"396\":3,\"400\":1,\"429\":1,\"434\":1,\"437\":1,\"438\":1,\"439\":3,\"440\":3,\"441\":3,\"442\":2,\"443\":3,\"444\":3,\"450\":6,\"451\":2,\"453\":2,\"454\":2,\"456\":2,\"460\":2,\"462\":2,\"465\":3,\"467\":1,\"468\":2,\"473\":1,\"476\":1,\"477\":2,\"478\":2,\"524\":1,\"526\":1,\"538\":1,\"558\":2,\"560\":3,\"563\":1,\"575\":2,\"576\":1}}],[\"interrupted\",{\"1\":{\"173\":1,\"427\":1}}],[\"interruptoncancel\",{\"1\":{\"143\":1}}],[\"interruptontimeout\",{\"1\":{\"143\":1}}],[\"intervalinmilliseconds\",{\"1\":{\"143\":1}}],[\"interator\",{\"1\":{\"67\":1}}],[\"interface=\",{\"1\":{\"318\":1,\"322\":1}}],[\"interface\",{\"1\":{\"51\":1,\"115\":1,\"145\":1,\"146\":2,\"164\":1,\"182\":2,\"261\":1,\"262\":1,\"264\":1,\"265\":1,\"272\":5,\"274\":3,\"275\":10,\"277\":1,\"278\":2,\"287\":1,\"289\":1,\"291\":1,\"315\":2,\"346\":1,\"411\":1,\"413\":1,\"414\":1,\"415\":1,\"416\":1,\"508\":1,\"517\":1,\"518\":1,\"558\":1,\"609\":1,\"618\":1,\"630\":1,\"631\":1}}],[\"int\",{\"1\":{\"20\":1,\"22\":1,\"23\":2,\"51\":1,\"115\":1,\"139\":1,\"143\":1,\"144\":2,\"147\":2,\"164\":1,\"173\":3,\"182\":3,\"183\":1,\"184\":1,\"204\":2,\"205\":1,\"216\":3,\"223\":1,\"226\":1,\"262\":1,\"264\":1,\"272\":3,\"279\":1,\"287\":4,\"288\":8,\"289\":6,\"291\":3,\"293\":13,\"294\":4,\"296\":4,\"297\":1,\"330\":1,\"331\":1,\"332\":1,\"334\":2,\"335\":1,\"338\":3,\"361\":2,\"363\":7,\"379\":1,\"380\":2,\"383\":1,\"384\":1,\"386\":1,\"391\":2,\"392\":2,\"395\":8,\"396\":2,\"399\":4,\"400\":2,\"405\":3,\"411\":2,\"430\":5,\"434\":1,\"445\":4,\"448\":3,\"460\":2,\"461\":2,\"462\":2,\"464\":2,\"465\":1,\"467\":2,\"468\":1,\"469\":1,\"470\":4,\"473\":2,\"474\":2,\"476\":1,\"477\":2,\"478\":1,\"483\":1,\"498\":1,\"502\":1,\"505\":1,\"507\":1,\"508\":2,\"511\":1,\"517\":2,\"518\":5,\"524\":2,\"526\":2,\"536\":1,\"537\":1,\"538\":5,\"540\":2,\"541\":4,\"558\":8,\"566\":1,\"567\":2,\"630\":2}}],[\"info=\",{\"1\":{\"593\":1}}],[\"info\",{\"1\":{\"87\":1,\"88\":1,\"106\":1,\"122\":1,\"143\":1,\"144\":2,\"146\":1,\"169\":1,\"182\":8,\"203\":1,\"528\":1,\"593\":7}}],[\"inf\",{\"1\":{\"17\":1,\"66\":1,\"69\":4,\"71\":2,\"213\":1,\"215\":1,\"217\":2,\"229\":1,\"233\":1,\"234\":1,\"252\":1,\"254\":1,\"260\":1}}],[\"idle\",{\"1\":{\"528\":3}}],[\"idlestateevent\",{\"1\":{\"528\":5}}],[\"idlestatehandler\",{\"1\":{\"528\":1}}],[\"idleevent\",{\"1\":{\"528\":1}}],[\"idleevent触发后会传递给管道中下一个handler\",{\"1\":{\"528\":1}}],[\"id与对应的方法同名\",{\"1\":{\"508\":1}}],[\"ids\",{\"1\":{\"507\":2}}],[\"idutils\",{\"1\":{\"505\":1}}],[\"id依然必须为multipartresolver\",{\"1\":{\"233\":1}}],[\"id必须是这个\",{\"1\":{\"222\":1}}],[\"id2\",{\"1\":{\"184\":1}}],[\"idtype\",{\"1\":{\"181\":1}}],[\"idea注意事项\",{\"0\":{\"252\":1}}],[\"idea\",{\"1\":{\"51\":1,\"256\":1}}],[\"idea中可以使用可视化进行多文件同步编辑\",{\"1\":{\"33\":1}}],[\"idea会提示出resource\",{\"1\":{\"33\":1}}],[\"id=31\",{\"1\":{\"630\":1}}],[\"id=2\",{\"1\":{\"483\":1}}],[\"id=1\",{\"1\":{\"483\":5,\"521\":1,\"522\":1}}],[\"id=10\",{\"1\":{\"20\":1}}],[\"id=\",{\"1\":{\"51\":3,\"183\":1,\"208\":1,\"213\":1,\"215\":1,\"222\":1,\"249\":2,\"258\":2,\"259\":1,\"318\":1,\"322\":1,\"483\":11,\"502\":2,\"506\":1,\"507\":11,\"508\":4,\"510\":1,\"517\":6,\"518\":7,\"519\":1,\"576\":1,\"582\":9,\"584\":3,\"585\":3,\"587\":3,\"594\":2,\"596\":1,\"597\":4,\"601\":3,\"606\":5,\"607\":3,\"608\":3,\"619\":1,\"629\":1,\"630\":1,\"633\":9}}],[\"id==>\",{\"1\":{\"39\":1}}],[\"id=9\",{\"1\":{\"20\":1}}],[\"id\",{\"1\":{\"20\":2,\"22\":4,\"23\":1,\"39\":1,\"51\":5,\"75\":1,\"76\":1,\"77\":1,\"87\":1,\"88\":2,\"106\":1,\"115\":1,\"122\":1,\"123\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":2,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":2,\"137\":1,\"144\":3,\"145\":4,\"146\":4,\"147\":2,\"164\":3,\"181\":1,\"182\":7,\"183\":4,\"184\":1,\"203\":1,\"213\":2,\"222\":1,\"249\":3,\"279\":4,\"287\":1,\"288\":1,\"291\":1,\"293\":1,\"315\":1,\"326\":2,\"327\":1,\"334\":2,\"376\":3,\"483\":8,\"498\":1,\"502\":2,\"503\":2,\"505\":1,\"507\":6,\"508\":5,\"510\":1,\"511\":1,\"517\":8,\"518\":10,\"519\":2,\"576\":4,\"584\":1,\"585\":2,\"630\":8}}],[\"io模型\",{\"0\":{\"534\":1}}],[\"io线程池\",{\"1\":{\"293\":1}}],[\"io线程池大小\",{\"1\":{\"288\":1}}],[\"iothreads\",{\"1\":{\"288\":1,\"293\":1}}],[\"ioexception\",{\"1\":{\"59\":3,\"62\":1,\"204\":4,\"217\":2,\"223\":2,\"254\":4,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"338\":2,\"339\":2,\"379\":1,\"380\":2,\"382\":2,\"383\":2,\"384\":1,\"393\":2,\"536\":3,\"538\":11,\"540\":2,\"541\":2}}],[\"ioc\",{\"0\":{\"598\":1,\"599\":1,\"600\":1,\"601\":1},\"1\":{\"35\":1,\"36\":1,\"117\":1,\"587\":1,\"589\":1,\"600\":3,\"620\":1}}],[\"io\",{\"0\":{\"6\":1},\"1\":{\"62\":1,\"338\":2,\"380\":1,\"536\":3,\"538\":2}}],[\"m\",{\"1\":{\"515\":7,\"627\":1}}],[\"mchange\",{\"1\":{\"258\":1}}],[\"mchange<\",{\"1\":{\"251\":1}}],[\"mmap\",{\"1\":{\"539\":3}}],[\"mm\",{\"1\":{\"233\":1,\"241\":2,\"515\":4,\"525\":2}}],[\"mkdir\",{\"1\":{\"223\":2}}],[\"multiple\",{\"1\":{\"521\":1,\"522\":1}}],[\"multipartresolver\",{\"1\":{\"222\":3,\"233\":2}}],[\"multipart\",{\"1\":{\"221\":2,\"222\":2,\"226\":1}}],[\"multicast\",{\"1\":{\"287\":1}}],[\"music\",{\"1\":{\"20\":1,\"22\":1}}],[\"mvn\",{\"1\":{\"300\":2}}],[\"mvnrepository\",{\"1\":{\"180\":2,\"317\":1}}],[\"mvcc\",{\"0\":{\"376\":1},\"1\":{\"375\":1,\"376\":1}}],[\"mvcconversionservice\",{\"1\":{\"71\":2}}],[\"mvc=\",{\"1\":{\"215\":1}}],[\"mvcresourceurlprovider\",{\"1\":{\"71\":2}}],[\"mvcproperties\",{\"1\":{\"69\":1,\"71\":1}}],[\"mvc\",{\"0\":{\"45\":1,\"260\":1,\"627\":1},\"1\":{\"19\":1,\"46\":2,\"69\":1,\"72\":1,\"213\":1,\"215\":4,\"230\":2,\"233\":2,\"240\":2,\"244\":2,\"248\":2,\"260\":2,\"627\":4}}],[\"mock在远程调用后执行\",{\"1\":{\"289\":1,\"291\":1}}],[\"mock后缀\",{\"1\":{\"289\":1,\"293\":1}}],[\"mock\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"monitorconfig\",{\"1\":{\"290\":1}}],[\"monitor\",{\"0\":{\"290\":1},\"1\":{\"300\":1,\"318\":1,\"322\":2,\"326\":1,\"327\":1,\"328\":1,\"427\":1}}],[\"money>l\",{\"1\":{\"265\":1}}],[\"money\",{\"1\":{\"265\":4}}],[\"mono<void>\",{\"1\":{\"139\":1}}],[\"modcount++\",{\"1\":{\"402\":1}}],[\"moduleconfig\",{\"1\":{\"295\":1}}],[\"module\",{\"0\":{\"295\":1}}],[\"modifier\",{\"1\":{\"279\":1}}],[\"modal\",{\"1\":{\"33\":1}}],[\"modals\",{\"1\":{\"33\":1}}],[\"modelandview=new\",{\"1\":{\"214\":1}}],[\"modelandview\",{\"1\":{\"213\":1,\"214\":6,\"215\":7,\"229\":2,\"234\":2}}],[\"model\",{\"1\":{\"55\":4,\"67\":7,\"215\":3,\"216\":3,\"419\":1}}],[\"mode=html5\",{\"1\":{\"19\":1}}],[\"modehandlers\",{\"1\":{\"19\":1}}],[\"msg类型\",{\"1\":{\"563\":1}}],[\"msg=this\",{\"1\":{\"538\":1}}],[\"msg=\",{\"1\":{\"216\":1,\"528\":4,\"567\":1}}],[\"msg\",{\"1\":{\"55\":2,\"67\":5,\"172\":4,\"204\":2,\"214\":1,\"215\":2,\"216\":2,\"217\":1,\"254\":3,\"521\":4,\"522\":4,\"525\":2,\"527\":2,\"532\":3,\"538\":8,\"558\":3,\"560\":2,\"563\":3,\"566\":6,\"567\":8,\"575\":4,\"576\":3}}],[\"mid\",{\"1\":{\"409\":2}}],[\"mid=\",{\"1\":{\"409\":1}}],[\"milliseconds\",{\"1\":{\"474\":1}}],[\"millis\",{\"1\":{\"203\":2}}],[\"microservice\",{\"1\":{\"145\":1,\"146\":1}}],[\"mime\",{\"1\":{\"118\":1}}],[\"mimemessagehelper\",{\"1\":{\"44\":8}}],[\"mimemessage\",{\"1\":{\"44\":4}}],[\"minevictableidletimemillis\",{\"1\":{\"31\":1}}],[\"minidle\",{\"1\":{\"31\":1}}],[\"min\",{\"1\":{\"23\":1,\"67\":1,\"118\":1,\"470\":1}}],[\"memory\",{\"1\":{\"419\":1}}],[\"mediatype\",{\"1\":{\"204\":4}}],[\"metrics\",{\"1\":{\"143\":7}}],[\"methodbeforeadvice\",{\"1\":{\"582\":1}}],[\"method>\",{\"1\":{\"297\":1}}],[\"method作为dubbo\",{\"1\":{\"296\":2}}],[\"methodconfig\",{\"1\":{\"296\":1}}],[\"methodname\",{\"1\":{\"272\":3}}],[\"methodannotation\",{\"1\":{\"272\":5}}],[\"method\",{\"0\":{\"132\":1,\"296\":1},\"1\":{\"132\":1,\"143\":1,\"145\":1,\"146\":1,\"254\":3,\"265\":2,\"272\":3,\"275\":1,\"279\":3,\"346\":2,\"558\":3,\"582\":5,\"618\":4,\"633\":1}}],[\"method=req\",{\"1\":{\"254\":1}}],[\"method=post\",{\"1\":{\"137\":1}}],[\"method=get\",{\"1\":{\"132\":1}}],[\"method=\",{\"1\":{\"67\":1,\"221\":1,\"582\":2}}],[\"metaannotation\",{\"1\":{\"277\":1}}],[\"meta\",{\"1\":{\"17\":1,\"66\":1,\"69\":4,\"71\":2}}],[\"messagingexception\",{\"1\":{\"44\":1}}],[\"messagedecoder\",{\"1\":{\"567\":1}}],[\"messageencoder\",{\"1\":{\"567\":1}}],[\"messagetobyteencoder<message>\",{\"1\":{\"567\":1}}],[\"messagetobyteencoder<long>\",{\"1\":{\"532\":1}}],[\"messagetobyteencoder\",{\"0\":{\"531\":1}}],[\"message<string>\",{\"1\":{\"188\":1}}],[\"messagebuilder\",{\"1\":{\"187\":1}}],[\"messageproviderimpl\",{\"1\":{\"187\":1}}],[\"messagechannel\",{\"1\":{\"187\":1}}],[\"messageconfiguration\",{\"1\":{\"174\":3}}],[\"messagecentercontroller\",{\"1\":{\"172\":1}}],[\"message\",{\"1\":{\"23\":2,\"172\":2,\"174\":1,\"181\":1,\"187\":2,\"188\":1,\"204\":1,\"240\":2,\"241\":1,\"244\":2,\"248\":2,\"260\":2,\"288\":1,\"515\":2,\"521\":1,\"522\":3,\"567\":19,\"576\":2}}],[\"mergesql=true\",{\"1\":{\"31\":1}}],[\"mall\",{\"1\":{\"462\":1}}],[\"male\",{\"1\":{\"334\":1}}],[\"macro\",{\"1\":{\"462\":1}}],[\"matches\",{\"1\":{\"414\":1}}],[\"math\",{\"1\":{\"20\":1,\"22\":1}}],[\"man\",{\"1\":{\"272\":1,\"584\":2,\"585\":2,\"587\":3}}],[\"management\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"91\":1,\"151\":1}}],[\"manager=\",{\"1\":{\"633\":1}}],[\"manager\",{\"1\":{\"67\":1,\"95\":1,\"222\":1}}],[\"mao\",{\"1\":{\"262\":1}}],[\"mainreactor\",{\"1\":{\"573\":1}}],[\"main线程阻塞\",{\"1\":{\"467\":1}}],[\"main===>\",{\"1\":{\"391\":1,\"392\":1}}],[\"main\",{\"1\":{\"103\":1,\"182\":1,\"183\":1,\"194\":1,\"265\":1,\"270\":1,\"271\":1,\"272\":1,\"277\":1,\"318\":2,\"319\":2,\"322\":2,\"323\":2,\"388\":1,\"389\":1,\"391\":1,\"392\":1,\"393\":2,\"396\":1,\"400\":1,\"411\":1,\"429\":1,\"430\":2,\"434\":1,\"437\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"448\":3,\"450\":2,\"451\":1,\"453\":1,\"454\":1,\"456\":1,\"462\":1,\"464\":1,\"465\":1,\"466\":1,\"467\":2,\"468\":1,\"469\":1,\"470\":1,\"472\":1,\"473\":1,\"474\":1,\"476\":1,\"477\":1,\"478\":1,\"508\":2,\"521\":2,\"524\":1,\"526\":1,\"536\":1,\"537\":7,\"538\":2,\"540\":4,\"541\":4,\"558\":2,\"563\":1,\"575\":2,\"576\":1,\"593\":1,\"597\":1,\"599\":1,\"618\":1,\"619\":1}}],[\"mail=org\",{\"1\":{\"515\":1}}],[\"mailserver\",{\"1\":{\"102\":1}}],[\"mailmapper\",{\"1\":{\"44\":7}}],[\"mail\",{\"1\":{\"43\":5,\"515\":8}}],[\"mail<\",{\"1\":{\"42\":1}}],[\"master\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"85\":1,\"88\":1,\"300\":1}}],[\"maven\",{\"1\":{\"69\":1,\"180\":5,\"181\":2,\"252\":1,\"300\":1,\"314\":1,\"317\":1,\"508\":1,\"521\":6}}],[\"maxbackupindex=1\",{\"1\":{\"515\":1}}],[\"maxfilesize=10kb\",{\"1\":{\"515\":1}}],[\"max\",{\"1\":{\"470\":1,\"472\":1,\"473\":1}}],[\"maximumpoolsize\",{\"1\":{\"473\":9}}],[\"maximum\",{\"1\":{\"405\":3}}],[\"maxinmemorysize\",{\"1\":{\"222\":1}}],[\"maxmoney\",{\"1\":{\"265\":3}}],[\"maxuploadsize\",{\"1\":{\"222\":1}}],[\"maxqueuesize\",{\"1\":{\"143\":1}}],[\"maxconcurrentrequests\",{\"1\":{\"143\":2}}],[\"maxpoolpreparedstatementperconnectionsize\",{\"1\":{\"31\":1}}],[\"maxwait\",{\"1\":{\"31\":1}}],[\"maxactive\",{\"1\":{\"31\":1}}],[\"map>\",{\"1\":{\"593\":1}}],[\"maptest3\",{\"1\":{\"593\":1}}],[\"maptest2\",{\"1\":{\"593\":1}}],[\"maptest1\",{\"1\":{\"593\":1}}],[\"map注入\",{\"1\":{\"593\":1}}],[\"mapmode\",{\"1\":{\"537\":1}}],[\"map=new\",{\"1\":{\"506\":1,\"507\":1}}],[\"mapunderscoretocamelcase\",{\"1\":{\"505\":1,\"607\":1}}],[\"map<k\",{\"1\":{\"405\":1}}],[\"map<string\",{\"1\":{\"20\":1,\"279\":1,\"292\":1,\"506\":1,\"593\":3}}],[\"map等\",{\"1\":{\"241\":1}}],[\"mappedbytebuffer\",{\"1\":{\"537\":1}}],[\"mappedbuffer\",{\"1\":{\"537\":1}}],[\"mapperimpl\",{\"1\":{\"630\":1}}],[\"mapperinterface\",{\"1\":{\"606\":2,\"633\":1}}],[\"mapper注入sqlsessiontemplate\",{\"1\":{\"610\":1}}],[\"mapper接口\",{\"1\":{\"609\":1}}],[\"mapper接口的名字\",{\"1\":{\"508\":1}}],[\"mapperfactorybean<>\",{\"1\":{\"609\":1,\"630\":1}}],[\"mapperfactorybean<usermapper>\",{\"1\":{\"609\":2,\"630\":2}}],[\"mapperfactorybean\",{\"1\":{\"606\":3,\"610\":1,\"633\":1}}],[\"mapperlocations\",{\"1\":{\"606\":1,\"607\":2,\"633\":1}}],[\"mapper=new\",{\"1\":{\"241\":2}}],[\"mapper>\",{\"1\":{\"51\":1,\"506\":1,\"508\":1,\"517\":1,\"518\":1}}],[\"mappers>\",{\"1\":{\"499\":4,\"508\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"233\":8,\"258\":1}}],[\"mapperscan\",{\"1\":{\"51\":1}}],[\"mappers\",{\"1\":{\"19\":1,\"492\":1,\"499\":3,\"607\":1}}],[\"mapper\",{\"1\":{\"19\":1,\"50\":2,\"51\":7,\"63\":1,\"182\":1,\"233\":2,\"235\":5,\"241\":17,\"258\":2,\"483\":1,\"484\":1,\"488\":1,\"489\":1,\"503\":2,\"506\":7,\"507\":2,\"508\":8,\"517\":5,\"518\":5,\"606\":8,\"607\":1,\"608\":2,\"633\":5}}],[\"mappingjackson2httpmessageconverter\",{\"1\":{\"233\":7,\"240\":1,\"260\":1}}],[\"mapping\",{\"1\":{\"222\":1,\"230\":1,\"607\":1}}],[\"mapping>\",{\"1\":{\"212\":2,\"218\":2,\"256\":4}}],[\"mappings\",{\"1\":{\"69\":1}}],[\"map\",{\"0\":{\"404\":1},\"1\":{\"67\":2,\"71\":1,\"183\":3,\"184\":3,\"222\":1,\"279\":2,\"370\":4,\"403\":1,\"405\":1,\"417\":1,\"489\":1,\"506\":6,\"507\":10,\"537\":5,\"625\":1}}],[\"maps\",{\"1\":{\"40\":2}}],[\"map的赋值方法\",{\"1\":{\"20\":1}}],[\"myinvocationhandler\",{\"1\":{\"617\":1}}],[\"myinterface1\",{\"1\":{\"411\":1}}],[\"myinterface1=\",{\"1\":{\"411\":1}}],[\"myinterface\",{\"1\":{\"411\":6}}],[\"mypointcut\",{\"1\":{\"582\":2}}],[\"mypriority\",{\"1\":{\"470\":7}}],[\"mycodec\",{\"1\":{\"563\":1}}],[\"myhandler\",{\"1\":{\"524\":1,\"525\":1}}],[\"mydata\",{\"1\":{\"483\":9,\"497\":1,\"506\":1,\"507\":4,\"508\":1,\"510\":1,\"511\":1,\"518\":4,\"606\":1,\"609\":2,\"630\":4,\"633\":1}}],[\"mythread\",{\"1\":{\"474\":10}}],[\"mytest2\",{\"1\":{\"597\":1,\"619\":1}}],[\"mytest\",{\"1\":{\"593\":1}}],[\"mytestannotation\",{\"1\":{\"262\":2,\"272\":5}}],[\"mytestzone\",{\"1\":{\"174\":1}}],[\"myurl\",{\"1\":{\"207\":1}}],[\"myrule\",{\"1\":{\"173\":1}}],[\"myselfrule\",{\"1\":{\"173\":1}}],[\"myselfrules\",{\"1\":{\"173\":1}}],[\"mysql连接驱动依赖\",{\"1\":{\"251\":1}}],[\"mysql\",{\"0\":{\"356\":1,\"357\":1},\"1\":{\"19\":2,\"29\":2,\"31\":2,\"38\":2,\"97\":2,\"98\":2,\"180\":2,\"182\":2,\"183\":2,\"194\":2,\"196\":2,\"233\":2,\"374\":1,\"375\":1,\"483\":10,\"497\":2,\"508\":2,\"510\":2,\"511\":2,\"515\":2,\"606\":2,\"607\":1,\"609\":2,\"630\":2,\"633\":2}}],[\"myfilter\",{\"1\":{\"139\":1}}],[\"mymvc\",{\"1\":{\"47\":1}}],[\"mylocaleresolver\",{\"1\":{\"35\":3}}],[\"my\",{\"1\":{\"20\":1}}],[\"mybatisutil\",{\"1\":{\"508\":2}}],[\"mybatis<\",{\"1\":{\"251\":2,\"508\":1,\"604\":2}}],[\"mybatis相关依赖\",{\"1\":{\"251\":1}}],[\"mybatisplus\",{\"1\":{\"63\":2,\"180\":2}}],[\"mybatis\",{\"0\":{\"10\":1,\"48\":1,\"258\":1,\"481\":1,\"482\":1,\"491\":1,\"492\":1,\"508\":1,\"603\":1},\"1\":{\"19\":3,\"49\":1,\"50\":1,\"51\":3,\"97\":1,\"182\":1,\"194\":1,\"235\":1,\"258\":3,\"481\":2,\"488\":1,\"495\":2,\"497\":1,\"499\":7,\"505\":1,\"506\":3,\"508\":9,\"515\":1,\"517\":3,\"518\":3,\"603\":1,\"605\":1,\"606\":5,\"607\":4,\"608\":4,\"629\":1,\"633\":4}}],[\"a+b\",{\"1\":{\"558\":1}}],[\"aio\",{\"0\":{\"542\":1}}],[\"a1\",{\"1\":{\"515\":3}}],[\"a1=org\",{\"1\":{\"515\":1}}],[\"await\",{\"1\":{\"461\":2,\"476\":3,\"477\":1}}],[\"a==b\",{\"1\":{\"389\":1}}],[\"a=100\",{\"1\":{\"389\":1}}],[\"a=10\",{\"1\":{\"143\":1,\"144\":1,\"386\":1}}],[\"aop=\",{\"1\":{\"582\":2,\"633\":1}}],[\"aop依赖\",{\"1\":{\"251\":1}}],[\"aop\",{\"0\":{\"580\":1,\"581\":1,\"582\":1,\"623\":1,\"629\":1},\"1\":{\"228\":1,\"235\":3,\"577\":1,\"582\":11,\"620\":1,\"623\":4,\"631\":1,\"633\":5}}],[\"aspectj\",{\"1\":{\"582\":1}}],[\"aspectj<\",{\"1\":{\"251\":1}}],[\"aspect>\",{\"1\":{\"582\":1}}],[\"aspect\",{\"1\":{\"582\":2}}],[\"aslongtext\",{\"1\":{\"576\":2}}],[\"asreadonlybuffer\",{\"1\":{\"537\":1}}],[\"asshorttext\",{\"1\":{\"576\":2}}],[\"association>\",{\"1\":{\"517\":1}}],[\"assign的\",{\"1\":{\"422\":1}}],[\"assign\",{\"1\":{\"421\":1,\"422\":3}}],[\"assert\",{\"1\":{\"223\":1,\"582\":1}}],[\"asc\",{\"1\":{\"295\":1}}],[\"astext\",{\"1\":{\"241\":2}}],[\"astext方法会去掉引号\",{\"1\":{\"241\":1}}],[\"as\",{\"1\":{\"233\":1,\"241\":1}}],[\"asyncmode\",{\"1\":{\"409\":1}}],[\"asyncmode为true\",{\"1\":{\"407\":1}}],[\"async设置为true时才生效\",{\"1\":{\"296\":1}}],[\"async\",{\"1\":{\"14\":1,\"15\":1,\"207\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"availableprocessors\",{\"1\":{\"388\":1,\"400\":1,\"409\":1,\"472\":2,\"474\":1,\"536\":2,\"558\":2}}],[\"available\",{\"1\":{\"204\":1}}],[\"absolute\",{\"1\":{\"515\":1}}],[\"abstractpool\",{\"1\":{\"460\":5,\"461\":1}}],[\"abstractmap<k\",{\"1\":{\"405\":1}}],[\"abstract\",{\"1\":{\"345\":2,\"346\":1}}],[\"abstractannotationconfigdispatcherservletinitializer\",{\"1\":{\"232\":2}}],[\"abstractloadbalancerrule\",{\"1\":{\"173\":2}}],[\"abortpolicy\",{\"1\":{\"473\":2,\"474\":1}}],[\"aba\",{\"0\":{\"388\":1}}],[\"abc\",{\"1\":{\"22\":1,\"56\":1}}],[\"america\",{\"1\":{\"126\":1,\"127\":1,\"128\":2}}],[\"amqp<\",{\"1\":{\"74\":1}}],[\"afterthrowing\",{\"1\":{\"582\":1}}],[\"afterreturning\",{\"1\":{\"582\":4}}],[\"afterreturningadvice\",{\"1\":{\"582\":1}}],[\"afterlog\",{\"1\":{\"582\":6}}],[\"afterpropertiesset\",{\"1\":{\"233\":1}}],[\"aftercompletion\",{\"1\":{\"229\":1,\"234\":1}}],[\"after=2017\",{\"1\":{\"126\":1}}],[\"after\",{\"0\":{\"126\":1},\"1\":{\"126\":1,\"127\":1,\"229\":1,\"582\":6}}],[\"around\",{\"1\":{\"582\":5}}],[\"architecture\",{\"1\":{\"286\":1}}],[\"argumentconfig\",{\"1\":{\"297\":1}}],[\"argument\",{\"0\":{\"297\":1},\"1\":{\"413\":2,\"414\":3,\"415\":2}}],[\"arg1\",{\"1\":{\"254\":1}}],[\"arg0\",{\"1\":{\"254\":2}}],[\"arg\",{\"1\":{\"240\":1,\"244\":1,\"248\":1,\"260\":1,\"558\":1,\"601\":3,\"606\":1,\"608\":1,\"619\":1,\"629\":1,\"633\":1}}],[\"args\",{\"1\":{\"103\":2,\"182\":2,\"183\":2,\"194\":2,\"265\":1,\"270\":1,\"271\":1,\"272\":1,\"277\":1,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"388\":1,\"389\":1,\"391\":1,\"392\":1,\"393\":2,\"396\":1,\"400\":1,\"411\":1,\"429\":1,\"430\":2,\"434\":1,\"437\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"448\":3,\"450\":2,\"451\":1,\"453\":1,\"454\":1,\"456\":1,\"462\":1,\"464\":1,\"465\":1,\"466\":1,\"467\":1,\"468\":1,\"469\":1,\"470\":1,\"472\":1,\"473\":1,\"474\":1,\"476\":1,\"477\":1,\"478\":1,\"524\":1,\"526\":1,\"536\":1,\"538\":2,\"540\":2,\"541\":2,\"558\":4,\"563\":1,\"575\":2,\"576\":1,\"582\":3,\"593\":1,\"597\":1,\"599\":1,\"618\":3,\"619\":1}}],[\"artifacts\",{\"1\":{\"252\":1}}],[\"artifactid为jstl\",{\"1\":{\"251\":1}}],[\"artifactid>\",{\"1\":{\"22\":1,\"23\":1,\"42\":1,\"49\":3,\"53\":3,\"58\":3,\"66\":1,\"69\":1,\"74\":1,\"81\":3,\"90\":1,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"177\":1,\"180\":8,\"181\":2,\"182\":9,\"183\":9,\"186\":1,\"192\":1,\"200\":3,\"239\":1,\"243\":1,\"247\":1,\"251\":16,\"252\":1,\"315\":1,\"317\":8,\"325\":6,\"474\":1,\"508\":2,\"521\":2,\"575\":1,\"582\":1,\"604\":4}}],[\"artifact\",{\"1\":{\"180\":2,\"317\":1}}],[\"array>\",{\"1\":{\"593\":1}}],[\"arrayblockingqueue\",{\"1\":{\"536\":1}}],[\"arrayblockingqueue<>\",{\"1\":{\"395\":4,\"536\":1,\"558\":1}}],[\"arrayblockingqueue<object>\",{\"1\":{\"395\":4}}],[\"arraylist<student>\",{\"1\":{\"249\":1}}],[\"arraylist<>\",{\"1\":{\"241\":1,\"249\":1,\"402\":1,\"507\":1}}],[\"arrays\",{\"1\":{\"71\":1,\"567\":1,\"593\":1}}],[\"array\",{\"1\":{\"67\":1,\"537\":2,\"538\":2,\"593\":1}}],[\"aa\",{\"1\":{\"67\":1}}],[\"annopointcut\",{\"1\":{\"582\":1}}],[\"annotation9\",{\"1\":{\"275\":1}}],[\"annotation8\",{\"1\":{\"275\":1}}],[\"annotation7\",{\"1\":{\"275\":1}}],[\"annotation6\",{\"1\":{\"275\":1}}],[\"annotation5\",{\"1\":{\"275\":1}}],[\"annotation4\",{\"1\":{\"275\":1}}],[\"annotation3\",{\"1\":{\"274\":1}}],[\"annotation2\",{\"1\":{\"274\":1}}],[\"annotation13\",{\"1\":{\"275\":1}}],[\"annotation12\",{\"1\":{\"275\":1}}],[\"annotation11\",{\"1\":{\"275\":1}}],[\"annotation10\",{\"1\":{\"275\":1}}],[\"annotation1\",{\"1\":{\"274\":1}}],[\"annotationparser\",{\"1\":{\"272\":1}}],[\"annotationpresent\",{\"1\":{\"265\":2}}],[\"annotations\",{\"1\":{\"272\":2,\"277\":2}}],[\"annotationdata\",{\"1\":{\"272\":2}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"319\":4,\"323\":4,\"582\":1,\"602\":1,\"609\":4,\"630\":4}}],[\"annotationconfigwebapplicationcontext<\",{\"1\":{\"256\":1}}],[\"annotationclass\",{\"1\":{\"272\":5}}],[\"annotationtype\",{\"1\":{\"264\":1}}],[\"annotation接口源码\",{\"1\":{\"264\":1}}],[\"annotation>\",{\"1\":{\"261\":1,\"264\":1,\"272\":2}}],[\"annotation\",{\"1\":{\"62\":7,\"63\":1,\"174\":2,\"215\":3,\"240\":2,\"244\":2,\"248\":2,\"258\":1,\"260\":2,\"261\":5,\"264\":3,\"265\":2,\"272\":7,\"275\":1,\"277\":4,\"319\":3,\"322\":1,\"323\":1,\"586\":2,\"587\":1,\"633\":1}}],[\"aninterface\",{\"1\":{\"279\":2}}],[\"anotherhost\",{\"1\":{\"131\":1}}],[\"anon\",{\"1\":{\"54\":1}}],[\"and\",{\"1\":{\"59\":2,\"67\":1,\"398\":1,\"506\":2,\"507\":5,\"518\":1}}],[\"anyrequest\",{\"1\":{\"59\":1}}],[\"antmatchers\",{\"1\":{\"59\":5,\"62\":3}}],[\"attributes>\",{\"1\":{\"633\":2}}],[\"attachment\",{\"1\":{\"226\":1,\"537\":1}}],[\"atomic\",{\"1\":{\"430\":1}}],[\"atomicdemo\",{\"1\":{\"400\":1}}],[\"atomicinteger\",{\"1\":{\"399\":1,\"400\":2,\"430\":2}}],[\"atomicstampedreference\",{\"1\":{\"388\":4}}],[\"atomicstampedreference<>\",{\"1\":{\"388\":1,\"451\":1}}],[\"atomicstampedreference<integer>\",{\"1\":{\"388\":1,\"451\":1}}],[\"atomicstampedreference=new\",{\"1\":{\"388\":1}}],[\"atomicreferencedemo\",{\"1\":{\"388\":1}}],[\"at\",{\"1\":{\"56\":1}}],[\"authtest\",{\"1\":{\"64\":3}}],[\"author=\",{\"1\":{\"506\":1,\"507\":2}}],[\"authormapper\",{\"1\":{\"499\":3}}],[\"author\",{\"1\":{\"62\":1,\"63\":1,\"265\":2,\"272\":5,\"274\":3,\"278\":2,\"505\":1,\"506\":3,\"507\":8,\"536\":1,\"538\":2,\"593\":3}}],[\"authorityutils\",{\"1\":{\"63\":2}}],[\"authority\",{\"1\":{\"63\":1}}],[\"authorities\",{\"1\":{\"60\":2}}],[\"authorize=\",{\"1\":{\"60\":2}}],[\"authorizerequests\",{\"1\":{\"59\":1,\"62\":1}}],[\"authorizationinfo\",{\"1\":{\"54\":1}}],[\"authorizingrealm\",{\"1\":{\"54\":1}}],[\"auth\",{\"1\":{\"59\":2,\"62\":2}}],[\"authenticated>\",{\"1\":{\"56\":2}}],[\"authenticated\",{\"1\":{\"56\":1,\"59\":1}}],[\"authentication=\",{\"1\":{\"60\":2}}],[\"authenticationmanagerbuilder\",{\"1\":{\"59\":1,\"62\":2}}],[\"authenticationfailurehandler\",{\"1\":{\"59\":1}}],[\"authentication\",{\"1\":{\"59\":4,\"62\":5}}],[\"authenticationsuccesshandler\",{\"1\":{\"59\":1,\"62\":1}}],[\"authenticationinfo\",{\"1\":{\"54\":1}}],[\"authenticationexception\",{\"1\":{\"54\":2,\"59\":1}}],[\"authenticationtoken\",{\"1\":{\"54\":4}}],[\"authc\",{\"1\":{\"54\":1}}],[\"autowiring\",{\"1\":{\"587\":1}}],[\"autowire=\",{\"1\":{\"584\":1,\"585\":1}}],[\"autowired具有如下用法\",{\"1\":{\"587\":1}}],[\"autowired注入会报错\",{\"1\":{\"44\":1}}],[\"autowired\",{\"0\":{\"587\":1,\"589\":1},\"1\":{\"39\":1,\"40\":1,\"44\":2,\"54\":1,\"62\":3,\"63\":3,\"172\":1,\"182\":1,\"183\":1,\"187\":1,\"259\":1,\"322\":1,\"327\":1,\"578\":1,\"587\":8,\"589\":1}}],[\"autoproxy\",{\"1\":{\"582\":1}}],[\"autocommit\",{\"1\":{\"483\":6}}],[\"autoconfigure\",{\"1\":{\"17\":1,\"66\":2}}],[\"auto\",{\"1\":{\"17\":1,\"181\":1}}],[\"apollo暂未启用\",{\"1\":{\"292\":2}}],[\"apollo\",{\"1\":{\"292\":3}}],[\"api<\",{\"1\":{\"251\":3,\"317\":2,\"325\":1}}],[\"api已迁移到javax\",{\"1\":{\"251\":1}}],[\"api3\",{\"1\":{\"223\":1}}],[\"api\",{\"0\":{\"317\":1},\"1\":{\"116\":1,\"172\":2,\"251\":2,\"281\":1,\"486\":1}}],[\"apper\",{\"1\":{\"508\":1}}],[\"append=true\",{\"1\":{\"515\":1}}],[\"appender\",{\"1\":{\"515\":45}}],[\"append\",{\"1\":{\"416\":4,\"515\":2}}],[\"appletcontainercallback\",{\"1\":{\"593\":1}}],[\"apply\",{\"1\":{\"413\":2}}],[\"applies\",{\"1\":{\"413\":1}}],[\"applicationconfig\",{\"1\":{\"286\":1,\"302\":11,\"303\":11}}],[\"applicationcontext\",{\"1\":{\"71\":4,\"582\":2,\"593\":4,\"597\":1,\"602\":1,\"619\":2}}],[\"application\",{\"0\":{\"286\":1},\"1\":{\"19\":6,\"20\":2,\"24\":4,\"69\":1,\"75\":1,\"76\":1,\"77\":1,\"83\":1,\"84\":2,\"85\":4,\"87\":1,\"88\":2,\"97\":1,\"98\":1,\"111\":1,\"118\":2,\"122\":1,\"123\":1,\"137\":1,\"178\":1,\"182\":1,\"183\":1,\"187\":2,\"188\":2,\"189\":2,\"194\":1,\"196\":1,\"198\":1,\"203\":1,\"204\":1,\"241\":1,\"281\":1,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"326\":2,\"327\":2}}],[\"app>\",{\"1\":{\"212\":1,\"256\":1}}],[\"appname\",{\"1\":{\"111\":1,\"122\":1}}],[\"app\",{\"1\":{\"87\":1,\"88\":1,\"106\":1,\"122\":1,\"203\":1,\"212\":2,\"256\":2}}],[\"apache=dubug\",{\"1\":{\"515\":1}}],[\"apache为我们提供了一个集成依赖\",{\"1\":{\"317\":1}}],[\"apache的httpclient\",{\"1\":{\"117\":1}}],[\"apache\",{\"1\":{\"50\":1,\"53\":1,\"233\":3,\"252\":1,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"301\":1,\"317\":9,\"318\":3,\"319\":1,\"322\":3,\"323\":1,\"325\":2,\"483\":3,\"515\":15,\"607\":3,\"633\":2}}],[\"advice>\",{\"1\":{\"633\":1}}],[\"advice\",{\"1\":{\"582\":2,\"633\":2}}],[\"advisor\",{\"1\":{\"582\":2,\"633\":1}}],[\"adapter\",{\"1\":{\"222\":1,\"483\":3,\"575\":1}}],[\"addbefore\",{\"1\":{\"563\":1}}],[\"addlistener\",{\"1\":{\"524\":1,\"526\":1,\"558\":2,\"563\":2}}],[\"addlast\",{\"1\":{\"521\":4,\"522\":2,\"524\":3,\"526\":3,\"528\":2,\"532\":6,\"558\":6,\"563\":1,\"575\":2,\"576\":5}}],[\"adduser\",{\"1\":{\"503\":2,\"630\":3}}],[\"addpathpatterns\",{\"1\":{\"233\":1}}],[\"addpathpatterns添加要拦截的请求\",{\"1\":{\"233\":1}}],[\"addinterceptor\",{\"1\":{\"233\":1}}],[\"addinterceptors\",{\"1\":{\"233\":1}}],[\"addobject\",{\"1\":{\"214\":1,\"215\":1}}],[\"adddept\",{\"1\":{\"115\":1}}],[\"address==>\",{\"1\":{\"521\":1,\"522\":1,\"560\":1,\"575\":2}}],[\"address=zookeeper\",{\"1\":{\"319\":1,\"323\":1}}],[\"address=\",{\"1\":{\"290\":1,\"318\":1,\"322\":2,\"593\":2}}],[\"address\",{\"1\":{\"75\":2,\"76\":2,\"77\":2,\"87\":1,\"88\":1,\"102\":2,\"106\":2,\"122\":2,\"187\":2,\"188\":2,\"203\":1,\"287\":1,\"290\":1,\"292\":1,\"326\":1,\"327\":1,\"563\":1,\"593\":18}}],[\"addresources>\",{\"1\":{\"180\":1}}],[\"addresourcelocations\",{\"1\":{\"69\":2}}],[\"addresourcehandler\",{\"1\":{\"69\":2}}],[\"addresourcehandlers\",{\"1\":{\"69\":2}}],[\"addredirectviewcontroller\",{\"1\":{\"47\":1}}],[\"addattribute\",{\"1\":{\"55\":2,\"67\":2,\"215\":1,\"216\":1}}],[\"addattachment\",{\"1\":{\"44\":1}}],[\"add\",{\"1\":{\"54\":3,\"69\":1,\"95\":1,\"115\":1,\"216\":1,\"233\":1,\"241\":6,\"245\":2,\"249\":2,\"254\":1,\"256\":1,\"395\":2,\"402\":2,\"403\":1,\"460\":2,\"461\":2,\"507\":2,\"525\":1,\"532\":1,\"533\":1,\"567\":1,\"582\":2,\"630\":1}}],[\"addstringpermission\",{\"1\":{\"54\":2}}],[\"addstatuscontroller\",{\"1\":{\"47\":1}}],[\"addviewcontroller\",{\"1\":{\"47\":3}}],[\"addviewcontrollers\",{\"1\":{\"47\":2}}],[\"admin\",{\"1\":{\"31\":1,\"56\":2,\"63\":1,\"67\":1,\"230\":1,\"300\":2,\"311\":1}}],[\"a\",{\"0\":{\"347\":3,\"438\":1},\"1\":{\"36\":3,\"51\":1,\"147\":3,\"180\":2,\"208\":1,\"216\":4,\"272\":3,\"289\":1,\"290\":1,\"293\":1,\"294\":1,\"343\":2,\"347\":12,\"363\":9,\"389\":1,\"398\":2,\"411\":4,\"416\":2,\"427\":4,\"437\":3,\"438\":2,\"439\":4,\"440\":4,\"441\":4,\"442\":2,\"443\":4,\"444\":4,\"450\":4,\"451\":1,\"466\":1,\"536\":1,\"558\":4,\"632\":4}}],[\"acquire\",{\"1\":{\"478\":2}}],[\"acid\",{\"0\":{\"373\":1,\"375\":1}}],[\"aclass\",{\"1\":{\"270\":2,\"271\":2,\"272\":5,\"279\":5}}],[\"aclass1\",{\"1\":{\"270\":2,\"271\":2}}],[\"acton\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"actualtypeargument\",{\"1\":{\"279\":2}}],[\"actualtypearguments\",{\"1\":{\"279\":2}}],[\"actuator<\",{\"1\":{\"90\":1,\"182\":1,\"183\":1,\"200\":1}}],[\"actuator\",{\"1\":{\"78\":2,\"79\":1,\"93\":1,\"148\":2,\"153\":1}}],[\"action=\",{\"1\":{\"221\":1}}],[\"activate\",{\"1\":{\"24\":2,\"75\":2}}],[\"activecount\",{\"1\":{\"430\":2,\"451\":1}}],[\"actives\",{\"1\":{\"291\":1,\"293\":1,\"294\":1,\"296\":1}}],[\"active\",{\"1\":{\"24\":3,\"75\":1,\"84\":1,\"558\":1}}],[\"active=logger\",{\"1\":{\"19\":2,\"24\":1}}],[\"account\",{\"1\":{\"62\":1,\"63\":1}}],[\"accesslog\",{\"1\":{\"288\":1,\"289\":1,\"293\":1}}],[\"access\",{\"1\":{\"205\":1}}],[\"accessors\",{\"1\":{\"181\":2,\"315\":1}}],[\"accessdeniedpage\",{\"1\":{\"62\":1}}],[\"acceptor\",{\"1\":{\"573\":1}}],[\"acceptor处理并创建一个\",{\"1\":{\"572\":1}}],[\"acceptoutputstream\",{\"1\":{\"380\":2}}],[\"acceptinputstream\",{\"1\":{\"380\":1}}],[\"accepts\",{\"1\":{\"288\":1,\"293\":1}}],[\"acceptable\",{\"1\":{\"139\":1}}],[\"accept\",{\"1\":{\"36\":2,\"233\":1,\"379\":3,\"380\":4,\"415\":2,\"536\":3,\"537\":10,\"538\":6,\"540\":3,\"541\":2,\"552\":1,\"574\":2}}],[\"acceptheaderlocaleresolver\",{\"1\":{\"36\":4}}],[\"a>\",{\"1\":{\"35\":2,\"208\":1,\"225\":1}}],[\"a><\",{\"1\":{\"33\":14}}],[\"ajaxselect\",{\"1\":{\"207\":1}}],[\"ajax\",{\"0\":{\"35\":1,\"36\":1,\"206\":1,\"207\":1,\"208\":1},\"1\":{\"36\":2,\"207\":1,\"208\":1}}],[\"age=1\",{\"1\":{\"522\":1}}],[\"age=111\",{\"1\":{\"20\":1}}],[\"age=\",{\"1\":{\"334\":1,\"594\":2}}],[\"agent\",{\"1\":{\"96\":1}}],[\"age\",{\"1\":{\"22\":3,\"23\":1,\"67\":9,\"237\":1,\"241\":1,\"262\":2,\"272\":6,\"327\":3,\"334\":9}}],[\"alert\",{\"1\":{\"576\":2}}],[\"alerts\",{\"1\":{\"33\":1}}],[\"alwaystrue\",{\"1\":{\"137\":1}}],[\"album\",{\"1\":{\"62\":1,\"63\":3}}],[\"allocate\",{\"1\":{\"537\":7,\"538\":2,\"541\":1}}],[\"allow\",{\"1\":{\"31\":1,\"151\":1,\"233\":2}}],[\"all\",{\"1\":{\"476\":1,\"477\":1,\"483\":12,\"528\":1}}],[\"all<\",{\"1\":{\"317\":1,\"575\":1}}],[\"alllist\",{\"1\":{\"173\":2}}],[\"allargsconstructor\",{\"1\":{\"20\":1,\"181\":2,\"315\":1,\"508\":1}}],[\"alias\",{\"1\":{\"498\":1,\"619\":1}}],[\"alias=\",{\"1\":{\"498\":1,\"619\":1}}],[\"aliases\",{\"1\":{\"19\":1}}],[\"aliexpress等\",{\"1\":{\"295\":1}}],[\"alibaba<\",{\"1\":{\"180\":1,\"182\":1,\"183\":1,\"243\":1,\"251\":1,\"317\":1}}],[\"alibaba\",{\"1\":{\"29\":1,\"62\":1,\"97\":1,\"98\":1,\"180\":2,\"182\":1,\"183\":1,\"194\":1,\"196\":1,\"244\":1,\"317\":1,\"319\":2}}],[\"aliyun\",{\"1\":{\"19\":1}}],[\"ejb\",{\"1\":{\"496\":1,\"622\":1,\"623\":1}}],[\"ehcache\",{\"1\":{\"490\":1}}],[\"eightlock\",{\"1\":{\"437\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1}}],[\"ev\",{\"1\":{\"576\":2}}],[\"evt\",{\"1\":{\"528\":3}}],[\"eviction\",{\"1\":{\"487\":1}}],[\"eviction=\",{\"1\":{\"487\":1,\"488\":1}}],[\"evaluates\",{\"1\":{\"414\":1}}],[\"eventgroup\",{\"1\":{\"544\":1}}],[\"event\",{\"1\":{\"537\":1}}],[\"eventloopgroup\",{\"0\":{\"552\":1},\"1\":{\"552\":3}}],[\"eventloop\",{\"1\":{\"522\":1,\"552\":8,\"560\":3,\"561\":2}}],[\"eventexecutors\",{\"1\":{\"521\":1,\"526\":3,\"558\":3,\"575\":3}}],[\"even\",{\"1\":{\"67\":1}}],[\"eden\",{\"1\":{\"352\":1}}],[\"edu\",{\"1\":{\"62\":1,\"63\":3}}],[\"err\",{\"1\":{\"341\":1}}],[\"error\",{\"1\":{\"169\":1,\"205\":1,\"207\":1,\"393\":2}}],[\"errorthresholdpercentage\",{\"1\":{\"143\":1,\"147\":1}}],[\"eager\",{\"1\":{\"293\":1}}],[\"each=\",{\"1\":{\"67\":2}}],[\"etcd\",{\"1\":{\"287\":1}}],[\"email\",{\"1\":{\"507\":2}}],[\"em>\",{\"1\":{\"261\":1}}],[\"empty\",{\"1\":{\"233\":1,\"461\":3}}],[\"emp\",{\"1\":{\"67\":1}}],[\"eurekaclient\",{\"0\":{\"107\":1}}],[\"eurekastart\",{\"1\":{\"103\":2}}],[\"eureka详细配置\",{\"1\":{\"99\":1}}],[\"eureka\",{\"0\":{\"82\":1,\"86\":1,\"99\":1,\"100\":1,\"102\":1,\"103\":1,\"104\":1,\"106\":1,\"108\":1,\"109\":1,\"110\":2},\"1\":{\"75\":3,\"76\":3,\"77\":3,\"87\":3,\"88\":3,\"97\":1,\"101\":1,\"102\":3,\"105\":1,\"106\":2,\"109\":1,\"111\":2,\"122\":4,\"164\":1,\"187\":3,\"188\":3,\"192\":1,\"194\":2,\"200\":1,\"203\":3}}],[\"elementdata\",{\"1\":{\"402\":1}}],[\"elementcount++\",{\"1\":{\"402\":1}}],[\"elementcount\",{\"1\":{\"402\":1}}],[\"element\",{\"1\":{\"395\":2}}],[\"elementtype表达作用类型\",{\"1\":{\"275\":1}}],[\"elementtype\",{\"1\":{\"261\":1,\"262\":1,\"265\":1,\"272\":5,\"275\":10,\"277\":1,\"278\":2}}],[\"else\",{\"1\":{\"173\":1,\"254\":2,\"265\":1,\"409\":1,\"434\":1,\"454\":1,\"456\":1,\"462\":1,\"522\":1,\"525\":1,\"538\":2,\"558\":2,\"576\":2}}],[\"el\",{\"1\":{\"67\":1}}],[\"equalsandhashcode\",{\"1\":{\"483\":1}}],[\"equals\",{\"1\":{\"67\":1,\"223\":1,\"254\":2,\"264\":1,\"334\":4,\"389\":3,\"558\":2,\"563\":1}}],[\"eq\",{\"1\":{\"63\":1,\"67\":1,\"144\":1,\"182\":1}}],[\"enumdemoclass\",{\"1\":{\"448\":2}}],[\"enumdemo\",{\"1\":{\"448\":7}}],[\"enum\",{\"1\":{\"448\":2,\"522\":1}}],[\"enumeration\",{\"1\":{\"67\":1}}],[\"ending\",{\"1\":{\"469\":1}}],[\"end\",{\"1\":{\"409\":6}}],[\"endpoints\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"91\":1,\"151\":1}}],[\"ensurecapacityhelper\",{\"1\":{\"402\":1}}],[\"env\",{\"1\":{\"292\":1}}],[\"environment>\",{\"1\":{\"508\":1}}],[\"environments>\",{\"1\":{\"508\":1}}],[\"environments\",{\"1\":{\"492\":1}}],[\"environment中读取配置\",{\"1\":{\"292\":1}}],[\"environment\",{\"1\":{\"187\":2,\"281\":2,\"286\":1,\"326\":1,\"327\":1,\"492\":1}}],[\"enctype=\",{\"1\":{\"221\":1}}],[\"enctype\",{\"1\":{\"221\":1}}],[\"encode\",{\"1\":{\"59\":2,\"63\":1,\"226\":1,\"532\":1,\"567\":1}}],[\"encoding=\",{\"1\":{\"51\":1,\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"318\":1,\"322\":1,\"506\":1,\"508\":2,\"517\":1,\"518\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"encoding=utf\",{\"1\":{\"19\":1,\"218\":1}}],[\"encoding\",{\"1\":{\"20\":2,\"66\":1}}],[\"enter\",{\"1\":{\"450\":4}}],[\"entry\",{\"1\":{\"67\":1,\"370\":1,\"507\":1}}],[\"entity\",{\"1\":{\"19\":1,\"270\":1}}],[\"en\",{\"1\":{\"35\":1,\"36\":3,\"51\":1,\"56\":1,\"60\":1,\"66\":1,\"67\":2,\"506\":1,\"508\":2,\"517\":1,\"518\":1,\"576\":1}}],[\"engine<\",{\"1\":{\"325\":1}}],[\"eng\",{\"1\":{\"20\":1,\"22\":1}}],[\"enabletransactionmanagement\",{\"1\":{\"630\":2}}],[\"enableaspectjautoproxy\",{\"1\":{\"235\":1,\"582\":1}}],[\"enableasync\",{\"1\":{\"14\":2}}],[\"enablezuulproxy\",{\"1\":{\"202\":1}}],[\"enablebinding\",{\"1\":{\"187\":1,\"188\":1}}],[\"enablehystrixdashboard\",{\"1\":{\"152\":1}}],[\"enablehystrix\",{\"1\":{\"143\":1}}],[\"enablecircuitbreaker\",{\"1\":{\"140\":1,\"143\":1}}],[\"enableconfigserver\",{\"1\":{\"83\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"17\":1,\"66\":1}}],[\"enablefeignclients\",{\"1\":{\"116\":1}}],[\"enableeurekaclient\",{\"1\":{\"107\":1}}],[\"enableeurekaserver\",{\"1\":{\"103\":2}}],[\"enableglobalmethodsecurity\",{\"1\":{\"64\":1}}],[\"enablewebsecurity\",{\"1\":{\"59\":1}}],[\"enablewebmvc\",{\"1\":{\"46\":2,\"233\":1,\"235\":1}}],[\"enable\",{\"1\":{\"31\":1,\"102\":1,\"233\":1}}],[\"enabledubbo\",{\"1\":{\"302\":1,\"303\":1,\"319\":4,\"323\":3,\"326\":1,\"327\":1}}],[\"enablediscoveryclient\",{\"1\":{\"97\":1,\"98\":1,\"194\":2}}],[\"enabled\",{\"1\":{\"31\":2,\"72\":1,\"76\":1,\"77\":1,\"88\":1,\"118\":2,\"119\":2,\"123\":1,\"137\":1,\"143\":6,\"145\":1,\"147\":1}}],[\"enabled=true\",{\"1\":{\"19\":1,\"140\":1}}],[\"enablescheduling\",{\"1\":{\"26\":1}}],[\"expression=\",{\"1\":{\"582\":2,\"633\":1}}],[\"exposure\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"91\":1,\"151\":1}}],[\"exe\",{\"1\":{\"521\":2}}],[\"exec\",{\"1\":{\"176\":1}}],[\"executor\",{\"1\":{\"472\":2}}],[\"executorservice\",{\"1\":{\"393\":5,\"407\":1,\"472\":4,\"473\":1,\"474\":1,\"558\":7}}],[\"executors\",{\"0\":{\"472\":1},\"1\":{\"388\":1,\"393\":1,\"400\":1,\"472\":4,\"473\":1}}],[\"executeupdate\",{\"1\":{\"511\":1}}],[\"execute没有返回值\",{\"1\":{\"409\":1}}],[\"executes\",{\"1\":{\"289\":1,\"293\":1,\"296\":1}}],[\"execute\",{\"1\":{\"184\":1,\"388\":1,\"400\":1,\"472\":5,\"473\":1,\"474\":9,\"558\":1,\"560\":3}}],[\"executequery\",{\"1\":{\"39\":1,\"510\":1}}],[\"executions>\",{\"1\":{\"521\":1}}],[\"execution>\",{\"1\":{\"521\":1}}],[\"executionexception\",{\"1\":{\"393\":2,\"473\":1}}],[\"execution\",{\"1\":{\"143\":7,\"144\":1,\"204\":1,\"288\":1,\"582\":8,\"633\":1}}],[\"ex\",{\"1\":{\"229\":1,\"234\":1,\"538\":2}}],[\"exists\",{\"1\":{\"223\":2}}],[\"extrakeys允许你在默认参数外将额外的key放到url中\",{\"1\":{\"287\":1}}],[\"extra\",{\"1\":{\"287\":1}}],[\"extras<\",{\"1\":{\"58\":1}}],[\"extras\",{\"1\":{\"53\":1,\"58\":1,\"60\":1}}],[\"externalized\",{\"1\":{\"281\":1}}],[\"extends\",{\"1\":{\"46\":1,\"54\":1,\"59\":1,\"62\":1,\"144\":1,\"146\":1,\"173\":1,\"182\":3,\"205\":1,\"232\":1,\"254\":4,\"261\":1,\"264\":1,\"270\":1,\"272\":2,\"277\":1,\"346\":1,\"391\":1,\"409\":1,\"460\":3,\"461\":1,\"462\":2,\"521\":2,\"522\":2,\"525\":1,\"527\":1,\"528\":1,\"532\":4,\"533\":1,\"558\":2,\"563\":2,\"566\":2,\"567\":4,\"575\":2,\"576\":1,\"608\":1,\"630\":1}}],[\"exchangedemo\",{\"1\":{\"187\":1,\"188\":1,\"189\":1}}],[\"exchange\",{\"1\":{\"139\":5,\"184\":1}}],[\"exclusion>\",{\"1\":{\"325\":1}}],[\"exclusions>\",{\"1\":{\"325\":1}}],[\"exclusions\",{\"1\":{\"31\":1}}],[\"excludepathpatterns\",{\"1\":{\"233\":1}}],[\"excludepathpatterns添加放行的请求\",{\"1\":{\"233\":1}}],[\"excluded\",{\"1\":{\"19\":1}}],[\"exceptioncaught\",{\"1\":{\"521\":1,\"522\":1,\"525\":1,\"532\":1,\"558\":2,\"575\":1,\"576\":1}}],[\"exceptionally\",{\"1\":{\"386\":1}}],[\"exceptionhandling\",{\"1\":{\"62\":1}}],[\"exception\",{\"1\":{\"15\":1,\"44\":1,\"59\":3,\"62\":3,\"144\":2,\"147\":2,\"214\":1,\"222\":1,\"226\":1,\"229\":4,\"234\":4,\"272\":1,\"379\":1,\"393\":2,\"445\":2,\"450\":2,\"461\":2,\"503\":1,\"508\":1,\"528\":1,\"532\":5,\"533\":1,\"558\":10,\"563\":3,\"566\":3,\"567\":5,\"576\":4,\"606\":1,\"609\":2,\"630\":3}}],[\"example<\",{\"1\":{\"317\":2,\"325\":1}}],[\"example\",{\"1\":{\"19\":1,\"51\":4,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1}}],[\"e\",{\"1\":{\"15\":2,\"44\":2,\"55\":2,\"59\":1,\"204\":1,\"265\":2,\"338\":4,\"339\":4,\"379\":2,\"380\":4,\"382\":4,\"383\":4,\"386\":2,\"393\":2,\"395\":2,\"396\":6,\"402\":3,\"403\":3,\"416\":1,\"429\":2,\"434\":2,\"439\":2,\"440\":2,\"441\":2,\"442\":2,\"443\":2,\"444\":2,\"445\":4,\"450\":12,\"451\":4,\"453\":2,\"454\":2,\"456\":2,\"460\":4,\"461\":4,\"462\":4,\"468\":2,\"477\":4,\"478\":2,\"503\":1,\"508\":2,\"524\":2,\"526\":2,\"536\":2,\"538\":11,\"558\":3,\"560\":6,\"563\":2,\"575\":4,\"576\":2}}],[\"sg\",{\"1\":{\"539\":2}}],[\"smtphost=mail\",{\"1\":{\"515\":1}}],[\"smtpappender\",{\"1\":{\"515\":1}}],[\"s+\",{\"1\":{\"413\":1}}],[\"sync\",{\"1\":{\"524\":2,\"526\":2,\"558\":4,\"563\":2,\"575\":4,\"576\":2}}],[\"synchronizedset\",{\"1\":{\"403\":2}}],[\"synchronizedlist\",{\"1\":{\"402\":2}}],[\"synchronized\",{\"0\":{\"435\":1,\"452\":1,\"460\":1},\"1\":{\"402\":1,\"424\":1,\"425\":2,\"426\":2,\"427\":1,\"432\":1,\"435\":6,\"437\":2,\"438\":3,\"439\":2,\"440\":2,\"441\":2,\"443\":2,\"444\":2,\"448\":1,\"450\":3,\"453\":1,\"454\":1,\"456\":4,\"460\":2,\"462\":2,\"558\":3}}],[\"synchronousqueue<>\",{\"1\":{\"396\":1}}],[\"synchronousqueue<string>\",{\"1\":{\"396\":1}}],[\"synchronousqueuedemo\",{\"1\":{\"396\":1}}],[\"synchronousqueue\",{\"0\":{\"396\":1}}],[\"syntax=\",{\"1\":{\"521\":1,\"522\":1}}],[\"sysdummy1\",{\"1\":{\"507\":1}}],[\"sysibm\",{\"1\":{\"507\":1}}],[\"systemclassloader\",{\"1\":{\"271\":3}}],[\"system\",{\"1\":{\"15\":1,\"39\":3,\"40\":1,\"54\":2,\"55\":2,\"64\":1,\"126\":1,\"139\":2,\"184\":5,\"188\":1,\"215\":1,\"229\":2,\"241\":6,\"245\":8,\"249\":6,\"254\":3,\"265\":1,\"270\":4,\"271\":7,\"272\":6,\"277\":1,\"279\":15,\"281\":2,\"303\":1,\"318\":1,\"319\":1,\"322\":2,\"323\":3,\"333\":3,\"334\":1,\"335\":2,\"336\":2,\"338\":3,\"341\":3,\"377\":2,\"379\":1,\"380\":1,\"382\":1,\"383\":2,\"386\":5,\"388\":4,\"389\":4,\"391\":2,\"392\":2,\"393\":4,\"395\":13,\"396\":3,\"400\":1,\"411\":2,\"413\":1,\"414\":2,\"415\":1,\"416\":1,\"417\":1,\"430\":2,\"434\":1,\"437\":2,\"438\":2,\"439\":3,\"440\":3,\"441\":3,\"443\":3,\"444\":3,\"445\":5,\"448\":3,\"450\":4,\"451\":2,\"453\":1,\"454\":1,\"456\":4,\"460\":4,\"461\":2,\"462\":2,\"464\":1,\"465\":1,\"466\":2,\"467\":2,\"468\":4,\"469\":3,\"470\":2,\"472\":1,\"473\":1,\"474\":1,\"476\":2,\"477\":2,\"478\":2,\"503\":1,\"506\":1,\"507\":1,\"508\":1,\"510\":4,\"515\":1,\"521\":7,\"522\":8,\"524\":1,\"525\":2,\"526\":2,\"527\":1,\"528\":1,\"536\":6,\"537\":11,\"538\":8,\"540\":6,\"541\":6,\"558\":7,\"560\":5,\"561\":1,\"563\":4,\"566\":2,\"567\":4,\"575\":8,\"576\":8,\"582\":12,\"593\":1,\"602\":1,\"606\":1,\"609\":1,\"618\":3}}],[\"swap\",{\"1\":{\"398\":1}}],[\"sw\",{\"1\":{\"226\":1}}],[\"switch=\",{\"1\":{\"67\":1}}],[\"switch\",{\"0\":{\"361\":1},\"1\":{\"67\":3,\"361\":1,\"528\":1}}],[\"shutdownnow\",{\"1\":{\"558\":1}}],[\"shutdowngracefully\",{\"1\":{\"524\":2,\"526\":1,\"558\":3,\"563\":2,\"575\":3,\"576\":2}}],[\"shutdown\",{\"1\":{\"388\":1,\"393\":1,\"400\":1,\"472\":1,\"473\":1,\"474\":1}}],[\"shutdownoutput\",{\"1\":{\"380\":1}}],[\"short\",{\"1\":{\"361\":1,\"363\":4}}],[\"show方法有一个a参数\",{\"1\":{\"272\":1}}],[\"show\",{\"1\":{\"272\":6,\"411\":4,\"465\":2}}],[\"shouldfilter\",{\"1\":{\"205\":1}}],[\"shiro=\",{\"1\":{\"56\":1}}],[\"shirodialect\",{\"1\":{\"54\":3}}],[\"shiroconfig\",{\"1\":{\"54\":2}}],[\"shirofilterfactorybean\",{\"1\":{\"54\":11}}],[\"shiro三大模块\",{\"1\":{\"54\":1}}],[\"shiro<\",{\"1\":{\"53\":2}}],[\"shiro依赖\",{\"1\":{\"53\":1}}],[\"shiro\",{\"0\":{\"52\":1,\"55\":1,\"56\":1},\"1\":{\"56\":10}}],[\"snapshot<\",{\"1\":{\"182\":1,\"183\":1,\"317\":2,\"325\":1}}],[\"sname\",{\"1\":{\"67\":2,\"517\":2,\"518\":2}}],[\"so\",{\"1\":{\"524\":2,\"544\":2,\"551\":2,\"575\":2}}],[\"sorted\",{\"1\":{\"417\":1}}],[\"soft\",{\"1\":{\"367\":1,\"487\":1}}],[\"sofa\",{\"1\":{\"287\":1}}],[\"sonclass\",{\"1\":{\"277\":2}}],[\"son\",{\"1\":{\"277\":2}}],[\"socketchannel=socketchannel\",{\"1\":{\"538\":1}}],[\"socketchannel\",{\"1\":{\"521\":2,\"522\":1,\"524\":1,\"526\":1,\"528\":1,\"532\":2,\"537\":9,\"538\":16,\"541\":8,\"552\":3,\"558\":2,\"563\":1,\"575\":2,\"576\":1}}],[\"socket\",{\"1\":{\"203\":1,\"379\":6,\"380\":6,\"536\":5,\"537\":2,\"538\":1,\"539\":7,\"540\":7,\"541\":1,\"546\":2,\"574\":1,\"576\":7}}],[\"sourceb=new\",{\"1\":{\"456\":1}}],[\"sourceb\",{\"1\":{\"456\":5}}],[\"sourcea=new\",{\"1\":{\"456\":1}}],[\"sourcea\",{\"1\":{\"456\":5}}],[\"source\",{\"1\":{\"187\":1,\"274\":1,\"537\":4,\"558\":4}}],[\"source>\",{\"1\":{\"180\":1,\"252\":1}}],[\"source>8<\",{\"1\":{\"180\":1}}],[\"sourceencoding>\",{\"1\":{\"180\":1}}],[\"sourceencoding>utf\",{\"1\":{\"180\":1}}],[\"somehost\",{\"1\":{\"131\":1}}],[\"sample\",{\"1\":{\"607\":1,\"608\":3}}],[\"sampler\",{\"1\":{\"178\":1}}],[\"salary=3\",{\"1\":{\"521\":1}}],[\"save\",{\"1\":{\"144\":1,\"182\":1}}],[\"skip\",{\"1\":{\"75\":1}}],[\"sid\",{\"1\":{\"517\":1,\"518\":2}}],[\"signal\",{\"1\":{\"461\":2}}],[\"simplified\",{\"1\":{\"287\":1}}],[\"simplechannelinboundhandler<textwebsocketframe>\",{\"1\":{\"576\":1}}],[\"simplechannelinboundhandler<message>\",{\"1\":{\"567\":2}}],[\"simplechannelinboundhandler<bytebuf>\",{\"1\":{\"566\":2}}],[\"simplechannelinboundhandler<httpobject>\",{\"1\":{\"563\":1}}],[\"simplechannelinboundhandler<string>\",{\"1\":{\"525\":1,\"527\":1}}],[\"simplechannelinboundhandler\",{\"1\":{\"521\":1}}],[\"simplecontrollerhandleradapter\",{\"1\":{\"213\":3}}],[\"simpledateformat\",{\"1\":{\"233\":1,\"241\":5,\"525\":2}}],[\"simple\",{\"1\":{\"145\":1,\"146\":1,\"300\":1}}],[\"simpleauthenticationinfo\",{\"1\":{\"54\":1}}],[\"simpleauthorizationinfo\",{\"1\":{\"54\":6}}],[\"since\",{\"1\":{\"536\":1,\"538\":2}}],[\"singleton\",{\"1\":{\"578\":1}}],[\"singlethreadexecutor\",{\"1\":{\"472\":1}}],[\"single\",{\"1\":{\"233\":1}}],[\"sink\",{\"1\":{\"188\":2}}],[\"size=\",{\"1\":{\"487\":1,\"488\":1}}],[\"size\",{\"1\":{\"67\":1,\"118\":1,\"173\":2,\"461\":2,\"487\":1,\"537\":1,\"541\":4}}],[\"sdust\",{\"1\":{\"62\":1,\"63\":3}}],[\"ssm\",{\"0\":{\"231\":1,\"235\":1,\"255\":1}}],[\"ssl\",{\"1\":{\"75\":1}}],[\"ss\",{\"1\":{\"47\":2,\"241\":1,\"515\":2,\"525\":1}}],[\"sql>\",{\"1\":{\"507\":1}}],[\"sqltest\",{\"1\":{\"507\":2}}],[\"sqlsessiondaosupport\",{\"1\":{\"608\":5,\"630\":1}}],[\"sqlsessiontemplate\",{\"1\":{\"606\":3,\"608\":5,\"633\":2}}],[\"sqlsession=mybatisutil\",{\"1\":{\"506\":1,\"507\":1}}],[\"sqlsession\",{\"1\":{\"481\":1,\"483\":1,\"484\":1,\"487\":1,\"503\":8,\"506\":3,\"507\":3,\"508\":6,\"513\":7,\"606\":6,\"608\":5,\"633\":2}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"508\":3,\"513\":2}}],[\"sqlsessionfactorybeanname\",{\"1\":{\"258\":1}}],[\"sqlsessionfactorybean\",{\"0\":{\"607\":1},\"1\":{\"233\":7,\"258\":1,\"606\":2,\"607\":2,\"609\":5,\"610\":1,\"629\":1,\"630\":5,\"633\":1}}],[\"sqlsessionfactory=mybatisutil\",{\"1\":{\"503\":2}}],[\"sqlsessionfactory\",{\"1\":{\"233\":2,\"235\":1,\"258\":2,\"494\":1,\"503\":4,\"508\":7,\"513\":6,\"605\":1,\"606\":7,\"607\":3,\"608\":5,\"609\":2,\"630\":2,\"633\":6}}],[\"sql=insert\",{\"1\":{\"515\":1}}],[\"sql=\",{\"1\":{\"40\":1,\"510\":1,\"511\":1}}],[\"sql\",{\"0\":{\"504\":1},\"1\":{\"39\":1,\"40\":1,\"62\":1,\"375\":1,\"507\":7,\"508\":1,\"510\":4,\"511\":3,\"515\":4,\"607\":1,\"608\":1,\"625\":1}}],[\"sqlexception\",{\"1\":{\"39\":1,\"40\":1}}],[\"scope\",{\"1\":{\"578\":2,\"619\":1}}],[\"scope>\",{\"1\":{\"49\":1,\"180\":3,\"251\":1,\"325\":1}}],[\"sctp\",{\"1\":{\"546\":2}}],[\"school1\",{\"1\":{\"522\":2}}],[\"school\",{\"1\":{\"522\":21}}],[\"schoolpojo\",{\"1\":{\"522\":1}}],[\"schedule\",{\"1\":{\"522\":1,\"561\":2}}],[\"scheduled\",{\"1\":{\"27\":1}}],[\"schema\",{\"1\":{\"213\":3,\"215\":9,\"318\":6,\"322\":9,\"582\":12,\"584\":4,\"585\":4,\"586\":6,\"587\":7,\"594\":9,\"596\":3,\"597\":3,\"633\":12}}],[\"schemalocation=\",{\"1\":{\"212\":1,\"213\":1,\"215\":1,\"256\":1,\"318\":1,\"322\":1,\"582\":2,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"594\":2,\"596\":1,\"597\":1,\"633\":1}}],[\"scanner\",{\"1\":{\"526\":5,\"538\":7}}],[\"scanbasepackages\",{\"1\":{\"302\":1,\"303\":1,\"319\":2,\"323\":2}}],[\"scan\",{\"1\":{\"215\":1,\"259\":1,\"260\":1,\"322\":1,\"578\":1}}],[\"sc\",{\"1\":{\"205\":1}}],[\"script\",{\"1\":{\"67\":1,\"207\":2,\"507\":2}}],[\"script>\",{\"1\":{\"36\":2,\"67\":1,\"507\":1,\"576\":1}}],[\"s\",{\"1\":{\"35\":3,\"44\":2,\"63\":2,\"172\":2,\"241\":3,\"358\":1,\"363\":9,\"413\":1,\"416\":1,\"517\":3,\"518\":4,\"526\":2}}],[\"sun\",{\"1\":{\"593\":1}}],[\"sum\",{\"1\":{\"409\":2,\"417\":1,\"558\":7}}],[\"sum+=i\",{\"1\":{\"409\":1}}],[\"sum=0l\",{\"1\":{\"409\":1}}],[\"survivor\",{\"1\":{\"352\":2}}],[\"supplier<string>\",{\"1\":{\"416\":1}}],[\"supplier<t>\",{\"1\":{\"416\":1}}],[\"supplier\",{\"0\":{\"416\":1}}],[\"supplyasync\",{\"1\":{\"386\":1}}],[\"suppresswarnings\",{\"1\":{\"269\":1}}],[\"suppresswarings\",{\"0\":{\"269\":1}}],[\"support\",{\"1\":{\"244\":1,\"256\":2,\"593\":1}}],[\"super\",{\"1\":{\"59\":1,\"62\":1,\"272\":1,\"576\":1}}],[\"sudo\",{\"1\":{\"95\":3}}],[\"suffixoverrides=\",{\"1\":{\"507\":1}}],[\"suffix\",{\"1\":{\"66\":1,\"213\":1,\"215\":1,\"260\":1}}],[\"suffix=\",{\"1\":{\"19\":1}}],[\"subreactor\",{\"1\":{\"573\":4}}],[\"subscribe\",{\"1\":{\"287\":1}}],[\"submit有返回值\",{\"1\":{\"409\":1}}],[\"submit1\",{\"1\":{\"393\":2}}],[\"submit\",{\"1\":{\"67\":2,\"221\":1,\"393\":4,\"409\":3,\"473\":1,\"536\":1,\"558\":2}}],[\"subject=log4j\",{\"1\":{\"515\":1}}],[\"subject\",{\"1\":{\"54\":2,\"55\":3,\"56\":8}}],[\"subnav\",{\"1\":{\"33\":1}}],[\"success<=0\",{\"1\":{\"558\":1}}],[\"success=0\",{\"1\":{\"558\":1}}],[\"success=1\",{\"1\":{\"558\":1}}],[\"success=\",{\"1\":{\"558\":1}}],[\"successhandler\",{\"1\":{\"59\":1}}],[\"successforwardurl\",{\"1\":{\"59\":1}}],[\"success\",{\"1\":{\"36\":1,\"207\":1,\"279\":1,\"393\":2,\"558\":3}}],[\"sleuth\",{\"0\":{\"175\":1},\"1\":{\"175\":1,\"178\":1}}],[\"sleepwindowinmilliseconds\",{\"1\":{\"143\":1,\"147\":1}}],[\"sleep\",{\"0\":{\"465\":1},\"1\":{\"15\":1,\"386\":1,\"396\":1,\"400\":1,\"429\":1,\"434\":1,\"437\":1,\"438\":1,\"439\":2,\"440\":2,\"441\":2,\"442\":1,\"443\":2,\"444\":2,\"450\":2,\"451\":2,\"453\":1,\"456\":2,\"461\":2,\"465\":4,\"468\":3,\"478\":1,\"538\":1,\"560\":3}}],[\"slf4j\",{\"1\":{\"144\":1,\"182\":1,\"183\":1,\"286\":2,\"515\":1}}],[\"slowsqlmillis=500\",{\"1\":{\"31\":1}}],[\"src=\",{\"1\":{\"36\":1}}],[\"src\",{\"1\":{\"24\":2,\"338\":2,\"380\":2,\"383\":2,\"384\":1,\"393\":4,\"521\":2,\"537\":7,\"540\":2,\"541\":2}}],[\"see\",{\"1\":{\"618\":2}}],[\"seek\",{\"1\":{\"336\":3}}],[\"seq\",{\"1\":{\"507\":2}}],[\"separator=\",{\"1\":{\"507\":2}}],[\"sent\",{\"1\":{\"296\":1}}],[\"send==>\",{\"1\":{\"560\":1,\"575\":1}}],[\"sendfile\",{\"1\":{\"539\":2}}],[\"sendpacket\",{\"1\":{\"383\":4}}],[\"sender\",{\"1\":{\"382\":1,\"383\":1}}],[\"sendredirect\",{\"1\":{\"217\":1}}],[\"send\",{\"1\":{\"44\":2,\"187\":2,\"382\":1,\"383\":1,\"538\":2,\"572\":1,\"573\":1,\"576\":3}}],[\"sendmail\",{\"1\":{\"44\":3}}],[\"session\",{\"1\":{\"229\":2,\"233\":3,\"256\":2,\"287\":1,\"607\":1,\"633\":1}}],[\"serialversionuid\",{\"1\":{\"315\":1,\"334\":1}}],[\"serialization\",{\"1\":{\"288\":1,\"293\":1}}],[\"serializationfeature\",{\"1\":{\"241\":1}}],[\"serializable\",{\"1\":{\"181\":1,\"315\":1,\"334\":1,\"405\":1,\"488\":1}}],[\"serial\",{\"1\":{\"181\":1}}],[\"serviceconsumer\",{\"1\":{\"323\":2}}],[\"serviceconfig\",{\"1\":{\"289\":1}}],[\"service子标签时有效\",{\"1\":{\"296\":2}}],[\"service>\",{\"1\":{\"293\":1,\"296\":1}}],[\"service中通过protocol指定\",{\"1\":{\"288\":1}}],[\"service并在其中的mapper上使用\",{\"1\":{\"259\":1}}],[\"services\",{\"1\":{\"203\":1}}],[\"serviceimpl\",{\"1\":{\"235\":2}}],[\"serviceimpl<paymentmapper\",{\"1\":{\"144\":1,\"182\":1}}],[\"serviceinstance\",{\"1\":{\"172\":1}}],[\"service\",{\"0\":{\"259\":1,\"289\":1},\"1\":{\"75\":1,\"76\":2,\"77\":2,\"87\":1,\"88\":2,\"97\":3,\"98\":3,\"102\":1,\"106\":1,\"109\":1,\"110\":1,\"122\":1,\"137\":2,\"144\":1,\"164\":1,\"169\":1,\"172\":2,\"174\":1,\"178\":1,\"182\":2,\"183\":1,\"187\":1,\"188\":1,\"194\":1,\"196\":1,\"198\":1,\"203\":1,\"233\":1,\"254\":2,\"259\":3,\"287\":1,\"288\":1,\"293\":2,\"302\":2,\"303\":4,\"318\":4,\"319\":5,\"322\":4,\"323\":7,\"326\":2,\"327\":2,\"472\":8,\"558\":2,\"579\":2,\"582\":10,\"597\":1,\"601\":3,\"619\":1}}],[\"servlet等\",{\"1\":{\"288\":1,\"293\":1}}],[\"servlet2\",{\"1\":{\"254\":1}}],[\"servletresponse\",{\"1\":{\"254\":3}}],[\"servletrequest\",{\"1\":{\"254\":3}}],[\"servletregistrationbean<>\",{\"1\":{\"30\":1}}],[\"servletregistrationbean<statviewservlet>\",{\"1\":{\"30\":2}}],[\"servletregistrationbean\",{\"1\":{\"30\":3}}],[\"servletconfig\",{\"1\":{\"254\":2}}],[\"servletdemo1\",{\"1\":{\"254\":2}}],[\"servlet的生命周期\",{\"1\":{\"254\":1}}],[\"servlet<\",{\"1\":{\"251\":2}}],[\"servlet依赖\",{\"1\":{\"251\":1}}],[\"servletoutputstream\",{\"1\":{\"226\":1}}],[\"servlet>\",{\"1\":{\"212\":1,\"256\":1}}],[\"servletexception\",{\"1\":{\"59\":3,\"62\":1,\"217\":1,\"254\":5}}],[\"servlet\",{\"0\":{\"253\":1,\"254\":1},\"1\":{\"31\":1,\"62\":3,\"212\":6,\"213\":3,\"215\":2,\"235\":1,\"251\":7,\"254\":2,\"256\":6,\"260\":2,\"513\":1}}],[\"serverinitialize\",{\"1\":{\"532\":1}}],[\"serverbootstrap\",{\"0\":{\"544\":1},\"1\":{\"524\":5,\"528\":1,\"544\":2,\"558\":5,\"563\":5,\"575\":5,\"576\":5}}],[\"serverhandler\",{\"1\":{\"521\":2,\"522\":2,\"532\":1,\"566\":1,\"567\":1,\"575\":2}}],[\"serverhttprequest\",{\"1\":{\"139\":1}}],[\"serversocketchannel=\",{\"1\":{\"538\":1}}],[\"serversocketchannel\",{\"1\":{\"537\":14,\"538\":7,\"541\":5,\"552\":2}}],[\"serversocket\",{\"1\":{\"379\":4,\"380\":4,\"536\":5,\"540\":5}}],[\"servercount\",{\"1\":{\"173\":2}}],[\"serverlistfilter\",{\"1\":{\"172\":1,\"174\":1}}],[\"serverlist\",{\"1\":{\"172\":1}}],[\"serverwebexchange\",{\"1\":{\"139\":1}}],[\"server<\",{\"1\":{\"81\":1,\"101\":1}}],[\"servertimezone=utc\",{\"1\":{\"19\":1,\"29\":1,\"31\":1,\"38\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1,\"233\":1,\"497\":1,\"508\":1,\"510\":1,\"511\":1,\"606\":1,\"609\":1,\"630\":1,\"633\":1}}],[\"server\",{\"0\":{\"75\":1,\"100\":1,\"102\":1,\"103\":1,\"109\":1},\"1\":{\"17\":2,\"19\":1,\"21\":1,\"24\":3,\"75\":5,\"76\":2,\"77\":2,\"83\":3,\"85\":1,\"87\":5,\"88\":1,\"97\":1,\"98\":1,\"102\":2,\"122\":1,\"151\":1,\"173\":11,\"176\":1,\"182\":1,\"183\":1,\"187\":1,\"188\":2,\"194\":1,\"196\":1,\"203\":1,\"288\":1,\"293\":1,\"327\":1,\"379\":1,\"521\":2,\"522\":2,\"524\":6,\"536\":2,\"538\":6,\"558\":1,\"560\":1,\"563\":1,\"575\":4,\"576\":1,\"607\":1}}],[\"serverproperties\",{\"1\":{\"17\":3}}],[\"semaphore\",{\"0\":{\"478\":1},\"1\":{\"143\":2,\"478\":6}}],[\"segment\",{\"1\":{\"133\":2,\"541\":4}}],[\"self\",{\"1\":{\"102\":1}}],[\"selectedkeys\",{\"1\":{\"537\":1,\"538\":2}}],[\"selectnow不阻塞立刻返回\",{\"1\":{\"537\":1}}],[\"select有三个方法\",{\"1\":{\"537\":1}}],[\"selectionkeys\",{\"1\":{\"537\":2}}],[\"selectionkey\",{\"1\":{\"537\":4,\"538\":8}}],[\"selector=selector\",{\"1\":{\"538\":2}}],[\"selector\",{\"0\":{\"547\":1},\"1\":{\"537\":17,\"538\":13,\"547\":4,\"552\":5,\"574\":3}}],[\"selectone\",{\"1\":{\"63\":1,\"608\":1}}],[\"select=\",{\"1\":{\"517\":1,\"518\":1}}],[\"selectkey>\",{\"1\":{\"507\":1}}],[\"selectblogslike\",{\"1\":{\"507\":1}}],[\"selectpostin\",{\"1\":{\"507\":1}}],[\"select>\",{\"1\":{\"51\":2,\"483\":2,\"502\":1,\"506\":1,\"507\":5,\"508\":1,\"517\":3,\"518\":3}}],[\"select\",{\"0\":{\"502\":1},\"1\":{\"31\":1,\"39\":1,\"40\":1,\"51\":2,\"482\":1,\"483\":7,\"502\":3,\"506\":1,\"507\":8,\"508\":3,\"510\":1,\"517\":3,\"518\":3,\"537\":2,\"538\":2,\"547\":1,\"572\":1,\"609\":2,\"630\":2}}],[\"search\",{\"1\":{\"75\":1}}],[\"seconds\",{\"1\":{\"386\":1,\"388\":1,\"395\":2,\"396\":1,\"400\":2,\"429\":1,\"437\":1,\"438\":1,\"439\":2,\"440\":2,\"441\":2,\"442\":1,\"443\":2,\"444\":2,\"450\":2,\"451\":2,\"461\":2,\"473\":1,\"522\":1,\"528\":1,\"536\":1,\"538\":1,\"558\":1,\"560\":3,\"561\":1}}],[\"secure\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"102\":1,\"106\":1,\"122\":1,\"187\":1,\"188\":1}}],[\"secured\",{\"1\":{\"64\":2}}],[\"securedenabled\",{\"1\":{\"64\":1}}],[\"security\",{\"1\":{\"60\":1,\"62\":10,\"63\":7}}],[\"securityconfig\",{\"1\":{\"59\":1,\"62\":1}}],[\"security<\",{\"1\":{\"58\":1}}],[\"securityutils\",{\"1\":{\"55\":1}}],[\"securitymanager\",{\"1\":{\"54\":1}}],[\"sec\",{\"1\":{\"60\":4}}],[\"sec=\",{\"1\":{\"60\":1}}],[\"set注入\",{\"1\":{\"593\":1}}],[\"setwife\",{\"1\":{\"593\":1}}],[\"setgames\",{\"1\":{\"593\":1}}],[\"setlen\",{\"1\":{\"567\":1}}],[\"setlogimpl\",{\"1\":{\"233\":1}}],[\"setloginurl\",{\"1\":{\"54\":1}}],[\"setlocale\",{\"1\":{\"35\":1}}],[\"set<string>\",{\"1\":{\"593\":3}}],[\"set<selectionkey>\",{\"1\":{\"537\":1,\"538\":1}}],[\"set<object>\",{\"1\":{\"403\":1}}],[\"set>\",{\"1\":{\"507\":1,\"593\":1}}],[\"setbooks\",{\"1\":{\"593\":1}}],[\"setbirthday\",{\"1\":{\"303\":1,\"322\":1,\"323\":2,\"327\":1}}],[\"setbasepackage\",{\"1\":{\"233\":1}}],[\"sethobbies\",{\"1\":{\"593\":1}}],[\"sethost\",{\"1\":{\"302\":1}}],[\"setheader\",{\"1\":{\"226\":1}}],[\"setenvironment\",{\"1\":{\"302\":1,\"303\":1}}],[\"setencoding\",{\"1\":{\"232\":1}}],[\"setout\",{\"1\":{\"335\":1,\"341\":1}}],[\"setorganization\",{\"1\":{\"302\":1,\"303\":1}}],[\"setowner\",{\"1\":{\"302\":1,\"303\":1}}],[\"setobjectmapper\",{\"1\":{\"233\":1}}],[\"setversion\",{\"1\":{\"302\":1,\"303\":1}}],[\"setviewname\",{\"1\":{\"47\":3,\"214\":1,\"215\":1}}],[\"setnameformat\",{\"1\":{\"474\":1}}],[\"setname\",{\"1\":{\"302\":2,\"303\":1,\"334\":2,\"521\":1,\"522\":2,\"587\":1,\"593\":1}}],[\"setautocommit\",{\"1\":{\"512\":1}}],[\"setage\",{\"1\":{\"334\":2,\"522\":1}}],[\"setaddress\",{\"1\":{\"302\":1,\"303\":1,\"593\":2}}],[\"setaccessible\",{\"1\":{\"272\":1,\"279\":1,\"448\":1}}],[\"setattribute\",{\"1\":{\"217\":1,\"254\":3}}],[\"setmaxuploadsize\",{\"1\":{\"233\":1}}],[\"setmailmapper\",{\"1\":{\"44\":1}}],[\"setpriority\",{\"1\":{\"470\":3}}],[\"setprotocol\",{\"1\":{\"302\":1,\"303\":1}}],[\"setprefix\",{\"1\":{\"233\":1}}],[\"setport\",{\"1\":{\"302\":2,\"303\":1}}],[\"setparams\",{\"1\":{\"558\":2}}],[\"setpassword\",{\"1\":{\"233\":1,\"327\":1,\"609\":1,\"630\":1}}],[\"setpaymentservice\",{\"1\":{\"182\":1}}],[\"setdaemon\",{\"1\":{\"469\":1}}],[\"setdatatype\",{\"1\":{\"522\":2}}],[\"setdatasource\",{\"1\":{\"62\":1,\"233\":2,\"609\":1,\"630\":1}}],[\"setdateformat\",{\"1\":{\"233\":1,\"241\":1}}],[\"setdefaultencoding\",{\"1\":{\"233\":1}}],[\"setdriverclassname\",{\"1\":{\"609\":1,\"630\":1}}],[\"setdriverclass\",{\"1\":{\"233\":1}}],[\"setjdbcurl\",{\"1\":{\"233\":1}}],[\"setjavamailsender\",{\"1\":{\"44\":1}}],[\"set\",{\"0\":{\"403\":1,\"592\":1},\"1\":{\"205\":1,\"279\":1,\"303\":1,\"322\":1,\"323\":2,\"327\":1,\"483\":2,\"504\":1,\"507\":3,\"538\":1,\"563\":2,\"584\":1,\"587\":2,\"599\":4,\"606\":1,\"630\":1}}],[\"setzone\",{\"1\":{\"174\":1}}],[\"setid\",{\"1\":{\"145\":1,\"146\":1,\"302\":2,\"303\":1,\"327\":1,\"521\":1,\"522\":1}}],[\"setinfo\",{\"1\":{\"593\":1}}],[\"setint\",{\"1\":{\"511\":1}}],[\"setinterceptors\",{\"1\":{\"71\":1}}],[\"setindentoutput\",{\"1\":{\"233\":1}}],[\"setinitparameters\",{\"1\":{\"30\":1}}],[\"seturl\",{\"1\":{\"609\":1,\"630\":1}}],[\"setuserdao\",{\"1\":{\"599\":2}}],[\"setusername\",{\"1\":{\"327\":1,\"609\":1,\"630\":1}}],[\"setuserserviceconsumer\",{\"1\":{\"327\":1}}],[\"setuserservice\",{\"1\":{\"303\":1,\"322\":1,\"323\":2,\"327\":1}}],[\"setuser\",{\"1\":{\"233\":1}}],[\"setuselastmodified\",{\"1\":{\"69\":2}}],[\"setunauthorizedurl\",{\"1\":{\"54\":1}}],[\"setcard\",{\"1\":{\"593\":1}}],[\"setcachecontrol\",{\"1\":{\"69\":2}}],[\"setcacheperiod\",{\"1\":{\"69\":2}}],[\"setchild\",{\"1\":{\"522\":1}}],[\"setcheck\",{\"1\":{\"302\":1,\"303\":1}}],[\"setcharacterencoding\",{\"1\":{\"226\":1}}],[\"setcontent\",{\"1\":{\"567\":1}}],[\"setcontenttype\",{\"1\":{\"204\":1,\"226\":1}}],[\"setconfiguration\",{\"1\":{\"233\":1}}],[\"setcomplete\",{\"1\":{\"139\":1}}],[\"setcorsconfigurations\",{\"1\":{\"71\":1}}],[\"setcreatetableonstartup\",{\"1\":{\"62\":1}}],[\"setflag\",{\"1\":{\"456\":3}}],[\"setfeaturestodisable\",{\"1\":{\"233\":1}}],[\"setfeaturestoenable\",{\"1\":{\"233\":2}}],[\"setfailonemptybeans\",{\"1\":{\"233\":1}}],[\"setforceencoding\",{\"1\":{\"232\":1}}],[\"setfilterchaindefinitionmap\",{\"1\":{\"54\":1}}],[\"setfrom\",{\"1\":{\"44\":1}}],[\"setsqlsessionfactory\",{\"1\":{\"609\":1,\"630\":2}}],[\"setsqlsessionfactorybeanname\",{\"1\":{\"233\":1}}],[\"setsalary\",{\"1\":{\"521\":1}}],[\"setstring\",{\"1\":{\"511\":2}}],[\"setstatuscode\",{\"1\":{\"139\":1}}],[\"setsuffix\",{\"1\":{\"233\":1}}],[\"setsubject\",{\"1\":{\"44\":1}}],[\"setsex\",{\"1\":{\"334\":2}}],[\"setsendzuulresponse\",{\"1\":{\"205\":1}}],[\"setsecuritymanager\",{\"1\":{\"54\":1}}],[\"setsnum\",{\"1\":{\"67\":1}}],[\"setsname\",{\"1\":{\"67\":1}}],[\"setresponsebody\",{\"1\":{\"205\":1}}],[\"setresponsestatuscode\",{\"1\":{\"205\":1}}],[\"setresttemplate\",{\"1\":{\"183\":1}}],[\"setrealm\",{\"1\":{\"54\":1}}],[\"setrequestheader\",{\"1\":{\"36\":1}}],[\"settarget\",{\"1\":{\"618\":2}}],[\"setter\",{\"1\":{\"587\":2}}],[\"setteacher\",{\"1\":{\"522\":1}}],[\"settext\",{\"1\":{\"44\":1}}],[\"settings\",{\"1\":{\"492\":1}}],[\"settings>\",{\"1\":{\"488\":1,\"505\":1,\"515\":2}}],[\"setting\",{\"1\":{\"483\":3}}],[\"settime\",{\"1\":{\"302\":1,\"317\":1,\"319\":2,\"326\":1}}],[\"settimeout\",{\"1\":{\"302\":1,\"303\":1}}],[\"setto\",{\"1\":{\"44\":1}}],[\"sex=\",{\"1\":{\"334\":1}}],[\"sex==>\",{\"1\":{\"39\":1,\"272\":1}}],[\"sex=w\",{\"1\":{\"20\":1}}],[\"sex\",{\"1\":{\"22\":3,\"23\":1,\"39\":1,\"237\":1,\"272\":3,\"334\":9}}],[\"spinlock\",{\"1\":{\"451\":1}}],[\"span>\",{\"1\":{\"67\":12}}],[\"split\",{\"1\":{\"20\":1,\"35\":1,\"558\":7}}],[\"spring4\",{\"1\":{\"577\":1}}],[\"spring<\",{\"1\":{\"251\":1,\"508\":1,\"604\":1}}],[\"spring依赖\",{\"1\":{\"251\":1}}],[\"springconfig\",{\"1\":{\"235\":2}}],[\"springcloud\",{\"1\":{\"115\":1,\"176\":1,\"203\":3}}],[\"springcloudconfiglearn\",{\"1\":{\"75\":1}}],[\"springcloud技术栈\",{\"0\":{\"2\":1}}],[\"springinitializer\",{\"1\":{\"232\":1}}],[\"spring的配置文件\",{\"1\":{\"212\":1}}],[\"spring3\",{\"1\":{\"184\":1}}],[\"springapplication\",{\"1\":{\"103\":1,\"182\":1,\"183\":1,\"194\":1}}],[\"springsecurity详解\",{\"0\":{\"61\":1}}],[\"springsecurity5<\",{\"1\":{\"58\":1}}],[\"springsecurity整合依赖\",{\"1\":{\"58\":1}}],[\"springsecurity依赖\",{\"1\":{\"58\":1}}],[\"springsecurity\",{\"0\":{\"57\":1,\"60\":1,\"62\":1}}],[\"springframework<\",{\"1\":{\"251\":2,\"604\":1}}],[\"springframework\",{\"1\":{\"22\":1,\"23\":1,\"42\":1,\"49\":1,\"53\":1,\"58\":2,\"62\":13,\"63\":9,\"66\":2,\"74\":1,\"81\":3,\"90\":1,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"174\":4,\"177\":1,\"180\":5,\"182\":4,\"183\":4,\"186\":1,\"192\":1,\"200\":3,\"212\":1,\"213\":6,\"215\":10,\"218\":1,\"222\":1,\"240\":3,\"244\":1,\"248\":1,\"256\":3,\"259\":1,\"260\":4,\"318\":3,\"322\":6,\"325\":2,\"582\":12,\"584\":4,\"585\":4,\"586\":6,\"587\":7,\"593\":2,\"594\":9,\"596\":3,\"597\":3,\"606\":1,\"629\":1,\"633\":14}}],[\"spring英文文档地址\",{\"1\":{\"12\":1}}],[\"spring中文文档地址\",{\"1\":{\"12\":1}}],[\"spring\",{\"0\":{\"12\":1,\"30\":1,\"213\":1,\"222\":1,\"230\":1,\"240\":1,\"244\":1,\"248\":1,\"257\":1,\"314\":1,\"318\":1,\"322\":1,\"581\":1,\"582\":1,\"602\":1,\"619\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"624\":1,\"625\":1,\"626\":1,\"627\":1},\"1\":{\"17\":2,\"19\":18,\"21\":1,\"24\":6,\"29\":1,\"30\":1,\"31\":2,\"38\":1,\"43\":5,\"49\":2,\"53\":1,\"60\":1,\"66\":4,\"69\":4,\"72\":1,\"73\":1,\"75\":5,\"76\":2,\"77\":2,\"83\":2,\"84\":2,\"85\":2,\"87\":2,\"88\":1,\"97\":2,\"98\":1,\"111\":1,\"114\":1,\"117\":1,\"122\":1,\"123\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"173\":1,\"174\":1,\"178\":1,\"180\":3,\"182\":3,\"183\":2,\"187\":4,\"188\":3,\"189\":2,\"194\":2,\"196\":1,\"198\":1,\"203\":1,\"213\":2,\"214\":1,\"215\":4,\"218\":1,\"235\":3,\"240\":1,\"244\":1,\"256\":1,\"258\":2,\"281\":1,\"292\":1,\"317\":2,\"318\":1,\"319\":2,\"322\":3,\"323\":2,\"325\":1,\"326\":2,\"327\":2,\"495\":2,\"579\":1,\"582\":4,\"583\":3,\"584\":1,\"585\":1,\"586\":2,\"587\":5,\"594\":2,\"596\":2,\"597\":1,\"600\":1,\"605\":2,\"606\":6,\"607\":2,\"608\":5,\"620\":1,\"621\":3,\"622\":3,\"623\":6,\"625\":2,\"626\":1,\"627\":1,\"629\":2,\"631\":1,\"633\":8}}],[\"springmvc\",{\"0\":{\"3\":1,\"211\":1},\"1\":{\"39\":1,\"40\":1,\"46\":1,\"51\":2,\"54\":1,\"212\":1,\"215\":1,\"228\":1,\"235\":1}}],[\"springbootapplication\",{\"1\":{\"103\":1,\"182\":1,\"183\":1,\"194\":1}}],[\"springbootforppg\",{\"1\":{\"44\":1}}],[\"springboot中没有log4j\",{\"1\":{\"31\":1}}],[\"springboot\",{\"0\":{\"1\":1,\"16\":1,\"18\":1,\"68\":1,\"194\":1,\"196\":1,\"324\":1},\"1\":{\"17\":1,\"19\":1,\"20\":1,\"21\":1,\"72\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"326\":1,\"327\":1}}],[\"style=\",{\"1\":{\"576\":2}}],[\"stylesheet\",{\"1\":{\"67\":1}}],[\"stop\",{\"0\":{\"464\":1},\"1\":{\"464\":3}}],[\"store\",{\"1\":{\"421\":2,\"422\":3}}],[\"sticky\",{\"1\":{\"296\":1}}],[\"stub后缀\",{\"1\":{\"289\":1}}],[\"stub\",{\"1\":{\"289\":1,\"291\":1,\"293\":1}}],[\"student=\",{\"1\":{\"593\":1}}],[\"student=new\",{\"1\":{\"67\":1}}],[\"studentpojo\",{\"1\":{\"521\":1}}],[\"studentlist\",{\"1\":{\"518\":3}}],[\"student2\",{\"1\":{\"517\":2}}],[\"student类具有两个基础类型属性\",{\"1\":{\"517\":1}}],[\"studentmapper\",{\"1\":{\"517\":2}}],[\"students\",{\"1\":{\"249\":4}}],[\"student\",{\"1\":{\"20\":10,\"22\":3,\"67\":8,\"249\":6,\"517\":9,\"518\":6,\"521\":13,\"593\":7}}],[\"struts\",{\"1\":{\"626\":1}}],[\"structure\",{\"1\":{\"252\":1}}],[\"str+=\",{\"1\":{\"558\":1}}],[\"str\",{\"1\":{\"382\":2,\"537\":2,\"558\":1}}],[\"str=method\",{\"1\":{\"558\":1}}],[\"str=\",{\"1\":{\"382\":1,\"537\":2}}],[\"strong\",{\"1\":{\"366\":1}}],[\"striped\",{\"1\":{\"208\":1}}],[\"strip\",{\"1\":{\"203\":3}}],[\"stringencoder\",{\"1\":{\"524\":1,\"526\":1,\"558\":2}}],[\"stringdecoder\",{\"1\":{\"524\":1,\"526\":1,\"558\":2}}],[\"stringbuilder\",{\"1\":{\"416\":5,\"558\":1}}],[\"stringconsumer\",{\"1\":{\"415\":1}}],[\"stringconsumer=\",{\"1\":{\"415\":1}}],[\"stringsupplier\",{\"1\":{\"416\":1}}],[\"stringsupplier=\",{\"1\":{\"416\":1}}],[\"strings\",{\"1\":{\"396\":3,\"402\":2,\"403\":1}}],[\"stringstringlinkedmultivaluemap\",{\"1\":{\"184\":2}}],[\"stringstringlinkedhashmap\",{\"1\":{\"54\":4}}],[\"stringstringhashmap\",{\"1\":{\"30\":5,\"184\":5}}],[\"stringfuturetask1\",{\"1\":{\"393\":2}}],[\"stringfuturetask\",{\"1\":{\"393\":2}}],[\"stringify\",{\"1\":{\"237\":1}}],[\"stringhttpmessageconverter\",{\"1\":{\"233\":4,\"240\":1,\"244\":2,\"248\":1,\"260\":1}}],[\"stringutils\",{\"1\":{\"35\":1,\"205\":1}}],[\"string>\",{\"1\":{\"30\":1,\"54\":1,\"184\":2,\"279\":1,\"292\":1,\"413\":1,\"445\":1,\"506\":2,\"593\":3}}],[\"string\",{\"1\":{\"20\":1,\"23\":2,\"35\":2,\"40\":1,\"44\":1,\"55\":3,\"63\":1,\"64\":3,\"66\":2,\"67\":3,\"69\":5,\"71\":4,\"85\":2,\"103\":1,\"115\":1,\"139\":1,\"147\":2,\"172\":3,\"181\":2,\"182\":1,\"183\":2,\"184\":5,\"187\":2,\"188\":1,\"194\":2,\"196\":1,\"198\":1,\"204\":4,\"205\":2,\"215\":2,\"216\":2,\"217\":3,\"222\":9,\"223\":5,\"226\":3,\"232\":2,\"233\":1,\"241\":6,\"254\":2,\"262\":1,\"263\":1,\"265\":2,\"270\":1,\"271\":2,\"272\":7,\"277\":1,\"278\":1,\"279\":1,\"286\":8,\"287\":9,\"288\":15,\"289\":16,\"290\":2,\"291\":14,\"292\":8,\"293\":24,\"294\":9,\"295\":4,\"296\":6,\"297\":1,\"315\":2,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"327\":2,\"331\":1,\"332\":1,\"334\":7,\"338\":1,\"361\":2,\"382\":2,\"388\":1,\"389\":1,\"391\":1,\"392\":1,\"393\":18,\"396\":1,\"400\":1,\"411\":1,\"429\":1,\"430\":2,\"434\":1,\"437\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":6,\"448\":4,\"450\":2,\"451\":1,\"453\":1,\"454\":1,\"456\":1,\"462\":3,\"464\":1,\"465\":1,\"466\":1,\"467\":1,\"468\":1,\"469\":1,\"470\":1,\"472\":1,\"473\":1,\"474\":1,\"476\":2,\"477\":2,\"478\":2,\"483\":3,\"498\":2,\"505\":4,\"508\":5,\"510\":4,\"511\":4,\"517\":3,\"518\":3,\"519\":2,\"521\":1,\"522\":2,\"524\":1,\"525\":1,\"526\":4,\"527\":1,\"528\":1,\"536\":2,\"537\":4,\"538\":11,\"540\":2,\"541\":2,\"558\":17,\"563\":1,\"566\":2,\"567\":5,\"575\":2,\"576\":1,\"578\":1,\"587\":2,\"593\":14,\"597\":1,\"599\":1,\"608\":1,\"618\":1,\"619\":1,\"630\":2}}],[\"strategy\",{\"1\":{\"143\":1}}],[\"strthreadpool\",{\"1\":{\"143\":1}}],[\"strcommarld\",{\"1\":{\"143\":1}}],[\"strgroupcommand\",{\"1\":{\"143\":1}}],[\"streamlistener\",{\"1\":{\"188\":1}}],[\"stream\",{\"0\":{\"185\":1,\"417\":1},\"1\":{\"71\":1,\"148\":1,\"151\":1,\"153\":1,\"185\":1,\"186\":1,\"187\":3,\"188\":2,\"189\":2,\"417\":1}}],[\"stereotype\",{\"1\":{\"63\":1}}],[\"step\",{\"1\":{\"33\":2}}],[\"stdoutimpl\",{\"1\":{\"50\":1,\"233\":1,\"483\":3,\"607\":1,\"633\":1}}],[\"stdout\",{\"1\":{\"50\":1,\"483\":3,\"505\":1,\"515\":3,\"607\":1,\"633\":1}}],[\"standardcharsets\",{\"1\":{\"66\":1,\"332\":1,\"379\":1,\"521\":2,\"522\":2,\"560\":1,\"561\":2,\"563\":1,\"566\":4,\"567\":5,\"575\":4}}],[\"standardtemplate\",{\"1\":{\"19\":1}}],[\"state\",{\"1\":{\"468\":1,\"528\":1}}],[\"statement=dubug\",{\"1\":{\"515\":1}}],[\"statement=connection\",{\"1\":{\"510\":1}}],[\"statement\",{\"1\":{\"39\":4,\"510\":4}}],[\"status\",{\"1\":{\"205\":1}}],[\"statuscode==>\",{\"1\":{\"184\":1}}],[\"statuscodevalue==>\",{\"1\":{\"184\":1}}],[\"statuscodevalue\",{\"1\":{\"184\":1}}],[\"statuscode\",{\"1\":{\"184\":1}}],[\"staticlocations\",{\"1\":{\"71\":1}}],[\"staticpathpattern\",{\"1\":{\"69\":4}}],[\"static\",{\"1\":{\"44\":3,\"66\":3,\"69\":5,\"71\":5,\"103\":1,\"146\":1,\"174\":1,\"182\":1,\"183\":2,\"194\":1,\"198\":1,\"222\":9,\"264\":1,\"265\":3,\"270\":1,\"271\":1,\"272\":1,\"277\":1,\"315\":1,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"334\":2,\"342\":1,\"346\":3,\"388\":2,\"389\":1,\"391\":1,\"392\":1,\"393\":2,\"396\":1,\"400\":3,\"405\":3,\"411\":1,\"429\":2,\"430\":6,\"434\":2,\"437\":1,\"439\":1,\"440\":1,\"441\":3,\"442\":1,\"443\":2,\"444\":2,\"445\":1,\"447\":2,\"448\":11,\"450\":3,\"451\":2,\"453\":2,\"454\":2,\"456\":3,\"461\":2,\"462\":1,\"464\":1,\"465\":1,\"466\":1,\"467\":1,\"468\":1,\"469\":1,\"470\":4,\"472\":1,\"473\":5,\"474\":1,\"476\":1,\"477\":1,\"478\":1,\"505\":1,\"508\":3,\"524\":1,\"525\":1,\"526\":1,\"536\":2,\"538\":6,\"540\":2,\"541\":2,\"558\":7,\"563\":1,\"575\":2,\"576\":1,\"593\":1,\"597\":1,\"599\":1,\"618\":1,\"619\":1}}],[\"stat\",{\"1\":{\"31\":5,\"67\":2}}],[\"statviewservlet\",{\"1\":{\"30\":1}}],[\"started\",{\"1\":{\"536\":2}}],[\"starter<\",{\"1\":{\"49\":1,\"53\":1,\"180\":2,\"181\":1,\"182\":2,\"183\":2,\"325\":2}}],[\"starter\",{\"1\":{\"16\":1,\"23\":1,\"42\":1,\"49\":1,\"53\":1,\"58\":2,\"66\":1,\"74\":1,\"81\":2,\"90\":1,\"97\":1,\"101\":1,\"105\":1,\"113\":1,\"121\":1,\"141\":2,\"150\":1,\"163\":1,\"171\":1,\"177\":1,\"182\":3,\"183\":3,\"186\":1,\"192\":1,\"200\":3,\"325\":1}}],[\"start>0\",{\"1\":{\"465\":1}}],[\"start=10000\",{\"1\":{\"465\":1}}],[\"start+end\",{\"1\":{\"409\":1}}],[\"startup>\",{\"1\":{\"212\":1,\"256\":1}}],[\"startup>1<\",{\"1\":{\"212\":1,\"256\":1}}],[\"start\",{\"1\":{\"19\":1,\"300\":1,\"318\":1,\"319\":1,\"322\":1,\"391\":2,\"392\":2,\"393\":2,\"396\":2,\"409\":6,\"427\":2,\"429\":2,\"430\":2,\"434\":3,\"437\":2,\"439\":2,\"440\":2,\"441\":2,\"442\":2,\"443\":2,\"444\":2,\"445\":2,\"448\":2,\"450\":4,\"451\":2,\"453\":3,\"454\":3,\"456\":2,\"462\":2,\"464\":1,\"465\":1,\"466\":2,\"467\":1,\"468\":1,\"469\":2,\"470\":3,\"476\":1,\"477\":1,\"478\":1,\"538\":1}}],[\"txpointcut\",{\"1\":{\"633\":2}}],[\"txadvice\",{\"1\":{\"633\":2}}],[\"tx\",{\"1\":{\"633\":6}}],[\"tx=\",{\"1\":{\"633\":1}}],[\"txt\",{\"1\":{\"331\":2,\"332\":2,\"333\":2,\"335\":2,\"336\":2,\"339\":2,\"537\":5}}],[\"tname\",{\"1\":{\"517\":2,\"518\":2}}],[\"ttt\",{\"1\":{\"498\":1}}],[\"t3\",{\"1\":{\"470\":1}}],[\"t2\",{\"1\":{\"470\":1}}],[\"t1\",{\"1\":{\"470\":1}}],[\"tv\",{\"1\":{\"462\":21}}],[\"tcp粘包拆包\",{\"0\":{\"564\":1}}],[\"tcp\",{\"0\":{\"378\":1,\"566\":1,\"567\":1},\"1\":{\"530\":1,\"546\":2,\"551\":1,\"565\":2,\"566\":1}}],[\"tcp的fin消息来不及发送\",{\"1\":{\"288\":1}}],[\"tbody\",{\"1\":{\"208\":1}}],[\"tbody>\",{\"1\":{\"208\":1}}],[\"t\",{\"1\":{\"181\":1,\"188\":1,\"363\":5,\"413\":3,\"414\":3,\"415\":3,\"416\":3,\"462\":1,\"515\":6,\"517\":3,\"518\":4}}],[\"taskqueue\",{\"1\":{\"574\":1}}],[\"task\",{\"0\":{\"559\":1}}],[\"tail\",{\"1\":{\"549\":1}}],[\"take\",{\"1\":{\"395\":2,\"396\":1}}],[\"target\",{\"0\":{\"275\":1},\"1\":{\"261\":1,\"262\":1,\"265\":1,\"272\":5,\"273\":1,\"275\":12,\"277\":1,\"278\":2,\"300\":2,\"515\":1,\"538\":4,\"582\":5,\"618\":6}}],[\"target>\",{\"1\":{\"180\":1,\"252\":1}}],[\"target>8<\",{\"1\":{\"180\":1}}],[\"tab\",{\"1\":{\"33\":1}}],[\"tabs\",{\"1\":{\"33\":1}}],[\"table>\",{\"1\":{\"208\":1}}],[\"tablefield\",{\"1\":{\"181\":1}}],[\"tableid\",{\"1\":{\"181\":1}}],[\"tablename\",{\"1\":{\"181\":1}}],[\"table\",{\"1\":{\"33\":1,\"97\":1,\"182\":1,\"194\":1,\"208\":3}}],[\"tablesizefor\",{\"1\":{\"405\":1}}],[\"tables\",{\"1\":{\"33\":1}}],[\"td><\",{\"1\":{\"208\":1}}],[\"td>\",{\"1\":{\"67\":5,\"208\":8}}],[\"to=chenyl\",{\"1\":{\"515\":1}}],[\"tonanos\",{\"1\":{\"473\":1}}],[\"touppercase\",{\"1\":{\"417\":1}}],[\"toupdatepage\",{\"1\":{\"208\":1}}],[\"tobytearray\",{\"1\":{\"383\":1}}],[\"toarray\",{\"1\":{\"272\":1}}],[\"tojavaobject\",{\"1\":{\"245\":1}}],[\"tojson\",{\"1\":{\"245\":2}}],[\"tojsonstring\",{\"1\":{\"244\":1,\"245\":4}}],[\"tomcat\",{\"1\":{\"218\":1}}],[\"tostring\",{\"1\":{\"216\":1,\"245\":2,\"249\":2,\"334\":1,\"416\":1,\"505\":1,\"508\":2,\"517\":1,\"518\":1,\"521\":1,\"522\":1,\"538\":1,\"558\":4,\"560\":1,\"566\":1,\"567\":2,\"575\":2,\"593\":5,\"602\":1}}],[\"total++\",{\"1\":{\"173\":1}}],[\"total需要重新置为零\",{\"1\":{\"173\":1}}],[\"total\",{\"1\":{\"173\":4,\"483\":5}}],[\"top\",{\"1\":{\"169\":1}}],[\"todo\",{\"1\":{\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1}}],[\"to\",{\"1\":{\"71\":1,\"222\":1,\"245\":5,\"352\":1,\"413\":1,\"483\":9}}],[\"tohttpcachecontrol\",{\"1\":{\"69\":1}}],[\"toregister\",{\"1\":{\"62\":1}}],[\"tologin\",{\"1\":{\"54\":1,\"62\":1}}],[\"tokenvalidityseconds\",{\"1\":{\"62\":1}}],[\"tokenrepository\",{\"1\":{\"62\":1}}],[\"token\",{\"1\":{\"54\":1,\"55\":2,\"205\":5,\"289\":1,\"293\":1}}],[\"token=\",{\"1\":{\"54\":1}}],[\"tooltips\",{\"1\":{\"33\":1}}],[\"typography\",{\"1\":{\"33\":1}}],[\"typehandlers\",{\"1\":{\"492\":1}}],[\"typealiases>\",{\"1\":{\"498\":1}}],[\"typealiases\",{\"1\":{\"492\":1}}],[\"type<\",{\"1\":{\"261\":1}}],[\"type>\",{\"1\":{\"180\":3,\"317\":1,\"325\":1}}],[\"types\",{\"1\":{\"118\":1}}],[\"typesetting\",{\"1\":{\"33\":1}}],[\"type=1\",{\"1\":{\"522\":1}}],[\"type=\",{\"1\":{\"67\":3,\"221\":2,\"495\":1,\"496\":1,\"498\":1,\"508\":3,\"517\":2,\"518\":2,\"519\":1,\"576\":2,\"601\":1}}],[\"type=text\",{\"1\":{\"19\":1}}],[\"type\",{\"1\":{\"19\":2,\"29\":1,\"97\":1,\"98\":1,\"118\":1,\"181\":1,\"182\":1,\"183\":1,\"187\":2,\"188\":2,\"189\":2,\"194\":1,\"196\":1,\"207\":1,\"261\":3,\"262\":1,\"270\":3,\"272\":1,\"275\":4,\"277\":1,\"278\":2,\"279\":4,\"297\":1,\"563\":1}}],[\"tid=\",{\"1\":{\"518\":1}}],[\"tid=t\",{\"1\":{\"517\":1,\"518\":1}}],[\"tid\",{\"1\":{\"517\":4,\"518\":10}}],[\"title=\",{\"1\":{\"506\":1,\"507\":2}}],[\"title\",{\"1\":{\"505\":1,\"506\":3,\"507\":5}}],[\"title>\",{\"1\":{\"36\":1,\"67\":3,\"576\":1}}],[\"ticketnum==0\",{\"1\":{\"453\":1}}],[\"ticketnum=10\",{\"1\":{\"453\":1}}],[\"ticketnum\",{\"1\":{\"453\":1}}],[\"ticket\",{\"1\":{\"434\":1}}],[\"timed\",{\"1\":{\"468\":1}}],[\"timeunit\",{\"1\":{\"386\":1,\"388\":1,\"395\":4,\"396\":1,\"400\":2,\"429\":1,\"437\":1,\"438\":1,\"439\":2,\"440\":2,\"441\":2,\"442\":1,\"443\":2,\"444\":2,\"450\":2,\"451\":2,\"461\":2,\"473\":2,\"474\":1,\"522\":1,\"528\":1,\"536\":2,\"538\":2,\"558\":1,\"560\":3,\"561\":1}}],[\"timestamps\",{\"1\":{\"241\":1}}],[\"timeinmilliseconds\",{\"1\":{\"143\":2}}],[\"timeout>\",{\"1\":{\"256\":1}}],[\"timeout>15<\",{\"1\":{\"256\":1}}],[\"timeout\",{\"1\":{\"143\":1,\"203\":2,\"207\":1,\"287\":1,\"289\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"296\":1,\"303\":1,\"326\":1,\"327\":2,\"395\":2}}],[\"timeoutinmilliseconds\",{\"1\":{\"143\":2,\"144\":1,\"204\":1}}],[\"timebetweenevictionrunsmillis\",{\"1\":{\"31\":1}}],[\"tip\",{\"1\":{\"71\":1}}],[\"tips\",{\"1\":{\"33\":1}}],[\"terminated\",{\"1\":{\"468\":2}}],[\"termination\",{\"1\":{\"427\":1}}],[\"temp=10000l\",{\"1\":{\"409\":1}}],[\"temp=json\",{\"1\":{\"245\":1}}],[\"templateavailabilityproviders\",{\"1\":{\"71\":1}}],[\"templates\",{\"1\":{\"19\":2,\"66\":3}}],[\"template\",{\"1\":{\"19\":1}}],[\"template=true\",{\"1\":{\"19\":1}}],[\"telnet\",{\"1\":{\"288\":1,\"293\":1,\"536\":3}}],[\"tel\",{\"1\":{\"241\":1}}],[\"teachertype\",{\"1\":{\"522\":1}}],[\"teachertype=0\",{\"1\":{\"522\":1}}],[\"teacher=2\",{\"1\":{\"522\":1}}],[\"teacher2\",{\"1\":{\"518\":2}}],[\"teachermapper\",{\"1\":{\"518\":2}}],[\"teacher类对象通过association进行配置\",{\"1\":{\"517\":1}}],[\"teacher\",{\"1\":{\"20\":7,\"22\":6,\"85\":1,\"517\":10,\"518\":11,\"522\":10}}],[\"textarea>\",{\"1\":{\"576\":2}}],[\"textwebsocketframe\",{\"1\":{\"576\":2}}],[\"textwebsocketframehandler\",{\"1\":{\"576\":2}}],[\"text=\",{\"1\":{\"33\":14,\"36\":1,\"67\":18}}],[\"text\",{\"1\":{\"19\":1,\"67\":2,\"118\":1,\"205\":1,\"207\":1,\"241\":3,\"343\":1,\"563\":1,\"576\":2}}],[\"test=\",{\"1\":{\"506\":2,\"507\":10}}],[\"testlock\",{\"1\":{\"434\":7}}],[\"testclass\",{\"1\":{\"279\":8}}],[\"testconfiguration\",{\"1\":{\"174\":2}}],[\"testcontroller\",{\"1\":{\"67\":1,\"85\":1}}],[\"test的构造函数\",{\"1\":{\"272\":1}}],[\"test1\",{\"1\":{\"270\":1,\"377\":1,\"483\":1}}],[\"test4\",{\"1\":{\"217\":1}}],[\"test3\",{\"1\":{\"217\":1}}],[\"test5\",{\"1\":{\"217\":1}}],[\"test2\",{\"1\":{\"217\":1}}],[\"test<\",{\"1\":{\"182\":1,\"183\":1,\"325\":1}}],[\"testonreturn\",{\"1\":{\"31\":1}}],[\"testonborrow\",{\"1\":{\"31\":1}}],[\"testwhileidle\",{\"1\":{\"31\":1}}],[\"test\",{\"1\":{\"19\":1,\"24\":1,\"35\":2,\"36\":1,\"39\":1,\"40\":1,\"64\":6,\"67\":2,\"69\":4,\"85\":2,\"216\":1,\"217\":1,\"254\":1,\"272\":8,\"286\":1,\"302\":1,\"303\":1,\"326\":1,\"327\":1,\"338\":2,\"377\":1,\"384\":1,\"392\":5,\"413\":1,\"414\":3,\"415\":1,\"448\":1,\"456\":2,\"462\":1,\"472\":6,\"473\":2,\"502\":1,\"506\":1,\"507\":1,\"508\":3,\"515\":1,\"540\":1,\"541\":1,\"578\":1,\"582\":5,\"606\":2,\"609\":2,\"618\":1,\"630\":3,\"632\":1}}],[\"the\",{\"1\":{\"261\":3,\"413\":3,\"414\":4,\"415\":2,\"478\":2}}],[\"themeresolver\",{\"1\":{\"222\":1}}],[\"theme\",{\"1\":{\"222\":1}}],[\"thead>\",{\"1\":{\"208\":1}}],[\"theborakompanioni<\",{\"1\":{\"53\":1}}],[\"th>\",{\"1\":{\"208\":4}}],[\"this\",{\"1\":{\"69\":8,\"71\":5,\"143\":2,\"144\":4,\"182\":4,\"183\":1,\"303\":1,\"322\":1,\"323\":2,\"327\":2,\"334\":4,\"393\":4,\"399\":3,\"405\":2,\"409\":2,\"413\":1,\"414\":1,\"415\":1,\"425\":1,\"456\":1,\"460\":2,\"462\":13,\"464\":1,\"473\":6,\"524\":2,\"526\":4,\"538\":19,\"558\":10,\"567\":4,\"576\":1,\"587\":1,\"593\":9,\"599\":1,\"618\":3}}],[\"threshold=fatal\",{\"1\":{\"515\":1}}],[\"threshold=error\",{\"1\":{\"515\":1}}],[\"threshold\",{\"1\":{\"405\":1,\"515\":2}}],[\"threadfactorybuilder\",{\"1\":{\"474\":1}}],[\"threadfactory\",{\"1\":{\"473\":6,\"474\":1}}],[\"thread2\",{\"1\":{\"470\":3}}],[\"thread1\",{\"1\":{\"470\":3}}],[\"thread=new\",{\"1\":{\"468\":1}}],[\"thread===>\",{\"1\":{\"391\":1,\"392\":1}}],[\"threadjoin\",{\"1\":{\"467\":5}}],[\"threadyield\",{\"1\":{\"466\":1}}],[\"thread对象的中止检测\",{\"1\":{\"427\":1}}],[\"threadtest\",{\"1\":{\"391\":5}}],[\"threadlocalmap\",{\"1\":{\"370\":1}}],[\"threadlocal\",{\"0\":{\"364\":1},\"1\":{\"291\":1,\"294\":1,\"296\":1,\"370\":5,\"371\":1}}],[\"threadstate\",{\"1\":{\"468\":1}}],[\"threadstop\",{\"1\":{\"464\":6}}],[\"threadsleep\",{\"1\":{\"465\":2}}],[\"threads\",{\"1\":{\"288\":1,\"293\":1}}],[\"threadpool=new\",{\"1\":{\"473\":1}}],[\"threadpoolexecutor\",{\"1\":{\"388\":7,\"400\":7,\"472\":1,\"473\":3,\"474\":2,\"536\":6,\"558\":2}}],[\"threadpool\",{\"1\":{\"288\":1,\"293\":1,\"473\":2,\"474\":1}}],[\"threadpoolproperties\",{\"1\":{\"143\":1}}],[\"threadpoolkey\",{\"1\":{\"143\":1}}],[\"thread\",{\"0\":{\"391\":1},\"1\":{\"15\":1,\"143\":6,\"144\":1,\"173\":3,\"204\":1,\"370\":1,\"386\":1,\"388\":1,\"391\":2,\"392\":4,\"393\":4,\"396\":4,\"427\":7,\"429\":2,\"430\":6,\"434\":4,\"437\":2,\"439\":2,\"440\":2,\"441\":2,\"442\":2,\"443\":2,\"444\":2,\"445\":6,\"448\":4,\"450\":8,\"451\":5,\"453\":5,\"454\":4,\"456\":8,\"460\":2,\"462\":2,\"464\":2,\"465\":1,\"466\":5,\"467\":5,\"468\":11,\"469\":6,\"470\":11,\"472\":1,\"473\":1,\"474\":2,\"476\":3,\"477\":3,\"478\":4,\"536\":2,\"538\":1,\"558\":1}}],[\"throwable\",{\"1\":{\"146\":1,\"386\":4,\"521\":1,\"522\":1,\"525\":1,\"532\":1,\"558\":2,\"575\":1,\"576\":1,\"582\":5,\"618\":1}}],[\"throw\",{\"1\":{\"63\":1,\"144\":1,\"147\":1,\"405\":2,\"473\":2,\"630\":1}}],[\"throws\",{\"1\":{\"39\":1,\"40\":1,\"44\":1,\"54\":2,\"59\":6,\"62\":3,\"63\":1,\"144\":1,\"147\":1,\"204\":4,\"205\":2,\"214\":1,\"217\":2,\"223\":2,\"226\":1,\"229\":3,\"233\":3,\"234\":3,\"241\":3,\"254\":5,\"270\":1,\"271\":1,\"272\":1,\"318\":1,\"319\":1,\"322\":1,\"323\":1,\"327\":2,\"379\":1,\"384\":1,\"393\":4,\"400\":1,\"437\":1,\"438\":1,\"439\":2,\"440\":2,\"441\":2,\"442\":1,\"443\":2,\"444\":2,\"448\":1,\"450\":2,\"453\":1,\"454\":1,\"456\":1,\"465\":2,\"467\":1,\"468\":1,\"473\":1,\"476\":1,\"477\":1,\"478\":1,\"528\":1,\"532\":5,\"533\":1,\"536\":1,\"538\":3,\"540\":2,\"541\":2,\"558\":10,\"563\":3,\"566\":3,\"567\":5,\"576\":4,\"582\":5,\"606\":1,\"609\":2,\"618\":1,\"630\":4}}],[\"th=\",{\"1\":{\"36\":1,\"56\":1,\"60\":1,\"66\":1,\"67\":2}}],[\"th\",{\"1\":{\"33\":14,\"35\":2,\"36\":3,\"67\":41}}],[\"thymeleaf表达式\",{\"1\":{\"67\":1}}],[\"thymeleafproperties\",{\"1\":{\"66\":3}}],[\"thymeleaf整合shiro依赖\",{\"1\":{\"53\":1}}],[\"thymeleaf<\",{\"1\":{\"53\":1,\"58\":1,\"66\":1}}],[\"thymeleaf模板依赖\",{\"1\":{\"53\":1,\"58\":1}}],[\"thymeleafautoconfiguration\",{\"1\":{\"19\":1,\"66\":1}}],[\"thymeleaf\",{\"0\":{\"56\":1,\"60\":1,\"65\":1},\"1\":{\"19\":12,\"33\":1,\"36\":1,\"56\":2,\"58\":2,\"60\":2,\"66\":5,\"67\":12}}],[\"trim>\",{\"1\":{\"507\":2}}],[\"trim\",{\"1\":{\"504\":1,\"507\":2,\"538\":1}}],[\"transaction\",{\"1\":{\"633\":1}}],[\"transactional\",{\"0\":{\"631\":1,\"632\":1},\"1\":{\"630\":2,\"631\":4,\"632\":6}}],[\"transactionmanager\",{\"1\":{\"492\":1,\"629\":2,\"630\":1,\"633\":2}}],[\"transitivity\",{\"1\":{\"427\":1}}],[\"transient\",{\"1\":{\"334\":1}}],[\"transporter\",{\"1\":{\"288\":1}}],[\"transport\",{\"1\":{\"287\":1}}],[\"transfer\",{\"1\":{\"541\":1}}],[\"transfermoney\",{\"1\":{\"265\":6}}],[\"transferto\",{\"1\":{\"223\":2,\"227\":1,\"537\":1,\"541\":2}}],[\"translator\",{\"1\":{\"222\":1}}],[\"tr>\",{\"1\":{\"67\":2,\"208\":3}}],[\"true报错\",{\"1\":{\"291\":1,\"294\":1}}],[\"true\",{\"1\":{\"17\":1,\"19\":3,\"31\":6,\"44\":2,\"62\":1,\"64\":2,\"67\":3,\"75\":2,\"76\":2,\"77\":2,\"87\":1,\"88\":2,\"102\":1,\"106\":1,\"118\":2,\"119\":2,\"122\":3,\"123\":1,\"137\":1,\"143\":7,\"145\":1,\"147\":1,\"181\":3,\"187\":1,\"188\":1,\"203\":1,\"205\":1,\"207\":2,\"229\":1,\"232\":1,\"233\":1,\"234\":1,\"240\":1,\"248\":1,\"260\":1,\"272\":1,\"279\":1,\"287\":4,\"288\":1,\"289\":2,\"292\":2,\"293\":1,\"294\":1,\"296\":2,\"315\":1,\"333\":1,\"334\":1,\"336\":1,\"339\":1,\"363\":4,\"389\":3,\"396\":1,\"402\":1,\"409\":1,\"414\":1,\"445\":1,\"448\":1,\"450\":1,\"456\":1,\"460\":1,\"462\":2,\"469\":2,\"483\":5,\"487\":2,\"488\":2,\"503\":1,\"505\":1,\"506\":1,\"507\":1,\"515\":2,\"521\":1,\"522\":1,\"524\":1,\"536\":2,\"537\":2,\"538\":2,\"540\":1,\"541\":1,\"544\":1,\"575\":1,\"607\":1}}],[\"try\",{\"1\":{\"15\":1,\"44\":1,\"55\":1,\"265\":1,\"338\":4,\"339\":2,\"379\":1,\"380\":2,\"382\":2,\"383\":2,\"386\":1,\"393\":2,\"396\":3,\"429\":1,\"434\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":2,\"450\":6,\"451\":2,\"453\":1,\"454\":1,\"456\":1,\"460\":2,\"461\":2,\"462\":2,\"468\":1,\"477\":1,\"478\":1,\"503\":1,\"508\":1,\"524\":1,\"526\":1,\"536\":1,\"538\":7,\"558\":2,\"560\":3,\"563\":1,\"575\":2,\"576\":1}}],[\"p命名空间注入\",{\"1\":{\"594\":1}}],[\"p=\",{\"1\":{\"584\":1,\"585\":1,\"587\":1,\"594\":2}}],[\"pjp\",{\"1\":{\"582\":2}}],[\"pv\",{\"0\":{\"461\":1}}],[\"phantom\",{\"1\":{\"369\":1}}],[\"peek\",{\"1\":{\"395\":2}}],[\"people\",{\"1\":{\"278\":2}}],[\"pengjunlee\",{\"1\":{\"174\":1}}],[\"performs\",{\"1\":{\"415\":1}}],[\"person\",{\"1\":{\"334\":21}}],[\"persistenttokenrepository\",{\"1\":{\"62\":4}}],[\"permitall\",{\"1\":{\"59\":1,\"62\":1}}],[\"perms\",{\"1\":{\"54\":3}}],[\"pipeline\",{\"0\":{\"549\":1},\"1\":{\"521\":6,\"522\":4,\"524\":5,\"526\":3,\"528\":3,\"532\":8,\"550\":1,\"558\":6,\"563\":4,\"574\":1,\"575\":4,\"576\":7}}],[\"pingurl\",{\"1\":{\"174\":2}}],[\"pidehen2\",{\"1\":{\"75\":1,\"83\":1,\"87\":1}}],[\"p\",{\"1\":{\"129\":1,\"507\":1,\"515\":2,\"584\":2,\"585\":2,\"587\":1,\"594\":5}}],[\"plain\",{\"1\":{\"563\":1}}],[\"play\",{\"1\":{\"462\":3}}],[\"player\",{\"1\":{\"462\":3}}],[\"playgame\",{\"1\":{\"278\":1}}],[\"placeholder\",{\"1\":{\"258\":1}}],[\"placeholder=\",{\"1\":{\"67\":2}}],[\"pluginid>\",{\"1\":{\"521\":1}}],[\"plugins\",{\"1\":{\"492\":1}}],[\"plugins<\",{\"1\":{\"252\":1,\"521\":1}}],[\"plugins>\",{\"1\":{\"180\":1,\"252\":1}}],[\"plugin>\",{\"1\":{\"180\":1,\"252\":1,\"521\":1}}],[\"plugin<\",{\"1\":{\"180\":1,\"252\":1,\"521\":1}}],[\"plus\",{\"1\":{\"97\":1,\"180\":1,\"181\":1,\"182\":2,\"183\":1,\"194\":1}}],[\"p>\",{\"1\":{\"36\":1,\"67\":12}}],[\"png\",{\"1\":{\"31\":1,\"383\":2,\"384\":2}}],[\"ppg==>\",{\"1\":{\"279\":2}}],[\"ppg<\",{\"1\":{\"182\":1,\"183\":1}}],[\"ppg007\",{\"1\":{\"62\":1,\"63\":1,\"303\":1,\"327\":1,\"506\":1,\"507\":1,\"536\":1,\"538\":2,\"584\":1,\"585\":1,\"593\":4,\"594\":1}}],[\"ppg\",{\"1\":{\"30\":1,\"59\":1,\"169\":1,\"189\":1,\"203\":1,\"237\":1,\"272\":1,\"279\":6,\"302\":5,\"303\":1,\"326\":5,\"327\":2,\"333\":1,\"334\":1,\"576\":2,\"594\":1}}],[\"pubg\",{\"1\":{\"278\":1}}],[\"public\",{\"1\":{\"15\":1,\"20\":1,\"30\":3,\"35\":4,\"36\":1,\"44\":4,\"46\":1,\"47\":2,\"51\":2,\"54\":6,\"55\":1,\"59\":5,\"62\":4,\"63\":2,\"64\":3,\"66\":3,\"67\":3,\"69\":4,\"71\":3,\"85\":2,\"103\":2,\"115\":1,\"124\":1,\"137\":1,\"139\":3,\"143\":2,\"144\":6,\"145\":4,\"146\":6,\"147\":2,\"164\":1,\"168\":1,\"172\":5,\"173\":6,\"174\":3,\"181\":2,\"182\":13,\"183\":8,\"187\":2,\"188\":2,\"194\":2,\"197\":1,\"204\":10,\"205\":5,\"214\":2,\"215\":3,\"216\":1,\"217\":5,\"222\":9,\"223\":2,\"226\":1,\"229\":4,\"232\":1,\"233\":15,\"234\":4,\"241\":4,\"254\":10,\"261\":1,\"262\":2,\"264\":1,\"265\":4,\"270\":2,\"271\":2,\"272\":7,\"277\":2,\"279\":1,\"289\":1,\"291\":1,\"302\":6,\"303\":6,\"315\":3,\"317\":2,\"318\":2,\"319\":8,\"322\":5,\"323\":10,\"326\":2,\"327\":7,\"334\":12,\"346\":4,\"377\":2,\"379\":2,\"380\":2,\"382\":2,\"383\":2,\"384\":1,\"385\":1,\"388\":2,\"389\":2,\"391\":3,\"392\":3,\"393\":10,\"396\":2,\"399\":2,\"400\":2,\"402\":1,\"403\":1,\"405\":2,\"409\":1,\"411\":3,\"413\":1,\"414\":1,\"415\":1,\"416\":1,\"429\":2,\"430\":4,\"434\":3,\"437\":4,\"438\":2,\"439\":5,\"440\":5,\"441\":5,\"442\":2,\"443\":5,\"444\":5,\"445\":4,\"447\":2,\"448\":11,\"450\":8,\"451\":2,\"453\":3,\"454\":3,\"456\":4,\"460\":9,\"461\":3,\"462\":8,\"464\":4,\"465\":3,\"466\":3,\"467\":3,\"468\":2,\"469\":4,\"470\":6,\"472\":3,\"473\":8,\"474\":3,\"476\":2,\"477\":2,\"478\":2,\"483\":1,\"498\":1,\"505\":3,\"506\":2,\"507\":1,\"508\":7,\"517\":4,\"518\":4,\"521\":7,\"522\":7,\"524\":4,\"525\":6,\"526\":4,\"527\":1,\"528\":2,\"532\":5,\"533\":1,\"536\":2,\"538\":9,\"540\":4,\"541\":4,\"558\":25,\"560\":1,\"561\":1,\"563\":5,\"566\":3,\"567\":13,\"575\":11,\"576\":7,\"578\":2,\"582\":19,\"587\":2,\"593\":23,\"597\":2,\"599\":5,\"602\":5,\"606\":1,\"608\":2,\"609\":7,\"618\":10,\"619\":2,\"629\":2,\"630\":14,\"632\":2}}],[\"put\",{\"1\":{\"30\":3,\"54\":2,\"183\":1,\"184\":3,\"207\":1,\"249\":3,\"327\":2,\"395\":2,\"396\":1,\"403\":1,\"445\":3,\"506\":2,\"507\":2,\"537\":6}}],[\"payload\",{\"1\":{\"288\":1,\"293\":1}}],[\"paymentstarter8004\",{\"1\":{\"194\":2}}],[\"paymentstarter\",{\"1\":{\"182\":2}}],[\"payments\",{\"1\":{\"182\":2}}],[\"paymentservice\",{\"1\":{\"182\":7}}],[\"paymentserviceimpl\",{\"1\":{\"144\":1,\"182\":1}}],[\"paymentcontroller\",{\"1\":{\"182\":1}}],[\"paymentmapper\",{\"1\":{\"182\":1}}],[\"payment>\",{\"1\":{\"144\":1,\"182\":1}}],[\"payment\",{\"1\":{\"97\":2,\"123\":2,\"124\":2,\"137\":6,\"144\":7,\"164\":7,\"178\":1,\"181\":2,\"182\":14,\"183\":6,\"194\":1,\"198\":1}}],[\"parallel\",{\"1\":{\"417\":1}}],[\"parallelism\",{\"1\":{\"409\":1}}],[\"params\",{\"1\":{\"558\":5}}],[\"parametermap\",{\"1\":{\"502\":1}}],[\"parametertype=\",{\"1\":{\"506\":1,\"507\":2}}],[\"parametertype\",{\"1\":{\"502\":1}}],[\"parameterizedtype\",{\"1\":{\"279\":2}}],[\"parameters\",{\"1\":{\"272\":2,\"292\":1,\"483\":6}}],[\"parameter\",{\"1\":{\"272\":5,\"275\":2,\"507\":1}}],[\"param>\",{\"1\":{\"212\":2,\"218\":2,\"256\":8}}],[\"param\",{\"1\":{\"51\":1,\"54\":2,\"164\":2,\"182\":2,\"212\":2,\"218\":2,\"256\":8,\"265\":1,\"272\":6,\"315\":1,\"411\":2,\"413\":1,\"414\":1,\"415\":1,\"518\":2,\"525\":8,\"558\":3,\"582\":3,\"630\":2}}],[\"parent1\",{\"1\":{\"271\":2}}],[\"parent\",{\"1\":{\"271\":3}}],[\"parseint\",{\"1\":{\"558\":4}}],[\"parsearray\",{\"1\":{\"245\":1}}],[\"parseobject\",{\"1\":{\"245\":1}}],[\"parse\",{\"1\":{\"208\":1,\"237\":1,\"244\":1}}],[\"pagecontext\",{\"1\":{\"208\":2,\"221\":1,\"225\":1}}],[\"paging\",{\"1\":{\"33\":1}}],[\"pagination\",{\"1\":{\"33\":1}}],[\"packaging>\",{\"1\":{\"180\":1,\"181\":1}}],[\"package=\",{\"1\":{\"215\":1,\"259\":1,\"260\":1,\"322\":1,\"521\":1,\"522\":1,\"578\":1}}],[\"package=com\",{\"1\":{\"19\":1}}],[\"package\",{\"1\":{\"62\":1,\"63\":1,\"275\":1,\"300\":2,\"462\":1,\"499\":1,\"538\":2,\"593\":2}}],[\"pathvariable\",{\"1\":{\"145\":1,\"146\":1,\"164\":3,\"216\":3}}],[\"path=\",{\"1\":{\"123\":1,\"133\":1,\"137\":1,\"230\":1}}],[\"paths\",{\"1\":{\"75\":1}}],[\"path\",{\"0\":{\"133\":1},\"1\":{\"69\":1,\"71\":1,\"124\":1,\"133\":1,\"137\":1,\"203\":1,\"271\":1,\"288\":1,\"289\":1,\"293\":1,\"330\":2,\"331\":2,\"332\":2,\"333\":2,\"334\":2,\"335\":3,\"336\":2,\"339\":2,\"340\":2}}],[\"patternlayout\",{\"1\":{\"515\":6}}],[\"pattern>\",{\"1\":{\"212\":2,\"218\":2,\"256\":4}}],[\"pattern\",{\"1\":{\"31\":2,\"69\":1,\"71\":1,\"507\":2}}],[\"passwordencoder\",{\"1\":{\"59\":1,\"62\":1}}],[\"passwordparameter\",{\"1\":{\"59\":1,\"62\":1}}],[\"password\",{\"1\":{\"29\":1,\"31\":2,\"38\":1,\"55\":4,\"59\":3,\"62\":2,\"67\":3,\"75\":2,\"76\":1,\"77\":1,\"83\":1,\"87\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"187\":1,\"188\":1,\"189\":1,\"194\":1,\"196\":1,\"258\":2,\"287\":1,\"292\":1,\"315\":1,\"483\":7,\"498\":1,\"503\":3,\"507\":2,\"508\":4,\"510\":2,\"511\":3,\"519\":2,\"606\":1,\"630\":6,\"633\":1}}],[\"password=123456\",{\"1\":{\"497\":1}}],[\"password=13573285937\",{\"1\":{\"483\":1}}],[\"password=110\",{\"1\":{\"483\":5}}],[\"password=ymiruqkquvhcvdob\",{\"1\":{\"43\":1}}],[\"password=\",{\"1\":{\"19\":1,\"483\":2,\"510\":2,\"511\":1,\"515\":1,\"630\":1}}],[\"poi\",{\"1\":{\"627\":1}}],[\"point\",{\"1\":{\"582\":3}}],[\"pointer\",{\"1\":{\"376\":1}}],[\"pointcut\",{\"1\":{\"235\":1,\"582\":10,\"633\":2}}],[\"points\",{\"0\":{\"7\":1}}],[\"position\",{\"1\":{\"478\":2}}],[\"postmapper\",{\"1\":{\"499\":3}}],[\"postmapping\",{\"1\":{\"115\":1,\"164\":1,\"182\":1,\"223\":2}}],[\"posthandle\",{\"1\":{\"229\":1,\"234\":1}}],[\"postforlocation\",{\"1\":{\"184\":5}}],[\"postforentity\",{\"1\":{\"184\":2}}],[\"postforobject\",{\"1\":{\"183\":1,\"184\":1}}],[\"post\",{\"1\":{\"67\":1,\"78\":1,\"93\":1,\"132\":1,\"164\":1,\"184\":3,\"207\":3,\"221\":1,\"507\":2}}],[\"posttest\",{\"1\":{\"64\":2}}],[\"postauthorize\",{\"1\":{\"64\":2}}],[\"pop\",{\"1\":{\"461\":1}}],[\"popover\",{\"1\":{\"33\":1}}],[\"poll\",{\"1\":{\"395\":4,\"396\":2}}],[\"pollix\",{\"1\":{\"56\":1}}],[\"pom\",{\"1\":{\"180\":2,\"181\":2,\"183\":1,\"252\":1,\"508\":1}}],[\"pojo\",{\"1\":{\"51\":2,\"63\":1,\"483\":2,\"498\":2,\"506\":1,\"507\":3,\"508\":1,\"517\":5,\"518\":4,\"519\":1,\"520\":1,\"521\":1,\"522\":1,\"578\":1,\"584\":3,\"585\":3,\"587\":3,\"593\":3,\"594\":2,\"596\":1,\"602\":2,\"633\":1}}],[\"pooled\",{\"1\":{\"496\":1,\"508\":1}}],[\"pooleddatasource\",{\"1\":{\"483\":12}}],[\"pooltest\",{\"1\":{\"472\":1,\"473\":1}}],[\"poolc\",{\"1\":{\"461\":1}}],[\"poolpreparedstatements\",{\"1\":{\"31\":1}}],[\"pool\",{\"1\":{\"29\":1,\"62\":1,\"97\":1,\"98\":1,\"182\":1,\"183\":1,\"194\":1,\"196\":1,\"460\":10,\"474\":13,\"483\":3}}],[\"port=8848\",{\"1\":{\"538\":2}}],[\"port=8080\",{\"1\":{\"19\":1}}],[\"port=20880\",{\"1\":{\"319\":1}}],[\"port=\",{\"1\":{\"318\":1}}],[\"port=465\",{\"1\":{\"43\":1}}],[\"port=xxx\",{\"1\":{\"17\":1}}],[\"port\",{\"1\":{\"17\":1,\"21\":1,\"24\":3,\"75\":4,\"76\":3,\"77\":3,\"83\":1,\"85\":1,\"87\":1,\"93\":1,\"97\":2,\"98\":2,\"102\":3,\"106\":1,\"122\":2,\"148\":2,\"151\":1,\"153\":2,\"182\":1,\"183\":1,\"187\":3,\"188\":5,\"189\":1,\"194\":2,\"196\":2,\"203\":1,\"287\":3,\"288\":1,\"326\":2,\"327\":2,\"524\":5,\"526\":5,\"538\":2,\"558\":2}}],[\"preparestatement\",{\"1\":{\"511\":1}}],[\"preparedstatement=dubug\",{\"1\":{\"515\":1}}],[\"preparedstatement=connection\",{\"1\":{\"511\":1}}],[\"preparedstatement\",{\"1\":{\"511\":5}}],[\"preparing\",{\"1\":{\"483\":6}}],[\"prepostenabled\",{\"1\":{\"64\":1}}],[\"predicate<integer>\",{\"1\":{\"414\":1}}],[\"predicate<t>\",{\"1\":{\"414\":1}}],[\"predicate\",{\"0\":{\"414\":1},\"1\":{\"414\":2}}],[\"predicatespec\",{\"1\":{\"124\":2,\"137\":4}}],[\"predicates\",{\"1\":{\"123\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":2,\"137\":1}}],[\"present\",{\"1\":{\"403\":1}}],[\"preservation\",{\"1\":{\"102\":1}}],[\"prehandle返回值为true时放行\",{\"1\":{\"229\":1}}],[\"prehandle\",{\"1\":{\"229\":2,\"234\":1}}],[\"pre\",{\"1\":{\"205\":1}}],[\"prefer\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"87\":1,\"88\":1,\"102\":1,\"106\":1,\"122\":1,\"187\":1,\"188\":1,\"203\":1}}],[\"prefix=\",{\"1\":{\"507\":2}}],[\"prefix=classpath\",{\"1\":{\"19\":1}}],[\"prefixoverrides=\",{\"1\":{\"507\":1}}],[\"prefixoverrides\",{\"1\":{\"507\":1}}],[\"prefix+\",{\"1\":{\"335\":1}}],[\"prefix也可以为指定的微服务设置\",{\"1\":{\"203\":1}}],[\"prefix\",{\"1\":{\"17\":2,\"22\":1,\"30\":1,\"31\":1,\"66\":2,\"97\":1,\"182\":1,\"194\":1,\"203\":3,\"213\":1,\"215\":1,\"260\":1,\"330\":2,\"331\":2,\"332\":2,\"333\":2,\"334\":2,\"335\":2,\"336\":2,\"339\":2,\"340\":2,\"507\":1}}],[\"preauthorize\",{\"1\":{\"64\":2}}],[\"priorityblockingqueue\",{\"1\":{\"473\":1}}],[\"prioritytest\",{\"1\":{\"470\":1}}],[\"priority\",{\"1\":{\"292\":1,\"470\":3}}],[\"principal\",{\"1\":{\"56\":3,\"60\":2}}],[\"principalcollection\",{\"1\":{\"54\":3}}],[\"printwriter\",{\"1\":{\"335\":6}}],[\"printstream\",{\"1\":{\"335\":2,\"341\":1}}],[\"printstacktrace\",{\"1\":{\"15\":1,\"44\":1,\"265\":1,\"338\":2,\"339\":2,\"379\":1,\"380\":2,\"382\":2,\"383\":2,\"386\":1,\"396\":3,\"429\":1,\"434\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":2,\"450\":6,\"451\":2,\"453\":1,\"454\":1,\"456\":1,\"460\":2,\"461\":2,\"462\":2,\"468\":1,\"477\":2,\"478\":1,\"508\":1,\"524\":1,\"526\":1,\"536\":1,\"538\":6,\"558\":1,\"560\":3,\"563\":1,\"575\":2,\"576\":1}}],[\"print\",{\"1\":{\"241\":2,\"335\":1,\"338\":2,\"527\":1}}],[\"println\",{\"1\":{\"15\":1,\"39\":3,\"40\":1,\"54\":2,\"55\":2,\"64\":1,\"126\":1,\"139\":2,\"184\":5,\"188\":1,\"215\":1,\"229\":2,\"241\":4,\"245\":8,\"249\":6,\"254\":3,\"265\":1,\"270\":4,\"271\":6,\"272\":6,\"277\":1,\"279\":15,\"303\":1,\"322\":1,\"323\":2,\"333\":3,\"334\":1,\"335\":1,\"336\":2,\"338\":1,\"377\":2,\"379\":1,\"380\":1,\"382\":1,\"383\":2,\"386\":5,\"388\":4,\"389\":4,\"391\":2,\"392\":2,\"393\":4,\"395\":13,\"396\":3,\"400\":1,\"411\":2,\"413\":1,\"414\":2,\"415\":1,\"416\":1,\"417\":1,\"430\":2,\"434\":1,\"437\":2,\"438\":2,\"439\":3,\"440\":3,\"441\":3,\"443\":3,\"444\":3,\"445\":5,\"448\":3,\"450\":4,\"451\":2,\"453\":1,\"454\":1,\"456\":4,\"460\":4,\"461\":2,\"462\":2,\"464\":1,\"465\":1,\"466\":2,\"467\":2,\"468\":4,\"469\":3,\"470\":2,\"472\":1,\"473\":1,\"474\":1,\"476\":2,\"477\":2,\"478\":2,\"503\":1,\"506\":1,\"507\":1,\"508\":1,\"510\":4,\"521\":7,\"522\":8,\"524\":1,\"525\":2,\"526\":1,\"528\":1,\"536\":6,\"537\":10,\"538\":7,\"540\":2,\"541\":2,\"558\":7,\"560\":5,\"561\":1,\"563\":4,\"566\":2,\"567\":4,\"575\":8,\"576\":8,\"582\":12,\"593\":1,\"602\":1,\"606\":1,\"609\":1,\"618\":3}}],[\"private\",{\"1\":{\"20\":5,\"23\":4,\"44\":2,\"54\":1,\"62\":2,\"63\":2,\"66\":1,\"69\":2,\"71\":4,\"85\":1,\"146\":1,\"172\":1,\"173\":2,\"181\":5,\"182\":1,\"183\":2,\"187\":1,\"188\":1,\"198\":1,\"265\":1,\"272\":1,\"303\":1,\"315\":4,\"322\":1,\"323\":2,\"327\":2,\"334\":3,\"346\":2,\"388\":1,\"393\":4,\"400\":2,\"409\":3,\"429\":1,\"430\":4,\"434\":2,\"445\":2,\"447\":2,\"448\":8,\"450\":1,\"451\":1,\"453\":3,\"454\":3,\"456\":4,\"460\":4,\"461\":4,\"464\":1,\"465\":1,\"483\":3,\"498\":3,\"505\":5,\"508\":4,\"517\":5,\"518\":6,\"524\":1,\"525\":2,\"526\":2,\"536\":1,\"538\":11,\"558\":7,\"567\":2,\"587\":3,\"588\":2,\"593\":9,\"599\":2,\"618\":1,\"632\":2}}],[\"propagation=\",{\"1\":{\"633\":1}}],[\"propagation\",{\"1\":{\"630\":2,\"632\":1}}],[\"props>\",{\"1\":{\"593\":1,\"607\":1}}],[\"prop>\",{\"1\":{\"593\":2,\"607\":4}}],[\"property标签相当于调用了相应属性的set方法\",{\"1\":{\"596\":1}}],[\"property注入\",{\"1\":{\"593\":1}}],[\"property\",{\"1\":{\"258\":1,\"271\":2,\"497\":1,\"594\":1}}],[\"property>\",{\"1\":{\"240\":1,\"260\":1,\"593\":6,\"607\":2,\"633\":1}}],[\"propertyvetoexception\",{\"1\":{\"233\":3}}],[\"property=\",{\"1\":{\"56\":1,\"508\":3,\"517\":8,\"518\":7,\"519\":3}}],[\"propertysource\",{\"1\":{\"20\":2,\"319\":2,\"323\":2}}],[\"properties<\",{\"1\":{\"508\":2}}],[\"properties文件\",{\"1\":{\"323\":1}}],[\"properties的propertysource\",{\"1\":{\"292\":1}}],[\"properties的配置\",{\"1\":{\"292\":1}}],[\"properties键\",{\"1\":{\"292\":1}}],[\"properties>\",{\"1\":{\"180\":1,\"252\":1,\"497\":1}}],[\"properties\",{\"0\":{\"19\":1,\"20\":1},\"1\":{\"17\":1,\"19\":5,\"20\":5,\"21\":2,\"24\":5,\"31\":1,\"33\":1,\"233\":1,\"258\":2,\"281\":2,\"292\":2,\"319\":2,\"323\":2,\"492\":1,\"497\":4,\"593\":3,\"607\":1}}],[\"proceed\",{\"1\":{\"582\":2}}],[\"proceedingjoinpoint\",{\"1\":{\"582\":2}}],[\"processannotationmoney\",{\"1\":{\"265\":2}}],[\"processor<\",{\"1\":{\"22\":1}}],[\"processing\",{\"1\":{\"15\":1}}],[\"proactor\",{\"1\":{\"542\":1}}],[\"program\",{\"1\":{\"427\":1}}],[\"progress\",{\"1\":{\"33\":2}}],[\"proivder=\",{\"1\":{\"293\":1}}],[\"projectlombok<\",{\"1\":{\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"251\":1,\"315\":1}}],[\"project\",{\"1\":{\"180\":1,\"252\":1,\"521\":2}}],[\"probability\",{\"1\":{\"178\":1}}],[\"proxy=\",{\"1\":{\"618\":1}}],[\"proxyinvocationhandler\",{\"1\":{\"618\":6}}],[\"proxyclass\",{\"1\":{\"617\":2}}],[\"proxy\",{\"1\":{\"151\":1,\"289\":1,\"291\":1,\"293\":1,\"294\":1,\"558\":3,\"617\":3,\"618\":3}}],[\"providerconfiguration\",{\"1\":{\"302\":1,\"319\":3}}],[\"providerconfig\",{\"1\":{\"293\":1}}],[\"provider的id属性\",{\"1\":{\"289\":1}}],[\"provider\",{\"0\":{\"97\":1,\"193\":1,\"293\":1},\"1\":{\"98\":1,\"106\":1,\"115\":1,\"145\":1,\"146\":1,\"184\":1,\"187\":1,\"196\":1,\"203\":2,\"204\":1,\"282\":4,\"289\":1,\"302\":1,\"318\":1,\"319\":3,\"326\":2,\"328\":1,\"460\":2,\"558\":2}}],[\"produces\",{\"1\":{\"241\":1}}],[\"products\",{\"1\":{\"460\":8}}],[\"products=new\",{\"1\":{\"460\":1}}],[\"product\",{\"1\":{\"204\":1,\"286\":1,\"460\":9,\"461\":4}}],[\"productfallback\",{\"1\":{\"204\":1}}],[\"prod\",{\"1\":{\"75\":2,\"76\":1}}],[\"proto中的类型\",{\"1\":{\"521\":1}}],[\"proto中数据类型以message定义\",{\"1\":{\"521\":1}}],[\"proto3\",{\"1\":{\"521\":1,\"522\":1}}],[\"protosourceroot>\",{\"1\":{\"521\":1}}],[\"proto文件放置的目录\",{\"1\":{\"521\":1}}],[\"protocexecutable>\",{\"1\":{\"521\":1}}],[\"protoc\",{\"1\":{\"521\":4}}],[\"protocol<\",{\"1\":{\"521\":1}}],[\"protocol>\",{\"1\":{\"293\":1}}],[\"protocol的id属性\",{\"1\":{\"289\":1}}],[\"protocol=\",{\"1\":{\"288\":1,\"318\":2,\"322\":1}}],[\"protocol=smtps\",{\"1\":{\"43\":1}}],[\"protocolconfig\",{\"1\":{\"288\":1,\"302\":10}}],[\"protocol\",{\"0\":{\"288\":1},\"1\":{\"287\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"302\":1,\"318\":1,\"319\":2,\"326\":4,\"327\":2}}],[\"proto\",{\"1\":{\"520\":1,\"521\":4,\"522\":2}}],[\"protobufdecoder\",{\"1\":{\"521\":1,\"522\":1}}],[\"protobufencoder\",{\"1\":{\"521\":1}}],[\"protobuf<\",{\"1\":{\"521\":1}}],[\"protobuf\",{\"0\":{\"521\":1,\"522\":1},\"1\":{\"520\":2}}],[\"protected\",{\"1\":{\"54\":2,\"59\":2,\"62\":2,\"174\":1,\"232\":4,\"254\":2,\"345\":1,\"409\":1,\"521\":2,\"522\":1,\"524\":1,\"525\":1,\"526\":1,\"527\":1,\"528\":1,\"532\":4,\"533\":1,\"558\":2,\"563\":2,\"566\":2,\"567\":4,\"575\":2,\"576\":2,\"632\":1}}],[\"profile\",{\"1\":{\"24\":3,\"75\":2,\"76\":1,\"77\":1,\"84\":2,\"85\":1}}],[\"profiles\",{\"1\":{\"19\":2,\"24\":3,\"75\":1}}],[\"在applicationcontext\",{\"1\":{\"619\":1}}],[\"在a执行完1\",{\"1\":{\"448\":1}}],[\"在本例中是spring\",{\"1\":{\"587\":1}}],[\"在目标方法抛出异常后执行通知\",{\"1\":{\"582\":1}}],[\"在目标方法执行完成后执行通知\",{\"1\":{\"582\":1}}],[\"在目标方法执行后执行通知\",{\"1\":{\"582\":1}}],[\"在目标方法执行前执行通知\",{\"1\":{\"582\":1}}],[\"在web开发中\",{\"1\":{\"579\":1}}],[\"在对应的\",{\"1\":{\"574\":1}}],[\"在连接成功后给标志位\",{\"1\":{\"558\":1}}],[\"在启动\",{\"1\":{\"536\":1}}],[\"在启动类上添加\",{\"1\":{\"152\":1}}],[\"在某些情况下可能稍慢于\",{\"1\":{\"533\":1}}],[\"在指定的包下生成三个文件\",{\"1\":{\"521\":1}}],[\"在共用接口中的语句将不会被默认缓存\",{\"1\":{\"486\":1}}],[\"在映射器\",{\"1\":{\"486\":1}}],[\"在概念上\",{\"1\":{\"478\":1}}],[\"在执行完\",{\"1\":{\"450\":1}}],[\"在执行引擎使用这个变量前\",{\"1\":{\"422\":1}}],[\"在如下代码中\",{\"1\":{\"450\":1}}],[\"在常规的开发中\",{\"1\":{\"427\":1}}],[\"在其他的线程中\",{\"1\":{\"425\":1}}],[\"在其中填写要监控的\",{\"1\":{\"153\":1}}],[\"在操作系统里面是不可分割的单元\",{\"1\":{\"424\":1}}],[\"在设计时候考虑到\",{\"1\":{\"420\":1}}],[\"在工作线程仅处理事件式异步任务的应用程序中\",{\"1\":{\"409\":1}}],[\"在工程\",{\"1\":{\"180\":1}}],[\"在当前任务正在运行的池中异步执行此任务\",{\"1\":{\"409\":1}}],[\"在没有外部对象的强引用时\",{\"1\":{\"370\":1}}],[\"在强引用断开后\",{\"1\":{\"368\":1}}],[\"在即将\",{\"1\":{\"367\":1}}],[\"在修改表內容的时候\",{\"1\":{\"343\":1}}],[\"在原内容后添加\",{\"1\":{\"339\":1}}],[\"在内存中累计调用次数和调用时间\",{\"1\":{\"328\":1}}],[\"在一个线程内\",{\"1\":{\"427\":1}}],[\"在一个截面上碰撞的概率高\",{\"1\":{\"307\":1}}],[\"在一个子网下才通过\",{\"1\":{\"135\":1}}],[\"在前端中运行\",{\"1\":{\"300\":1}}],[\"在多协议时使用\",{\"1\":{\"289\":1}}],[\"在多个注册中心时使用\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"294\":1}}],[\"在dubbo\",{\"1\":{\"288\":1}}],[\"在sqlsessiontemplate中注入sqlsessionfactory\",{\"1\":{\"610\":1}}],[\"在simplified=true时\",{\"1\":{\"287\":1}}],[\"在spring中注册拦截器\",{\"1\":{\"233\":1}}],[\"在运行时可以通过反射获取到\",{\"1\":{\"274\":1}}],[\"在获取之前我们自定义的注解必须使用元注解\",{\"1\":{\"272\":1}}],[\"在基本使用上\",{\"1\":{\"244\":1}}],[\"在使用依赖注入时\",{\"1\":{\"587\":1}}],[\"在使用不被赞成的程序元素或在不被赞成的代码中执行重写时\",{\"1\":{\"268\":1}}],[\"在使用\",{\"1\":{\"235\":1}}],[\"在xml配置中\",{\"1\":{\"233\":1}}],[\"在注册中心必须存在\",{\"1\":{\"204\":1}}],[\"在消费者下线期间产生的消息不会被这个消费者消费\",{\"1\":{\"190\":1}}],[\"在请求数量超过\",{\"1\":{\"143\":1}}],[\"在需要服务降级的方法上使用\",{\"1\":{\"143\":1}}],[\"在需要刷新的类上使用\",{\"1\":{\"92\":1}}],[\"在配置文件中的\",{\"1\":{\"110\":1}}],[\"在全体通知接口后加上服务名\",{\"1\":{\"79\":1}}],[\"在静态资源文件夹中放置一个\",{\"1\":{\"72\":1}}],[\"在迭代的同时\",{\"1\":{\"67\":1}}],[\"在访问\",{\"1\":{\"47\":2}}],[\"在主启动类上添加\",{\"1\":{\"26\":1,\"83\":1,\"103\":1,\"107\":1,\"173\":1,\"202\":1}}],[\"在要使用\",{\"1\":{\"172\":1}}],[\"在要使用异步方法的类上\",{\"1\":{\"14\":1}}],[\"在要开启事务的类或方法上添加\",{\"1\":{\"630\":1}}],[\"在要开启二级缓存的\",{\"1\":{\"488\":1}}],[\"在要开启服务熔断的类上使用\",{\"1\":{\"144\":1}}],[\"在要开启定时执行的方法上添加\",{\"1\":{\"27\":1}}],[\"在要开启校验的实体类上添加\",{\"1\":{\"23\":1}}],[\"在要进行限制的属性上添加指定注解\",{\"1\":{\"23\":1}}],[\"在项目中存在\",{\"1\":{\"21\":1}}],[\"在构建\",{\"1\":{\"19\":2}}],[\"在\",{\"0\":{\"30\":1,\"581\":1},\"1\":{\"17\":3,\"24\":2,\"33\":1,\"66\":1,\"67\":1,\"69\":2,\"71\":1,\"218\":2,\"240\":1,\"252\":2,\"274\":1,\"282\":1,\"299\":1,\"311\":1,\"345\":1,\"363\":1,\"369\":1,\"408\":1,\"495\":1,\"521\":1,\"552\":1,\"558\":1,\"560\":1,\"561\":1,\"577\":1,\"583\":2,\"608\":1}}],[\"在方法上开启异步\",{\"0\":{\"15\":1}}],[\"添加在配置类的方法名上\",{\"1\":{\"602\":1}}],[\"添加在配置类前\",{\"1\":{\"602\":2}}],[\"添加这个处理器\",{\"1\":{\"576\":1}}],[\"添加自定义handler\",{\"1\":{\"544\":1}}],[\"添加自定义处理器\",{\"1\":{\"526\":1}}],[\"添加自己的处理器\",{\"1\":{\"524\":1}}],[\"添加netty提供的字符串解码\",{\"1\":{\"526\":1}}],[\"添加许可证\",{\"1\":{\"478\":1}}],[\"添加元素后\",{\"1\":{\"396\":1}}],[\"添加拦截器到springmvc中\",{\"1\":{\"233\":1}}],[\"添加头部指定编码格式为\",{\"1\":{\"218\":1}}],[\"添加依赖\",{\"0\":{\"90\":1},\"1\":{\"97\":1}}],[\"添加用户\",{\"1\":{\"59\":1}}],[\"添加不拦截\",{\"1\":{\"59\":1}}],[\"添加shiro内置过滤器\",{\"1\":{\"54\":1}}],[\"添加权限\",{\"1\":{\"54\":1}}],[\"添加附件\",{\"1\":{\"44\":1}}],[\"添加转换语言的按钮\",{\"0\":{\"34\":1}}],[\"添加监控的servlet\",{\"1\":{\"30\":1}}],[\"添加\",{\"1\":{\"14\":1,\"256\":1,\"395\":1,\"558\":1,\"597\":1}}]],\"version\":2}}")).map(([e,t])=>[e,_t(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:o,id:s}})=>{const r=xt[n];e==="suggest"?self.postMessage([e,s,ve(t,r,o)]):e==="search"?self.postMessage([e,s,Ee(t,r,o,"max")]):self.postMessage({suggestions:[e,s,ve(t,r,o)],results:[e,s,Ee(t,r,o,__SLIMSEARCH_SORT_STRATEGY__)]})};
//# sourceMappingURL=index.js.map
